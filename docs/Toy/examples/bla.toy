# RUN: python -m toy %s --emit=scf --ir | filecheck %s --check-prefix=SCF
# RUN: python -m toy %s --emit=riscv-regalloc --ir | filecheck %s --check-prefix=RV_IR
# RUN: python -m toy %s --emit=riscv-lowered --ir | xdsl-opt -t riscv-asm | filecheck %s --check-prefix=RV_ASM

def main() {
  var a = [1, 2, 3];
  var b = a + a;
  print(b);
}

# generated scf for loop:
# SCF:       "scf.for"(%8, %9, %10) ({
# SCF:       ^0(%arg0 : index):
# SCF:         %11 = "memref.load"(%4, %arg0) {"nontemporal" = false} : (memref<3xf64>, index) -> f64
# SCF:         %12 = arith.addf %11, %11 : f64
# SCF:         "memref.store"(%12, %3, %arg0) {"nontemporal" = false} : (f64, memref<3xf64>, index) -> ()
# SCF:         "scf.yield"() : () -> ()
# SCF:       }) : (index, index, index) -> ()

# register allocated for loop (in riscv-scf dialect)
# RV_IR:    "riscv_scf.for"(%16, %17, %18) ({
# RV_IR:    ^0(%arg0 : !riscv.reg<{{.+}}>):
# RV_IR:      %19 = riscv.slli %arg0, 2 {"comment" = "multiply by elm size"} : (!riscv.reg<{{.+}}>) -> !riscv.reg<{{.+}}>
# RV_IR:      %20 = riscv.add %6, %19 : (!riscv.reg<{{.+}}>, !riscv.reg<{{.+}}>) -> !riscv.reg<{{.+}}>
# RV_IR:      %21 = riscv.lw %20, 0 {"comment" = "load value from memref of shape (3,)"} : (!riscv.reg<{{.+}}>) -> !riscv.reg<{{.+}}>
# RV_IR:      %22 = riscv.add %21, %21 : (!riscv.reg<{{.+}}>, !riscv.reg<{{.+}}>) -> !riscv.reg<{{.+}}>
# RV_IR:      %23 = riscv.slli %arg0, 2 {"comment" = "multiply by elm size"} : (!riscv.reg<{{.+}}>) -> !riscv.reg<{{.+}}>
# RV_IR:      %24 = riscv.add %4, %23 : (!riscv.reg<{{.+}}>, !riscv.reg<{{.+}}>) -> !riscv.reg<{{.+}}>
# RV_IR:      riscv.sw %24, %22, 0 {"comment" = "store value to memref of shape (3,)"} : (!riscv.reg<{{.+}}>, !riscv.reg<{{.+}}>) -> ()
# RV_IR:      "riscv_scf.yield"() : () -> ()
# RV_IR:    }) : (!riscv.reg<{{.+}}>, !riscv.reg<{{.+}}>, !riscv.reg<{{.+}}>) -> ()

# generated assembly code for the loop:
# RV_ASM:     scf_leader_0:
# RV_ASM:         bge {{.+}}, {{.+}}, scf_body_end_0
# RV_ASM:     scf_body_0:
# RV_ASM:         slli {{.+}}, {{.+}}, 2                               # multiply by elm size
# RV_ASM:         add {{.+}}, {{.+}}, {{.+}}
# RV_ASM:         lw {{.+}}, 0({{.+}})                                 # load value from memref of shape (3,)
# RV_ASM:         add {{.+}}, {{.+}}, {{.+}}
# RV_ASM:         slli {{.+}}, {{.+}}, 2                               # multiply by elm size
# RV_ASM:         add {{.+}}, {{.+}}, {{.+}}
# RV_ASM:         sw {{.+}}, 0({{.+}})                                 # store value to memref of shape (3,)
# RV_ASM:         add {{.+}}, {{.+}}, {{.+}}
# RV_ASM:         blt {{.+}}, {{.+}}, scf_body_0
# RV_ASM:     scf_body_end_0:

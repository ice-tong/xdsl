module {
  pdl_interp.func @matcher(%arg0: !pdl.operation) {
    %0 = pdl_interp.get_result 0 of %arg0
    pdl_interp.is_not_null %0 : !pdl.value -> ^bb2, ^bb1
  ^bb1:  // 5494 preds: ^bb0, ^bb3, ^bb4, ^bb5, ^bb6, ^bb7, ^bb9, ^bb10, ^bb11, ^bb12, ^bb13, ^bb14, ^bb15, ^bb16, ^bb18, ^bb19, ^bb20, ^bb21, ^bb22, ^bb23, ^bb24, ^bb25, ^bb26, ^bb27, ^bb28, ^bb29, ^bb30, ^bb31, ^bb32, ^bb33, ^bb34, ^bb35, ^bb36, ^bb37, ^bb38, ^bb39, ^bb40, ^bb41, ^bb42, ^bb43, ^bb44, ^bb45, ^bb46, ^bb47, ^bb48, ^bb49, ^bb50, ^bb51, ^bb52, ^bb53, ^bb54, ^bb56, ^bb57, ^bb58, ^bb59, ^bb60, ^bb61, ^bb62, ^bb63, ^bb64, ^bb72, ^bb73, ^bb74, ^bb75, ^bb76, ^bb77, ^bb78, ^bb79, ^bb80, ^bb81, ^bb82, ^bb83, ^bb84, ^bb85, ^bb86, ^bb87, ^bb88, ^bb89, ^bb90, ^bb91, ^bb92, ^bb93, ^bb94, ^bb95, ^bb96, ^bb97, ^bb98, ^bb99, ^bb100, ^bb101, ^bb102, ^bb103, ^bb104, ^bb105, ^bb106, ^bb107, ^bb108, ^bb109, ^bb110, ^bb111, ^bb112, ^bb113, ^bb114, ^bb115, ^bb116, ^bb117, ^bb118, ^bb119, ^bb120, ^bb121, ^bb122, ^bb123, ^bb124, ^bb125, ^bb126, ^bb127, ^bb128, ^bb129, ^bb130, ^bb131, ^bb132, ^bb133, ^bb134, ^bb135, ^bb136, ^bb137, ^bb138, ^bb139, ^bb140, ^bb141, ^bb142, ^bb143, ^bb144, ^bb145, ^bb146, ^bb147, ^bb148, ^bb149, ^bb150, ^bb151, ^bb152, ^bb153, ^bb154, ^bb155, ^bb156, ^bb157, ^bb158, ^bb159, ^bb160, ^bb161, ^bb162, ^bb163, ^bb164, ^bb165, ^bb166, ^bb167, ^bb168, ^bb169, ^bb170, ^bb171, ^bb172, ^bb173, ^bb174, ^bb175, ^bb176, ^bb177, ^bb178, ^bb179, ^bb180, ^bb181, ^bb182, ^bb183, ^bb184, ^bb185, ^bb186, ^bb187, ^bb188, ^bb189, ^bb190, ^bb191, ^bb192, ^bb193, ^bb194, ^bb195, ^bb196, ^bb197, ^bb198, ^bb199, ^bb200, ^bb201, ^bb202, ^bb203, ^bb204, ^bb205, ^bb206, ^bb207, ^bb208, ^bb209, ^bb210, ^bb211, ^bb212, ^bb213, ^bb214, ^bb215, ^bb216, ^bb217, ^bb218, ^bb219, ^bb220, ^bb221, ^bb222, ^bb223, ^bb224, ^bb225, ^bb226, ^bb227, ^bb228, ^bb229, ^bb230, ^bb231, ^bb232, ^bb233, ^bb234, ^bb235, ^bb236, ^bb237, ^bb238, ^bb239, ^bb240, ^bb241, ^bb242, ^bb243, ^bb244, ^bb274, ^bb275, ^bb276, ^bb277, ^bb278, ^bb279, ^bb280, ^bb281, ^bb282, ^bb283, ^bb284, ^bb285, ^bb286, ^bb287, ^bb288, ^bb289, ^bb290, ^bb291, ^bb292, ^bb293, ^bb294, ^bb295, ^bb296, ^bb297, ^bb298, ^bb299, ^bb300, ^bb301, ^bb302, ^bb303, ^bb304, ^bb305, ^bb306, ^bb307, ^bb308, ^bb309, ^bb310, ^bb311, ^bb312, ^bb313, ^bb314, ^bb315, ^bb316, ^bb317, ^bb318, ^bb319, ^bb320, ^bb321, ^bb322, ^bb323, ^bb324, ^bb325, ^bb326, ^bb327, ^bb328, ^bb329, ^bb330, ^bb331, ^bb332, ^bb333, ^bb334, ^bb335, ^bb336, ^bb337, ^bb338, ^bb339, ^bb340, ^bb341, ^bb342, ^bb343, ^bb344, ^bb345, ^bb346, ^bb347, ^bb348, ^bb349, ^bb350, ^bb351, ^bb352, ^bb353, ^bb354, ^bb355, ^bb356, ^bb357, ^bb358, ^bb359, ^bb360, ^bb361, ^bb362, ^bb363, ^bb364, ^bb365, ^bb366, ^bb367, ^bb368, ^bb369, ^bb370, ^bb371, ^bb372, ^bb373, ^bb374, ^bb375, ^bb376, ^bb377, ^bb378, ^bb379, ^bb380, ^bb381, ^bb382, ^bb383, ^bb384, ^bb385, ^bb386, ^bb387, ^bb388, ^bb389, ^bb390, ^bb391, ^bb392, ^bb393, ^bb394, ^bb395, ^bb396, ^bb397, ^bb398, ^bb399, ^bb400, ^bb401, ^bb402, ^bb403, ^bb404, ^bb405, ^bb406, ^bb407, ^bb408, ^bb409, ^bb410, ^bb411, ^bb412, ^bb413, ^bb414, ^bb415, ^bb416, ^bb417, ^bb418, ^bb419, ^bb420, ^bb421, ^bb422, ^bb423, ^bb424, ^bb425, ^bb426, ^bb427, ^bb428, ^bb429, ^bb430, ^bb431, ^bb432, ^bb433, ^bb434, ^bb435, ^bb436, ^bb437, ^bb438, ^bb439, ^bb440, ^bb441, ^bb442, ^bb443, ^bb444, ^bb445, ^bb446, ^bb447, ^bb448, ^bb449, ^bb450, ^bb451, ^bb452, ^bb453, ^bb454, ^bb455, ^bb457, ^bb458, ^bb459, ^bb460, ^bb461, ^bb468, ^bb469, ^bb470, ^bb471, ^bb472, ^bb473, ^bb474, ^bb475, ^bb476, ^bb477, ^bb478, ^bb479, ^bb480, ^bb481, ^bb482, ^bb483, ^bb484, ^bb485, ^bb486, ^bb487, ^bb488, ^bb489, ^bb490, ^bb491, ^bb492, ^bb493, ^bb494, ^bb495, ^bb496, ^bb497, ^bb498, ^bb499, ^bb500, ^bb501, ^bb502, ^bb503, ^bb504, ^bb505, ^bb506, ^bb507, ^bb508, ^bb509, ^bb510, ^bb511, ^bb512, ^bb513, ^bb514, ^bb515, ^bb516, ^bb517, ^bb518, ^bb519, ^bb520, ^bb521, ^bb522, ^bb523, ^bb524, ^bb525, ^bb526, ^bb527, ^bb528, ^bb529, ^bb530, ^bb531, ^bb532, ^bb533, ^bb534, ^bb535, ^bb536, ^bb537, ^bb538, ^bb539, ^bb540, ^bb541, ^bb542, ^bb543, ^bb544, ^bb545, ^bb546, ^bb547, ^bb548, ^bb549, ^bb550, ^bb551, ^bb552, ^bb553, ^bb554, ^bb555, ^bb556, ^bb557, ^bb558, ^bb559, ^bb560, ^bb561, ^bb562, ^bb563, ^bb564, ^bb565, ^bb566, ^bb567, ^bb568, ^bb569, ^bb570, ^bb571, ^bb572, ^bb573, ^bb574, ^bb575, ^bb576, ^bb577, ^bb578, ^bb579, ^bb580, ^bb581, ^bb582, ^bb583, ^bb584, ^bb585, ^bb586, ^bb587, ^bb588, ^bb589, ^bb590, ^bb591, ^bb592, ^bb593, ^bb594, ^bb595, ^bb596, ^bb597, ^bb598, ^bb599, ^bb600, ^bb601, ^bb602, ^bb603, ^bb604, ^bb605, ^bb606, ^bb607, ^bb608, ^bb609, ^bb610, ^bb611, ^bb612, ^bb613, ^bb614, ^bb615, ^bb616, ^bb617, ^bb618, ^bb619, ^bb620, ^bb621, ^bb622, ^bb623, ^bb624, ^bb625, ^bb626, ^bb627, ^bb628, ^bb629, ^bb630, ^bb631, ^bb632, ^bb633, ^bb634, ^bb635, ^bb636, ^bb637, ^bb638, ^bb639, ^bb640, ^bb641, ^bb642, ^bb643, ^bb644, ^bb645, ^bb646, ^bb647, ^bb648, ^bb649, ^bb650, ^bb651, ^bb652, ^bb653, ^bb654, ^bb655, ^bb656, ^bb657, ^bb658, ^bb659, ^bb660, ^bb661, ^bb662, ^bb663, ^bb664, ^bb665, ^bb666, ^bb667, ^bb668, ^bb669, ^bb670, ^bb671, ^bb672, ^bb673, ^bb674, ^bb675, ^bb676, ^bb677, ^bb678, ^bb679, ^bb680, ^bb681, ^bb682, ^bb683, ^bb684, ^bb685, ^bb686, ^bb687, ^bb688, ^bb689, ^bb690, ^bb691, ^bb692, ^bb693, ^bb694, ^bb695, ^bb696, ^bb697, ^bb698, ^bb699, ^bb749, ^bb750, ^bb751, ^bb753, ^bb754, ^bb755, ^bb756, ^bb757, ^bb758, ^bb759, ^bb760, ^bb762, ^bb763, ^bb764, ^bb765, ^bb766, ^bb767, ^bb768, ^bb769, ^bb770, ^bb771, ^bb772, ^bb773, ^bb774, ^bb775, ^bb776, ^bb777, ^bb778, ^bb779, ^bb780, ^bb781, ^bb782, ^bb783, ^bb784, ^bb785, ^bb786, ^bb787, ^bb788, ^bb789, ^bb790, ^bb791, ^bb792, ^bb793, ^bb794, ^bb795, ^bb796, ^bb797, ^bb798, ^bb799, ^bb800, ^bb801, ^bb802, ^bb803, ^bb804, ^bb805, ^bb806, ^bb807, ^bb808, ^bb809, ^bb810, ^bb811, ^bb812, ^bb813, ^bb814, ^bb815, ^bb816, ^bb817, ^bb818, ^bb819, ^bb820, ^bb821, ^bb822, ^bb823, ^bb824, ^bb825, ^bb826, ^bb827, ^bb828, ^bb829, ^bb830, ^bb831, ^bb832, ^bb833, ^bb834, ^bb835, ^bb836, ^bb837, ^bb838, ^bb839, ^bb840, ^bb841, ^bb842, ^bb843, ^bb844, ^bb845, ^bb846, ^bb847, ^bb848, ^bb849, ^bb850, ^bb851, ^bb852, ^bb853, ^bb854, ^bb855, ^bb856, ^bb857, ^bb858, ^bb859, ^bb860, ^bb861, ^bb862, ^bb863, ^bb864, ^bb865, ^bb866, ^bb867, ^bb868, ^bb869, ^bb870, ^bb871, ^bb872, ^bb873, ^bb874, ^bb875, ^bb876, ^bb877, ^bb878, ^bb879, ^bb880, ^bb881, ^bb882, ^bb883, ^bb884, ^bb885, ^bb886, ^bb887, ^bb888, ^bb889, ^bb890, ^bb891, ^bb892, ^bb893, ^bb894, ^bb895, ^bb896, ^bb897, ^bb898, ^bb899, ^bb901, ^bb902, ^bb903, ^bb904, ^bb905, ^bb906, ^bb907, ^bb908, ^bb909, ^bb917, ^bb918, ^bb919, ^bb920, ^bb921, ^bb922, ^bb923, ^bb924, ^bb925, ^bb926, ^bb927, ^bb928, ^bb929, ^bb930, ^bb931, ^bb932, ^bb933, ^bb934, ^bb935, ^bb936, ^bb937, ^bb938, ^bb939, ^bb940, ^bb941, ^bb942, ^bb943, ^bb944, ^bb945, ^bb946, ^bb947, ^bb948, ^bb949, ^bb950, ^bb951, ^bb952, ^bb953, ^bb954, ^bb955, ^bb956, ^bb957, ^bb958, ^bb959, ^bb960, ^bb961, ^bb962, ^bb963, ^bb964, ^bb965, ^bb966, ^bb967, ^bb968, ^bb969, ^bb970, ^bb971, ^bb972, ^bb973, ^bb974, ^bb975, ^bb976, ^bb977, ^bb978, ^bb979, ^bb980, ^bb981, ^bb982, ^bb983, ^bb984, ^bb985, ^bb986, ^bb987, ^bb988, ^bb989, ^bb990, ^bb991, ^bb992, ^bb993, ^bb994, ^bb995, ^bb996, ^bb997, ^bb998, ^bb999, ^bb1000, ^bb1001, ^bb1002, ^bb1003, ^bb1004, ^bb1005, ^bb1006, ^bb1007, ^bb1008, ^bb1009, ^bb1010, ^bb1011, ^bb1012, ^bb1013, ^bb1014, ^bb1015, ^bb1016, ^bb1017, ^bb1018, ^bb1019, ^bb1020, ^bb1021, ^bb1022, ^bb1023, ^bb1025, ^bb1026, ^bb1027, ^bb1028, ^bb1029, ^bb1030, ^bb1031, ^bb1032, ^bb1033, ^bb1041, ^bb1042, ^bb1043, ^bb1044, ^bb1045, ^bb1046, ^bb1047, ^bb1048, ^bb1049, ^bb1050, ^bb1051, ^bb1052, ^bb1053, ^bb1054, ^bb1055, ^bb1056, ^bb1057, ^bb1058, ^bb1059, ^bb1060, ^bb1061, ^bb1062, ^bb1063, ^bb1064, ^bb1065, ^bb1066, ^bb1067, ^bb1068, ^bb1069, ^bb1105, ^bb1106, ^bb1107, ^bb1108, ^bb1109, ^bb1110, ^bb1111, ^bb1112, ^bb1113, ^bb1114, ^bb1115, ^bb1116, ^bb1117, ^bb1118, ^bb1119, ^bb1120, ^bb1121, ^bb1122, ^bb1123, ^bb1124, ^bb1125, ^bb1126, ^bb1127, ^bb1128, ^bb1129, ^bb1130, ^bb1131, ^bb1132, ^bb1133, ^bb1134, ^bb1135, ^bb1136, ^bb1137, ^bb1138, ^bb1139, ^bb1140, ^bb1141, ^bb1142, ^bb1143, ^bb1144, ^bb1145, ^bb1146, ^bb1147, ^bb1148, ^bb1150, ^bb1151, ^bb1152, ^bb1153, ^bb1154, ^bb1155, ^bb1156, ^bb1157, ^bb1158, ^bb1159, ^bb1160, ^bb1161, ^bb1162, ^bb1163, ^bb1164, ^bb1165, ^bb1166, ^bb1167, ^bb1168, ^bb1169, ^bb1170, ^bb1171, ^bb1172, ^bb1173, ^bb1174, ^bb1175, ^bb1176, ^bb1177, ^bb1178, ^bb1179, ^bb1180, ^bb1181, ^bb1182, ^bb1183, ^bb1184, ^bb1185, ^bb1186, ^bb1187, ^bb1188, ^bb1189, ^bb1190, ^bb1191, ^bb1192, ^bb1193, ^bb1194, ^bb1195, ^bb1196, ^bb1197, ^bb1198, ^bb1199, ^bb1200, ^bb1201, ^bb1202, ^bb1203, ^bb1204, ^bb1205, ^bb1206, ^bb1207, ^bb1208, ^bb1229, ^bb1230, ^bb1231, ^bb1232, ^bb1233, ^bb1234, ^bb1235, ^bb1236, ^bb1237, ^bb1238, ^bb1239, ^bb1240, ^bb1241, ^bb1242, ^bb1243, ^bb1244, ^bb1245, ^bb1246, ^bb1247, ^bb1248, ^bb1249, ^bb1250, ^bb1251, ^bb1252, ^bb1253, ^bb1254, ^bb1255, ^bb1256, ^bb1257, ^bb1258, ^bb1259, ^bb1260, ^bb1261, ^bb1262, ^bb1263, ^bb1264, ^bb1265, ^bb1266, ^bb1267, ^bb1268, ^bb1269, ^bb1270, ^bb1271, ^bb1272, ^bb1273, ^bb1274, ^bb1275, ^bb1276, ^bb1277, ^bb1278, ^bb1279, ^bb1280, ^bb1282, ^bb1283, ^bb1284, ^bb1285, ^bb1286, ^bb1287, ^bb1288, ^bb1289, ^bb1290, ^bb1291, ^bb1292, ^bb1293, ^bb1294, ^bb1295, ^bb1296, ^bb1297, ^bb1298, ^bb1299, ^bb1300, ^bb1301, ^bb1303, ^bb1304, ^bb1305, ^bb1306, ^bb1307, ^bb1308, ^bb1309, ^bb1310, ^bb1311, ^bb1312, ^bb1313, ^bb1314, ^bb1315, ^bb1316, ^bb1317, ^bb1318, ^bb1319, ^bb1320, ^bb1321, ^bb1322, ^bb1323, ^bb1324, ^bb1325, ^bb1326, ^bb1327, ^bb1328, ^bb1329, ^bb1330, ^bb1331, ^bb1332, ^bb1333, ^bb1334, ^bb1335, ^bb1336, ^bb1337, ^bb1338, ^bb1339, ^bb1340, ^bb1341, ^bb1342, ^bb1343, ^bb1344, ^bb1345, ^bb1346, ^bb1347, ^bb1348, ^bb1349, ^bb1350, ^bb1351, ^bb1352, ^bb1353, ^bb1354, ^bb1355, ^bb1356, ^bb1357, ^bb1358, ^bb1359, ^bb1360, ^bb1361, ^bb1362, ^bb1363, ^bb1364, ^bb1365, ^bb1366, ^bb1367, ^bb1368, ^bb1369, ^bb1370, ^bb1371, ^bb1372, ^bb1373, ^bb1374, ^bb1375, ^bb1376, ^bb1377, ^bb1378, ^bb1379, ^bb1380, ^bb1381, ^bb1382, ^bb1383, ^bb1384, ^bb1385, ^bb1386, ^bb1387, ^bb1388, ^bb1389, ^bb1390, ^bb1391, ^bb1392, ^bb1393, ^bb1394, ^bb1395, ^bb1396, ^bb1397, ^bb1398, ^bb1399, ^bb1400, ^bb1401, ^bb1402, ^bb1403, ^bb1404, ^bb1405, ^bb1406, ^bb1407, ^bb1408, ^bb1409, ^bb1410, ^bb1411, ^bb1412, ^bb1413, ^bb1414, ^bb1415, ^bb1416, ^bb1417, ^bb1418, ^bb1419, ^bb1420, ^bb1421, ^bb1422, ^bb1423, ^bb1424, ^bb1425, ^bb1426, ^bb1427, ^bb1428, ^bb1429, ^bb1430, ^bb1431, ^bb1432, ^bb1433, ^bb1434, ^bb1435, ^bb1436, ^bb1437, ^bb1438, ^bb1439, ^bb1440, ^bb1441, ^bb1442, ^bb1443, ^bb1444, ^bb1445, ^bb1446, ^bb1447, ^bb1448, ^bb1449, ^bb1450, ^bb1451, ^bb1452, ^bb1453, ^bb1454, ^bb1455, ^bb1456, ^bb1457, ^bb1458, ^bb1459, ^bb1460, ^bb1461, ^bb1462, ^bb1463, ^bb1464, ^bb1465, ^bb1466, ^bb1467, ^bb1468, ^bb1469, ^bb1470, ^bb1471, ^bb1472, ^bb1473, ^bb1474, ^bb1475, ^bb1476, ^bb1477, ^bb1478, ^bb1479, ^bb1480, ^bb1481, ^bb1482, ^bb1483, ^bb1484, ^bb1485, ^bb1486, ^bb1487, ^bb1488, ^bb1489, ^bb1490, ^bb1491, ^bb1492, ^bb1493, ^bb1494, ^bb1495, ^bb1496, ^bb1497, ^bb1498, ^bb1499, ^bb1500, ^bb1501, ^bb1502, ^bb1503, ^bb1504, ^bb1505, ^bb1506, ^bb1507, ^bb1508, ^bb1509, ^bb1510, ^bb1511, ^bb1512, ^bb1513, ^bb1514, ^bb1515, ^bb1516, ^bb1517, ^bb1518, ^bb1519, ^bb1520, ^bb1521, ^bb1522, ^bb1523, ^bb1524, ^bb1525, ^bb1526, ^bb1527, ^bb1528, ^bb1529, ^bb1530, ^bb1531, ^bb1532, ^bb1533, ^bb1534, ^bb1535, ^bb1536, ^bb1537, ^bb1538, ^bb1539, ^bb1540, ^bb1541, ^bb1542, ^bb1543, ^bb1544, ^bb1545, ^bb1546, ^bb1547, ^bb1548, ^bb1549, ^bb1550, ^bb1551, ^bb1552, ^bb1553, ^bb1554, ^bb1555, ^bb1556, ^bb1557, ^bb1558, ^bb1559, ^bb1560, ^bb1561, ^bb1562, ^bb1563, ^bb1564, ^bb1565, ^bb1566, ^bb1567, ^bb1568, ^bb1569, ^bb1570, ^bb1571, ^bb1572, ^bb1573, ^bb1574, ^bb1575, ^bb1576, ^bb1577, ^bb1578, ^bb1579, ^bb1580, ^bb1581, ^bb1582, ^bb1583, ^bb1584, ^bb1585, ^bb1586, ^bb1587, ^bb1588, ^bb1589, ^bb1590, ^bb1628, ^bb1629, ^bb1630, ^bb1632, ^bb1633, ^bb1634, ^bb1635, ^bb1636, ^bb1637, ^bb1638, ^bb1639, ^bb1641, ^bb1642, ^bb1643, ^bb1644, ^bb1645, ^bb1646, ^bb1647, ^bb1648, ^bb1649, ^bb1650, ^bb1651, ^bb1652, ^bb1653, ^bb1654, ^bb1655, ^bb1656, ^bb1657, ^bb1658, ^bb1659, ^bb1660, ^bb1661, ^bb1662, ^bb1663, ^bb1664, ^bb1665, ^bb1666, ^bb1667, ^bb1668, ^bb1688, ^bb1689, ^bb1690, ^bb1691, ^bb1692, ^bb1693, ^bb1694, ^bb1695, ^bb1696, ^bb1697, ^bb1698, ^bb1699, ^bb1700, ^bb1701, ^bb1703, ^bb1704, ^bb1705, ^bb1706, ^bb1707, ^bb1708, ^bb1709, ^bb1710, ^bb1711, ^bb1712, ^bb1713, ^bb1714, ^bb1715, ^bb1716, ^bb1717, ^bb1718, ^bb1719, ^bb1720, ^bb1721, ^bb1722, ^bb1723, ^bb1724, ^bb1725, ^bb1726, ^bb1744, ^bb1745, ^bb1746, ^bb1747, ^bb1748, ^bb1749, ^bb1751, ^bb1752, ^bb1753, ^bb1754, ^bb1755, ^bb1756, ^bb1757, ^bb1758, ^bb1759, ^bb1760, ^bb1761, ^bb1762, ^bb1763, ^bb1764, ^bb1765, ^bb1766, ^bb1767, ^bb1768, ^bb1769, ^bb1770, ^bb1771, ^bb1772, ^bb1773, ^bb1774, ^bb1775, ^bb1776, ^bb1777, ^bb1778, ^bb1779, ^bb1780, ^bb1781, ^bb1782, ^bb1783, ^bb1784, ^bb1785, ^bb1786, ^bb1787, ^bb1788, ^bb1789, ^bb1790, ^bb1791, ^bb1792, ^bb1793, ^bb1794, ^bb1795, ^bb1796, ^bb1797, ^bb1798, ^bb1799, ^bb1800, ^bb1801, ^bb1802, ^bb1803, ^bb1804, ^bb1805, ^bb1806, ^bb1807, ^bb1808, ^bb1809, ^bb1810, ^bb1811, ^bb1812, ^bb1813, ^bb1814, ^bb1815, ^bb1816, ^bb1817, ^bb1818, ^bb1819, ^bb1820, ^bb1821, ^bb1822, ^bb1823, ^bb1824, ^bb1825, ^bb1826, ^bb1827, ^bb1828, ^bb1829, ^bb1830, ^bb1831, ^bb1832, ^bb1833, ^bb1834, ^bb1835, ^bb1836, ^bb1837, ^bb1838, ^bb1839, ^bb1840, ^bb1841, ^bb1842, ^bb1843, ^bb1844, ^bb1845, ^bb1846, ^bb1847, ^bb1848, ^bb1849, ^bb1887, ^bb1888, ^bb1889, ^bb1890, ^bb1891, ^bb1892, ^bb1893, ^bb1894, ^bb1895, ^bb1896, ^bb1897, ^bb1898, ^bb1899, ^bb1900, ^bb1901, ^bb1902, ^bb1903, ^bb1904, ^bb1905, ^bb1906, ^bb1907, ^bb1908, ^bb1909, ^bb1910, ^bb1911, ^bb1912, ^bb1913, ^bb1914, ^bb1915, ^bb1916, ^bb1917, ^bb1918, ^bb1919, ^bb1920, ^bb1921, ^bb1922, ^bb1924, ^bb1925, ^bb1926, ^bb1927, ^bb1930, ^bb1931, ^bb1932, ^bb1933, ^bb1934, ^bb1935, ^bb1936, ^bb1937, ^bb1938, ^bb1939, ^bb1940, ^bb1941, ^bb1942, ^bb1943, ^bb1944, ^bb1945, ^bb1946, ^bb1947, ^bb1948, ^bb1949, ^bb1950, ^bb1951, ^bb1952, ^bb1953, ^bb1954, ^bb1955, ^bb1956, ^bb1957, ^bb1958, ^bb1959, ^bb1960, ^bb1962, ^bb1963, ^bb1964, ^bb1965, ^bb1968, ^bb1969, ^bb1970, ^bb1971, ^bb1972, ^bb1973, ^bb1974, ^bb1975, ^bb1976, ^bb1977, ^bb1978, ^bb1979, ^bb1980, ^bb1981, ^bb1982, ^bb1983, ^bb1984, ^bb1985, ^bb1986, ^bb1987, ^bb1988, ^bb1989, ^bb1990, ^bb1991, ^bb1992, ^bb1993, ^bb1994, ^bb1995, ^bb1996, ^bb1997, ^bb1998, ^bb1999, ^bb2000, ^bb2001, ^bb2002, ^bb2003, ^bb2004, ^bb2005, ^bb2006, ^bb2007, ^bb2008, ^bb2009, ^bb2010, ^bb2011, ^bb2012, ^bb2013, ^bb2014, ^bb2015, ^bb2016, ^bb2017, ^bb2018, ^bb2019, ^bb2020, ^bb2021, ^bb2022, ^bb2023, ^bb2025, ^bb2026, ^bb2027, ^bb2031, ^bb2032, ^bb2033, ^bb2034, ^bb2035, ^bb2036, ^bb2037, ^bb2038, ^bb2039, ^bb2040, ^bb2041, ^bb2042, ^bb2043, ^bb2044, ^bb2046, ^bb2047, ^bb2048, ^bb2049, ^bb2053, ^bb2054, ^bb2055, ^bb2056, ^bb2057, ^bb2058, ^bb2059, ^bb2060, ^bb2061, ^bb2062, ^bb2063, ^bb2064, ^bb2065, ^bb2066, ^bb2067, ^bb2068, ^bb2069, ^bb2070, ^bb2071, ^bb2072, ^bb2073, ^bb2074, ^bb2076, ^bb2077, ^bb2078, ^bb2079, ^bb2084, ^bb2085, ^bb2086, ^bb2087, ^bb2088, ^bb2089, ^bb2090, ^bb2091, ^bb2092, ^bb2093, ^bb2094, ^bb2095, ^bb2096, ^bb2097, ^bb2098, ^bb2099, ^bb2100, ^bb2101, ^bb2102, ^bb2103, ^bb2104, ^bb2105, ^bb2106, ^bb2107, ^bb2108, ^bb2109, ^bb2110, ^bb2111, ^bb2113, ^bb2114, ^bb2115, ^bb2116, ^bb2117, ^bb2118, ^bb2119, ^bb2120, ^bb2121, ^bb2122, ^bb2123, ^bb2124, ^bb2125, ^bb2126, ^bb2127, ^bb2128, ^bb2129, ^bb2130, ^bb2131, ^bb2132, ^bb2133, ^bb2134, ^bb2135, ^bb2136, ^bb2137, ^bb2138, ^bb2139, ^bb2140, ^bb2141, ^bb2142, ^bb2143, ^bb2144, ^bb2145, ^bb2146, ^bb2147, ^bb2148, ^bb2149, ^bb2150, ^bb2151, ^bb2152, ^bb2153, ^bb2154, ^bb2155, ^bb2156, ^bb2157, ^bb2158, ^bb2159, ^bb2160, ^bb2161, ^bb2162, ^bb2163, ^bb2164, ^bb2165, ^bb2166, ^bb2167, ^bb2168, ^bb2169, ^bb2170, ^bb2171, ^bb2172, ^bb2173, ^bb2174, ^bb2175, ^bb2176, ^bb2177, ^bb2178, ^bb2179, ^bb2180, ^bb2181, ^bb2182, ^bb2183, ^bb2184, ^bb2185, ^bb2186, ^bb2187, ^bb2188, ^bb2189, ^bb2190, ^bb2191, ^bb2192, ^bb2193, ^bb2194, ^bb2195, ^bb2196, ^bb2197, ^bb2198, ^bb2199, ^bb2200, ^bb2201, ^bb2202, ^bb2203, ^bb2204, ^bb2205, ^bb2206, ^bb2207, ^bb2208, ^bb2209, ^bb2210, ^bb2211, ^bb2212, ^bb2213, ^bb2220, ^bb2221, ^bb2222, ^bb2223, ^bb2224, ^bb2225, ^bb2226, ^bb2227, ^bb2228, ^bb2229, ^bb2230, ^bb2231, ^bb2232, ^bb2233, ^bb2234, ^bb2235, ^bb2236, ^bb2237, ^bb2238, ^bb2239, ^bb2240, ^bb2241, ^bb2242, ^bb2243, ^bb2244, ^bb2245, ^bb2246, ^bb2247, ^bb2248, ^bb2249, ^bb2250, ^bb2251, ^bb2252, ^bb2253, ^bb2254, ^bb2255, ^bb2256, ^bb2257, ^bb2258, ^bb2259, ^bb2260, ^bb2261, ^bb2262, ^bb2263, ^bb2264, ^bb2265, ^bb2266, ^bb2267, ^bb2268, ^bb2269, ^bb2270, ^bb2271, ^bb2272, ^bb2273, ^bb2274, ^bb2275, ^bb2276, ^bb2277, ^bb2278, ^bb2279, ^bb2280, ^bb2281, ^bb2282, ^bb2283, ^bb2284, ^bb2285, ^bb2286, ^bb2287, ^bb2288, ^bb2289, ^bb2290, ^bb2291, ^bb2292, ^bb2293, ^bb2294, ^bb2295, ^bb2296, ^bb2297, ^bb2298, ^bb2299, ^bb2300, ^bb2301, ^bb2302, ^bb2303, ^bb2304, ^bb2305, ^bb2306, ^bb2307, ^bb2308, ^bb2309, ^bb2310, ^bb2311, ^bb2312, ^bb2313, ^bb2314, ^bb2315, ^bb2316, ^bb2317, ^bb2318, ^bb2319, ^bb2320, ^bb2321, ^bb2322, ^bb2323, ^bb2324, ^bb2325, ^bb2326, ^bb2327, ^bb2328, ^bb2329, ^bb2330, ^bb2331, ^bb2332, ^bb2333, ^bb2334, ^bb2335, ^bb2336, ^bb2337, ^bb2338, ^bb2339, ^bb2340, ^bb2341, ^bb2342, ^bb2343, ^bb2344, ^bb2345, ^bb2346, ^bb2347, ^bb2348, ^bb2349, ^bb2350, ^bb2351, ^bb2352, ^bb2353, ^bb2354, ^bb2355, ^bb2356, ^bb2357, ^bb2358, ^bb2359, ^bb2360, ^bb2361, ^bb2362, ^bb2363, ^bb2364, ^bb2365, ^bb2366, ^bb2367, ^bb2368, ^bb2369, ^bb2370, ^bb2371, ^bb2372, ^bb2373, ^bb2374, ^bb2375, ^bb2376, ^bb2377, ^bb2378, ^bb2379, ^bb2380, ^bb2381, ^bb2382, ^bb2383, ^bb2384, ^bb2385, ^bb2386, ^bb2387, ^bb2388, ^bb2389, ^bb2390, ^bb2391, ^bb2392, ^bb2393, ^bb2394, ^bb2395, ^bb2396, ^bb2397, ^bb2398, ^bb2399, ^bb2400, ^bb2401, ^bb2402, ^bb2403, ^bb2404, ^bb2405, ^bb2406, ^bb2407, ^bb2408, ^bb2409, ^bb2410, ^bb2411, ^bb2412, ^bb2413, ^bb2414, ^bb2415, ^bb2416, ^bb2417, ^bb2418, ^bb2419, ^bb2420, ^bb2421, ^bb2422, ^bb2423, ^bb2424, ^bb2425, ^bb2426, ^bb2427, ^bb2428, ^bb2429, ^bb2430, ^bb2431, ^bb2432, ^bb2433, ^bb2434, ^bb2435, ^bb2436, ^bb2437, ^bb2438, ^bb2439, ^bb2440, ^bb2441, ^bb2442, ^bb2443, ^bb2444, ^bb2445, ^bb2446, ^bb2447, ^bb2449, ^bb2450, ^bb2451, ^bb2452, ^bb2453, ^bb2454, ^bb2455, ^bb2456, ^bb2457, ^bb2458, ^bb2459, ^bb2460, ^bb2461, ^bb2462, ^bb2463, ^bb2464, ^bb2465, ^bb2466, ^bb2467, ^bb2468, ^bb2469, ^bb2470, ^bb2471, ^bb2472, ^bb2473, ^bb2474, ^bb2475, ^bb2476, ^bb2477, ^bb2478, ^bb2479, ^bb2480, ^bb2481, ^bb2482, ^bb2483, ^bb2484, ^bb2485, ^bb2486, ^bb2487, ^bb2488, ^bb2489, ^bb2490, ^bb2491, ^bb2492, ^bb2493, ^bb2494, ^bb2495, ^bb2496, ^bb2497, ^bb2498, ^bb2499, ^bb2500, ^bb2501, ^bb2502, ^bb2503, ^bb2504, ^bb2505, ^bb2506, ^bb2507, ^bb2508, ^bb2509, ^bb2510, ^bb2517, ^bb2518, ^bb2519, ^bb2520, ^bb2521, ^bb2522, ^bb2523, ^bb2524, ^bb2525, ^bb2526, ^bb2527, ^bb2528, ^bb2529, ^bb2530, ^bb2531, ^bb2532, ^bb2533, ^bb2534, ^bb2535, ^bb2536, ^bb2537, ^bb2538, ^bb2539, ^bb2540, ^bb2541, ^bb2542, ^bb2543, ^bb2544, ^bb2545, ^bb2546, ^bb2547, ^bb2548, ^bb2549, ^bb2550, ^bb2551, ^bb2552, ^bb2553, ^bb2554, ^bb2555, ^bb2556, ^bb2557, ^bb2558, ^bb2559, ^bb2560, ^bb2561, ^bb2562, ^bb2563, ^bb2564, ^bb2565, ^bb2566, ^bb2567, ^bb2568, ^bb2569, ^bb2570, ^bb2571, ^bb2572, ^bb2573, ^bb2574, ^bb2575, ^bb2576, ^bb2577, ^bb2578, ^bb2579, ^bb2580, ^bb2581, ^bb2582, ^bb2583, ^bb2584, ^bb2585, ^bb2586, ^bb2587, ^bb2588, ^bb2589, ^bb2590, ^bb2591, ^bb2592, ^bb2593, ^bb2594, ^bb2595, ^bb2596, ^bb2597, ^bb2598, ^bb2599, ^bb2600, ^bb2601, ^bb2602, ^bb2603, ^bb2604, ^bb2605, ^bb2606, ^bb2607, ^bb2608, ^bb2609, ^bb2610, ^bb2611, ^bb2612, ^bb2613, ^bb2614, ^bb2615, ^bb2616, ^bb2617, ^bb2618, ^bb2619, ^bb2620, ^bb2621, ^bb2622, ^bb2623, ^bb2624, ^bb2625, ^bb2626, ^bb2627, ^bb2628, ^bb2629, ^bb2630, ^bb2631, ^bb2632, ^bb2633, ^bb2634, ^bb2635, ^bb2636, ^bb2637, ^bb2638, ^bb2639, ^bb2640, ^bb2641, ^bb2642, ^bb2643, ^bb2644, ^bb2645, ^bb2646, ^bb2647, ^bb2648, ^bb2649, ^bb2650, ^bb2651, ^bb2652, ^bb2653, ^bb2654, ^bb2655, ^bb2656, ^bb2657, ^bb2658, ^bb2659, ^bb2660, ^bb2661, ^bb2662, ^bb2663, ^bb2664, ^bb2665, ^bb2666, ^bb2667, ^bb2668, ^bb2669, ^bb2670, ^bb2671, ^bb2672, ^bb2673, ^bb2674, ^bb2675, ^bb2676, ^bb2677, ^bb2678, ^bb2679, ^bb2680, ^bb2681, ^bb2682, ^bb2683, ^bb2684, ^bb2685, ^bb2686, ^bb2687, ^bb2688, ^bb2689, ^bb2690, ^bb2691, ^bb2692, ^bb2693, ^bb2694, ^bb2695, ^bb2696, ^bb2697, ^bb2851, ^bb2852, ^bb2853, ^bb2855, ^bb2856, ^bb2857, ^bb2858, ^bb2859, ^bb2860, ^bb2861, ^bb2862, ^bb2863, ^bb2864, ^bb2865, ^bb2866, ^bb2867, ^bb2869, ^bb2870, ^bb2871, ^bb2872, ^bb2873, ^bb2874, ^bb2875, ^bb2876, ^bb2877, ^bb2894, ^bb2895, ^bb2896, ^bb2897, ^bb2898, ^bb2899, ^bb2900, ^bb2901, ^bb2902, ^bb2903, ^bb2904, ^bb2905, ^bb2906, ^bb2907, ^bb2908, ^bb2909, ^bb2910, ^bb2911, ^bb2912, ^bb2913, ^bb2914, ^bb2915, ^bb2916, ^bb2917, ^bb2918, ^bb2919, ^bb2920, ^bb2921, ^bb2922, ^bb2923, ^bb2924, ^bb2925, ^bb2926, ^bb2927, ^bb2928, ^bb2929, ^bb2930, ^bb2931, ^bb2932, ^bb2933, ^bb2934, ^bb2935, ^bb2936, ^bb2937, ^bb2938, ^bb2939, ^bb2940, ^bb2941, ^bb2942, ^bb2943, ^bb2944, ^bb2945, ^bb2946, ^bb2947, ^bb2948, ^bb2949, ^bb2950, ^bb2951, ^bb2952, ^bb2953, ^bb2954, ^bb2955, ^bb2956, ^bb2957, ^bb2958, ^bb2959, ^bb2960, ^bb2961, ^bb2962, ^bb2963, ^bb2964, ^bb2965, ^bb2966, ^bb2967, ^bb2968, ^bb2969, ^bb2970, ^bb2971, ^bb2972, ^bb2973, ^bb2974, ^bb2975, ^bb2976, ^bb2977, ^bb2978, ^bb2979, ^bb2980, ^bb2981, ^bb2982, ^bb2983, ^bb2984, ^bb2985, ^bb2986, ^bb2987, ^bb2988, ^bb2989, ^bb2990, ^bb2991, ^bb2992, ^bb2993, ^bb2994, ^bb2995, ^bb2996, ^bb2997, ^bb2998, ^bb2999, ^bb3000, ^bb3001, ^bb3002, ^bb3003, ^bb3004, ^bb3005, ^bb3006, ^bb3007, ^bb3008, ^bb3009, ^bb3010, ^bb3011, ^bb3012, ^bb3013, ^bb3015, ^bb3016, ^bb3017, ^bb3018, ^bb3019, ^bb3020, ^bb3021, ^bb3022, ^bb3023, ^bb3024, ^bb3025, ^bb3026, ^bb3027, ^bb3028, ^bb3029, ^bb3030, ^bb3031, ^bb3032, ^bb3033, ^bb3034, ^bb3035, ^bb3036, ^bb3037, ^bb3038, ^bb3039, ^bb3040, ^bb3041, ^bb3042, ^bb3043, ^bb3044, ^bb3045, ^bb3046, ^bb3047, ^bb3048, ^bb3049, ^bb3050, ^bb3051, ^bb3052, ^bb3053, ^bb3054, ^bb3055, ^bb3056, ^bb3057, ^bb3058, ^bb3059, ^bb3060, ^bb3061, ^bb3062, ^bb3063, ^bb3064, ^bb3065, ^bb3066, ^bb3067, ^bb3068, ^bb3069, ^bb3070, ^bb3071, ^bb3072, ^bb3073, ^bb3074, ^bb3075, ^bb3076, ^bb3077, ^bb3078, ^bb3079, ^bb3080, ^bb3081, ^bb3082, ^bb3083, ^bb3084, ^bb3085, ^bb3086, ^bb3087, ^bb3088, ^bb3089, ^bb3090, ^bb3091, ^bb3092, ^bb3093, ^bb3094, ^bb3095, ^bb3096, ^bb3097, ^bb3098, ^bb3099, ^bb3100, ^bb3101, ^bb3102, ^bb3103, ^bb3104, ^bb3105, ^bb3106, ^bb3107, ^bb3108, ^bb3109, ^bb3110, ^bb3111, ^bb3112, ^bb3113, ^bb3114, ^bb3115, ^bb3116, ^bb3117, ^bb3118, ^bb3119, ^bb3120, ^bb3121, ^bb3122, ^bb3123, ^bb3124, ^bb3125, ^bb3126, ^bb3127, ^bb3128, ^bb3129, ^bb3130, ^bb3131, ^bb3132, ^bb3133, ^bb3134, ^bb3135, ^bb3136, ^bb3137, ^bb3138, ^bb3139, ^bb3140, ^bb3141, ^bb3157, ^bb3158, ^bb3159, ^bb3160, ^bb3161, ^bb3162, ^bb3164, ^bb3165, ^bb3166, ^bb3167, ^bb3168, ^bb3169, ^bb3170, ^bb3171, ^bb3172, ^bb3173, ^bb3174, ^bb3175, ^bb3176, ^bb3177, ^bb3178, ^bb3179, ^bb3180, ^bb3181, ^bb3182, ^bb3183, ^bb3184, ^bb3185, ^bb3186, ^bb3187, ^bb3188, ^bb3189, ^bb3190, ^bb3191, ^bb3192, ^bb3193, ^bb3194, ^bb3195, ^bb3196, ^bb3197, ^bb3198, ^bb3199, ^bb3200, ^bb3212, ^bb3213, ^bb3214, ^bb3215, ^bb3216, ^bb3217, ^bb3219, ^bb3220, ^bb3221, ^bb3222, ^bb3223, ^bb3224, ^bb3225, ^bb3226, ^bb3227, ^bb3228, ^bb3229, ^bb3230, ^bb3231, ^bb3232, ^bb3233, ^bb3234, ^bb3235, ^bb3236, ^bb3237, ^bb3249, ^bb3250, ^bb3251, ^bb3252, ^bb3253, ^bb3254, ^bb3255, ^bb3256, ^bb3257, ^bb3258, ^bb3259, ^bb3260, ^bb3261, ^bb3262, ^bb3263, ^bb3264, ^bb3265, ^bb3266, ^bb3267, ^bb3268, ^bb3269, ^bb3270, ^bb3271, ^bb3272, ^bb3273, ^bb3274, ^bb3275, ^bb3276, ^bb3277, ^bb3278, ^bb3279, ^bb3280, ^bb3282, ^bb3283, ^bb3284, ^bb3285, ^bb3286, ^bb3287, ^bb3288, ^bb3312, ^bb3313, ^bb3314, ^bb3315, ^bb3316, ^bb3317, ^bb3318, ^bb3319, ^bb3320, ^bb3321, ^bb3322, ^bb3323, ^bb3324, ^bb3325, ^bb3326, ^bb3327, ^bb3328, ^bb3329, ^bb3330, ^bb3331, ^bb3332, ^bb3333, ^bb3334, ^bb3335, ^bb3336, ^bb3337, ^bb3338, ^bb3339, ^bb3340, ^bb3341, ^bb3342, ^bb3343, ^bb3344, ^bb3345, ^bb3346, ^bb3347, ^bb3348, ^bb3349, ^bb3350, ^bb3351, ^bb3352, ^bb3353, ^bb3354, ^bb3355, ^bb3356, ^bb3357, ^bb3358, ^bb3359, ^bb3360, ^bb3361, ^bb3362, ^bb3363, ^bb3364, ^bb3365, ^bb3366, ^bb3367, ^bb3368, ^bb3369, ^bb3370, ^bb3371, ^bb3372, ^bb3373, ^bb3374, ^bb3375, ^bb3376, ^bb3377, ^bb3378, ^bb3379, ^bb3380, ^bb3381, ^bb3382, ^bb3383, ^bb3384, ^bb3385, ^bb3386, ^bb3387, ^bb3388, ^bb3389, ^bb3390, ^bb3391, ^bb3392, ^bb3393, ^bb3394, ^bb3395, ^bb3396, ^bb3397, ^bb3398, ^bb3399, ^bb3400, ^bb3401, ^bb3402, ^bb3403, ^bb3404, ^bb3405, ^bb3406, ^bb3407, ^bb3408, ^bb3409, ^bb3410, ^bb3411, ^bb3412, ^bb3413, ^bb3414, ^bb3415, ^bb3416, ^bb3417, ^bb3418, ^bb3419, ^bb3420, ^bb3421, ^bb3422, ^bb3423, ^bb3424, ^bb3425, ^bb3426, ^bb3427, ^bb3428, ^bb3429, ^bb3430, ^bb3431, ^bb3432, ^bb3433, ^bb3434, ^bb3435, ^bb3436, ^bb3437, ^bb3438, ^bb3439, ^bb3440, ^bb3441, ^bb3442, ^bb3443, ^bb3444, ^bb3445, ^bb3446, ^bb3447, ^bb3448, ^bb3449, ^bb3450, ^bb3451, ^bb3452, ^bb3453, ^bb3454, ^bb3455, ^bb3456, ^bb3457, ^bb3458, ^bb3459, ^bb3460, ^bb3461, ^bb3462, ^bb3463, ^bb3464, ^bb3465, ^bb3466, ^bb3467, ^bb3468, ^bb3469, ^bb3470, ^bb3471, ^bb3472, ^bb3473, ^bb3474, ^bb3475, ^bb3476, ^bb3477, ^bb3478, ^bb3479, ^bb3480, ^bb3481, ^bb3482, ^bb3483, ^bb3484, ^bb3485, ^bb3486, ^bb3487, ^bb3488, ^bb3489, ^bb3490, ^bb3491, ^bb3492, ^bb3493, ^bb3494, ^bb3495, ^bb3496, ^bb3497, ^bb3498, ^bb3499, ^bb3500, ^bb3501, ^bb3502, ^bb3503, ^bb3504, ^bb3505, ^bb3506, ^bb3507, ^bb3508, ^bb3509, ^bb3510, ^bb3511, ^bb3512, ^bb3513, ^bb3514, ^bb3515, ^bb3516, ^bb3517, ^bb3518, ^bb3519, ^bb3520, ^bb3521, ^bb3522, ^bb3523, ^bb3524, ^bb3525, ^bb3526, ^bb3527, ^bb3528, ^bb3529, ^bb3530, ^bb3531, ^bb3532, ^bb3533, ^bb3534, ^bb3535, ^bb3536, ^bb3537, ^bb3538, ^bb3539, ^bb3540, ^bb3541, ^bb3542, ^bb3543, ^bb3544, ^bb3545, ^bb3546, ^bb3547, ^bb3548, ^bb3549, ^bb3550, ^bb3551, ^bb3552, ^bb3553, ^bb3554, ^bb3555, ^bb3556, ^bb3557, ^bb3558, ^bb3559, ^bb3560, ^bb3561, ^bb3562, ^bb3563, ^bb3564, ^bb3565, ^bb3566, ^bb3567, ^bb3568, ^bb3569, ^bb3570, ^bb3571, ^bb3572, ^bb3573, ^bb3574, ^bb3575, ^bb3576, ^bb3577, ^bb3578, ^bb3579, ^bb3580, ^bb3581, ^bb3582, ^bb3583, ^bb3584, ^bb3585, ^bb3586, ^bb3587, ^bb3588, ^bb3589, ^bb3590, ^bb3591, ^bb3592, ^bb3593, ^bb3594, ^bb3595, ^bb3596, ^bb3597, ^bb3598, ^bb3599, ^bb3600, ^bb3601, ^bb3602, ^bb3603, ^bb3604, ^bb3605, ^bb3606, ^bb3607, ^bb3608, ^bb3609, ^bb3610, ^bb3611, ^bb3612, ^bb3613, ^bb3614, ^bb3615, ^bb3616, ^bb3617, ^bb3618, ^bb3619, ^bb3620, ^bb3621, ^bb3622, ^bb3623, ^bb3624, ^bb3625, ^bb3626, ^bb3627, ^bb3628, ^bb3629, ^bb3630, ^bb3631, ^bb3632, ^bb3633, ^bb3634, ^bb3635, ^bb3636, ^bb3637, ^bb3638, ^bb3639, ^bb3640, ^bb3641, ^bb3642, ^bb3643, ^bb3644, ^bb3645, ^bb3646, ^bb3647, ^bb3648, ^bb3649, ^bb3650, ^bb3651, ^bb3652, ^bb3653, ^bb3654, ^bb3655, ^bb3656, ^bb3657, ^bb3658, ^bb3659, ^bb3660, ^bb3661, ^bb3662, ^bb3663, ^bb3664, ^bb3665, ^bb3666, ^bb3667, ^bb3668, ^bb3669, ^bb3670, ^bb3671, ^bb3672, ^bb3673, ^bb3674, ^bb3675, ^bb3676, ^bb3677, ^bb3678, ^bb3679, ^bb3680, ^bb3681, ^bb3682, ^bb3683, ^bb3684, ^bb3685, ^bb3686, ^bb3687, ^bb3688, ^bb3689, ^bb3690, ^bb3691, ^bb3692, ^bb3693, ^bb3694, ^bb3695, ^bb3696, ^bb3697, ^bb3698, ^bb3699, ^bb3700, ^bb3701, ^bb3702, ^bb3703, ^bb3704, ^bb3705, ^bb3706, ^bb3707, ^bb3708, ^bb3709, ^bb3710, ^bb3711, ^bb3712, ^bb3713, ^bb3714, ^bb3715, ^bb3716, ^bb3717, ^bb3718, ^bb3719, ^bb3720, ^bb3721, ^bb3722, ^bb3723, ^bb3724, ^bb3725, ^bb3726, ^bb3727, ^bb3728, ^bb3729, ^bb3730, ^bb3731, ^bb3732, ^bb3733, ^bb3734, ^bb3735, ^bb3736, ^bb3737, ^bb3738, ^bb3739, ^bb3740, ^bb3741, ^bb3742, ^bb3743, ^bb3744, ^bb3745, ^bb3746, ^bb3747, ^bb3748, ^bb3749, ^bb3750, ^bb3751, ^bb3752, ^bb3753, ^bb3754, ^bb3755, ^bb3756, ^bb3757, ^bb3758, ^bb3759, ^bb3760, ^bb3761, ^bb3762, ^bb3763, ^bb3764, ^bb3765, ^bb3766, ^bb3767, ^bb3768, ^bb3769, ^bb3770, ^bb3771, ^bb3772, ^bb3773, ^bb3774, ^bb3775, ^bb3776, ^bb3777, ^bb3778, ^bb3779, ^bb3780, ^bb3781, ^bb3782, ^bb3783, ^bb3784, ^bb3785, ^bb3786, ^bb3787, ^bb3788, ^bb3789, ^bb3790, ^bb3791, ^bb3792, ^bb3793, ^bb3794, ^bb3795, ^bb3796, ^bb3797, ^bb3798, ^bb3799, ^bb3800, ^bb3801, ^bb3802, ^bb3803, ^bb3804, ^bb3805, ^bb3806, ^bb3807, ^bb3808, ^bb3809, ^bb3810, ^bb3811, ^bb3812, ^bb3813, ^bb3814, ^bb3815, ^bb3816, ^bb3817, ^bb3818, ^bb3819, ^bb3820, ^bb3821, ^bb3822, ^bb3823, ^bb3824, ^bb3825, ^bb3826, ^bb3827, ^bb3828, ^bb3829, ^bb3830, ^bb3831, ^bb3832, ^bb3833, ^bb3834, ^bb3835, ^bb3836, ^bb3837, ^bb3838, ^bb3839, ^bb3840, ^bb3841, ^bb3842, ^bb3843, ^bb3844, ^bb3845, ^bb3846, ^bb3847, ^bb3848, ^bb3849, ^bb3850, ^bb3851, ^bb3852, ^bb3853, ^bb3854, ^bb3855, ^bb3856, ^bb3857, ^bb3858, ^bb3859, ^bb3860, ^bb3861, ^bb3862, ^bb3863, ^bb3864, ^bb3865, ^bb3866, ^bb3867, ^bb3868, ^bb3869, ^bb3870, ^bb3871, ^bb3872, ^bb3873, ^bb3874, ^bb3875, ^bb3876, ^bb3877, ^bb3878, ^bb3879, ^bb3880, ^bb3881, ^bb3882, ^bb3883, ^bb3884, ^bb3885, ^bb3886, ^bb3887, ^bb3888, ^bb3889, ^bb3890, ^bb3891, ^bb3892, ^bb3893, ^bb3894, ^bb3895, ^bb3896, ^bb3897, ^bb3898, ^bb3899, ^bb3900, ^bb3901, ^bb3902, ^bb3903, ^bb3904, ^bb3905, ^bb3906, ^bb3907, ^bb3908, ^bb3909, ^bb3910, ^bb3911, ^bb3912, ^bb3913, ^bb3914, ^bb3915, ^bb3916, ^bb3917, ^bb3918, ^bb3919, ^bb3920, ^bb3921, ^bb3922, ^bb3923, ^bb3924, ^bb3925, ^bb3926, ^bb3927, ^bb3928, ^bb3929, ^bb3930, ^bb3931, ^bb3932, ^bb3933, ^bb3934, ^bb3935, ^bb3936, ^bb3937, ^bb3938, ^bb3939, ^bb3940, ^bb3941, ^bb3942, ^bb3943, ^bb3944, ^bb3945, ^bb3946, ^bb3947, ^bb3948, ^bb3949, ^bb3950, ^bb3951, ^bb3952, ^bb3953, ^bb3954, ^bb3955, ^bb3956, ^bb3957, ^bb3958, ^bb3959, ^bb3960, ^bb3961, ^bb3962, ^bb3963, ^bb3964, ^bb3965, ^bb3966, ^bb3967, ^bb3968, ^bb3969, ^bb3970, ^bb3971, ^bb3972, ^bb3973, ^bb3974, ^bb3975, ^bb3976, ^bb3977, ^bb3978, ^bb3979, ^bb3980, ^bb3981, ^bb3982, ^bb3983, ^bb3984, ^bb3985, ^bb3986, ^bb3987, ^bb3988, ^bb3989, ^bb3990, ^bb3991, ^bb3992, ^bb3993, ^bb3994, ^bb3995, ^bb3996, ^bb3997, ^bb3998, ^bb3999, ^bb4000, ^bb4001, ^bb4002, ^bb4003, ^bb4004, ^bb4005, ^bb4006, ^bb4007, ^bb4008, ^bb4009, ^bb4010, ^bb4011, ^bb4012, ^bb4013, ^bb4014, ^bb4015, ^bb4016, ^bb4017, ^bb4018, ^bb4019, ^bb4020, ^bb4021, ^bb4022, ^bb4023, ^bb4024, ^bb4025, ^bb4026, ^bb4027, ^bb4028, ^bb4029, ^bb4030, ^bb4031, ^bb4032, ^bb4033, ^bb4034, ^bb4035, ^bb4036, ^bb4037, ^bb4038, ^bb4039, ^bb4040, ^bb4041, ^bb4042, ^bb4043, ^bb4044, ^bb4045, ^bb4046, ^bb4047, ^bb4048, ^bb4049, ^bb4050, ^bb4051, ^bb4052, ^bb4053, ^bb4054, ^bb4055, ^bb4056, ^bb4057, ^bb4058, ^bb4059, ^bb4060, ^bb4061, ^bb4062, ^bb4063, ^bb4064, ^bb4065, ^bb4066, ^bb4067, ^bb4068, ^bb4069, ^bb4070, ^bb4071, ^bb4072, ^bb4073, ^bb4074, ^bb4075, ^bb4076, ^bb4077, ^bb4078, ^bb4079, ^bb4080, ^bb4081, ^bb4082, ^bb4083, ^bb4084, ^bb4085, ^bb4086, ^bb4087, ^bb4088, ^bb4089, ^bb4090, ^bb4091, ^bb4092, ^bb4093, ^bb4094, ^bb4095, ^bb4096, ^bb4097, ^bb4098, ^bb4099, ^bb4100, ^bb4101, ^bb4102, ^bb4103, ^bb4104, ^bb4105, ^bb4106, ^bb4107, ^bb4108, ^bb4109, ^bb4110, ^bb4111, ^bb4112, ^bb4113, ^bb4114, ^bb4115, ^bb4116, ^bb4117, ^bb4118, ^bb4119, ^bb4120, ^bb4121, ^bb4122, ^bb4123, ^bb4124, ^bb4125, ^bb4126, ^bb4127, ^bb4128, ^bb4129, ^bb4130, ^bb4131, ^bb4132, ^bb4133, ^bb4134, ^bb4135, ^bb4136, ^bb4137, ^bb4138, ^bb4139, ^bb4140, ^bb4141, ^bb4142, ^bb4143, ^bb4144, ^bb4145, ^bb4146, ^bb4147, ^bb4148, ^bb4149, ^bb4150, ^bb4151, ^bb4152, ^bb4153, ^bb4154, ^bb4155, ^bb4156, ^bb4157, ^bb4158, ^bb4159, ^bb4160, ^bb4161, ^bb4162, ^bb4163, ^bb4164, ^bb4165, ^bb4166, ^bb4167, ^bb4168, ^bb4169, ^bb4170, ^bb4171, ^bb4172, ^bb4173, ^bb4174, ^bb4175, ^bb4176, ^bb4177, ^bb4178, ^bb4179, ^bb4180, ^bb4181, ^bb4182, ^bb4183, ^bb4184, ^bb4185, ^bb4186, ^bb4187, ^bb4188, ^bb4189, ^bb4190, ^bb4191, ^bb4192, ^bb4193, ^bb4194, ^bb4195, ^bb4196, ^bb4197, ^bb4198, ^bb4199, ^bb4200, ^bb4201, ^bb4202, ^bb4203, ^bb4204, ^bb4205, ^bb4206, ^bb4207, ^bb4208, ^bb4209, ^bb4210, ^bb4211, ^bb4212, ^bb4213, ^bb4214, ^bb4215, ^bb4216, ^bb4217, ^bb4218, ^bb4219, ^bb4220, ^bb4221, ^bb4222, ^bb4223, ^bb4224, ^bb4225, ^bb4226, ^bb4227, ^bb4228, ^bb4229, ^bb4230, ^bb4231, ^bb4232, ^bb4233, ^bb4234, ^bb4235, ^bb4236, ^bb4237, ^bb4238, ^bb4239, ^bb4430, ^bb4431, ^bb4432, ^bb4433, ^bb4434, ^bb4435, ^bb4436, ^bb4437, ^bb4438, ^bb4439, ^bb4440, ^bb4441, ^bb4442, ^bb4443, ^bb4444, ^bb4445, ^bb4446, ^bb4447, ^bb4448, ^bb4449, ^bb4450, ^bb4451, ^bb4452, ^bb4454, ^bb4455, ^bb4456, ^bb4457, ^bb4458, ^bb4459, ^bb4460, ^bb4461, ^bb4462, ^bb4463, ^bb4464, ^bb4465, ^bb4466, ^bb4467, ^bb4468, ^bb4469, ^bb4470, ^bb4471, ^bb4472, ^bb4473, ^bb4474, ^bb4475, ^bb4477, ^bb4478, ^bb4479, ^bb4480, ^bb4481, ^bb4482, ^bb4483, ^bb4484, ^bb4485, ^bb4486, ^bb4487, ^bb4488, ^bb4489, ^bb4490, ^bb4491, ^bb4492, ^bb4493, ^bb4494, ^bb4495, ^bb4496, ^bb4497, ^bb4498, ^bb4499, ^bb4500, ^bb4501, ^bb4502, ^bb4503, ^bb4504, ^bb4505, ^bb4506, ^bb4507, ^bb4508, ^bb4509, ^bb4510, ^bb4511, ^bb4512, ^bb4513, ^bb4514, ^bb4515, ^bb4516, ^bb4517, ^bb4518, ^bb4519, ^bb4520, ^bb4521, ^bb4522, ^bb4523, ^bb4524, ^bb4525, ^bb4526, ^bb4527, ^bb4528, ^bb4529, ^bb4530, ^bb4531, ^bb4532, ^bb4533, ^bb4536, ^bb4537, ^bb4538, ^bb4539, ^bb4540, ^bb4541, ^bb4542, ^bb4543, ^bb4544, ^bb4545, ^bb4546, ^bb4547, ^bb4548, ^bb4549, ^bb4550, ^bb4551, ^bb4552, ^bb4553, ^bb4554, ^bb4555, ^bb4556, ^bb4557, ^bb4558, ^bb4559, ^bb4560, ^bb4561, ^bb4562, ^bb4563, ^bb4564, ^bb4565, ^bb4566, ^bb4567, ^bb4568, ^bb4569, ^bb4570, ^bb4571, ^bb4572, ^bb4573, ^bb4574, ^bb4575, ^bb4576, ^bb4577, ^bb4578, ^bb4579, ^bb4580, ^bb4581, ^bb4582, ^bb4583, ^bb4584, ^bb4586, ^bb4587, ^bb4588, ^bb4589, ^bb4590, ^bb4591, ^bb4592, ^bb4593, ^bb4594, ^bb4595, ^bb4596, ^bb4597, ^bb4598, ^bb4599, ^bb4600, ^bb4601, ^bb4602, ^bb4603, ^bb4604, ^bb4605, ^bb4606, ^bb4607, ^bb4608, ^bb4609, ^bb4610, ^bb4611, ^bb4612, ^bb4613, ^bb4614, ^bb4615, ^bb4616, ^bb4617, ^bb4618, ^bb4619, ^bb4620, ^bb4621, ^bb4622, ^bb4623, ^bb4624, ^bb4625, ^bb4626, ^bb4627, ^bb4628, ^bb4629, ^bb4630, ^bb4631, ^bb4632, ^bb4633, ^bb4634, ^bb4635, ^bb4636, ^bb4637, ^bb4638, ^bb4639, ^bb4640, ^bb4641, ^bb4642, ^bb4643, ^bb4644, ^bb4645, ^bb4646, ^bb4647, ^bb4783, ^bb4784, ^bb4785, ^bb4786, ^bb4787, ^bb4788, ^bb4789, ^bb4790, ^bb4791, ^bb4792, ^bb4793, ^bb4794, ^bb4796, ^bb4797, ^bb4798, ^bb4800, ^bb4801, ^bb4802, ^bb4803, ^bb4804, ^bb4805, ^bb4806, ^bb4807, ^bb4808, ^bb4809, ^bb4810, ^bb4811, ^bb4812, ^bb4813, ^bb4815, ^bb4816, ^bb4817, ^bb4818, ^bb4819, ^bb4820, ^bb4821, ^bb4822, ^bb4823, ^bb4824, ^bb4825, ^bb4826, ^bb4827, ^bb4828, ^bb4829, ^bb4830, ^bb4831, ^bb4832, ^bb4833, ^bb4834, ^bb4835, ^bb4836, ^bb4837, ^bb4838, ^bb4839, ^bb4840, ^bb4841, ^bb4842, ^bb4843, ^bb4844, ^bb4845, ^bb4846, ^bb4847, ^bb4848, ^bb4849, ^bb4850, ^bb4851, ^bb4852, ^bb4853, ^bb4854, ^bb4860, ^bb4861, ^bb4862, ^bb4863, ^bb4864, ^bb4865, ^bb4866, ^bb4867, ^bb4868, ^bb4869, ^bb4870, ^bb4871, ^bb4872, ^bb4873, ^bb4874, ^bb4875, ^bb4876, ^bb4877, ^bb4878, ^bb4879, ^bb4880, ^bb4881, ^bb4882, ^bb4883, ^bb4884, ^bb4885, ^bb4886, ^bb4887, ^bb4888, ^bb4889, ^bb4890, ^bb4891, ^bb4892, ^bb4893, ^bb4894, ^bb4895, ^bb4897, ^bb4898, ^bb4899, ^bb4900, ^bb4901, ^bb4902, ^bb4903, ^bb4904, ^bb4905, ^bb4906, ^bb4907, ^bb4908, ^bb4909, ^bb4910, ^bb4911, ^bb4912, ^bb4913, ^bb4914, ^bb4915, ^bb4916, ^bb4917, ^bb4918, ^bb4919, ^bb4920, ^bb4921, ^bb4922, ^bb4923, ^bb4924, ^bb4925, ^bb4926, ^bb4927, ^bb4928, ^bb4929, ^bb4930, ^bb4931, ^bb4932, ^bb4933, ^bb4934, ^bb4935, ^bb4936, ^bb4937, ^bb4938, ^bb4939, ^bb4940, ^bb4941, ^bb4942, ^bb4943, ^bb4944, ^bb4945, ^bb4946, ^bb4947, ^bb4948, ^bb4949, ^bb4950, ^bb4951, ^bb4952, ^bb4953, ^bb4954, ^bb4955, ^bb4956, ^bb4957, ^bb4958, ^bb4959, ^bb4960, ^bb4961, ^bb4962, ^bb4963, ^bb4964, ^bb4965, ^bb4967, ^bb4968, ^bb4969, ^bb4980, ^bb4981, ^bb4982, ^bb4983, ^bb4984, ^bb4985, ^bb4986, ^bb4987, ^bb4988, ^bb4989, ^bb4990, ^bb4991, ^bb4992, ^bb4993, ^bb4994, ^bb4995, ^bb4996, ^bb4997, ^bb4998, ^bb4999, ^bb5000, ^bb5001, ^bb5002, ^bb5003, ^bb5004, ^bb5005, ^bb5006, ^bb5007, ^bb5008, ^bb5009, ^bb5010, ^bb5011, ^bb5012, ^bb5013, ^bb5014, ^bb5015, ^bb5016, ^bb5017, ^bb5018, ^bb5019, ^bb5020, ^bb5021, ^bb5022, ^bb5023, ^bb5024, ^bb5025, ^bb5026, ^bb5027, ^bb5028, ^bb5029, ^bb5030, ^bb5031, ^bb5032, ^bb5033, ^bb5034, ^bb5035, ^bb5036, ^bb5037, ^bb5038, ^bb5039, ^bb5040, ^bb5041, ^bb5042, ^bb5043, ^bb5044, ^bb5045, ^bb5046, ^bb5047, ^bb5048, ^bb5049, ^bb5050, ^bb5051, ^bb5052, ^bb5053, ^bb5054, ^bb5055, ^bb5056, ^bb5057, ^bb5058, ^bb5059, ^bb5060, ^bb5061, ^bb5062, ^bb5063, ^bb5064, ^bb5065, ^bb5066, ^bb5067, ^bb5068, ^bb5069, ^bb5070, ^bb5071, ^bb5072, ^bb5073, ^bb5074, ^bb5075, ^bb5076, ^bb5077, ^bb5078, ^bb5079, ^bb5080, ^bb5081, ^bb5082, ^bb5083, ^bb5084, ^bb5085, ^bb5086, ^bb5087, ^bb5088, ^bb5089, ^bb5090, ^bb5091, ^bb5092, ^bb5093, ^bb5094, ^bb5095, ^bb5096, ^bb5098, ^bb5099, ^bb5100, ^bb5102, ^bb5103, ^bb5104, ^bb5105, ^bb5106, ^bb5108, ^bb5109, ^bb5110, ^bb5111, ^bb5112, ^bb5113, ^bb5114, ^bb5115, ^bb5116, ^bb5117, ^bb5118, ^bb5119, ^bb5120, ^bb5126, ^bb5127, ^bb5128, ^bb5129, ^bb5130, ^bb5131, ^bb5132, ^bb5133, ^bb5134, ^bb5135, ^bb5136, ^bb5137, ^bb5138, ^bb5139, ^bb5140, ^bb5141, ^bb5142, ^bb5143, ^bb5144, ^bb5145, ^bb5146, ^bb5147, ^bb5148, ^bb5149, ^bb5150, ^bb5151, ^bb5152, ^bb5153, ^bb5154, ^bb5155, ^bb5156, ^bb5157, ^bb5158, ^bb5159, ^bb5160, ^bb5161, ^bb5162, ^bb5163, ^bb5164, ^bb5165, ^bb5166, ^bb5167, ^bb5168, ^bb5169, ^bb5170, ^bb5171, ^bb5172, ^bb5173, ^bb5174, ^bb5175, ^bb5176, ^bb5177, ^bb5178, ^bb5179, ^bb5180, ^bb5181, ^bb5182, ^bb5183, ^bb5184, ^bb5185, ^bb5186, ^bb5187, ^bb5188, ^bb5189, ^bb5190, ^bb5191, ^bb5192, ^bb5193, ^bb5194, ^bb5195, ^bb5196, ^bb5197, ^bb5198, ^bb5199, ^bb5200, ^bb5201, ^bb5202, ^bb5203, ^bb5204, ^bb5205, ^bb5206, ^bb5207, ^bb5208, ^bb5209, ^bb5210, ^bb5211, ^bb5212, ^bb5213, ^bb5214, ^bb5215, ^bb5216, ^bb5217, ^bb5218, ^bb5219, ^bb5220, ^bb5221, ^bb5222, ^bb5223, ^bb5224, ^bb5225, ^bb5226, ^bb5227, ^bb5228, ^bb5229, ^bb5230, ^bb5231, ^bb5232, ^bb5233, ^bb5235, ^bb5236, ^bb5237, ^bb5238, ^bb5239, ^bb5240, ^bb5241, ^bb5242, ^bb5243, ^bb5244, ^bb5245, ^bb5246, ^bb5247, ^bb5248, ^bb5249, ^bb5250, ^bb5251, ^bb5253, ^bb5254, ^bb5255, ^bb5256, ^bb5257, ^bb5258, ^bb5259, ^bb5260, ^bb5261, ^bb5262, ^bb5263, ^bb5264, ^bb5265, ^bb5266, ^bb5285, ^bb5286, ^bb5287, ^bb5288, ^bb5289, ^bb5290, ^bb5291, ^bb5292, ^bb5293, ^bb5294, ^bb5295, ^bb5296, ^bb5297, ^bb5298, ^bb5299, ^bb5300, ^bb5301, ^bb5302, ^bb5303, ^bb5304, ^bb5305, ^bb5306, ^bb5307, ^bb5308, ^bb5309, ^bb5310, ^bb5311, ^bb5312, ^bb5313, ^bb5314, ^bb5315, ^bb5316, ^bb5317, ^bb5318, ^bb5319, ^bb5320, ^bb5321, ^bb5322, ^bb5323, ^bb5325, ^bb5326, ^bb5327, ^bb5328, ^bb5329, ^bb5330, ^bb5344, ^bb5345, ^bb5346, ^bb5347, ^bb5348, ^bb5349, ^bb5350, ^bb5351, ^bb5352, ^bb5353, ^bb5354, ^bb5355, ^bb5356, ^bb5357, ^bb5358, ^bb5359, ^bb5360, ^bb5361, ^bb5362, ^bb5363, ^bb5364, ^bb5365, ^bb5366, ^bb5367, ^bb5368, ^bb5369, ^bb5370, ^bb5371, ^bb5372, ^bb5373, ^bb5374, ^bb5375, ^bb5376, ^bb5377, ^bb5378, ^bb5379, ^bb5380, ^bb5381, ^bb5382, ^bb5383, ^bb5384, ^bb5385, ^bb5386, ^bb5387, ^bb5388, ^bb5389, ^bb5390, ^bb5391, ^bb5392, ^bb5393, ^bb5394, ^bb5395, ^bb5396, ^bb5397, ^bb5398, ^bb5399, ^bb5400, ^bb5401, ^bb5402, ^bb5403, ^bb5404, ^bb5405, ^bb5406, ^bb5407, ^bb5408, ^bb5409, ^bb5410, ^bb5411, ^bb5412, ^bb5413, ^bb5414, ^bb5415, ^bb5416, ^bb5417, ^bb5418, ^bb5419, ^bb5420, ^bb5421, ^bb5422, ^bb5423, ^bb5424, ^bb5425, ^bb5426, ^bb5427, ^bb5428, ^bb5429, ^bb5430, ^bb5431, ^bb5432, ^bb5433, ^bb5434, ^bb5435, ^bb5436, ^bb5437, ^bb5438, ^bb5439, ^bb5440, ^bb5441, ^bb5442, ^bb5443, ^bb5444, ^bb5445, ^bb5446, ^bb5447, ^bb5448, ^bb5449, ^bb5450, ^bb5451, ^bb5452, ^bb5453, ^bb5454, ^bb5455, ^bb5456, ^bb5457, ^bb5458, ^bb5459, ^bb5460, ^bb5461, ^bb5462, ^bb5463, ^bb5464, ^bb5465, ^bb5466, ^bb5467, ^bb5468, ^bb5469, ^bb5470, ^bb5471, ^bb5472, ^bb5473, ^bb5474, ^bb5475, ^bb5476, ^bb5477, ^bb5478, ^bb5479, ^bb5480, ^bb5481, ^bb5482, ^bb5483, ^bb5484, ^bb5485, ^bb5486, ^bb5487, ^bb5488, ^bb5489, ^bb5490, ^bb5491, ^bb5492, ^bb5493, ^bb5494, ^bb5495, ^bb5496, ^bb5497, ^bb5498, ^bb5499, ^bb5500, ^bb5501, ^bb5502, ^bb5503, ^bb5504, ^bb5505, ^bb5506, ^bb5507, ^bb5508, ^bb5509, ^bb5510, ^bb5511, ^bb5512, ^bb5513, ^bb5514, ^bb5515, ^bb5516, ^bb5517, ^bb5518, ^bb5519, ^bb5520, ^bb5521, ^bb5522, ^bb5523, ^bb5524, ^bb5525, ^bb5526, ^bb5527, ^bb5528, ^bb5529, ^bb5530, ^bb5531, ^bb5532, ^bb5533, ^bb5534, ^bb5535, ^bb5536, ^bb5537, ^bb5538, ^bb5539, ^bb5540, ^bb5541, ^bb5543, ^bb5544, ^bb5545, ^bb5582, ^bb5583, ^bb5584, ^bb5585, ^bb5586, ^bb5587, ^bb5588, ^bb5589, ^bb5590, ^bb5591, ^bb5592, ^bb5593, ^bb5594, ^bb5595, ^bb5596, ^bb5597, ^bb5598, ^bb5599, ^bb5600, ^bb5601, ^bb5602, ^bb5603, ^bb5604, ^bb5605, ^bb5606, ^bb5607, ^bb5608, ^bb5609, ^bb5610, ^bb5611, ^bb5612, ^bb5613, ^bb5614, ^bb5615, ^bb5616, ^bb5617, ^bb5618, ^bb5619, ^bb5620, ^bb5621, ^bb5622, ^bb5623, ^bb5624, ^bb5625, ^bb5626, ^bb5627, ^bb5628, ^bb5629, ^bb5630, ^bb5631, ^bb5632, ^bb5633, ^bb5634, ^bb5635, ^bb5636, ^bb5637, ^bb5638, ^bb5639, ^bb5640, ^bb5641, ^bb5642, ^bb5643, ^bb5644, ^bb5645, ^bb5646, ^bb5647, ^bb5648, ^bb5649, ^bb5650, ^bb5651, ^bb5652, ^bb5653, ^bb5654, ^bb5655, ^bb5656, ^bb5657, ^bb5658, ^bb5659, ^bb5660, ^bb5661, ^bb5662, ^bb5663, ^bb5664, ^bb5665, ^bb5666, ^bb5667, ^bb5668, ^bb5669, ^bb5670, ^bb5671, ^bb5672, ^bb5673, ^bb5674, ^bb5675, ^bb5676, ^bb5677, ^bb5678, ^bb5679, ^bb5680, ^bb5681, ^bb5682, ^bb5683, ^bb5684, ^bb5685, ^bb5686, ^bb5687, ^bb5688, ^bb5689, ^bb5690, ^bb5691, ^bb5692, ^bb5693, ^bb5694, ^bb5695, ^bb5696, ^bb5697, ^bb5698, ^bb5699, ^bb5700, ^bb5701, ^bb5702, ^bb5703, ^bb5704, ^bb5705, ^bb5706, ^bb5707, ^bb5708, ^bb5709, ^bb5710, ^bb5711, ^bb5712, ^bb5713, ^bb5714, ^bb5715, ^bb5716, ^bb5717, ^bb5718, ^bb5719, ^bb5720, ^bb5721, ^bb5722, ^bb5723, ^bb5724, ^bb5725, ^bb5726, ^bb5727, ^bb5728, ^bb5729, ^bb5730, ^bb5731, ^bb5732, ^bb5733, ^bb5734, ^bb5735, ^bb5736, ^bb5737, ^bb5738, ^bb5739, ^bb5741, ^bb5742, ^bb5743, ^bb5780, ^bb5781, ^bb5782, ^bb5783, ^bb5784, ^bb5785, ^bb5786, ^bb5787, ^bb5788, ^bb5789, ^bb5790, ^bb5791, ^bb5792, ^bb5793, ^bb5794, ^bb5795, ^bb5796, ^bb5797, ^bb5798, ^bb5799, ^bb5800, ^bb5801, ^bb5802, ^bb5803, ^bb5804, ^bb5805, ^bb5806, ^bb5807, ^bb5808, ^bb5809, ^bb5810, ^bb5811, ^bb5812, ^bb5813, ^bb5814, ^bb5815, ^bb5816, ^bb5817, ^bb5818, ^bb5819, ^bb5820, ^bb5821, ^bb5822, ^bb5823, ^bb5824, ^bb5825, ^bb5826, ^bb5827, ^bb5828, ^bb5829, ^bb5830, ^bb5831, ^bb5832, ^bb5833, ^bb5834, ^bb5835, ^bb5836, ^bb5837, ^bb5838, ^bb5839, ^bb5840, ^bb5841, ^bb5842, ^bb5843, ^bb5844, ^bb5845, ^bb5846, ^bb5847, ^bb5848, ^bb5849, ^bb5850, ^bb5851, ^bb5852, ^bb5853, ^bb5854, ^bb5855, ^bb5856, ^bb5857, ^bb5858, ^bb5859, ^bb5860, ^bb5861, ^bb5862, ^bb5863, ^bb5864, ^bb5865, ^bb5866, ^bb5867, ^bb5868, ^bb5870, ^bb5871, ^bb5872, ^bb5873, ^bb5874, ^bb5875, ^bb5876, ^bb5877, ^bb5878, ^bb5879, ^bb5880, ^bb5881, ^bb5882, ^bb5884, ^bb5964, ^bb5965, ^bb5966, ^bb5967, ^bb5968, ^bb5969, ^bb5970, ^bb5971, ^bb5972, ^bb5973, ^bb5974, ^bb5975, ^bb5976, ^bb5977, ^bb5979, ^bb5980, ^bb5981, ^bb5982, ^bb5983, ^bb5984, ^bb5985, ^bb5986, ^bb5987, ^bb5988, ^bb5989, ^bb5990, ^bb5991, ^bb5992, ^bb5993, ^bb5994, ^bb5995, ^bb5996, ^bb5997, ^bb5998, ^bb5999, ^bb6000, ^bb6001, ^bb6002, ^bb6003, ^bb6004, ^bb6005, ^bb6006, ^bb6007, ^bb6008, ^bb6009, ^bb6010, ^bb6011, ^bb6012, ^bb6013, ^bb6014, ^bb6015, ^bb6016, ^bb6017, ^bb6018, ^bb6061, ^bb6062, ^bb6063, ^bb6064, ^bb6065, ^bb6066, ^bb6067, ^bb6068, ^bb6069, ^bb6070, ^bb6071, ^bb6072, ^bb6073, ^bb6074, ^bb6075, ^bb6076, ^bb6077, ^bb6078, ^bb6079, ^bb6080, ^bb6081, ^bb6082, ^bb6083, ^bb6084, ^bb6085, ^bb6086, ^bb6087, ^bb6088, ^bb6089, ^bb6090, ^bb6091, ^bb6092, ^bb6093, ^bb6094, ^bb6095, ^bb6096, ^bb6097, ^bb6098, ^bb6099, ^bb6100, ^bb6101, ^bb6102, ^bb6103, ^bb6104, ^bb6105, ^bb6106, ^bb6107, ^bb6108, ^bb6109, ^bb6110, ^bb6111, ^bb6112, ^bb6113, ^bb6114, ^bb6115, ^bb6116, ^bb6117, ^bb6118, ^bb6119, ^bb6120, ^bb6121, ^bb6122, ^bb6123, ^bb6124, ^bb6125, ^bb6126, ^bb6127, ^bb6128, ^bb6129, ^bb6130, ^bb6131, ^bb6132, ^bb6133, ^bb6134, ^bb6135, ^bb6136, ^bb6137, ^bb6138, ^bb6139, ^bb6140, ^bb6141, ^bb6142, ^bb6143, ^bb6144, ^bb6145, ^bb6146, ^bb6147, ^bb6148, ^bb6149, ^bb6150, ^bb6151, ^bb6152, ^bb6153, ^bb6154, ^bb6155, ^bb6156, ^bb6157, ^bb6158, ^bb6159, ^bb6160, ^bb6161, ^bb6162, ^bb6163, ^bb6164, ^bb6165, ^bb6166, ^bb6167, ^bb6168, ^bb6169, ^bb6170, ^bb6171, ^bb6172, ^bb6173, ^bb6174, ^bb6175, ^bb6176, ^bb6177, ^bb6178, ^bb6179, ^bb6180, ^bb6181, ^bb6182, ^bb6183, ^bb6184, ^bb6185, ^bb6186, ^bb6187, ^bb6188, ^bb6189, ^bb6190, ^bb6191, ^bb6192, ^bb6193, ^bb6194, ^bb6195, ^bb6196, ^bb6197, ^bb6198, ^bb6199, ^bb6200, ^bb6201, ^bb6202, ^bb6203, ^bb6204, ^bb6205, ^bb6206, ^bb6207, ^bb6208, ^bb6209, ^bb6210, ^bb6211, ^bb6212, ^bb6213, ^bb6214, ^bb6215, ^bb6216, ^bb6217, ^bb6218, ^bb6219, ^bb6220, ^bb6221, ^bb6222, ^bb6223, ^bb6224, ^bb6225, ^bb6226, ^bb6227, ^bb6228, ^bb6229, ^bb6230, ^bb6231, ^bb6232, ^bb6233, ^bb6234, ^bb6235, ^bb6236, ^bb6237, ^bb6238, ^bb6239, ^bb6240, ^bb6241, ^bb6242, ^bb6243, ^bb6244, ^bb6245, ^bb6246, ^bb6247, ^bb6248, ^bb6249, ^bb6250, ^bb6251, ^bb6252, ^bb6253, ^bb6254, ^bb6255, ^bb6256, ^bb6257, ^bb6258, ^bb6259, ^bb6260, ^bb6261, ^bb6262, ^bb6263, ^bb6264, ^bb6265, ^bb6266, ^bb6267, ^bb6268, ^bb6269, ^bb6270, ^bb6271, ^bb6272, ^bb6273, ^bb6274, ^bb6275, ^bb6276, ^bb6277, ^bb6278, ^bb6279, ^bb6280, ^bb6281, ^bb6282, ^bb6283, ^bb6284, ^bb6285, ^bb6286, ^bb6287, ^bb6288, ^bb6289, ^bb6290, ^bb6291, ^bb6292, ^bb6293, ^bb6294, ^bb6295, ^bb6296, ^bb6297, ^bb6298, ^bb6299, ^bb6300, ^bb6301, ^bb6302, ^bb6303, ^bb6304, ^bb6305, ^bb6306, ^bb6307, ^bb6308, ^bb6309, ^bb6310, ^bb6311, ^bb6312, ^bb6313, ^bb6314, ^bb6315, ^bb6316, ^bb6317, ^bb6318, ^bb6319, ^bb6320, ^bb6321, ^bb6322, ^bb6323, ^bb6324, ^bb6325, ^bb6326, ^bb6327, ^bb6328, ^bb6329, ^bb6330, ^bb6331, ^bb6332, ^bb6333, ^bb6334, ^bb6335, ^bb6336, ^bb6337, ^bb6338, ^bb6339, ^bb6340, ^bb6341, ^bb6342, ^bb6343, ^bb6344, ^bb6345, ^bb6346, ^bb6347, ^bb6348, ^bb6349, ^bb6350, ^bb6351, ^bb6352, ^bb6353, ^bb6354, ^bb6355, ^bb6356, ^bb6357, ^bb6358, ^bb6359, ^bb6360, ^bb6361, ^bb6362, ^bb6363, ^bb6364, ^bb6365, ^bb6366, ^bb6367, ^bb6368, ^bb6369, ^bb6370, ^bb6371, ^bb6372, ^bb6373, ^bb6374, ^bb6375, ^bb6376, ^bb6377, ^bb6378, ^bb6379, ^bb6380, ^bb6381, ^bb6382, ^bb6383, ^bb6384, ^bb6385, ^bb6386, ^bb6387, ^bb6388, ^bb6389, ^bb6390, ^bb6391, ^bb6392, ^bb6393, ^bb6394, ^bb6395, ^bb6396, ^bb6397, ^bb6398, ^bb6399, ^bb6400, ^bb6401, ^bb6402, ^bb6403, ^bb6404, ^bb6405, ^bb6406, ^bb6407, ^bb6408, ^bb6409, ^bb6410, ^bb6411, ^bb6412, ^bb6413, ^bb6414, ^bb6415, ^bb6416, ^bb6417, ^bb6418, ^bb6419, ^bb6420, ^bb6421, ^bb6422, ^bb6423, ^bb6424, ^bb6425, ^bb6426, ^bb6427, ^bb6428, ^bb6429, ^bb6430, ^bb6431, ^bb6432, ^bb6433, ^bb6434, ^bb6435, ^bb6436, ^bb6437, ^bb6438, ^bb6439, ^bb6440, ^bb6441, ^bb6442, ^bb6443, ^bb6444, ^bb6445, ^bb6446, ^bb6447, ^bb6448, ^bb6449, ^bb6450, ^bb6451, ^bb6452, ^bb6453, ^bb6454, ^bb6455, ^bb6456, ^bb6457, ^bb6458, ^bb6459, ^bb6460, ^bb6461, ^bb6462, ^bb6463, ^bb6464, ^bb6465, ^bb6466, ^bb6467, ^bb6468, ^bb6469, ^bb6470, ^bb6471, ^bb6472, ^bb6473, ^bb6474, ^bb6475, ^bb6476, ^bb6477, ^bb6478, ^bb6479, ^bb6480, ^bb6481, ^bb6482, ^bb6483, ^bb6484, ^bb6485, ^bb6486, ^bb6487, ^bb6488, ^bb6489, ^bb6490, ^bb6491, ^bb6492, ^bb6493, ^bb6494, ^bb6495, ^bb6496, ^bb6497, ^bb6498, ^bb6499, ^bb6500, ^bb6501, ^bb6502, ^bb6503, ^bb6505, ^bb6506, ^bb6507, ^bb6508, ^bb6509, ^bb6510, ^bb6511, ^bb6512, ^bb6513, ^bb6514, ^bb6515, ^bb6516, ^bb6517, ^bb6518, ^bb6519, ^bb6520, ^bb6521, ^bb6522, ^bb6523, ^bb6524, ^bb6525, ^bb6526, ^bb6527, ^bb6528, ^bb6529, ^bb6530, ^bb6531, ^bb6532, ^bb6533, ^bb6534, ^bb6535, ^bb6536, ^bb6537, ^bb6538, ^bb6539, ^bb6540, ^bb6541, ^bb6542, ^bb6543, ^bb6544, ^bb6545, ^bb6546, ^bb6547, ^bb6548, ^bb6549, ^bb6550, ^bb6551, ^bb6552, ^bb6553, ^bb6554, ^bb6555, ^bb6556, ^bb6557, ^bb6558, ^bb6559, ^bb6560, ^bb6561, ^bb6562, ^bb6563, ^bb6564, ^bb6565, ^bb6566, ^bb6567, ^bb6568, ^bb6569, ^bb6570, ^bb6571, ^bb6572, ^bb6573, ^bb6574, ^bb6575, ^bb6576, ^bb6577, ^bb6578, ^bb6579, ^bb6580, ^bb6581, ^bb6582, ^bb6583, ^bb6584, ^bb6585, ^bb6586, ^bb6587, ^bb6588, ^bb6589, ^bb6590, ^bb6591, ^bb6592, ^bb6593, ^bb6594, ^bb6595, ^bb6596, ^bb6597, ^bb6598, ^bb6599, ^bb6600, ^bb6601, ^bb6602, ^bb6603, ^bb6604, ^bb6605, ^bb6606, ^bb6607, ^bb6608, ^bb6609, ^bb6610, ^bb6611, ^bb6612, ^bb6613, ^bb6614, ^bb6615, ^bb6616, ^bb6617, ^bb6618, ^bb6619, ^bb6620, ^bb6621, ^bb6622, ^bb6623, ^bb6624, ^bb6625, ^bb6626, ^bb6627, ^bb6628, ^bb6629, ^bb6630, ^bb6631, ^bb6632, ^bb6633, ^bb6634, ^bb6635, ^bb6636, ^bb6637, ^bb6638, ^bb6639
    pdl_interp.finalize
  ^bb2:  // pred: ^bb0
    pdl_interp.switch_operation_name of %arg0 to ["arith.addf", "arith.mulf", "arith.subf", "arith.divf", "arith.constant", "math.powf", "math.absf", "math.sqrt", "math_xdsl.constant", "math.exp", "math.cbrt", "math.cos", "arith.remf", "math.tan", "math.asin", "math.acos", "math.sinh", "math.cosh", "math.tanh", "math.asinh", "math.acosh", "math.atanh"](^bb6640, ^bb6746, ^bb6863, ^bb6965, ^bb7100, ^bb7111, ^bb7189, ^bb7196, ^bb7203, ^bb7209, ^bb7216, ^bb7222, ^bb7230, ^bb7246, ^bb7253, ^bb7259, ^bb7265, ^bb7271, ^bb7278, ^bb7286, ^bb7292, ^bb7298) -> ^bb3
  ^bb3:  // 203 preds: ^bb2, ^bb6640, ^bb6641, ^bb6642, ^bb6645, ^bb6646, ^bb6647, ^bb6648, ^bb6746, ^bb6747, ^bb6748, ^bb6751, ^bb6752, ^bb6753, ^bb6756, ^bb6863, ^bb6864, ^bb6865, ^bb6868, ^bb6869, ^bb6870, ^bb6871, ^bb6876, ^bb6965, ^bb6966, ^bb6967, ^bb6970, ^bb6971, ^bb6972, ^bb6973, ^bb6976, ^bb7100, ^bb7101, ^bb7102, ^bb7103, ^bb7104, ^bb7105, ^bb7106, ^bb7108, ^bb7109, ^bb7110, ^bb7111, ^bb7112, ^bb7113, ^bb7115, ^bb7116, ^bb7117, ^bb7118, ^bb7119, ^bb7120, ^bb7121, ^bb7122, ^bb7123, ^bb7124, ^bb7125, ^bb7126, ^bb7128, ^bb7129, ^bb7130, ^bb7131, ^bb7132, ^bb7133, ^bb7134, ^bb7135, ^bb7136, ^bb7137, ^bb7138, ^bb7139, ^bb7141, ^bb7142, ^bb7143, ^bb7144, ^bb7145, ^bb7146, ^bb7147, ^bb7162, ^bb7163, ^bb7164, ^bb7165, ^bb7166, ^bb7167, ^bb7168, ^bb7169, ^bb7170, ^bb7171, ^bb7172, ^bb7173, ^bb7174, ^bb7175, ^bb7176, ^bb7177, ^bb7178, ^bb7179, ^bb7180, ^bb7181, ^bb7182, ^bb7183, ^bb7189, ^bb7190, ^bb7191, ^bb7192, ^bb7193, ^bb7195, ^bb7196, ^bb7197, ^bb7198, ^bb7199, ^bb7200, ^bb7202, ^bb7203, ^bb7204, ^bb7205, ^bb7206, ^bb7207, ^bb7208, ^bb7209, ^bb7210, ^bb7211, ^bb7212, ^bb7213, ^bb7215, ^bb7216, ^bb7217, ^bb7218, ^bb7219, ^bb7220, ^bb7221, ^bb7222, ^bb7223, ^bb7224, ^bb7225, ^bb7226, ^bb7229, ^bb7230, ^bb7231, ^bb7232, ^bb7233, ^bb7234, ^bb7235, ^bb7236, ^bb7237, ^bb7238, ^bb7239, ^bb7240, ^bb7241, ^bb7242, ^bb7243, ^bb7244, ^bb7245, ^bb7246, ^bb7247, ^bb7248, ^bb7249, ^bb7250, ^bb7252, ^bb7253, ^bb7254, ^bb7255, ^bb7256, ^bb7257, ^bb7258, ^bb7259, ^bb7260, ^bb7261, ^bb7262, ^bb7263, ^bb7264, ^bb7265, ^bb7266, ^bb7267, ^bb7268, ^bb7269, ^bb7270, ^bb7271, ^bb7272, ^bb7273, ^bb7274, ^bb7275, ^bb7277, ^bb7278, ^bb7279, ^bb7280, ^bb7281, ^bb7282, ^bb7285, ^bb7286, ^bb7287, ^bb7288, ^bb7289, ^bb7290, ^bb7291, ^bb7292, ^bb7293, ^bb7294, ^bb7295, ^bb7296, ^bb7297, ^bb7298, ^bb7299, ^bb7300, ^bb7301, ^bb7302, ^bb7303
    %1 = pdl_interp.get_operand 0 of %arg0
    %2 = pdl_interp.get_defining_op of %1 : !pdl.value
    pdl_interp.is_not_null %2 : !pdl.operation -> ^bb4, ^bb1
  ^bb4:  // pred: ^bb3
    pdl_interp.switch_operation_name of %arg0 to ["arith.addf", "arith.subf", "arith.mulf", "arith.divf", "arith.negf", "math.powf", "math.sqrt", "math.cbrt", "math.absf", "math.exp", "math.log", "math.sin", "math.cos", "math.tan", "math.atan", "math.asin", "math.acos", "math.atan2", "math.cosh", "math.sinh", "math.tanh", "math.acosh"](^bb5, ^bb749, ^bb1628, ^bb2851, ^bb4430, ^bb4582, ^bb4783, ^bb4945, ^bb5029, ^bb5190, ^bb5306, ^bb5446, ^bb5635, ^bb5833, ^bb6098, ^bb6120, ^bb6142, ^bb6164, ^bb6245, ^bb6354, ^bb6463, ^bb6544) -> ^bb1
  ^bb5:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb6, ^bb1
  ^bb6:  // pred: ^bb5
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7, ^bb1
  ^bb7:  // pred: ^bb6
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb8, ^bb1
  ^bb8:  // pred: ^bb7
    pdl_interp.switch_operation_name of %2 to ["arith.addf", "arith.subf", "arith.constant", "arith.mulf"](^bb700, ^bb713, ^bb726, ^bb737) -> ^bb9
  ^bb9:  // 50 preds: ^bb8, ^bb700, ^bb701, ^bb702, ^bb703, ^bb704, ^bb705, ^bb706, ^bb707, ^bb708, ^bb709, ^bb710, ^bb711, ^bb712, ^bb713, ^bb714, ^bb715, ^bb716, ^bb717, ^bb718, ^bb719, ^bb720, ^bb721, ^bb722, ^bb723, ^bb724, ^bb725, ^bb726, ^bb727, ^bb728, ^bb729, ^bb730, ^bb731, ^bb732, ^bb733, ^bb734, ^bb735, ^bb736, ^bb737, ^bb738, ^bb739, ^bb740, ^bb741, ^bb742, ^bb743, ^bb744, ^bb745, ^bb746, ^bb747, ^bb748
    %3 = pdl_interp.get_operand 1 of %arg0
    %4 = pdl_interp.get_defining_op of %3 : !pdl.value
    pdl_interp.is_not_null %4 : !pdl.operation -> ^bb10, ^bb1
  ^bb10:  // pred: ^bb9
    pdl_interp.switch_operation_name of %2 to ["arith.mulf", "arith.negf", "arith.addf", "arith.subf", "arith.divf", "math.powf", "math.log", "math.sin", "math.cos", "math.atan", "arith.constant", "math.cosh", "math.exp", "math.sinh"](^bb11, ^bb274, ^bb292, ^bb366, ^bb440, ^bb468, ^bb506, ^bb524, ^bb542, ^bb560, ^bb578, ^bb632, ^bb657, ^bb682) -> ^bb1
  ^bb11:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 2 -> ^bb12, ^bb1
  ^bb12:  // pred: ^bb11
    pdl_interp.check_result_count of %2 is 1 -> ^bb13, ^bb1
  ^bb13:  // pred: ^bb12
    %5 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %5 : !pdl.value -> ^bb14, ^bb1
  ^bb14:  // pred: ^bb13
    pdl_interp.are_equal %5, %1 : !pdl.value -> ^bb15, ^bb1
  ^bb15:  // pred: ^bb14
    %6 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %6 : !pdl.value -> ^bb16, ^bb1
  ^bb16:  // pred: ^bb15
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb17, ^bb1
  ^bb17:  // pred: ^bb16
    %7 = pdl_interp.get_value_type of %6 : !pdl.type
    pdl_interp.check_type %7 is f32 -> ^bb245, ^bb18
  ^bb18:  // 24 preds: ^bb17, ^bb245, ^bb246, ^bb247, ^bb248, ^bb249, ^bb250, ^bb251, ^bb252, ^bb254, ^bb255, ^bb256, ^bb257, ^bb258, ^bb259, ^bb265, ^bb266, ^bb267, ^bb268, ^bb269, ^bb270, ^bb271, ^bb272, ^bb273
    pdl_interp.switch_operation_name of %4 to ["arith.mulf", "arith.constant"](^bb19, ^bb197) -> ^bb1
  ^bb19:  // pred: ^bb18
    pdl_interp.check_operand_count of %4 is 2 -> ^bb20, ^bb1
  ^bb20:  // pred: ^bb19
    pdl_interp.check_result_count of %4 is 1 -> ^bb21, ^bb1
  ^bb21:  // pred: ^bb20
    %8 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %8 : !pdl.value -> ^bb22, ^bb1
  ^bb22:  // pred: ^bb21
    pdl_interp.are_equal %8, %3 : !pdl.value -> ^bb23, ^bb1
  ^bb23:  // pred: ^bb22
    %9 = pdl_interp.get_operand 1 of %2
    %10 = pdl_interp.get_defining_op of %9 : !pdl.value
    pdl_interp.is_not_null %10 : !pdl.operation -> ^bb24, ^bb1
  ^bb24:  // pred: ^bb23
    %11 = pdl_interp.get_defining_op of %6 : !pdl.value
    pdl_interp.is_not_null %11 : !pdl.operation -> ^bb25, ^bb1
  ^bb25:  // pred: ^bb24
    pdl_interp.is_not_null %9 : !pdl.value -> ^bb26, ^bb1
  ^bb26:  // pred: ^bb25
    %12 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %12 : !pdl.value -> ^bb27, ^bb1
  ^bb27:  // pred: ^bb26
    %13 = pdl_interp.get_defining_op of %12 : !pdl.value
    pdl_interp.is_not_null %13 : !pdl.operation -> ^bb28, ^bb1
  ^bb28:  // pred: ^bb27
    %14 = pdl_interp.get_operand 1 of %4
    %15 = pdl_interp.get_defining_op of %14 : !pdl.value
    pdl_interp.is_not_null %15 : !pdl.operation -> ^bb29, ^bb1
  ^bb29:  // pred: ^bb28
    pdl_interp.switch_operation_name of %10 to ["math.cos", "math.sinh", "math.cosh"](^bb30, ^bb101, ^bb134) -> ^bb1
  ^bb30:  // pred: ^bb29
    pdl_interp.check_operand_count of %10 is 1 -> ^bb31, ^bb1
  ^bb31:  // pred: ^bb30
    pdl_interp.check_result_count of %10 is 1 -> ^bb32, ^bb1
  ^bb32:  // pred: ^bb31
    %16 = pdl_interp.get_result 0 of %10
    pdl_interp.is_not_null %16 : !pdl.value -> ^bb33, ^bb1
  ^bb33:  // pred: ^bb32
    pdl_interp.are_equal %16, %9 : !pdl.value -> ^bb34, ^bb1
  ^bb34:  // pred: ^bb33
    pdl_interp.switch_operation_name of %11 to ["math.cos", "math.sin"](^bb35, ^bb72) -> ^bb1
  ^bb35:  // pred: ^bb34
    pdl_interp.check_operand_count of %11 is 1 -> ^bb36, ^bb1
  ^bb36:  // pred: ^bb35
    pdl_interp.check_result_count of %11 is 1 -> ^bb37, ^bb1
  ^bb37:  // pred: ^bb36
    %17 = pdl_interp.get_result 0 of %11
    pdl_interp.is_not_null %17 : !pdl.value -> ^bb38, ^bb1
  ^bb38:  // pred: ^bb37
    pdl_interp.are_equal %17, %6 : !pdl.value -> ^bb39, ^bb1
  ^bb39:  // pred: ^bb38
    pdl_interp.is_not_null %14 : !pdl.value -> ^bb40, ^bb1
  ^bb40:  // pred: ^bb39
    pdl_interp.check_operation_name of %13 is "math.sin" -> ^bb41, ^bb1
  ^bb41:  // pred: ^bb40
    pdl_interp.check_operand_count of %13 is 1 -> ^bb42, ^bb1
  ^bb42:  // pred: ^bb41
    pdl_interp.check_result_count of %13 is 1 -> ^bb43, ^bb1
  ^bb43:  // pred: ^bb42
    %18 = pdl_interp.get_result 0 of %13
    pdl_interp.is_not_null %18 : !pdl.value -> ^bb44, ^bb1
  ^bb44:  // pred: ^bb43
    pdl_interp.are_equal %18, %12 : !pdl.value -> ^bb45, ^bb1
  ^bb45:  // pred: ^bb44
    pdl_interp.check_operation_name of %15 is "math.sin" -> ^bb46, ^bb1
  ^bb46:  // pred: ^bb45
    pdl_interp.check_operand_count of %15 is 1 -> ^bb47, ^bb1
  ^bb47:  // pred: ^bb46
    pdl_interp.check_result_count of %15 is 1 -> ^bb48, ^bb1
  ^bb48:  // pred: ^bb47
    %19 = pdl_interp.get_result 0 of %15
    pdl_interp.is_not_null %19 : !pdl.value -> ^bb49, ^bb1
  ^bb49:  // pred: ^bb48
    pdl_interp.are_equal %19, %14 : !pdl.value -> ^bb50, ^bb1
  ^bb50:  // pred: ^bb49
    %20 = pdl_interp.get_operand 0 of %11
    pdl_interp.is_not_null %20 : !pdl.value -> ^bb51, ^bb1
  ^bb51:  // pred: ^bb50
    %21 = pdl_interp.get_value_type of %20 : !pdl.type
    pdl_interp.check_type %21 is f32 -> ^bb52, ^bb1
  ^bb52:  // pred: ^bb51
    %22 = pdl_interp.get_value_type of %17 : !pdl.type
    pdl_interp.are_equal %21, %22 : !pdl.type -> ^bb53, ^bb1
  ^bb53:  // pred: ^bb52
    %23 = pdl_interp.get_value_type of %5 : !pdl.type
    pdl_interp.are_equal %21, %23 : !pdl.type -> ^bb54, ^bb1
  ^bb54:  // pred: ^bb53
    %24 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %21, %24 : !pdl.type -> ^bb55, ^bb1
  ^bb55:  // pred: ^bb54
    %25 = pdl_interp.get_value_type of %16 : !pdl.type
    pdl_interp.are_equal %21, %25 : !pdl.type -> ^bb65, ^bb56
  ^bb56:  // 8 preds: ^bb55, ^bb65, ^bb66, ^bb67, ^bb68, ^bb69, ^bb70, ^bb71
    %26 = pdl_interp.get_operand 0 of %10
    pdl_interp.is_not_null %26 : !pdl.value -> ^bb57, ^bb1
  ^bb57:  // pred: ^bb56
    %27 = pdl_interp.get_value_type of %16 : !pdl.type
    pdl_interp.are_equal %21, %27 : !pdl.type -> ^bb58, ^bb1
  ^bb58:  // pred: ^bb57
    %28 = pdl_interp.get_value_type of %8 : !pdl.type
    pdl_interp.are_equal %21, %28 : !pdl.type -> ^bb59, ^bb1
  ^bb59:  // pred: ^bb58
    %29 = pdl_interp.get_value_type of %19 : !pdl.type
    pdl_interp.are_equal %21, %29 : !pdl.type -> ^bb60, ^bb1
  ^bb60:  // pred: ^bb59
    %30 = pdl_interp.get_value_type of %18 : !pdl.type
    pdl_interp.are_equal %21, %30 : !pdl.type -> ^bb61, ^bb1
  ^bb61:  // pred: ^bb60
    %31 = pdl_interp.get_operand 0 of %13
    pdl_interp.are_equal %20, %31 : !pdl.value -> ^bb62, ^bb1
  ^bb62:  // pred: ^bb61
    %32 = pdl_interp.get_value_type of %26 : !pdl.type
    pdl_interp.are_equal %21, %32 : !pdl.type -> ^bb63, ^bb1
  ^bb63:  // pred: ^bb62
    %33 = pdl_interp.get_operand 0 of %15
    pdl_interp.are_equal %26, %33 : !pdl.value -> ^bb64, ^bb1
  ^bb64:  // pred: ^bb63
    pdl_interp.record_match @rewriters::@cos_diff_rev(%20, %26, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "math.cos"]), loc([%2, %arg0, %4, %10, %11, %13, %15]), root("arith.addf") -> ^bb1
  ^bb65:  // pred: ^bb55
    %34 = pdl_interp.get_value_type of %8 : !pdl.type
    pdl_interp.are_equal %21, %34 : !pdl.type -> ^bb66, ^bb56
  ^bb66:  // pred: ^bb65
    %35 = pdl_interp.get_value_type of %19 : !pdl.type
    pdl_interp.are_equal %21, %35 : !pdl.type -> ^bb67, ^bb56
  ^bb67:  // pred: ^bb66
    %36 = pdl_interp.get_value_type of %18 : !pdl.type
    pdl_interp.are_equal %21, %36 : !pdl.type -> ^bb68, ^bb56
  ^bb68:  // pred: ^bb67
    %37 = pdl_interp.get_operand 0 of %13
    pdl_interp.are_equal %20, %37 : !pdl.value -> ^bb69, ^bb56
  ^bb69:  // pred: ^bb68
    %38 = pdl_interp.get_operand 0 of %10
    pdl_interp.are_equal %20, %38 : !pdl.value -> ^bb70, ^bb56
  ^bb70:  // pred: ^bb69
    %39 = pdl_interp.get_operand 0 of %15
    pdl_interp.are_equal %20, %39 : !pdl.value -> ^bb71, ^bb56
  ^bb71:  // pred: ^bb70
    pdl_interp.record_match @rewriters::@cos_sin_sum(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%2, %arg0, %4, %10, %11, %13, %15]), root("arith.addf") -> ^bb56
  ^bb72:  // pred: ^bb34
    pdl_interp.check_operand_count of %11 is 1 -> ^bb73, ^bb1
  ^bb73:  // pred: ^bb72
    pdl_interp.check_result_count of %11 is 1 -> ^bb74, ^bb1
  ^bb74:  // pred: ^bb73
    %40 = pdl_interp.get_result 0 of %11
    pdl_interp.is_not_null %40 : !pdl.value -> ^bb75, ^bb1
  ^bb75:  // pred: ^bb74
    pdl_interp.are_equal %40, %6 : !pdl.value -> ^bb76, ^bb1
  ^bb76:  // pred: ^bb75
    pdl_interp.is_not_null %14 : !pdl.value -> ^bb77, ^bb1
  ^bb77:  // pred: ^bb76
    pdl_interp.check_operation_name of %13 is "math.cos" -> ^bb78, ^bb1
  ^bb78:  // pred: ^bb77
    pdl_interp.check_operand_count of %13 is 1 -> ^bb79, ^bb1
  ^bb79:  // pred: ^bb78
    pdl_interp.check_result_count of %13 is 1 -> ^bb80, ^bb1
  ^bb80:  // pred: ^bb79
    %41 = pdl_interp.get_result 0 of %13
    pdl_interp.is_not_null %41 : !pdl.value -> ^bb81, ^bb1
  ^bb81:  // pred: ^bb80
    pdl_interp.are_equal %41, %12 : !pdl.value -> ^bb82, ^bb1
  ^bb82:  // pred: ^bb81
    pdl_interp.check_operation_name of %15 is "math.sin" -> ^bb83, ^bb1
  ^bb83:  // pred: ^bb82
    pdl_interp.check_operand_count of %15 is 1 -> ^bb84, ^bb1
  ^bb84:  // pred: ^bb83
    pdl_interp.check_result_count of %15 is 1 -> ^bb85, ^bb1
  ^bb85:  // pred: ^bb84
    %42 = pdl_interp.get_result 0 of %15
    pdl_interp.is_not_null %42 : !pdl.value -> ^bb86, ^bb1
  ^bb86:  // pred: ^bb85
    pdl_interp.are_equal %42, %14 : !pdl.value -> ^bb87, ^bb1
  ^bb87:  // pred: ^bb86
    %43 = pdl_interp.get_operand 0 of %11
    pdl_interp.is_not_null %43 : !pdl.value -> ^bb88, ^bb1
  ^bb88:  // pred: ^bb87
    %44 = pdl_interp.get_value_type of %43 : !pdl.type
    pdl_interp.check_type %44 is f32 -> ^bb89, ^bb1
  ^bb89:  // pred: ^bb88
    %45 = pdl_interp.get_value_type of %40 : !pdl.type
    pdl_interp.are_equal %44, %45 : !pdl.type -> ^bb90, ^bb1
  ^bb90:  // pred: ^bb89
    %46 = pdl_interp.get_value_type of %5 : !pdl.type
    pdl_interp.are_equal %44, %46 : !pdl.type -> ^bb91, ^bb1
  ^bb91:  // pred: ^bb90
    %47 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %44, %47 : !pdl.type -> ^bb92, ^bb1
  ^bb92:  // pred: ^bb91
    %48 = pdl_interp.get_operand 0 of %10
    pdl_interp.is_not_null %48 : !pdl.value -> ^bb93, ^bb1
  ^bb93:  // pred: ^bb92
    %49 = pdl_interp.get_value_type of %16 : !pdl.type
    pdl_interp.are_equal %44, %49 : !pdl.type -> ^bb94, ^bb1
  ^bb94:  // pred: ^bb93
    %50 = pdl_interp.get_value_type of %8 : !pdl.type
    pdl_interp.are_equal %44, %50 : !pdl.type -> ^bb95, ^bb1
  ^bb95:  // pred: ^bb94
    %51 = pdl_interp.get_value_type of %42 : !pdl.type
    pdl_interp.are_equal %44, %51 : !pdl.type -> ^bb96, ^bb1
  ^bb96:  // pred: ^bb95
    %52 = pdl_interp.get_value_type of %41 : !pdl.type
    pdl_interp.are_equal %44, %52 : !pdl.type -> ^bb97, ^bb1
  ^bb97:  // pred: ^bb96
    %53 = pdl_interp.get_operand 0 of %13
    pdl_interp.are_equal %43, %53 : !pdl.value -> ^bb98, ^bb1
  ^bb98:  // pred: ^bb97
    %54 = pdl_interp.get_value_type of %48 : !pdl.type
    pdl_interp.are_equal %44, %54 : !pdl.type -> ^bb99, ^bb1
  ^bb99:  // pred: ^bb98
    %55 = pdl_interp.get_operand 0 of %15
    pdl_interp.are_equal %48, %55 : !pdl.value -> ^bb100, ^bb1
  ^bb100:  // pred: ^bb99
    pdl_interp.record_match @rewriters::@sin_sum_rev(%43, %48, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "math.sin"]), loc([%2, %arg0, %4, %10, %11, %13, %15]), root("arith.addf") -> ^bb1
  ^bb101:  // pred: ^bb29
    pdl_interp.check_operand_count of %10 is 1 -> ^bb102, ^bb1
  ^bb102:  // pred: ^bb101
    pdl_interp.check_result_count of %10 is 1 -> ^bb103, ^bb1
  ^bb103:  // pred: ^bb102
    %56 = pdl_interp.get_result 0 of %10
    pdl_interp.is_not_null %56 : !pdl.value -> ^bb104, ^bb1
  ^bb104:  // pred: ^bb103
    pdl_interp.are_equal %56, %9 : !pdl.value -> ^bb105, ^bb1
  ^bb105:  // pred: ^bb104
    pdl_interp.check_operation_name of %11 is "math.sinh" -> ^bb106, ^bb1
  ^bb106:  // pred: ^bb105
    pdl_interp.check_operand_count of %11 is 1 -> ^bb107, ^bb1
  ^bb107:  // pred: ^bb106
    pdl_interp.check_result_count of %11 is 1 -> ^bb108, ^bb1
  ^bb108:  // pred: ^bb107
    %57 = pdl_interp.get_result 0 of %11
    pdl_interp.is_not_null %57 : !pdl.value -> ^bb109, ^bb1
  ^bb109:  // pred: ^bb108
    pdl_interp.are_equal %57, %6 : !pdl.value -> ^bb110, ^bb1
  ^bb110:  // pred: ^bb109
    pdl_interp.is_not_null %14 : !pdl.value -> ^bb111, ^bb1
  ^bb111:  // pred: ^bb110
    pdl_interp.check_operation_name of %13 is "math.cosh" -> ^bb112, ^bb1
  ^bb112:  // pred: ^bb111
    pdl_interp.check_operand_count of %13 is 1 -> ^bb113, ^bb1
  ^bb113:  // pred: ^bb112
    pdl_interp.check_result_count of %13 is 1 -> ^bb114, ^bb1
  ^bb114:  // pred: ^bb113
    %58 = pdl_interp.get_result 0 of %13
    pdl_interp.is_not_null %58 : !pdl.value -> ^bb115, ^bb1
  ^bb115:  // pred: ^bb114
    pdl_interp.are_equal %58, %12 : !pdl.value -> ^bb116, ^bb1
  ^bb116:  // pred: ^bb115
    pdl_interp.check_operation_name of %15 is "math.cosh" -> ^bb117, ^bb1
  ^bb117:  // pred: ^bb116
    pdl_interp.check_operand_count of %15 is 1 -> ^bb118, ^bb1
  ^bb118:  // pred: ^bb117
    pdl_interp.check_result_count of %15 is 1 -> ^bb119, ^bb1
  ^bb119:  // pred: ^bb118
    %59 = pdl_interp.get_result 0 of %15
    pdl_interp.is_not_null %59 : !pdl.value -> ^bb120, ^bb1
  ^bb120:  // pred: ^bb119
    pdl_interp.are_equal %59, %14 : !pdl.value -> ^bb121, ^bb1
  ^bb121:  // pred: ^bb120
    %60 = pdl_interp.get_operand 0 of %11
    pdl_interp.is_not_null %60 : !pdl.value -> ^bb122, ^bb1
  ^bb122:  // pred: ^bb121
    %61 = pdl_interp.get_value_type of %60 : !pdl.type
    pdl_interp.check_type %61 is f32 -> ^bb123, ^bb1
  ^bb123:  // pred: ^bb122
    %62 = pdl_interp.get_value_type of %57 : !pdl.type
    pdl_interp.are_equal %61, %62 : !pdl.type -> ^bb124, ^bb1
  ^bb124:  // pred: ^bb123
    %63 = pdl_interp.get_value_type of %5 : !pdl.type
    pdl_interp.are_equal %61, %63 : !pdl.type -> ^bb125, ^bb1
  ^bb125:  // pred: ^bb124
    %64 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %61, %64 : !pdl.type -> ^bb126, ^bb1
  ^bb126:  // pred: ^bb125
    %65 = pdl_interp.get_value_type of %56 : !pdl.type
    pdl_interp.are_equal %61, %65 : !pdl.type -> ^bb127, ^bb1
  ^bb127:  // pred: ^bb126
    %66 = pdl_interp.get_value_type of %8 : !pdl.type
    pdl_interp.are_equal %61, %66 : !pdl.type -> ^bb128, ^bb1
  ^bb128:  // pred: ^bb127
    %67 = pdl_interp.get_value_type of %59 : !pdl.type
    pdl_interp.are_equal %61, %67 : !pdl.type -> ^bb129, ^bb1
  ^bb129:  // pred: ^bb128
    %68 = pdl_interp.get_value_type of %58 : !pdl.type
    pdl_interp.are_equal %61, %68 : !pdl.type -> ^bb130, ^bb1
  ^bb130:  // pred: ^bb129
    %69 = pdl_interp.get_operand 0 of %13
    pdl_interp.are_equal %60, %69 : !pdl.value -> ^bb131, ^bb1
  ^bb131:  // pred: ^bb130
    %70 = pdl_interp.get_operand 0 of %10
    pdl_interp.are_equal %60, %70 : !pdl.value -> ^bb132, ^bb1
  ^bb132:  // pred: ^bb131
    %71 = pdl_interp.get_operand 0 of %15
    pdl_interp.are_equal %60, %71 : !pdl.value -> ^bb133, ^bb1
  ^bb133:  // pred: ^bb132
    pdl_interp.record_match @rewriters::@cosh_2_rev(%60, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.cosh"]), loc([%2, %arg0, %4, %10, %11, %13, %15]), root("arith.addf") -> ^bb1
  ^bb134:  // pred: ^bb29
    pdl_interp.check_operand_count of %10 is 1 -> ^bb135, ^bb1
  ^bb135:  // pred: ^bb134
    pdl_interp.check_result_count of %10 is 1 -> ^bb136, ^bb1
  ^bb136:  // pred: ^bb135
    %72 = pdl_interp.get_result 0 of %10
    pdl_interp.is_not_null %72 : !pdl.value -> ^bb137, ^bb1
  ^bb137:  // pred: ^bb136
    pdl_interp.are_equal %72, %9 : !pdl.value -> ^bb138, ^bb1
  ^bb138:  // pred: ^bb137
    pdl_interp.switch_operation_name of %11 to ["math.sinh", "math.cosh"](^bb139, ^bb168) -> ^bb1
  ^bb139:  // pred: ^bb138
    pdl_interp.check_operand_count of %11 is 1 -> ^bb140, ^bb1
  ^bb140:  // pred: ^bb139
    pdl_interp.check_result_count of %11 is 1 -> ^bb141, ^bb1
  ^bb141:  // pred: ^bb140
    %73 = pdl_interp.get_result 0 of %11
    pdl_interp.is_not_null %73 : !pdl.value -> ^bb142, ^bb1
  ^bb142:  // pred: ^bb141
    pdl_interp.are_equal %73, %6 : !pdl.value -> ^bb143, ^bb1
  ^bb143:  // pred: ^bb142
    pdl_interp.is_not_null %14 : !pdl.value -> ^bb144, ^bb1
  ^bb144:  // pred: ^bb143
    pdl_interp.check_operation_name of %13 is "math.cosh" -> ^bb145, ^bb1
  ^bb145:  // pred: ^bb144
    pdl_interp.check_operand_count of %13 is 1 -> ^bb146, ^bb1
  ^bb146:  // pred: ^bb145
    pdl_interp.check_result_count of %13 is 1 -> ^bb147, ^bb1
  ^bb147:  // pred: ^bb146
    %74 = pdl_interp.get_result 0 of %13
    pdl_interp.is_not_null %74 : !pdl.value -> ^bb148, ^bb1
  ^bb148:  // pred: ^bb147
    pdl_interp.are_equal %74, %12 : !pdl.value -> ^bb149, ^bb1
  ^bb149:  // pred: ^bb148
    pdl_interp.check_operation_name of %15 is "math.sinh" -> ^bb150, ^bb1
  ^bb150:  // pred: ^bb149
    pdl_interp.check_operand_count of %15 is 1 -> ^bb151, ^bb1
  ^bb151:  // pred: ^bb150
    pdl_interp.check_result_count of %15 is 1 -> ^bb152, ^bb1
  ^bb152:  // pred: ^bb151
    %75 = pdl_interp.get_result 0 of %15
    pdl_interp.is_not_null %75 : !pdl.value -> ^bb153, ^bb1
  ^bb153:  // pred: ^bb152
    pdl_interp.are_equal %75, %14 : !pdl.value -> ^bb154, ^bb1
  ^bb154:  // pred: ^bb153
    %76 = pdl_interp.get_operand 0 of %11
    pdl_interp.is_not_null %76 : !pdl.value -> ^bb155, ^bb1
  ^bb155:  // pred: ^bb154
    %77 = pdl_interp.get_value_type of %76 : !pdl.type
    pdl_interp.check_type %77 is f32 -> ^bb156, ^bb1
  ^bb156:  // pred: ^bb155
    %78 = pdl_interp.get_value_type of %73 : !pdl.type
    pdl_interp.are_equal %77, %78 : !pdl.type -> ^bb157, ^bb1
  ^bb157:  // pred: ^bb156
    %79 = pdl_interp.get_value_type of %5 : !pdl.type
    pdl_interp.are_equal %77, %79 : !pdl.type -> ^bb158, ^bb1
  ^bb158:  // pred: ^bb157
    %80 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %77, %80 : !pdl.type -> ^bb159, ^bb1
  ^bb159:  // pred: ^bb158
    %81 = pdl_interp.get_operand 0 of %10
    pdl_interp.is_not_null %81 : !pdl.value -> ^bb160, ^bb1
  ^bb160:  // pred: ^bb159
    %82 = pdl_interp.get_value_type of %72 : !pdl.type
    pdl_interp.are_equal %77, %82 : !pdl.type -> ^bb161, ^bb1
  ^bb161:  // pred: ^bb160
    %83 = pdl_interp.get_value_type of %8 : !pdl.type
    pdl_interp.are_equal %77, %83 : !pdl.type -> ^bb162, ^bb1
  ^bb162:  // pred: ^bb161
    %84 = pdl_interp.get_value_type of %75 : !pdl.type
    pdl_interp.are_equal %77, %84 : !pdl.type -> ^bb163, ^bb1
  ^bb163:  // pred: ^bb162
    %85 = pdl_interp.get_value_type of %74 : !pdl.type
    pdl_interp.are_equal %77, %85 : !pdl.type -> ^bb164, ^bb1
  ^bb164:  // pred: ^bb163
    %86 = pdl_interp.get_operand 0 of %13
    pdl_interp.are_equal %76, %86 : !pdl.value -> ^bb165, ^bb1
  ^bb165:  // pred: ^bb164
    %87 = pdl_interp.get_value_type of %81 : !pdl.type
    pdl_interp.are_equal %77, %87 : !pdl.type -> ^bb166, ^bb1
  ^bb166:  // pred: ^bb165
    %88 = pdl_interp.get_operand 0 of %15
    pdl_interp.are_equal %81, %88 : !pdl.value -> ^bb167, ^bb1
  ^bb167:  // pred: ^bb166
    pdl_interp.record_match @rewriters::@sinh_sum_rev(%76, %81, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "math.sinh"]), loc([%2, %arg0, %4, %10, %11, %13, %15]), root("arith.addf") -> ^bb1
  ^bb168:  // pred: ^bb138
    pdl_interp.check_operand_count of %11 is 1 -> ^bb169, ^bb1
  ^bb169:  // pred: ^bb168
    pdl_interp.check_result_count of %11 is 1 -> ^bb170, ^bb1
  ^bb170:  // pred: ^bb169
    %89 = pdl_interp.get_result 0 of %11
    pdl_interp.is_not_null %89 : !pdl.value -> ^bb171, ^bb1
  ^bb171:  // pred: ^bb170
    pdl_interp.are_equal %89, %6 : !pdl.value -> ^bb172, ^bb1
  ^bb172:  // pred: ^bb171
    pdl_interp.is_not_null %14 : !pdl.value -> ^bb173, ^bb1
  ^bb173:  // pred: ^bb172
    pdl_interp.check_operation_name of %13 is "math.sinh" -> ^bb174, ^bb1
  ^bb174:  // pred: ^bb173
    pdl_interp.check_operand_count of %13 is 1 -> ^bb175, ^bb1
  ^bb175:  // pred: ^bb174
    pdl_interp.check_result_count of %13 is 1 -> ^bb176, ^bb1
  ^bb176:  // pred: ^bb175
    %90 = pdl_interp.get_result 0 of %13
    pdl_interp.is_not_null %90 : !pdl.value -> ^bb177, ^bb1
  ^bb177:  // pred: ^bb176
    pdl_interp.are_equal %90, %12 : !pdl.value -> ^bb178, ^bb1
  ^bb178:  // pred: ^bb177
    pdl_interp.check_operation_name of %15 is "math.sinh" -> ^bb179, ^bb1
  ^bb179:  // pred: ^bb178
    pdl_interp.check_operand_count of %15 is 1 -> ^bb180, ^bb1
  ^bb180:  // pred: ^bb179
    pdl_interp.check_result_count of %15 is 1 -> ^bb181, ^bb1
  ^bb181:  // pred: ^bb180
    %91 = pdl_interp.get_result 0 of %15
    pdl_interp.is_not_null %91 : !pdl.value -> ^bb182, ^bb1
  ^bb182:  // pred: ^bb181
    pdl_interp.are_equal %91, %14 : !pdl.value -> ^bb183, ^bb1
  ^bb183:  // pred: ^bb182
    %92 = pdl_interp.get_operand 0 of %11
    pdl_interp.is_not_null %92 : !pdl.value -> ^bb184, ^bb1
  ^bb184:  // pred: ^bb183
    %93 = pdl_interp.get_value_type of %92 : !pdl.type
    pdl_interp.check_type %93 is f32 -> ^bb185, ^bb1
  ^bb185:  // pred: ^bb184
    %94 = pdl_interp.get_value_type of %89 : !pdl.type
    pdl_interp.are_equal %93, %94 : !pdl.type -> ^bb186, ^bb1
  ^bb186:  // pred: ^bb185
    %95 = pdl_interp.get_value_type of %5 : !pdl.type
    pdl_interp.are_equal %93, %95 : !pdl.type -> ^bb187, ^bb1
  ^bb187:  // pred: ^bb186
    %96 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %93, %96 : !pdl.type -> ^bb188, ^bb1
  ^bb188:  // pred: ^bb187
    %97 = pdl_interp.get_operand 0 of %10
    pdl_interp.is_not_null %97 : !pdl.value -> ^bb189, ^bb1
  ^bb189:  // pred: ^bb188
    %98 = pdl_interp.get_value_type of %72 : !pdl.type
    pdl_interp.are_equal %93, %98 : !pdl.type -> ^bb190, ^bb1
  ^bb190:  // pred: ^bb189
    %99 = pdl_interp.get_value_type of %8 : !pdl.type
    pdl_interp.are_equal %93, %99 : !pdl.type -> ^bb191, ^bb1
  ^bb191:  // pred: ^bb190
    %100 = pdl_interp.get_value_type of %91 : !pdl.type
    pdl_interp.are_equal %93, %100 : !pdl.type -> ^bb192, ^bb1
  ^bb192:  // pred: ^bb191
    %101 = pdl_interp.get_value_type of %90 : !pdl.type
    pdl_interp.are_equal %93, %101 : !pdl.type -> ^bb193, ^bb1
  ^bb193:  // pred: ^bb192
    %102 = pdl_interp.get_operand 0 of %13
    pdl_interp.are_equal %92, %102 : !pdl.value -> ^bb194, ^bb1
  ^bb194:  // pred: ^bb193
    %103 = pdl_interp.get_value_type of %97 : !pdl.type
    pdl_interp.are_equal %93, %103 : !pdl.type -> ^bb195, ^bb1
  ^bb195:  // pred: ^bb194
    %104 = pdl_interp.get_operand 0 of %15
    pdl_interp.are_equal %97, %104 : !pdl.value -> ^bb196, ^bb1
  ^bb196:  // pred: ^bb195
    pdl_interp.record_match @rewriters::@cosh_sum_rev(%92, %97, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "math.cosh"]), loc([%2, %arg0, %4, %10, %11, %13, %15]), root("arith.addf") -> ^bb1
  ^bb197:  // pred: ^bb18
    pdl_interp.check_operand_count of %4 is 0 -> ^bb198, ^bb1
  ^bb198:  // pred: ^bb197
    pdl_interp.check_result_count of %4 is 1 -> ^bb199, ^bb1
  ^bb199:  // pred: ^bb198
    %105 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %105 : !pdl.value -> ^bb200, ^bb1
  ^bb200:  // pred: ^bb199
    pdl_interp.are_equal %105, %3 : !pdl.value -> ^bb201, ^bb1
  ^bb201:  // pred: ^bb200
    %106 = pdl_interp.get_operand 1 of %2
    %107 = pdl_interp.get_defining_op of %106 : !pdl.value
    pdl_interp.is_not_null %107 : !pdl.operation -> ^bb202, ^bb1
  ^bb202:  // pred: ^bb201
    %108 = pdl_interp.get_defining_op of %6 : !pdl.value
    pdl_interp.is_not_null %108 : !pdl.operation -> ^bb203, ^bb1
  ^bb203:  // pred: ^bb202
    pdl_interp.is_not_null %106 : !pdl.value -> ^bb204, ^bb1
  ^bb204:  // pred: ^bb203
    pdl_interp.switch_operation_name of %107 to ["math.cos", "math.sin"](^bb205, ^bb225) -> ^bb1
  ^bb205:  // pred: ^bb204
    pdl_interp.check_operand_count of %107 is 1 -> ^bb206, ^bb1
  ^bb206:  // pred: ^bb205
    pdl_interp.check_result_count of %107 is 1 -> ^bb207, ^bb1
  ^bb207:  // pred: ^bb206
    %109 = pdl_interp.get_result 0 of %107
    pdl_interp.is_not_null %109 : !pdl.value -> ^bb208, ^bb1
  ^bb208:  // pred: ^bb207
    pdl_interp.are_equal %109, %106 : !pdl.value -> ^bb209, ^bb1
  ^bb209:  // pred: ^bb208
    pdl_interp.check_operation_name of %108 is "math.cos" -> ^bb210, ^bb1
  ^bb210:  // pred: ^bb209
    pdl_interp.check_operand_count of %108 is 1 -> ^bb211, ^bb1
  ^bb211:  // pred: ^bb210
    pdl_interp.check_result_count of %108 is 1 -> ^bb212, ^bb1
  ^bb212:  // pred: ^bb211
    %110 = pdl_interp.get_result 0 of %108
    pdl_interp.is_not_null %110 : !pdl.value -> ^bb213, ^bb1
  ^bb213:  // pred: ^bb212
    pdl_interp.are_equal %110, %6 : !pdl.value -> ^bb214, ^bb1
  ^bb214:  // pred: ^bb213
    %111 = pdl_interp.get_operand 0 of %108
    pdl_interp.is_not_null %111 : !pdl.value -> ^bb215, ^bb1
  ^bb215:  // pred: ^bb214
    %112 = pdl_interp.get_value_type of %111 : !pdl.type
    pdl_interp.check_type %112 is f32 -> ^bb216, ^bb1
  ^bb216:  // pred: ^bb215
    %113 = pdl_interp.get_value_type of %110 : !pdl.type
    pdl_interp.are_equal %112, %113 : !pdl.type -> ^bb217, ^bb1
  ^bb217:  // pred: ^bb216
    %114 = pdl_interp.get_value_type of %5 : !pdl.type
    pdl_interp.are_equal %112, %114 : !pdl.type -> ^bb218, ^bb1
  ^bb218:  // pred: ^bb217
    %115 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %112, %115 : !pdl.type -> ^bb219, ^bb1
  ^bb219:  // pred: ^bb218
    %116 = pdl_interp.get_value_type of %109 : !pdl.type
    pdl_interp.are_equal %112, %116 : !pdl.type -> ^bb220, ^bb1
  ^bb220:  // pred: ^bb219
    %117 = pdl_interp.get_attribute "value" of %4
    pdl_interp.is_not_null %117 : !pdl.attribute -> ^bb221, ^bb1
  ^bb221:  // pred: ^bb220
    pdl_interp.check_attribute %117 is -1.000000e+00 : f32 -> ^bb222, ^bb1
  ^bb222:  // pred: ^bb221
    %118 = pdl_interp.get_value_type of %105 : !pdl.type
    pdl_interp.are_equal %112, %118 : !pdl.type -> ^bb223, ^bb1
  ^bb223:  // pred: ^bb222
    %119 = pdl_interp.get_operand 0 of %107
    pdl_interp.are_equal %111, %119 : !pdl.value -> ^bb224, ^bb1
  ^bb224:  // pred: ^bb223
    pdl_interp.record_match @rewriters::@_1_add_cos(%111, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.mulf", "arith.negf"]), loc([%2, %arg0, %4, %107, %108]), root("arith.addf") -> ^bb1
  ^bb225:  // pred: ^bb204
    pdl_interp.check_operand_count of %107 is 1 -> ^bb226, ^bb1
  ^bb226:  // pred: ^bb225
    pdl_interp.check_result_count of %107 is 1 -> ^bb227, ^bb1
  ^bb227:  // pred: ^bb226
    %120 = pdl_interp.get_result 0 of %107
    pdl_interp.is_not_null %120 : !pdl.value -> ^bb228, ^bb1
  ^bb228:  // pred: ^bb227
    pdl_interp.are_equal %120, %106 : !pdl.value -> ^bb229, ^bb1
  ^bb229:  // pred: ^bb228
    pdl_interp.check_operation_name of %108 is "math.sin" -> ^bb230, ^bb1
  ^bb230:  // pred: ^bb229
    pdl_interp.check_operand_count of %108 is 1 -> ^bb231, ^bb1
  ^bb231:  // pred: ^bb230
    pdl_interp.check_result_count of %108 is 1 -> ^bb232, ^bb1
  ^bb232:  // pred: ^bb231
    %121 = pdl_interp.get_result 0 of %108
    pdl_interp.is_not_null %121 : !pdl.value -> ^bb233, ^bb1
  ^bb233:  // pred: ^bb232
    pdl_interp.are_equal %121, %6 : !pdl.value -> ^bb234, ^bb1
  ^bb234:  // pred: ^bb233
    %122 = pdl_interp.get_operand 0 of %108
    pdl_interp.is_not_null %122 : !pdl.value -> ^bb235, ^bb1
  ^bb235:  // pred: ^bb234
    %123 = pdl_interp.get_value_type of %122 : !pdl.type
    pdl_interp.check_type %123 is f32 -> ^bb236, ^bb1
  ^bb236:  // pred: ^bb235
    %124 = pdl_interp.get_value_type of %121 : !pdl.type
    pdl_interp.are_equal %123, %124 : !pdl.type -> ^bb237, ^bb1
  ^bb237:  // pred: ^bb236
    %125 = pdl_interp.get_value_type of %5 : !pdl.type
    pdl_interp.are_equal %123, %125 : !pdl.type -> ^bb238, ^bb1
  ^bb238:  // pred: ^bb237
    %126 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %123, %126 : !pdl.type -> ^bb239, ^bb1
  ^bb239:  // pred: ^bb238
    %127 = pdl_interp.get_value_type of %120 : !pdl.type
    pdl_interp.are_equal %123, %127 : !pdl.type -> ^bb240, ^bb1
  ^bb240:  // pred: ^bb239
    %128 = pdl_interp.get_attribute "value" of %4
    pdl_interp.is_not_null %128 : !pdl.attribute -> ^bb241, ^bb1
  ^bb241:  // pred: ^bb240
    pdl_interp.check_attribute %128 is -1.000000e+00 : f32 -> ^bb242, ^bb1
  ^bb242:  // pred: ^bb241
    %129 = pdl_interp.get_value_type of %105 : !pdl.type
    pdl_interp.are_equal %123, %129 : !pdl.type -> ^bb243, ^bb1
  ^bb243:  // pred: ^bb242
    %130 = pdl_interp.get_operand 0 of %107
    pdl_interp.are_equal %122, %130 : !pdl.value -> ^bb244, ^bb1
  ^bb244:  // pred: ^bb243
    pdl_interp.record_match @rewriters::@_1_add_sin(%122, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.mulf", "arith.negf"]), loc([%2, %arg0, %4, %107, %108]), root("arith.addf") -> ^bb1
  ^bb245:  // pred: ^bb17
    %131 = pdl_interp.get_value_type of %5 : !pdl.type
    pdl_interp.are_equal %7, %131 : !pdl.type -> ^bb246, ^bb18
  ^bb246:  // pred: ^bb245
    %132 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %7, %132 : !pdl.type -> ^bb247, ^bb18
  ^bb247:  // pred: ^bb246
    pdl_interp.switch_operation_name of %4 to ["arith.mulf", "arith.constant"](^bb248, ^bb265) -> ^bb18
  ^bb248:  // pred: ^bb247
    pdl_interp.check_operand_count of %4 is 2 -> ^bb249, ^bb18
  ^bb249:  // pred: ^bb248
    pdl_interp.check_result_count of %4 is 1 -> ^bb250, ^bb18
  ^bb250:  // pred: ^bb249
    %133 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %133 : !pdl.value -> ^bb251, ^bb18
  ^bb251:  // pred: ^bb250
    pdl_interp.are_equal %133, %3 : !pdl.value -> ^bb252, ^bb18
  ^bb252:  // pred: ^bb251
    %134 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %134 : !pdl.value -> ^bb253, ^bb18
  ^bb253:  // pred: ^bb252
    %135 = pdl_interp.get_operand 1 of %4
    pdl_interp.is_not_null %135 : !pdl.value -> ^bb260, ^bb254
  ^bb254:  // 6 preds: ^bb253, ^bb260, ^bb261, ^bb262, ^bb263, ^bb264
    %136 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %136 : !pdl.value -> ^bb255, ^bb18
  ^bb255:  // pred: ^bb254
    %137 = pdl_interp.get_value_type of %133 : !pdl.type
    pdl_interp.are_equal %7, %137 : !pdl.type -> ^bb256, ^bb18
  ^bb256:  // pred: ^bb255
    %138 = pdl_interp.get_value_type of %134 : !pdl.type
    pdl_interp.are_equal %7, %138 : !pdl.type -> ^bb257, ^bb18
  ^bb257:  // pred: ^bb256
    %139 = pdl_interp.get_value_type of %136 : !pdl.type
    pdl_interp.are_equal %7, %139 : !pdl.type -> ^bb258, ^bb18
  ^bb258:  // pred: ^bb257
    %140 = pdl_interp.get_operand 1 of %4
    pdl_interp.are_equal %134, %140 : !pdl.value -> ^bb259, ^bb18
  ^bb259:  // pred: ^bb258
    pdl_interp.record_match @rewriters::@distribute_rgt_out(%6, %136, %134, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.mulf"]), loc([%2, %arg0, %4]), root("arith.addf") -> ^bb18
  ^bb260:  // pred: ^bb253
    %141 = pdl_interp.get_value_type of %133 : !pdl.type
    pdl_interp.are_equal %7, %141 : !pdl.type -> ^bb261, ^bb254
  ^bb261:  // pred: ^bb260
    %142 = pdl_interp.get_value_type of %134 : !pdl.type
    pdl_interp.are_equal %7, %142 : !pdl.type -> ^bb262, ^bb254
  ^bb262:  // pred: ^bb261
    %143 = pdl_interp.get_operand 0 of %4
    pdl_interp.are_equal %6, %143 : !pdl.value -> ^bb263, ^bb254
  ^bb263:  // pred: ^bb262
    %144 = pdl_interp.get_value_type of %135 : !pdl.type
    pdl_interp.are_equal %7, %144 : !pdl.type -> ^bb264, ^bb254
  ^bb264:  // pred: ^bb263
    pdl_interp.record_match @rewriters::@distribute_lft_out(%134, %135, %6, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.mulf"]), loc([%2, %arg0, %4]), root("arith.addf") -> ^bb254
  ^bb265:  // pred: ^bb247
    pdl_interp.check_operand_count of %4 is 0 -> ^bb266, ^bb18
  ^bb266:  // pred: ^bb265
    pdl_interp.check_result_count of %4 is 1 -> ^bb267, ^bb18
  ^bb267:  // pred: ^bb266
    %145 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %145 : !pdl.value -> ^bb268, ^bb18
  ^bb268:  // pred: ^bb267
    pdl_interp.are_equal %145, %3 : !pdl.value -> ^bb269, ^bb18
  ^bb269:  // pred: ^bb268
    %146 = pdl_interp.get_value_type of %145 : !pdl.type
    pdl_interp.are_equal %7, %146 : !pdl.type -> ^bb270, ^bb18
  ^bb270:  // pred: ^bb269
    %147 = pdl_interp.get_attribute "value" of %4
    pdl_interp.is_not_null %147 : !pdl.attribute -> ^bb271, ^bb18
  ^bb271:  // pred: ^bb270
    pdl_interp.check_attribute %147 is -1.000000e+00 : f32 -> ^bb272, ^bb18
  ^bb272:  // pred: ^bb271
    %148 = pdl_interp.get_operand 1 of %2
    pdl_interp.are_equal %6, %148 : !pdl.value -> ^bb273, ^bb18
  ^bb273:  // pred: ^bb272
    pdl_interp.record_match @rewriters::@difference_of_sqrsub_1(%6, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.constant", "arith.subf", "arith.mulf"]), loc([%2, %arg0, %4]), root("arith.addf") -> ^bb18
  ^bb274:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 1 -> ^bb275, ^bb1
  ^bb275:  // pred: ^bb274
    pdl_interp.check_result_count of %2 is 1 -> ^bb276, ^bb1
  ^bb276:  // pred: ^bb275
    %149 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %149 : !pdl.value -> ^bb277, ^bb1
  ^bb277:  // pred: ^bb276
    pdl_interp.are_equal %149, %1 : !pdl.value -> ^bb278, ^bb1
  ^bb278:  // pred: ^bb277
    %150 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %150 : !pdl.value -> ^bb279, ^bb1
  ^bb279:  // pred: ^bb278
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb280, ^bb1
  ^bb280:  // pred: ^bb279
    %151 = pdl_interp.get_value_type of %150 : !pdl.type
    pdl_interp.check_type %151 is f32 -> ^bb281, ^bb1
  ^bb281:  // pred: ^bb280
    %152 = pdl_interp.get_value_type of %149 : !pdl.type
    pdl_interp.are_equal %151, %152 : !pdl.type -> ^bb282, ^bb1
  ^bb282:  // pred: ^bb281
    %153 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %151, %153 : !pdl.type -> ^bb283, ^bb1
  ^bb283:  // pred: ^bb282
    pdl_interp.check_operation_name of %4 is "arith.negf" -> ^bb284, ^bb1
  ^bb284:  // pred: ^bb283
    pdl_interp.check_operand_count of %4 is 1 -> ^bb285, ^bb1
  ^bb285:  // pred: ^bb284
    pdl_interp.check_result_count of %4 is 1 -> ^bb286, ^bb1
  ^bb286:  // pred: ^bb285
    %154 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %154 : !pdl.value -> ^bb287, ^bb1
  ^bb287:  // pred: ^bb286
    pdl_interp.are_equal %154, %3 : !pdl.value -> ^bb288, ^bb1
  ^bb288:  // pred: ^bb287
    %155 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %155 : !pdl.value -> ^bb289, ^bb1
  ^bb289:  // pred: ^bb288
    %156 = pdl_interp.get_value_type of %154 : !pdl.type
    pdl_interp.are_equal %151, %156 : !pdl.type -> ^bb290, ^bb1
  ^bb290:  // pred: ^bb289
    %157 = pdl_interp.get_value_type of %155 : !pdl.type
    pdl_interp.are_equal %151, %157 : !pdl.type -> ^bb291, ^bb1
  ^bb291:  // pred: ^bb290
    pdl_interp.record_match @rewriters::@distribute_neg_out(%150, %155, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.negf"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb1
  ^bb292:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 2 -> ^bb293, ^bb1
  ^bb293:  // pred: ^bb292
    pdl_interp.check_result_count of %2 is 1 -> ^bb294, ^bb1
  ^bb294:  // pred: ^bb293
    %158 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %158 : !pdl.value -> ^bb295, ^bb1
  ^bb295:  // pred: ^bb294
    pdl_interp.are_equal %158, %1 : !pdl.value -> ^bb296, ^bb1
  ^bb296:  // pred: ^bb295
    %159 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %159 : !pdl.value -> ^bb297, ^bb1
  ^bb297:  // pred: ^bb296
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb298, ^bb1
  ^bb298:  // pred: ^bb297
    pdl_interp.check_operation_name of %4 is "math.powf" -> ^bb299, ^bb1
  ^bb299:  // pred: ^bb298
    pdl_interp.check_operand_count of %4 is 2 -> ^bb300, ^bb1
  ^bb300:  // pred: ^bb299
    pdl_interp.check_result_count of %4 is 1 -> ^bb301, ^bb1
  ^bb301:  // pred: ^bb300
    %160 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %160 : !pdl.value -> ^bb302, ^bb1
  ^bb302:  // pred: ^bb301
    pdl_interp.are_equal %160, %3 : !pdl.value -> ^bb303, ^bb1
  ^bb303:  // pred: ^bb302
    %161 = pdl_interp.get_operand 1 of %2
    %162 = pdl_interp.get_defining_op of %161 : !pdl.value
    pdl_interp.is_not_null %162 : !pdl.operation -> ^bb304, ^bb1
  ^bb304:  // pred: ^bb303
    %163 = pdl_interp.get_defining_op of %159 : !pdl.value
    pdl_interp.is_not_null %163 : !pdl.operation -> ^bb305, ^bb1
  ^bb305:  // pred: ^bb304
    pdl_interp.is_not_null %161 : !pdl.value -> ^bb306, ^bb1
  ^bb306:  // pred: ^bb305
    %164 = pdl_interp.get_operand 1 of %4
    %165 = pdl_interp.get_defining_op of %164 : !pdl.value
    pdl_interp.is_not_null %165 : !pdl.operation -> ^bb307, ^bb1
  ^bb307:  // pred: ^bb306
    pdl_interp.check_operation_name of %162 is "arith.mulf" -> ^bb308, ^bb1
  ^bb308:  // pred: ^bb307
    pdl_interp.check_operand_count of %162 is 2 -> ^bb309, ^bb1
  ^bb309:  // pred: ^bb308
    pdl_interp.check_result_count of %162 is 1 -> ^bb310, ^bb1
  ^bb310:  // pred: ^bb309
    %166 = pdl_interp.get_result 0 of %162
    pdl_interp.is_not_null %166 : !pdl.value -> ^bb311, ^bb1
  ^bb311:  // pred: ^bb310
    pdl_interp.are_equal %166, %161 : !pdl.value -> ^bb312, ^bb1
  ^bb312:  // pred: ^bb311
    pdl_interp.check_operation_name of %163 is "math.powf" -> ^bb313, ^bb1
  ^bb313:  // pred: ^bb312
    pdl_interp.check_operand_count of %163 is 2 -> ^bb314, ^bb1
  ^bb314:  // pred: ^bb313
    pdl_interp.check_result_count of %163 is 1 -> ^bb315, ^bb1
  ^bb315:  // pred: ^bb314
    %167 = pdl_interp.get_result 0 of %163
    pdl_interp.is_not_null %167 : !pdl.value -> ^bb316, ^bb1
  ^bb316:  // pred: ^bb315
    pdl_interp.are_equal %167, %159 : !pdl.value -> ^bb317, ^bb1
  ^bb317:  // pred: ^bb316
    pdl_interp.is_not_null %164 : !pdl.value -> ^bb318, ^bb1
  ^bb318:  // pred: ^bb317
    pdl_interp.check_operation_name of %165 is "arith.constant" -> ^bb319, ^bb1
  ^bb319:  // pred: ^bb318
    pdl_interp.check_operand_count of %165 is 0 -> ^bb320, ^bb1
  ^bb320:  // pred: ^bb319
    pdl_interp.check_result_count of %165 is 1 -> ^bb321, ^bb1
  ^bb321:  // pred: ^bb320
    %168 = pdl_interp.get_result 0 of %165
    pdl_interp.is_not_null %168 : !pdl.value -> ^bb322, ^bb1
  ^bb322:  // pred: ^bb321
    pdl_interp.are_equal %168, %164 : !pdl.value -> ^bb323, ^bb1
  ^bb323:  // pred: ^bb322
    %169 = pdl_interp.get_operand 0 of %163
    pdl_interp.is_not_null %169 : !pdl.value -> ^bb324, ^bb1
  ^bb324:  // pred: ^bb323
    %170 = pdl_interp.get_value_type of %169 : !pdl.type
    pdl_interp.check_type %170 is f32 -> ^bb325, ^bb1
  ^bb325:  // pred: ^bb324
    %171 = pdl_interp.get_value_type of %167 : !pdl.type
    pdl_interp.are_equal %170, %171 : !pdl.type -> ^bb326, ^bb1
  ^bb326:  // pred: ^bb325
    %172 = pdl_interp.get_value_type of %158 : !pdl.type
    pdl_interp.are_equal %170, %172 : !pdl.type -> ^bb327, ^bb1
  ^bb327:  // pred: ^bb326
    %173 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %170, %173 : !pdl.type -> ^bb328, ^bb1
  ^bb328:  // pred: ^bb327
    %174 = pdl_interp.get_operand 0 of %162
    pdl_interp.is_not_null %174 : !pdl.value -> ^bb329, ^bb1
  ^bb329:  // pred: ^bb328
    %175 = pdl_interp.get_defining_op of %174 : !pdl.value
    pdl_interp.is_not_null %175 : !pdl.operation -> ^bb330, ^bb1
  ^bb330:  // pred: ^bb329
    %176 = pdl_interp.get_value_type of %166 : !pdl.type
    pdl_interp.are_equal %170, %176 : !pdl.type -> ^bb331, ^bb1
  ^bb331:  // pred: ^bb330
    %177 = pdl_interp.get_value_type of %160 : !pdl.type
    pdl_interp.are_equal %170, %177 : !pdl.type -> ^bb332, ^bb1
  ^bb332:  // pred: ^bb331
    %178 = pdl_interp.get_value_type of %168 : !pdl.type
    pdl_interp.are_equal %170, %178 : !pdl.type -> ^bb333, ^bb1
  ^bb333:  // pred: ^bb332
    %179 = pdl_interp.get_operand 1 of %162
    %180 = pdl_interp.get_defining_op of %179 : !pdl.value
    pdl_interp.is_not_null %180 : !pdl.operation -> ^bb334, ^bb1
  ^bb334:  // pred: ^bb333
    pdl_interp.check_operation_name of %175 is "arith.constant" -> ^bb335, ^bb1
  ^bb335:  // pred: ^bb334
    pdl_interp.check_operand_count of %175 is 0 -> ^bb336, ^bb1
  ^bb336:  // pred: ^bb335
    pdl_interp.check_result_count of %175 is 1 -> ^bb337, ^bb1
  ^bb337:  // pred: ^bb336
    %181 = pdl_interp.get_result 0 of %175
    pdl_interp.is_not_null %181 : !pdl.value -> ^bb338, ^bb1
  ^bb338:  // pred: ^bb337
    pdl_interp.are_equal %181, %174 : !pdl.value -> ^bb339, ^bb1
  ^bb339:  // pred: ^bb338
    %182 = pdl_interp.get_operand 1 of %163
    %183 = pdl_interp.get_defining_op of %182 : !pdl.value
    pdl_interp.is_not_null %183 : !pdl.operation -> ^bb340, ^bb1
  ^bb340:  // pred: ^bb339
    pdl_interp.is_not_null %182 : !pdl.value -> ^bb341, ^bb1
  ^bb341:  // pred: ^bb340
    %184 = pdl_interp.get_attribute "value" of %165
    pdl_interp.is_not_null %184 : !pdl.attribute -> ^bb342, ^bb1
  ^bb342:  // pred: ^bb341
    pdl_interp.check_attribute %184 is 2.000000e+00 : f32 -> ^bb343, ^bb1
  ^bb343:  // pred: ^bb342
    pdl_interp.is_not_null %179 : !pdl.value -> ^bb344, ^bb1
  ^bb344:  // pred: ^bb343
    pdl_interp.check_operation_name of %180 is "arith.mulf" -> ^bb345, ^bb1
  ^bb345:  // pred: ^bb344
    pdl_interp.check_operand_count of %180 is 2 -> ^bb346, ^bb1
  ^bb346:  // pred: ^bb345
    pdl_interp.check_result_count of %180 is 1 -> ^bb347, ^bb1
  ^bb347:  // pred: ^bb346
    %185 = pdl_interp.get_result 0 of %180
    pdl_interp.is_not_null %185 : !pdl.value -> ^bb348, ^bb1
  ^bb348:  // pred: ^bb347
    pdl_interp.are_equal %185, %179 : !pdl.value -> ^bb349, ^bb1
  ^bb349:  // pred: ^bb348
    pdl_interp.check_operation_name of %183 is "arith.constant" -> ^bb350, ^bb1
  ^bb350:  // pred: ^bb349
    pdl_interp.check_operand_count of %183 is 0 -> ^bb351, ^bb1
  ^bb351:  // pred: ^bb350
    pdl_interp.check_result_count of %183 is 1 -> ^bb352, ^bb1
  ^bb352:  // pred: ^bb351
    %186 = pdl_interp.get_result 0 of %183
    pdl_interp.is_not_null %186 : !pdl.value -> ^bb353, ^bb1
  ^bb353:  // pred: ^bb352
    pdl_interp.are_equal %186, %182 : !pdl.value -> ^bb354, ^bb1
  ^bb354:  // pred: ^bb353
    %187 = pdl_interp.get_value_type of %181 : !pdl.type
    pdl_interp.are_equal %187, %170 : !pdl.type -> ^bb355, ^bb1
  ^bb355:  // pred: ^bb354
    %188 = pdl_interp.get_attribute "value" of %175
    pdl_interp.is_not_null %188 : !pdl.attribute -> ^bb356, ^bb1
  ^bb356:  // pred: ^bb355
    pdl_interp.check_attribute %188 is 2.000000e+00 : f32 -> ^bb357, ^bb1
  ^bb357:  // pred: ^bb356
    %189 = pdl_interp.get_value_type of %185 : !pdl.type
    pdl_interp.are_equal %189, %170 : !pdl.type -> ^bb358, ^bb1
  ^bb358:  // pred: ^bb357
    %190 = pdl_interp.get_operand 0 of %180
    pdl_interp.are_equal %190, %169 : !pdl.value -> ^bb359, ^bb1
  ^bb359:  // pred: ^bb358
    %191 = pdl_interp.get_attribute "value" of %183
    pdl_interp.is_not_null %191 : !pdl.attribute -> ^bb360, ^bb1
  ^bb360:  // pred: ^bb359
    pdl_interp.check_attribute %191 is 2.000000e+00 : f32 -> ^bb361, ^bb1
  ^bb361:  // pred: ^bb360
    %192 = pdl_interp.get_operand 1 of %180
    pdl_interp.is_not_null %192 : !pdl.value -> ^bb362, ^bb1
  ^bb362:  // pred: ^bb361
    %193 = pdl_interp.get_operand 0 of %4
    pdl_interp.are_equal %192, %193 : !pdl.value -> ^bb363, ^bb1
  ^bb363:  // pred: ^bb362
    %194 = pdl_interp.get_value_type of %186 : !pdl.type
    pdl_interp.are_equal %194, %170 : !pdl.type -> ^bb364, ^bb1
  ^bb364:  // pred: ^bb363
    %195 = pdl_interp.get_value_type of %192 : !pdl.type
    pdl_interp.are_equal %195, %170 : !pdl.type -> ^bb365, ^bb1
  ^bb365:  // pred: ^bb364
    pdl_interp.record_match @rewriters::@sum_square_pow_rev(%169, %192, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.constant", "math.powf"]), loc([%arg0, %2, %4, %162, %163, %165, %175, %180, %183]), root("arith.addf") -> ^bb1
  ^bb366:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 2 -> ^bb367, ^bb1
  ^bb367:  // pred: ^bb366
    pdl_interp.check_result_count of %2 is 1 -> ^bb368, ^bb1
  ^bb368:  // pred: ^bb367
    %196 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %196 : !pdl.value -> ^bb369, ^bb1
  ^bb369:  // pred: ^bb368
    pdl_interp.are_equal %196, %1 : !pdl.value -> ^bb370, ^bb1
  ^bb370:  // pred: ^bb369
    %197 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %197 : !pdl.value -> ^bb371, ^bb1
  ^bb371:  // pred: ^bb370
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb372, ^bb1
  ^bb372:  // pred: ^bb371
    pdl_interp.check_operation_name of %4 is "math.powf" -> ^bb373, ^bb1
  ^bb373:  // pred: ^bb372
    pdl_interp.check_operand_count of %4 is 2 -> ^bb374, ^bb1
  ^bb374:  // pred: ^bb373
    pdl_interp.check_result_count of %4 is 1 -> ^bb375, ^bb1
  ^bb375:  // pred: ^bb374
    %198 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %198 : !pdl.value -> ^bb376, ^bb1
  ^bb376:  // pred: ^bb375
    pdl_interp.are_equal %198, %3 : !pdl.value -> ^bb377, ^bb1
  ^bb377:  // pred: ^bb376
    %199 = pdl_interp.get_operand 1 of %2
    %200 = pdl_interp.get_defining_op of %199 : !pdl.value
    pdl_interp.is_not_null %200 : !pdl.operation -> ^bb378, ^bb1
  ^bb378:  // pred: ^bb377
    %201 = pdl_interp.get_defining_op of %197 : !pdl.value
    pdl_interp.is_not_null %201 : !pdl.operation -> ^bb379, ^bb1
  ^bb379:  // pred: ^bb378
    pdl_interp.is_not_null %199 : !pdl.value -> ^bb380, ^bb1
  ^bb380:  // pred: ^bb379
    %202 = pdl_interp.get_operand 1 of %4
    %203 = pdl_interp.get_defining_op of %202 : !pdl.value
    pdl_interp.is_not_null %203 : !pdl.operation -> ^bb381, ^bb1
  ^bb381:  // pred: ^bb380
    pdl_interp.check_operation_name of %200 is "arith.mulf" -> ^bb382, ^bb1
  ^bb382:  // pred: ^bb381
    pdl_interp.check_operand_count of %200 is 2 -> ^bb383, ^bb1
  ^bb383:  // pred: ^bb382
    pdl_interp.check_result_count of %200 is 1 -> ^bb384, ^bb1
  ^bb384:  // pred: ^bb383
    %204 = pdl_interp.get_result 0 of %200
    pdl_interp.is_not_null %204 : !pdl.value -> ^bb385, ^bb1
  ^bb385:  // pred: ^bb384
    pdl_interp.are_equal %204, %199 : !pdl.value -> ^bb386, ^bb1
  ^bb386:  // pred: ^bb385
    pdl_interp.check_operation_name of %201 is "math.powf" -> ^bb387, ^bb1
  ^bb387:  // pred: ^bb386
    pdl_interp.check_operand_count of %201 is 2 -> ^bb388, ^bb1
  ^bb388:  // pred: ^bb387
    pdl_interp.check_result_count of %201 is 1 -> ^bb389, ^bb1
  ^bb389:  // pred: ^bb388
    %205 = pdl_interp.get_result 0 of %201
    pdl_interp.is_not_null %205 : !pdl.value -> ^bb390, ^bb1
  ^bb390:  // pred: ^bb389
    pdl_interp.are_equal %205, %197 : !pdl.value -> ^bb391, ^bb1
  ^bb391:  // pred: ^bb390
    pdl_interp.is_not_null %202 : !pdl.value -> ^bb392, ^bb1
  ^bb392:  // pred: ^bb391
    pdl_interp.check_operation_name of %203 is "arith.constant" -> ^bb393, ^bb1
  ^bb393:  // pred: ^bb392
    pdl_interp.check_operand_count of %203 is 0 -> ^bb394, ^bb1
  ^bb394:  // pred: ^bb393
    pdl_interp.check_result_count of %203 is 1 -> ^bb395, ^bb1
  ^bb395:  // pred: ^bb394
    %206 = pdl_interp.get_result 0 of %203
    pdl_interp.is_not_null %206 : !pdl.value -> ^bb396, ^bb1
  ^bb396:  // pred: ^bb395
    pdl_interp.are_equal %206, %202 : !pdl.value -> ^bb397, ^bb1
  ^bb397:  // pred: ^bb396
    %207 = pdl_interp.get_operand 0 of %201
    pdl_interp.is_not_null %207 : !pdl.value -> ^bb398, ^bb1
  ^bb398:  // pred: ^bb397
    %208 = pdl_interp.get_value_type of %207 : !pdl.type
    pdl_interp.check_type %208 is f32 -> ^bb399, ^bb1
  ^bb399:  // pred: ^bb398
    %209 = pdl_interp.get_value_type of %205 : !pdl.type
    pdl_interp.are_equal %208, %209 : !pdl.type -> ^bb400, ^bb1
  ^bb400:  // pred: ^bb399
    %210 = pdl_interp.get_value_type of %196 : !pdl.type
    pdl_interp.are_equal %208, %210 : !pdl.type -> ^bb401, ^bb1
  ^bb401:  // pred: ^bb400
    %211 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %208, %211 : !pdl.type -> ^bb402, ^bb1
  ^bb402:  // pred: ^bb401
    %212 = pdl_interp.get_operand 0 of %200
    pdl_interp.is_not_null %212 : !pdl.value -> ^bb403, ^bb1
  ^bb403:  // pred: ^bb402
    %213 = pdl_interp.get_defining_op of %212 : !pdl.value
    pdl_interp.is_not_null %213 : !pdl.operation -> ^bb404, ^bb1
  ^bb404:  // pred: ^bb403
    %214 = pdl_interp.get_value_type of %204 : !pdl.type
    pdl_interp.are_equal %208, %214 : !pdl.type -> ^bb405, ^bb1
  ^bb405:  // pred: ^bb404
    %215 = pdl_interp.get_value_type of %198 : !pdl.type
    pdl_interp.are_equal %208, %215 : !pdl.type -> ^bb406, ^bb1
  ^bb406:  // pred: ^bb405
    %216 = pdl_interp.get_value_type of %206 : !pdl.type
    pdl_interp.are_equal %208, %216 : !pdl.type -> ^bb407, ^bb1
  ^bb407:  // pred: ^bb406
    %217 = pdl_interp.get_operand 1 of %200
    %218 = pdl_interp.get_defining_op of %217 : !pdl.value
    pdl_interp.is_not_null %218 : !pdl.operation -> ^bb408, ^bb1
  ^bb408:  // pred: ^bb407
    pdl_interp.check_operation_name of %213 is "arith.constant" -> ^bb409, ^bb1
  ^bb409:  // pred: ^bb408
    pdl_interp.check_operand_count of %213 is 0 -> ^bb410, ^bb1
  ^bb410:  // pred: ^bb409
    pdl_interp.check_result_count of %213 is 1 -> ^bb411, ^bb1
  ^bb411:  // pred: ^bb410
    %219 = pdl_interp.get_result 0 of %213
    pdl_interp.is_not_null %219 : !pdl.value -> ^bb412, ^bb1
  ^bb412:  // pred: ^bb411
    pdl_interp.are_equal %219, %212 : !pdl.value -> ^bb413, ^bb1
  ^bb413:  // pred: ^bb412
    %220 = pdl_interp.get_operand 1 of %201
    %221 = pdl_interp.get_defining_op of %220 : !pdl.value
    pdl_interp.is_not_null %221 : !pdl.operation -> ^bb414, ^bb1
  ^bb414:  // pred: ^bb413
    pdl_interp.is_not_null %220 : !pdl.value -> ^bb415, ^bb1
  ^bb415:  // pred: ^bb414
    %222 = pdl_interp.get_attribute "value" of %203
    pdl_interp.is_not_null %222 : !pdl.attribute -> ^bb416, ^bb1
  ^bb416:  // pred: ^bb415
    pdl_interp.check_attribute %222 is 2.000000e+00 : f32 -> ^bb417, ^bb1
  ^bb417:  // pred: ^bb416
    pdl_interp.is_not_null %217 : !pdl.value -> ^bb418, ^bb1
  ^bb418:  // pred: ^bb417
    pdl_interp.check_operation_name of %218 is "arith.mulf" -> ^bb419, ^bb1
  ^bb419:  // pred: ^bb418
    pdl_interp.check_operand_count of %218 is 2 -> ^bb420, ^bb1
  ^bb420:  // pred: ^bb419
    pdl_interp.check_result_count of %218 is 1 -> ^bb421, ^bb1
  ^bb421:  // pred: ^bb420
    %223 = pdl_interp.get_result 0 of %218
    pdl_interp.is_not_null %223 : !pdl.value -> ^bb422, ^bb1
  ^bb422:  // pred: ^bb421
    pdl_interp.are_equal %223, %217 : !pdl.value -> ^bb423, ^bb1
  ^bb423:  // pred: ^bb422
    pdl_interp.check_operation_name of %221 is "arith.constant" -> ^bb424, ^bb1
  ^bb424:  // pred: ^bb423
    pdl_interp.check_operand_count of %221 is 0 -> ^bb425, ^bb1
  ^bb425:  // pred: ^bb424
    pdl_interp.check_result_count of %221 is 1 -> ^bb426, ^bb1
  ^bb426:  // pred: ^bb425
    %224 = pdl_interp.get_result 0 of %221
    pdl_interp.is_not_null %224 : !pdl.value -> ^bb427, ^bb1
  ^bb427:  // pred: ^bb426
    pdl_interp.are_equal %224, %220 : !pdl.value -> ^bb428, ^bb1
  ^bb428:  // pred: ^bb427
    %225 = pdl_interp.get_value_type of %219 : !pdl.type
    pdl_interp.are_equal %225, %208 : !pdl.type -> ^bb429, ^bb1
  ^bb429:  // pred: ^bb428
    %226 = pdl_interp.get_attribute "value" of %213
    pdl_interp.is_not_null %226 : !pdl.attribute -> ^bb430, ^bb1
  ^bb430:  // pred: ^bb429
    pdl_interp.check_attribute %226 is 2.000000e+00 : f32 -> ^bb431, ^bb1
  ^bb431:  // pred: ^bb430
    %227 = pdl_interp.get_value_type of %223 : !pdl.type
    pdl_interp.are_equal %227, %208 : !pdl.type -> ^bb432, ^bb1
  ^bb432:  // pred: ^bb431
    %228 = pdl_interp.get_operand 0 of %218
    pdl_interp.are_equal %228, %207 : !pdl.value -> ^bb433, ^bb1
  ^bb433:  // pred: ^bb432
    %229 = pdl_interp.get_attribute "value" of %221
    pdl_interp.is_not_null %229 : !pdl.attribute -> ^bb434, ^bb1
  ^bb434:  // pred: ^bb433
    pdl_interp.check_attribute %229 is 2.000000e+00 : f32 -> ^bb435, ^bb1
  ^bb435:  // pred: ^bb434
    %230 = pdl_interp.get_operand 1 of %218
    pdl_interp.is_not_null %230 : !pdl.value -> ^bb436, ^bb1
  ^bb436:  // pred: ^bb435
    %231 = pdl_interp.get_operand 0 of %4
    pdl_interp.are_equal %230, %231 : !pdl.value -> ^bb437, ^bb1
  ^bb437:  // pred: ^bb436
    %232 = pdl_interp.get_value_type of %224 : !pdl.type
    pdl_interp.are_equal %232, %208 : !pdl.type -> ^bb438, ^bb1
  ^bb438:  // pred: ^bb437
    %233 = pdl_interp.get_value_type of %230 : !pdl.type
    pdl_interp.are_equal %233, %208 : !pdl.type -> ^bb439, ^bb1
  ^bb439:  // pred: ^bb438
    pdl_interp.record_match @rewriters::@sub_square_pow_rev(%207, %230, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.constant", "math.powf"]), loc([%arg0, %2, %4, %200, %201, %203, %213, %218, %221]), root("arith.addf") -> ^bb1
  ^bb440:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 2 -> ^bb441, ^bb1
  ^bb441:  // pred: ^bb440
    pdl_interp.check_result_count of %2 is 1 -> ^bb442, ^bb1
  ^bb442:  // pred: ^bb441
    %234 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %234 : !pdl.value -> ^bb443, ^bb1
  ^bb443:  // pred: ^bb442
    pdl_interp.are_equal %234, %1 : !pdl.value -> ^bb444, ^bb1
  ^bb444:  // pred: ^bb443
    %235 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %235 : !pdl.value -> ^bb445, ^bb1
  ^bb445:  // pred: ^bb444
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb446, ^bb1
  ^bb446:  // pred: ^bb445
    %236 = pdl_interp.get_value_type of %235 : !pdl.type
    pdl_interp.check_type %236 is f32 -> ^bb447, ^bb1
  ^bb447:  // pred: ^bb446
    %237 = pdl_interp.get_value_type of %234 : !pdl.type
    pdl_interp.are_equal %236, %237 : !pdl.type -> ^bb448, ^bb1
  ^bb448:  // pred: ^bb447
    %238 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %236, %238 : !pdl.type -> ^bb449, ^bb1
  ^bb449:  // pred: ^bb448
    pdl_interp.check_operation_name of %4 is "arith.divf" -> ^bb450, ^bb1
  ^bb450:  // pred: ^bb449
    pdl_interp.check_operand_count of %4 is 2 -> ^bb451, ^bb1
  ^bb451:  // pred: ^bb450
    pdl_interp.check_result_count of %4 is 1 -> ^bb452, ^bb1
  ^bb452:  // pred: ^bb451
    %239 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %239 : !pdl.value -> ^bb453, ^bb1
  ^bb453:  // pred: ^bb452
    pdl_interp.are_equal %239, %3 : !pdl.value -> ^bb454, ^bb1
  ^bb454:  // pred: ^bb453
    %240 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %240 : !pdl.value -> ^bb455, ^bb1
  ^bb455:  // pred: ^bb454
    %241 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %241 : !pdl.value -> ^bb456, ^bb1
  ^bb456:  // pred: ^bb455
    %242 = pdl_interp.get_operand 1 of %4
    pdl_interp.is_not_null %242 : !pdl.value -> ^bb462, ^bb457
  ^bb457:  // 6 preds: ^bb456, ^bb462, ^bb463, ^bb464, ^bb465, ^bb467
    %243 = pdl_interp.get_value_type of %239 : !pdl.type
    pdl_interp.are_equal %236, %243 : !pdl.type -> ^bb458, ^bb1
  ^bb458:  // pred: ^bb457
    %244 = pdl_interp.get_value_type of %240 : !pdl.type
    pdl_interp.are_equal %236, %244 : !pdl.type -> ^bb459, ^bb1
  ^bb459:  // pred: ^bb458
    %245 = pdl_interp.get_value_type of %241 : !pdl.type
    pdl_interp.are_equal %236, %245 : !pdl.type -> ^bb460, ^bb1
  ^bb460:  // pred: ^bb459
    %246 = pdl_interp.get_operand 1 of %4
    pdl_interp.are_equal %240, %246 : !pdl.value -> ^bb461, ^bb1
  ^bb461:  // pred: ^bb460
    pdl_interp.record_match @rewriters::@div_add_rev(%235, %241, %240, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.divf"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb1
  ^bb462:  // pred: ^bb456
    %247 = pdl_interp.get_value_type of %239 : !pdl.type
    pdl_interp.are_equal %236, %247 : !pdl.type -> ^bb463, ^bb457
  ^bb463:  // pred: ^bb462
    %248 = pdl_interp.get_value_type of %240 : !pdl.type
    pdl_interp.are_equal %236, %248 : !pdl.type -> ^bb464, ^bb457
  ^bb464:  // pred: ^bb463
    %249 = pdl_interp.get_value_type of %241 : !pdl.type
    pdl_interp.are_equal %236, %249 : !pdl.type -> ^bb465, ^bb457
  ^bb465:  // pred: ^bb464
    %250 = pdl_interp.get_value_type of %242 : !pdl.type
    pdl_interp.are_equal %236, %250 : !pdl.type -> ^bb466, ^bb457
  ^bb466:  // pred: ^bb465
    pdl_interp.record_match @rewriters::@frac_add(%235, %242, %240, %241, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.addf", "arith.mulf", "arith.divf"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb467
  ^bb467:  // pred: ^bb466
    pdl_interp.record_match @rewriters::@common_denominator(%235, %242, %241, %240, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.addf", "arith.mulf", "arith.divf"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb457
  ^bb468:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 2 -> ^bb469, ^bb1
  ^bb469:  // pred: ^bb468
    pdl_interp.check_result_count of %2 is 1 -> ^bb470, ^bb1
  ^bb470:  // pred: ^bb469
    %251 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %251 : !pdl.value -> ^bb471, ^bb1
  ^bb471:  // pred: ^bb470
    pdl_interp.are_equal %251, %1 : !pdl.value -> ^bb472, ^bb1
  ^bb472:  // pred: ^bb471
    %252 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %252 : !pdl.value -> ^bb473, ^bb1
  ^bb473:  // pred: ^bb472
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb474, ^bb1
  ^bb474:  // pred: ^bb473
    %253 = pdl_interp.get_value_type of %252 : !pdl.type
    pdl_interp.check_type %253 is f32 -> ^bb475, ^bb1
  ^bb475:  // pred: ^bb474
    %254 = pdl_interp.get_value_type of %251 : !pdl.type
    pdl_interp.are_equal %253, %254 : !pdl.type -> ^bb476, ^bb1
  ^bb476:  // pred: ^bb475
    %255 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %253, %255 : !pdl.type -> ^bb477, ^bb1
  ^bb477:  // pred: ^bb476
    pdl_interp.check_operation_name of %4 is "math.powf" -> ^bb478, ^bb1
  ^bb478:  // pred: ^bb477
    pdl_interp.check_operand_count of %4 is 2 -> ^bb479, ^bb1
  ^bb479:  // pred: ^bb478
    pdl_interp.check_result_count of %4 is 1 -> ^bb480, ^bb1
  ^bb480:  // pred: ^bb479
    %256 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %256 : !pdl.value -> ^bb481, ^bb1
  ^bb481:  // pred: ^bb480
    pdl_interp.are_equal %256, %3 : !pdl.value -> ^bb482, ^bb1
  ^bb482:  // pred: ^bb481
    %257 = pdl_interp.get_operand 1 of %2
    %258 = pdl_interp.get_defining_op of %257 : !pdl.value
    pdl_interp.is_not_null %258 : !pdl.operation -> ^bb483, ^bb1
  ^bb483:  // pred: ^bb482
    pdl_interp.is_not_null %257 : !pdl.value -> ^bb484, ^bb1
  ^bb484:  // pred: ^bb483
    %259 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %259 : !pdl.value -> ^bb485, ^bb1
  ^bb485:  // pred: ^bb484
    %260 = pdl_interp.get_operand 1 of %4
    %261 = pdl_interp.get_defining_op of %260 : !pdl.value
    pdl_interp.is_not_null %261 : !pdl.operation -> ^bb486, ^bb1
  ^bb486:  // pred: ^bb485
    pdl_interp.check_operation_name of %258 is "arith.constant" -> ^bb487, ^bb1
  ^bb487:  // pred: ^bb486
    pdl_interp.check_operand_count of %258 is 0 -> ^bb488, ^bb1
  ^bb488:  // pred: ^bb487
    pdl_interp.check_result_count of %258 is 1 -> ^bb489, ^bb1
  ^bb489:  // pred: ^bb488
    %262 = pdl_interp.get_result 0 of %258
    pdl_interp.is_not_null %262 : !pdl.value -> ^bb490, ^bb1
  ^bb490:  // pred: ^bb489
    pdl_interp.are_equal %262, %257 : !pdl.value -> ^bb491, ^bb1
  ^bb491:  // pred: ^bb490
    pdl_interp.is_not_null %260 : !pdl.value -> ^bb492, ^bb1
  ^bb492:  // pred: ^bb491
    %263 = pdl_interp.get_value_type of %256 : !pdl.type
    pdl_interp.are_equal %253, %263 : !pdl.type -> ^bb493, ^bb1
  ^bb493:  // pred: ^bb492
    pdl_interp.check_operation_name of %261 is "arith.constant" -> ^bb494, ^bb1
  ^bb494:  // pred: ^bb493
    pdl_interp.check_operand_count of %261 is 0 -> ^bb495, ^bb1
  ^bb495:  // pred: ^bb494
    pdl_interp.check_result_count of %261 is 1 -> ^bb496, ^bb1
  ^bb496:  // pred: ^bb495
    %264 = pdl_interp.get_result 0 of %261
    pdl_interp.is_not_null %264 : !pdl.value -> ^bb497, ^bb1
  ^bb497:  // pred: ^bb496
    pdl_interp.are_equal %264, %260 : !pdl.value -> ^bb498, ^bb1
  ^bb498:  // pred: ^bb497
    %265 = pdl_interp.get_attribute "value" of %258
    pdl_interp.is_not_null %265 : !pdl.attribute -> ^bb499, ^bb1
  ^bb499:  // pred: ^bb498
    pdl_interp.check_attribute %265 is 3.000000e+00 : f32 -> ^bb500, ^bb1
  ^bb500:  // pred: ^bb499
    %266 = pdl_interp.get_value_type of %259 : !pdl.type
    pdl_interp.are_equal %253, %266 : !pdl.type -> ^bb501, ^bb1
  ^bb501:  // pred: ^bb500
    %267 = pdl_interp.get_value_type of %262 : !pdl.type
    pdl_interp.are_equal %267, %253 : !pdl.type -> ^bb502, ^bb1
  ^bb502:  // pred: ^bb501
    %268 = pdl_interp.get_attribute "value" of %261
    pdl_interp.is_not_null %268 : !pdl.attribute -> ^bb503, ^bb1
  ^bb503:  // pred: ^bb502
    pdl_interp.check_attribute %268 is 3.000000e+00 : f32 -> ^bb504, ^bb1
  ^bb504:  // pred: ^bb503
    %269 = pdl_interp.get_value_type of %264 : !pdl.type
    pdl_interp.are_equal %269, %253 : !pdl.type -> ^bb505, ^bb1
  ^bb505:  // pred: ^bb504
    pdl_interp.record_match @rewriters::@sum_cubes(%252, %259, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.mulf", "arith.subf", "arith.addf", "arith.addf", "arith.mulf"]), loc([%arg0, %2, %4, %258, %261]), root("arith.addf") -> ^bb1
  ^bb506:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 1 -> ^bb507, ^bb1
  ^bb507:  // pred: ^bb506
    pdl_interp.check_result_count of %2 is 1 -> ^bb508, ^bb1
  ^bb508:  // pred: ^bb507
    %270 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %270 : !pdl.value -> ^bb509, ^bb1
  ^bb509:  // pred: ^bb508
    pdl_interp.are_equal %270, %1 : !pdl.value -> ^bb510, ^bb1
  ^bb510:  // pred: ^bb509
    %271 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %271 : !pdl.value -> ^bb511, ^bb1
  ^bb511:  // pred: ^bb510
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb512, ^bb1
  ^bb512:  // pred: ^bb511
    %272 = pdl_interp.get_value_type of %271 : !pdl.type
    pdl_interp.check_type %272 is f32 -> ^bb513, ^bb1
  ^bb513:  // pred: ^bb512
    %273 = pdl_interp.get_value_type of %270 : !pdl.type
    pdl_interp.are_equal %272, %273 : !pdl.type -> ^bb514, ^bb1
  ^bb514:  // pred: ^bb513
    %274 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %272, %274 : !pdl.type -> ^bb515, ^bb1
  ^bb515:  // pred: ^bb514
    pdl_interp.check_operation_name of %4 is "math.log" -> ^bb516, ^bb1
  ^bb516:  // pred: ^bb515
    pdl_interp.check_operand_count of %4 is 1 -> ^bb517, ^bb1
  ^bb517:  // pred: ^bb516
    pdl_interp.check_result_count of %4 is 1 -> ^bb518, ^bb1
  ^bb518:  // pred: ^bb517
    %275 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %275 : !pdl.value -> ^bb519, ^bb1
  ^bb519:  // pred: ^bb518
    pdl_interp.are_equal %275, %3 : !pdl.value -> ^bb520, ^bb1
  ^bb520:  // pred: ^bb519
    %276 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %276 : !pdl.value -> ^bb521, ^bb1
  ^bb521:  // pred: ^bb520
    %277 = pdl_interp.get_value_type of %275 : !pdl.type
    pdl_interp.are_equal %272, %277 : !pdl.type -> ^bb522, ^bb1
  ^bb522:  // pred: ^bb521
    %278 = pdl_interp.get_value_type of %276 : !pdl.type
    pdl_interp.are_equal %272, %278 : !pdl.type -> ^bb523, ^bb1
  ^bb523:  // pred: ^bb522
    pdl_interp.record_match @rewriters::@sum_log(%271, %276, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "math.log"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb1
  ^bb524:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 1 -> ^bb525, ^bb1
  ^bb525:  // pred: ^bb524
    pdl_interp.check_result_count of %2 is 1 -> ^bb526, ^bb1
  ^bb526:  // pred: ^bb525
    %279 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %279 : !pdl.value -> ^bb527, ^bb1
  ^bb527:  // pred: ^bb526
    pdl_interp.are_equal %279, %1 : !pdl.value -> ^bb528, ^bb1
  ^bb528:  // pred: ^bb527
    %280 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %280 : !pdl.value -> ^bb529, ^bb1
  ^bb529:  // pred: ^bb528
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb530, ^bb1
  ^bb530:  // pred: ^bb529
    %281 = pdl_interp.get_value_type of %280 : !pdl.type
    pdl_interp.check_type %281 is f32 -> ^bb531, ^bb1
  ^bb531:  // pred: ^bb530
    %282 = pdl_interp.get_value_type of %279 : !pdl.type
    pdl_interp.are_equal %281, %282 : !pdl.type -> ^bb532, ^bb1
  ^bb532:  // pred: ^bb531
    %283 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %281, %283 : !pdl.type -> ^bb533, ^bb1
  ^bb533:  // pred: ^bb532
    pdl_interp.check_operation_name of %4 is "math.sin" -> ^bb534, ^bb1
  ^bb534:  // pred: ^bb533
    pdl_interp.check_operand_count of %4 is 1 -> ^bb535, ^bb1
  ^bb535:  // pred: ^bb534
    pdl_interp.check_result_count of %4 is 1 -> ^bb536, ^bb1
  ^bb536:  // pred: ^bb535
    %284 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %284 : !pdl.value -> ^bb537, ^bb1
  ^bb537:  // pred: ^bb536
    pdl_interp.are_equal %284, %3 : !pdl.value -> ^bb538, ^bb1
  ^bb538:  // pred: ^bb537
    %285 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %285 : !pdl.value -> ^bb539, ^bb1
  ^bb539:  // pred: ^bb538
    %286 = pdl_interp.get_value_type of %284 : !pdl.type
    pdl_interp.are_equal %281, %286 : !pdl.type -> ^bb540, ^bb1
  ^bb540:  // pred: ^bb539
    %287 = pdl_interp.get_value_type of %285 : !pdl.type
    pdl_interp.are_equal %281, %287 : !pdl.type -> ^bb541, ^bb1
  ^bb541:  // pred: ^bb540
    pdl_interp.record_match @rewriters::@sum_sin(%280, %285, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.constant", "arith.divf", "math.sin", "arith.subf", "arith.constant", "arith.divf", "math.cos", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb1
  ^bb542:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 1 -> ^bb543, ^bb1
  ^bb543:  // pred: ^bb542
    pdl_interp.check_result_count of %2 is 1 -> ^bb544, ^bb1
  ^bb544:  // pred: ^bb543
    %288 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %288 : !pdl.value -> ^bb545, ^bb1
  ^bb545:  // pred: ^bb544
    pdl_interp.are_equal %288, %1 : !pdl.value -> ^bb546, ^bb1
  ^bb546:  // pred: ^bb545
    %289 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %289 : !pdl.value -> ^bb547, ^bb1
  ^bb547:  // pred: ^bb546
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb548, ^bb1
  ^bb548:  // pred: ^bb547
    %290 = pdl_interp.get_value_type of %289 : !pdl.type
    pdl_interp.check_type %290 is f32 -> ^bb549, ^bb1
  ^bb549:  // pred: ^bb548
    %291 = pdl_interp.get_value_type of %288 : !pdl.type
    pdl_interp.are_equal %290, %291 : !pdl.type -> ^bb550, ^bb1
  ^bb550:  // pred: ^bb549
    %292 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %290, %292 : !pdl.type -> ^bb551, ^bb1
  ^bb551:  // pred: ^bb550
    pdl_interp.check_operation_name of %4 is "math.cos" -> ^bb552, ^bb1
  ^bb552:  // pred: ^bb551
    pdl_interp.check_operand_count of %4 is 1 -> ^bb553, ^bb1
  ^bb553:  // pred: ^bb552
    pdl_interp.check_result_count of %4 is 1 -> ^bb554, ^bb1
  ^bb554:  // pred: ^bb553
    %293 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %293 : !pdl.value -> ^bb555, ^bb1
  ^bb555:  // pred: ^bb554
    pdl_interp.are_equal %293, %3 : !pdl.value -> ^bb556, ^bb1
  ^bb556:  // pred: ^bb555
    %294 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %294 : !pdl.value -> ^bb557, ^bb1
  ^bb557:  // pred: ^bb556
    %295 = pdl_interp.get_value_type of %293 : !pdl.type
    pdl_interp.are_equal %290, %295 : !pdl.type -> ^bb558, ^bb1
  ^bb558:  // pred: ^bb557
    %296 = pdl_interp.get_value_type of %294 : !pdl.type
    pdl_interp.are_equal %290, %296 : !pdl.type -> ^bb559, ^bb1
  ^bb559:  // pred: ^bb558
    pdl_interp.record_match @rewriters::@sum_cos(%289, %294, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.constant", "arith.divf", "math.cos", "arith.subf", "arith.constant", "arith.divf", "math.cos", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb1
  ^bb560:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 1 -> ^bb561, ^bb1
  ^bb561:  // pred: ^bb560
    pdl_interp.check_result_count of %2 is 1 -> ^bb562, ^bb1
  ^bb562:  // pred: ^bb561
    %297 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %297 : !pdl.value -> ^bb563, ^bb1
  ^bb563:  // pred: ^bb562
    pdl_interp.are_equal %297, %1 : !pdl.value -> ^bb564, ^bb1
  ^bb564:  // pred: ^bb563
    %298 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %298 : !pdl.value -> ^bb565, ^bb1
  ^bb565:  // pred: ^bb564
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb566, ^bb1
  ^bb566:  // pred: ^bb565
    %299 = pdl_interp.get_value_type of %298 : !pdl.type
    pdl_interp.check_type %299 is f32 -> ^bb567, ^bb1
  ^bb567:  // pred: ^bb566
    %300 = pdl_interp.get_value_type of %297 : !pdl.type
    pdl_interp.are_equal %299, %300 : !pdl.type -> ^bb568, ^bb1
  ^bb568:  // pred: ^bb567
    %301 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %299, %301 : !pdl.type -> ^bb569, ^bb1
  ^bb569:  // pred: ^bb568
    pdl_interp.check_operation_name of %4 is "math.atan" -> ^bb570, ^bb1
  ^bb570:  // pred: ^bb569
    pdl_interp.check_operand_count of %4 is 1 -> ^bb571, ^bb1
  ^bb571:  // pred: ^bb570
    pdl_interp.check_result_count of %4 is 1 -> ^bb572, ^bb1
  ^bb572:  // pred: ^bb571
    %302 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %302 : !pdl.value -> ^bb573, ^bb1
  ^bb573:  // pred: ^bb572
    pdl_interp.are_equal %302, %3 : !pdl.value -> ^bb574, ^bb1
  ^bb574:  // pred: ^bb573
    %303 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %303 : !pdl.value -> ^bb575, ^bb1
  ^bb575:  // pred: ^bb574
    %304 = pdl_interp.get_value_type of %302 : !pdl.type
    pdl_interp.are_equal %299, %304 : !pdl.type -> ^bb576, ^bb1
  ^bb576:  // pred: ^bb575
    %305 = pdl_interp.get_value_type of %303 : !pdl.type
    pdl_interp.are_equal %299, %305 : !pdl.type -> ^bb577, ^bb1
  ^bb577:  // pred: ^bb576
    pdl_interp.record_match @rewriters::@sum_atan(%298, %303, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.constant", "arith.mulf", "arith.subf", "math.atan2"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb1
  ^bb578:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 0 -> ^bb579, ^bb1
  ^bb579:  // pred: ^bb578
    pdl_interp.check_result_count of %2 is 1 -> ^bb580, ^bb1
  ^bb580:  // pred: ^bb579
    %306 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %306 : !pdl.value -> ^bb581, ^bb1
  ^bb581:  // pred: ^bb580
    pdl_interp.are_equal %306, %1 : !pdl.value -> ^bb582, ^bb1
  ^bb582:  // pred: ^bb581
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb583, ^bb1
  ^bb583:  // pred: ^bb582
    pdl_interp.check_operation_name of %4 is "arith.mulf" -> ^bb584, ^bb1
  ^bb584:  // pred: ^bb583
    pdl_interp.check_operand_count of %4 is 2 -> ^bb585, ^bb1
  ^bb585:  // pred: ^bb584
    pdl_interp.check_result_count of %4 is 1 -> ^bb586, ^bb1
  ^bb586:  // pred: ^bb585
    %307 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %307 : !pdl.value -> ^bb587, ^bb1
  ^bb587:  // pred: ^bb586
    pdl_interp.are_equal %307, %3 : !pdl.value -> ^bb588, ^bb1
  ^bb588:  // pred: ^bb587
    %308 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %308 : !pdl.value -> ^bb589, ^bb1
  ^bb589:  // pred: ^bb588
    %309 = pdl_interp.get_defining_op of %308 : !pdl.value
    pdl_interp.is_not_null %309 : !pdl.operation -> ^bb590, ^bb1
  ^bb590:  // pred: ^bb589
    %310 = pdl_interp.get_operand 1 of %4
    %311 = pdl_interp.get_defining_op of %310 : !pdl.value
    pdl_interp.is_not_null %311 : !pdl.operation -> ^bb591, ^bb1
  ^bb591:  // pred: ^bb590
    pdl_interp.is_not_null %310 : !pdl.value -> ^bb592, ^bb1
  ^bb592:  // pred: ^bb591
    pdl_interp.check_operation_name of %309 is "arith.constant" -> ^bb593, ^bb1
  ^bb593:  // pred: ^bb592
    pdl_interp.check_operand_count of %309 is 0 -> ^bb594, ^bb1
  ^bb594:  // pred: ^bb593
    pdl_interp.check_result_count of %309 is 1 -> ^bb595, ^bb1
  ^bb595:  // pred: ^bb594
    %312 = pdl_interp.get_result 0 of %309
    pdl_interp.is_not_null %312 : !pdl.value -> ^bb596, ^bb1
  ^bb596:  // pred: ^bb595
    pdl_interp.are_equal %312, %308 : !pdl.value -> ^bb597, ^bb1
  ^bb597:  // pred: ^bb596
    pdl_interp.check_operation_name of %311 is "math.cos" -> ^bb598, ^bb1
  ^bb598:  // pred: ^bb597
    pdl_interp.check_operand_count of %311 is 1 -> ^bb599, ^bb1
  ^bb599:  // pred: ^bb598
    pdl_interp.check_result_count of %311 is 1 -> ^bb600, ^bb1
  ^bb600:  // pred: ^bb599
    %313 = pdl_interp.get_result 0 of %311
    pdl_interp.is_not_null %313 : !pdl.value -> ^bb601, ^bb1
  ^bb601:  // pred: ^bb600
    pdl_interp.are_equal %313, %310 : !pdl.value -> ^bb602, ^bb1
  ^bb602:  // pred: ^bb601
    %314 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %314 : !pdl.attribute -> ^bb603, ^bb1
  ^bb603:  // pred: ^bb602
    pdl_interp.check_attribute %314 is 5.000000e-01 : f32 -> ^bb604, ^bb1
  ^bb604:  // pred: ^bb603
    %315 = pdl_interp.get_value_type of %306 : !pdl.type
    pdl_interp.check_type %315 is f32 -> ^bb605, ^bb1
  ^bb605:  // pred: ^bb604
    %316 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %315, %316 : !pdl.type -> ^bb606, ^bb1
  ^bb606:  // pred: ^bb605
    %317 = pdl_interp.get_operand 0 of %311
    %318 = pdl_interp.get_defining_op of %317 : !pdl.value
    pdl_interp.is_not_null %318 : !pdl.operation -> ^bb607, ^bb1
  ^bb607:  // pred: ^bb606
    %319 = pdl_interp.get_value_type of %307 : !pdl.type
    pdl_interp.are_equal %315, %319 : !pdl.type -> ^bb608, ^bb1
  ^bb608:  // pred: ^bb607
    %320 = pdl_interp.get_operand 0 of %318
    %321 = pdl_interp.get_defining_op of %320 : !pdl.value
    pdl_interp.is_not_null %321 : !pdl.operation -> ^bb609, ^bb1
  ^bb609:  // pred: ^bb608
    %322 = pdl_interp.get_value_type of %312 : !pdl.type
    pdl_interp.are_equal %322, %315 : !pdl.type -> ^bb610, ^bb1
  ^bb610:  // pred: ^bb609
    pdl_interp.is_not_null %317 : !pdl.value -> ^bb611, ^bb1
  ^bb611:  // pred: ^bb610
    pdl_interp.check_operation_name of %318 is "arith.mulf" -> ^bb612, ^bb1
  ^bb612:  // pred: ^bb611
    pdl_interp.check_operand_count of %318 is 2 -> ^bb613, ^bb1
  ^bb613:  // pred: ^bb612
    pdl_interp.check_result_count of %318 is 1 -> ^bb614, ^bb1
  ^bb614:  // pred: ^bb613
    %323 = pdl_interp.get_result 0 of %318
    pdl_interp.is_not_null %323 : !pdl.value -> ^bb615, ^bb1
  ^bb615:  // pred: ^bb614
    pdl_interp.are_equal %323, %317 : !pdl.value -> ^bb616, ^bb1
  ^bb616:  // pred: ^bb615
    %324 = pdl_interp.get_attribute "value" of %309
    pdl_interp.is_not_null %324 : !pdl.attribute -> ^bb617, ^bb1
  ^bb617:  // pred: ^bb616
    pdl_interp.check_attribute %324 is 5.000000e-01 : f32 -> ^bb618, ^bb1
  ^bb618:  // pred: ^bb617
    %325 = pdl_interp.get_value_type of %313 : !pdl.type
    pdl_interp.are_equal %325, %315 : !pdl.type -> ^bb619, ^bb1
  ^bb619:  // pred: ^bb618
    pdl_interp.is_not_null %320 : !pdl.value -> ^bb620, ^bb1
  ^bb620:  // pred: ^bb619
    pdl_interp.check_operation_name of %321 is "arith.constant" -> ^bb621, ^bb1
  ^bb621:  // pred: ^bb620
    pdl_interp.check_operand_count of %321 is 0 -> ^bb622, ^bb1
  ^bb622:  // pred: ^bb621
    pdl_interp.check_result_count of %321 is 1 -> ^bb623, ^bb1
  ^bb623:  // pred: ^bb622
    %326 = pdl_interp.get_result 0 of %321
    pdl_interp.is_not_null %326 : !pdl.value -> ^bb624, ^bb1
  ^bb624:  // pred: ^bb623
    pdl_interp.are_equal %326, %320 : !pdl.value -> ^bb625, ^bb1
  ^bb625:  // pred: ^bb624
    %327 = pdl_interp.get_operand 1 of %318
    pdl_interp.is_not_null %327 : !pdl.value -> ^bb626, ^bb1
  ^bb626:  // pred: ^bb625
    %328 = pdl_interp.get_value_type of %323 : !pdl.type
    pdl_interp.are_equal %328, %315 : !pdl.type -> ^bb627, ^bb1
  ^bb627:  // pred: ^bb626
    %329 = pdl_interp.get_value_type of %326 : !pdl.type
    pdl_interp.are_equal %329, %315 : !pdl.type -> ^bb628, ^bb1
  ^bb628:  // pred: ^bb627
    %330 = pdl_interp.get_attribute "value" of %321
    pdl_interp.is_not_null %330 : !pdl.attribute -> ^bb629, ^bb1
  ^bb629:  // pred: ^bb628
    pdl_interp.check_attribute %330 is 2.000000e+00 : f32 -> ^bb630, ^bb1
  ^bb630:  // pred: ^bb629
    %331 = pdl_interp.get_value_type of %327 : !pdl.type
    pdl_interp.are_equal %331, %315 : !pdl.type -> ^bb631, ^bb1
  ^bb631:  // pred: ^bb630
    pdl_interp.record_match @rewriters::@sqr_cos_a_rev(%327, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.mulf"]), loc([%arg0, %2, %4, %309, %311, %318, %321]), root("arith.addf") -> ^bb1
  ^bb632:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 1 -> ^bb633, ^bb1
  ^bb633:  // pred: ^bb632
    pdl_interp.check_result_count of %2 is 1 -> ^bb634, ^bb1
  ^bb634:  // pred: ^bb633
    %332 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %332 : !pdl.value -> ^bb635, ^bb1
  ^bb635:  // pred: ^bb634
    pdl_interp.are_equal %332, %1 : !pdl.value -> ^bb636, ^bb1
  ^bb636:  // pred: ^bb635
    %333 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %333 : !pdl.value -> ^bb637, ^bb1
  ^bb637:  // pred: ^bb636
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb638, ^bb1
  ^bb638:  // pred: ^bb637
    %334 = pdl_interp.get_value_type of %333 : !pdl.type
    pdl_interp.check_type %334 is f32 -> ^bb639, ^bb1
  ^bb639:  // pred: ^bb638
    %335 = pdl_interp.get_value_type of %332 : !pdl.type
    pdl_interp.are_equal %334, %335 : !pdl.type -> ^bb640, ^bb1
  ^bb640:  // pred: ^bb639
    %336 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %334, %336 : !pdl.type -> ^bb641, ^bb1
  ^bb641:  // pred: ^bb640
    pdl_interp.switch_operation_name of %4 to ["math.sinh", "math.cosh"](^bb642, ^bb649) -> ^bb1
  ^bb642:  // pred: ^bb641
    pdl_interp.check_operand_count of %4 is 1 -> ^bb643, ^bb1
  ^bb643:  // pred: ^bb642
    pdl_interp.check_result_count of %4 is 1 -> ^bb644, ^bb1
  ^bb644:  // pred: ^bb643
    %337 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %337 : !pdl.value -> ^bb645, ^bb1
  ^bb645:  // pred: ^bb644
    pdl_interp.are_equal %337, %3 : !pdl.value -> ^bb646, ^bb1
  ^bb646:  // pred: ^bb645
    %338 = pdl_interp.get_value_type of %337 : !pdl.type
    pdl_interp.are_equal %334, %338 : !pdl.type -> ^bb647, ^bb1
  ^bb647:  // pred: ^bb646
    %339 = pdl_interp.get_operand 0 of %4
    pdl_interp.are_equal %333, %339 : !pdl.value -> ^bb648, ^bb1
  ^bb648:  // pred: ^bb647
    pdl_interp.record_match @rewriters::@sinh_add_cosh(%333, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb1
  ^bb649:  // pred: ^bb641
    pdl_interp.check_operand_count of %4 is 1 -> ^bb650, ^bb1
  ^bb650:  // pred: ^bb649
    pdl_interp.check_result_count of %4 is 1 -> ^bb651, ^bb1
  ^bb651:  // pred: ^bb650
    %340 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %340 : !pdl.value -> ^bb652, ^bb1
  ^bb652:  // pred: ^bb651
    pdl_interp.are_equal %340, %3 : !pdl.value -> ^bb653, ^bb1
  ^bb653:  // pred: ^bb652
    %341 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %341 : !pdl.value -> ^bb654, ^bb1
  ^bb654:  // pred: ^bb653
    %342 = pdl_interp.get_value_type of %340 : !pdl.type
    pdl_interp.are_equal %334, %342 : !pdl.type -> ^bb655, ^bb1
  ^bb655:  // pred: ^bb654
    %343 = pdl_interp.get_value_type of %341 : !pdl.type
    pdl_interp.are_equal %334, %343 : !pdl.type -> ^bb656, ^bb1
  ^bb656:  // pred: ^bb655
    pdl_interp.record_match @rewriters::@sum_cosh(%333, %341, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.constant", "arith.divf", "math.cosh", "arith.subf", "arith.constant", "arith.divf", "math.cosh", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb1
  ^bb657:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 1 -> ^bb658, ^bb1
  ^bb658:  // pred: ^bb657
    pdl_interp.check_result_count of %2 is 1 -> ^bb659, ^bb1
  ^bb659:  // pred: ^bb658
    %344 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %344 : !pdl.value -> ^bb660, ^bb1
  ^bb660:  // pred: ^bb659
    pdl_interp.are_equal %344, %1 : !pdl.value -> ^bb661, ^bb1
  ^bb661:  // pred: ^bb660
    %345 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %345 : !pdl.value -> ^bb662, ^bb1
  ^bb662:  // pred: ^bb661
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb663, ^bb1
  ^bb663:  // pred: ^bb662
    %346 = pdl_interp.get_value_type of %345 : !pdl.type
    pdl_interp.check_type %346 is f32 -> ^bb664, ^bb1
  ^bb664:  // pred: ^bb663
    %347 = pdl_interp.get_value_type of %344 : !pdl.type
    pdl_interp.are_equal %346, %347 : !pdl.type -> ^bb665, ^bb1
  ^bb665:  // pred: ^bb664
    %348 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %346, %348 : !pdl.type -> ^bb666, ^bb1
  ^bb666:  // pred: ^bb665
    pdl_interp.check_operation_name of %4 is "math.exp" -> ^bb667, ^bb1
  ^bb667:  // pred: ^bb666
    pdl_interp.check_operand_count of %4 is 1 -> ^bb668, ^bb1
  ^bb668:  // pred: ^bb667
    pdl_interp.check_result_count of %4 is 1 -> ^bb669, ^bb1
  ^bb669:  // pred: ^bb668
    %349 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %349 : !pdl.value -> ^bb670, ^bb1
  ^bb670:  // pred: ^bb669
    pdl_interp.are_equal %349, %3 : !pdl.value -> ^bb671, ^bb1
  ^bb671:  // pred: ^bb670
    %350 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %350 : !pdl.value -> ^bb672, ^bb1
  ^bb672:  // pred: ^bb671
    %351 = pdl_interp.get_defining_op of %350 : !pdl.value
    pdl_interp.is_not_null %351 : !pdl.operation -> ^bb673, ^bb1
  ^bb673:  // pred: ^bb672
    %352 = pdl_interp.get_value_type of %349 : !pdl.type
    pdl_interp.are_equal %346, %352 : !pdl.type -> ^bb674, ^bb1
  ^bb674:  // pred: ^bb673
    pdl_interp.check_operation_name of %351 is "arith.negf" -> ^bb675, ^bb1
  ^bb675:  // pred: ^bb674
    pdl_interp.check_operand_count of %351 is 1 -> ^bb676, ^bb1
  ^bb676:  // pred: ^bb675
    pdl_interp.check_result_count of %351 is 1 -> ^bb677, ^bb1
  ^bb677:  // pred: ^bb676
    %353 = pdl_interp.get_result 0 of %351
    pdl_interp.is_not_null %353 : !pdl.value -> ^bb678, ^bb1
  ^bb678:  // pred: ^bb677
    pdl_interp.are_equal %353, %350 : !pdl.value -> ^bb679, ^bb1
  ^bb679:  // pred: ^bb678
    %354 = pdl_interp.get_value_type of %353 : !pdl.type
    pdl_interp.are_equal %354, %346 : !pdl.type -> ^bb680, ^bb1
  ^bb680:  // pred: ^bb679
    %355 = pdl_interp.get_operand 0 of %351
    pdl_interp.are_equal %355, %345 : !pdl.value -> ^bb681, ^bb1
  ^bb681:  // pred: ^bb680
    pdl_interp.record_match @rewriters::@cosh_undef(%345, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.cosh", "arith.mulf"]), loc([%arg0, %2, %4, %351]), root("arith.addf") -> ^bb1
  ^bb682:  // pred: ^bb10
    pdl_interp.check_operand_count of %2 is 1 -> ^bb683, ^bb1
  ^bb683:  // pred: ^bb682
    pdl_interp.check_result_count of %2 is 1 -> ^bb684, ^bb1
  ^bb684:  // pred: ^bb683
    %356 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %356 : !pdl.value -> ^bb685, ^bb1
  ^bb685:  // pred: ^bb684
    pdl_interp.are_equal %356, %1 : !pdl.value -> ^bb686, ^bb1
  ^bb686:  // pred: ^bb685
    %357 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %357 : !pdl.value -> ^bb687, ^bb1
  ^bb687:  // pred: ^bb686
    pdl_interp.is_not_null %3 : !pdl.value -> ^bb688, ^bb1
  ^bb688:  // pred: ^bb687
    %358 = pdl_interp.get_value_type of %357 : !pdl.type
    pdl_interp.check_type %358 is f32 -> ^bb689, ^bb1
  ^bb689:  // pred: ^bb688
    %359 = pdl_interp.get_value_type of %356 : !pdl.type
    pdl_interp.are_equal %358, %359 : !pdl.type -> ^bb690, ^bb1
  ^bb690:  // pred: ^bb689
    %360 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %358, %360 : !pdl.type -> ^bb691, ^bb1
  ^bb691:  // pred: ^bb690
    pdl_interp.check_operation_name of %4 is "math.sinh" -> ^bb692, ^bb1
  ^bb692:  // pred: ^bb691
    pdl_interp.check_operand_count of %4 is 1 -> ^bb693, ^bb1
  ^bb693:  // pred: ^bb692
    pdl_interp.check_result_count of %4 is 1 -> ^bb694, ^bb1
  ^bb694:  // pred: ^bb693
    %361 = pdl_interp.get_result 0 of %4
    pdl_interp.is_not_null %361 : !pdl.value -> ^bb695, ^bb1
  ^bb695:  // pred: ^bb694
    pdl_interp.are_equal %361, %3 : !pdl.value -> ^bb696, ^bb1
  ^bb696:  // pred: ^bb695
    %362 = pdl_interp.get_operand 0 of %4
    pdl_interp.is_not_null %362 : !pdl.value -> ^bb697, ^bb1
  ^bb697:  // pred: ^bb696
    %363 = pdl_interp.get_value_type of %361 : !pdl.type
    pdl_interp.are_equal %358, %363 : !pdl.type -> ^bb698, ^bb1
  ^bb698:  // pred: ^bb697
    %364 = pdl_interp.get_value_type of %362 : !pdl.type
    pdl_interp.are_equal %358, %364 : !pdl.type -> ^bb699, ^bb1
  ^bb699:  // pred: ^bb698
    pdl_interp.record_match @rewriters::@sum_sinh(%357, %362, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.constant", "arith.divf", "math.sinh", "arith.subf", "arith.constant", "arith.divf", "math.cosh", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %4]), root("arith.addf") -> ^bb1
  ^bb700:  // pred: ^bb8
    pdl_interp.check_operand_count of %2 is 2 -> ^bb701, ^bb9
  ^bb701:  // pred: ^bb700
    pdl_interp.check_result_count of %2 is 1 -> ^bb702, ^bb9
  ^bb702:  // pred: ^bb701
    %365 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %365 : !pdl.value -> ^bb703, ^bb9
  ^bb703:  // pred: ^bb702
    pdl_interp.are_equal %365, %1 : !pdl.value -> ^bb704, ^bb9
  ^bb704:  // pred: ^bb703
    %366 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %366 : !pdl.value -> ^bb705, ^bb9
  ^bb705:  // pred: ^bb704
    %367 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %367 : !pdl.value -> ^bb706, ^bb9
  ^bb706:  // pred: ^bb705
    %368 = pdl_interp.get_value_type of %366 : !pdl.type
    pdl_interp.check_type %368 is f32 -> ^bb707, ^bb9
  ^bb707:  // pred: ^bb706
    %369 = pdl_interp.get_value_type of %365 : !pdl.type
    pdl_interp.are_equal %368, %369 : !pdl.type -> ^bb708, ^bb9
  ^bb708:  // pred: ^bb707
    %370 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %368, %370 : !pdl.type -> ^bb709, ^bb9
  ^bb709:  // pred: ^bb708
    %371 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %371 : !pdl.value -> ^bb710, ^bb9
  ^bb710:  // pred: ^bb709
    %372 = pdl_interp.get_value_type of %371 : !pdl.type
    pdl_interp.are_equal %368, %372 : !pdl.type -> ^bb711, ^bb9
  ^bb711:  // pred: ^bb710
    %373 = pdl_interp.get_value_type of %367 : !pdl.type
    pdl_interp.are_equal %368, %373 : !pdl.type -> ^bb712, ^bb9
  ^bb712:  // pred: ^bb711
    pdl_interp.record_match @rewriters::@associate_addladd(%371, %367, %366, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.addf"]), loc([%arg0, %2]), root("arith.addf") -> ^bb9
  ^bb713:  // pred: ^bb8
    pdl_interp.check_operand_count of %2 is 2 -> ^bb714, ^bb9
  ^bb714:  // pred: ^bb713
    pdl_interp.check_result_count of %2 is 1 -> ^bb715, ^bb9
  ^bb715:  // pred: ^bb714
    %374 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %374 : !pdl.value -> ^bb716, ^bb9
  ^bb716:  // pred: ^bb715
    pdl_interp.are_equal %374, %1 : !pdl.value -> ^bb717, ^bb9
  ^bb717:  // pred: ^bb716
    %375 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %375 : !pdl.value -> ^bb718, ^bb9
  ^bb718:  // pred: ^bb717
    %376 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %376 : !pdl.value -> ^bb719, ^bb9
  ^bb719:  // pred: ^bb718
    %377 = pdl_interp.get_value_type of %375 : !pdl.type
    pdl_interp.check_type %377 is f32 -> ^bb720, ^bb9
  ^bb720:  // pred: ^bb719
    %378 = pdl_interp.get_value_type of %374 : !pdl.type
    pdl_interp.are_equal %377, %378 : !pdl.type -> ^bb721, ^bb9
  ^bb721:  // pred: ^bb720
    %379 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %377, %379 : !pdl.type -> ^bb722, ^bb9
  ^bb722:  // pred: ^bb721
    %380 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %380 : !pdl.value -> ^bb723, ^bb9
  ^bb723:  // pred: ^bb722
    %381 = pdl_interp.get_value_type of %380 : !pdl.type
    pdl_interp.are_equal %377, %381 : !pdl.type -> ^bb724, ^bb9
  ^bb724:  // pred: ^bb723
    %382 = pdl_interp.get_value_type of %376 : !pdl.type
    pdl_interp.are_equal %377, %382 : !pdl.type -> ^bb725, ^bb9
  ^bb725:  // pred: ^bb724
    pdl_interp.record_match @rewriters::@associate_addl_(%380, %376, %375, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.subf"]), loc([%arg0, %2]), root("arith.addf") -> ^bb9
  ^bb726:  // pred: ^bb8
    pdl_interp.check_operand_count of %2 is 0 -> ^bb727, ^bb9
  ^bb727:  // pred: ^bb726
    pdl_interp.check_result_count of %2 is 1 -> ^bb728, ^bb9
  ^bb728:  // pred: ^bb727
    %383 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %383 : !pdl.value -> ^bb729, ^bb9
  ^bb729:  // pred: ^bb728
    pdl_interp.are_equal %383, %1 : !pdl.value -> ^bb730, ^bb9
  ^bb730:  // pred: ^bb729
    %384 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %384 : !pdl.value -> ^bb731, ^bb9
  ^bb731:  // pred: ^bb730
    %385 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %385 : !pdl.attribute -> ^bb732, ^bb9
  ^bb732:  // pred: ^bb731
    pdl_interp.check_attribute %385 is 0.000000e+00 : f32 -> ^bb733, ^bb9
  ^bb733:  // pred: ^bb732
    %386 = pdl_interp.get_value_type of %383 : !pdl.type
    pdl_interp.check_type %386 is f32 -> ^bb734, ^bb9
  ^bb734:  // pred: ^bb733
    %387 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %386, %387 : !pdl.type -> ^bb735, ^bb9
  ^bb735:  // pred: ^bb734
    %388 = pdl_interp.get_value_type of %384 : !pdl.type
    pdl_interp.are_equal %386, %388 : !pdl.type -> ^bb736, ^bb9
  ^bb736:  // pred: ^bb735
    pdl_interp.record_match @rewriters::@add_lft_identity(%384, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("arith.addf") -> ^bb9
  ^bb737:  // pred: ^bb8
    pdl_interp.check_operand_count of %2 is 2 -> ^bb738, ^bb9
  ^bb738:  // pred: ^bb737
    pdl_interp.check_result_count of %2 is 1 -> ^bb739, ^bb9
  ^bb739:  // pred: ^bb738
    %389 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %389 : !pdl.value -> ^bb740, ^bb9
  ^bb740:  // pred: ^bb739
    pdl_interp.are_equal %389, %1 : !pdl.value -> ^bb741, ^bb9
  ^bb741:  // pred: ^bb740
    %390 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %390 : !pdl.value -> ^bb742, ^bb9
  ^bb742:  // pred: ^bb741
    %391 = pdl_interp.get_value_type of %390 : !pdl.type
    pdl_interp.check_type %391 is f32 -> ^bb743, ^bb9
  ^bb743:  // pred: ^bb742
    %392 = pdl_interp.get_value_type of %389 : !pdl.type
    pdl_interp.are_equal %391, %392 : !pdl.type -> ^bb744, ^bb9
  ^bb744:  // pred: ^bb743
    %393 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %391, %393 : !pdl.type -> ^bb745, ^bb9
  ^bb745:  // pred: ^bb744
    %394 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %394 : !pdl.value -> ^bb746, ^bb9
  ^bb746:  // pred: ^bb745
    %395 = pdl_interp.get_value_type of %394 : !pdl.type
    pdl_interp.are_equal %391, %395 : !pdl.type -> ^bb747, ^bb9
  ^bb747:  // pred: ^bb746
    %396 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %394, %396 : !pdl.value -> ^bb748, ^bb9
  ^bb748:  // pred: ^bb747
    pdl_interp.record_match @rewriters::@distribute_lft1_in(%390, %394, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.mulf"]), loc([%arg0, %2]), root("arith.addf") -> ^bb9
  ^bb749:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb750, ^bb1
  ^bb750:  // pred: ^bb749
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb751, ^bb1
  ^bb751:  // pred: ^bb750
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb752, ^bb1
  ^bb752:  // pred: ^bb751
    pdl_interp.switch_operation_name of %2 to ["arith.addf", "arith.subf", "arith.constant"](^bb1591, ^bb1604, ^bb1617) -> ^bb753
  ^bb753:  // 38 preds: ^bb752, ^bb1591, ^bb1592, ^bb1593, ^bb1594, ^bb1595, ^bb1596, ^bb1597, ^bb1598, ^bb1599, ^bb1600, ^bb1601, ^bb1602, ^bb1603, ^bb1604, ^bb1605, ^bb1606, ^bb1607, ^bb1608, ^bb1609, ^bb1610, ^bb1611, ^bb1612, ^bb1613, ^bb1614, ^bb1615, ^bb1616, ^bb1617, ^bb1618, ^bb1619, ^bb1620, ^bb1621, ^bb1622, ^bb1623, ^bb1624, ^bb1625, ^bb1626, ^bb1627
    %397 = pdl_interp.get_operand 1 of %arg0
    %398 = pdl_interp.get_defining_op of %397 : !pdl.value
    pdl_interp.is_not_null %398 : !pdl.operation -> ^bb754, ^bb1
  ^bb754:  // pred: ^bb753
    pdl_interp.switch_operation_name of %2 to ["arith.mulf", "math.powf", "arith.divf", "math.log", "arith.constant", "math.absf", "math.sin", "math.cos", "math.atan", "math_xdsl.constant", "math.cosh", "math.exp", "math.sinh"](^bb755, ^bb1105, ^bb1143, ^bb1229, ^bb1247, ^bb1343, ^bb1451, ^bb1469, ^bb1487, ^bb1505, ^bb1523, ^bb1548, ^bb1573) -> ^bb1
  ^bb755:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 2 -> ^bb756, ^bb1
  ^bb756:  // pred: ^bb755
    pdl_interp.check_result_count of %2 is 1 -> ^bb757, ^bb1
  ^bb757:  // pred: ^bb756
    %399 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %399 : !pdl.value -> ^bb758, ^bb1
  ^bb758:  // pred: ^bb757
    pdl_interp.are_equal %399, %1 : !pdl.value -> ^bb759, ^bb1
  ^bb759:  // pred: ^bb758
    %400 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %400 : !pdl.value -> ^bb760, ^bb1
  ^bb760:  // pred: ^bb759
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb761, ^bb1
  ^bb761:  // pred: ^bb760
    %401 = pdl_interp.get_value_type of %400 : !pdl.type
    pdl_interp.check_type %401 is f32 -> ^bb1070, ^bb762
  ^bb762:  // 23 preds: ^bb761, ^bb1070, ^bb1071, ^bb1072, ^bb1073, ^bb1074, ^bb1075, ^bb1076, ^bb1078, ^bb1079, ^bb1080, ^bb1081, ^bb1082, ^bb1083, ^bb1096, ^bb1097, ^bb1098, ^bb1099, ^bb1100, ^bb1101, ^bb1102, ^bb1103, ^bb1104
    pdl_interp.switch_operation_name of %398 to ["arith.constant", "arith.mulf"](^bb763, ^bb811) -> ^bb1
  ^bb763:  // pred: ^bb762
    pdl_interp.check_operand_count of %398 is 0 -> ^bb764, ^bb1
  ^bb764:  // pred: ^bb763
    pdl_interp.check_result_count of %398 is 1 -> ^bb765, ^bb1
  ^bb765:  // pred: ^bb764
    %402 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %402 : !pdl.value -> ^bb766, ^bb1
  ^bb766:  // pred: ^bb765
    pdl_interp.are_equal %402, %397 : !pdl.value -> ^bb767, ^bb1
  ^bb767:  // pred: ^bb766
    %403 = pdl_interp.get_operand 1 of %2
    %404 = pdl_interp.get_defining_op of %403 : !pdl.value
    pdl_interp.is_not_null %404 : !pdl.operation -> ^bb768, ^bb1
  ^bb768:  // pred: ^bb767
    %405 = pdl_interp.get_defining_op of %400 : !pdl.value
    pdl_interp.is_not_null %405 : !pdl.operation -> ^bb769, ^bb1
  ^bb769:  // pred: ^bb768
    pdl_interp.is_not_null %403 : !pdl.value -> ^bb770, ^bb1
  ^bb770:  // pred: ^bb769
    pdl_interp.switch_operation_name of %404 to ["math.cos", "math.sin"](^bb771, ^bb791) -> ^bb1
  ^bb771:  // pred: ^bb770
    pdl_interp.check_operand_count of %404 is 1 -> ^bb772, ^bb1
  ^bb772:  // pred: ^bb771
    pdl_interp.check_result_count of %404 is 1 -> ^bb773, ^bb1
  ^bb773:  // pred: ^bb772
    %406 = pdl_interp.get_result 0 of %404
    pdl_interp.is_not_null %406 : !pdl.value -> ^bb774, ^bb1
  ^bb774:  // pred: ^bb773
    pdl_interp.are_equal %406, %403 : !pdl.value -> ^bb775, ^bb1
  ^bb775:  // pred: ^bb774
    pdl_interp.check_operation_name of %405 is "math.cos" -> ^bb776, ^bb1
  ^bb776:  // pred: ^bb775
    pdl_interp.check_operand_count of %405 is 1 -> ^bb777, ^bb1
  ^bb777:  // pred: ^bb776
    pdl_interp.check_result_count of %405 is 1 -> ^bb778, ^bb1
  ^bb778:  // pred: ^bb777
    %407 = pdl_interp.get_result 0 of %405
    pdl_interp.is_not_null %407 : !pdl.value -> ^bb779, ^bb1
  ^bb779:  // pred: ^bb778
    pdl_interp.are_equal %407, %400 : !pdl.value -> ^bb780, ^bb1
  ^bb780:  // pred: ^bb779
    %408 = pdl_interp.get_operand 0 of %405
    pdl_interp.is_not_null %408 : !pdl.value -> ^bb781, ^bb1
  ^bb781:  // pred: ^bb780
    %409 = pdl_interp.get_value_type of %408 : !pdl.type
    pdl_interp.check_type %409 is f32 -> ^bb782, ^bb1
  ^bb782:  // pred: ^bb781
    %410 = pdl_interp.get_value_type of %407 : !pdl.type
    pdl_interp.are_equal %409, %410 : !pdl.type -> ^bb783, ^bb1
  ^bb783:  // pred: ^bb782
    %411 = pdl_interp.get_value_type of %399 : !pdl.type
    pdl_interp.are_equal %409, %411 : !pdl.type -> ^bb784, ^bb1
  ^bb784:  // pred: ^bb783
    %412 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %409, %412 : !pdl.type -> ^bb785, ^bb1
  ^bb785:  // pred: ^bb784
    %413 = pdl_interp.get_value_type of %406 : !pdl.type
    pdl_interp.are_equal %409, %413 : !pdl.type -> ^bb786, ^bb1
  ^bb786:  // pred: ^bb785
    %414 = pdl_interp.get_attribute "value" of %398
    pdl_interp.is_not_null %414 : !pdl.attribute -> ^bb787, ^bb1
  ^bb787:  // pred: ^bb786
    pdl_interp.check_attribute %414 is 1.000000e+00 : f32 -> ^bb788, ^bb1
  ^bb788:  // pred: ^bb787
    %415 = pdl_interp.get_value_type of %402 : !pdl.type
    pdl_interp.are_equal %409, %415 : !pdl.type -> ^bb789, ^bb1
  ^bb789:  // pred: ^bb788
    %416 = pdl_interp.get_operand 0 of %404
    pdl_interp.are_equal %408, %416 : !pdl.value -> ^bb790, ^bb1
  ^bb790:  // pred: ^bb789
    pdl_interp.record_match @rewriters::@sub_1_cos(%408, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.mulf", "arith.negf"]), loc([%arg0, %398, %2, %404, %405]), root("arith.subf") -> ^bb1
  ^bb791:  // pred: ^bb770
    pdl_interp.check_operand_count of %404 is 1 -> ^bb792, ^bb1
  ^bb792:  // pred: ^bb791
    pdl_interp.check_result_count of %404 is 1 -> ^bb793, ^bb1
  ^bb793:  // pred: ^bb792
    %417 = pdl_interp.get_result 0 of %404
    pdl_interp.is_not_null %417 : !pdl.value -> ^bb794, ^bb1
  ^bb794:  // pred: ^bb793
    pdl_interp.are_equal %417, %403 : !pdl.value -> ^bb795, ^bb1
  ^bb795:  // pred: ^bb794
    pdl_interp.check_operation_name of %405 is "math.sin" -> ^bb796, ^bb1
  ^bb796:  // pred: ^bb795
    pdl_interp.check_operand_count of %405 is 1 -> ^bb797, ^bb1
  ^bb797:  // pred: ^bb796
    pdl_interp.check_result_count of %405 is 1 -> ^bb798, ^bb1
  ^bb798:  // pred: ^bb797
    %418 = pdl_interp.get_result 0 of %405
    pdl_interp.is_not_null %418 : !pdl.value -> ^bb799, ^bb1
  ^bb799:  // pred: ^bb798
    pdl_interp.are_equal %418, %400 : !pdl.value -> ^bb800, ^bb1
  ^bb800:  // pred: ^bb799
    %419 = pdl_interp.get_operand 0 of %405
    pdl_interp.is_not_null %419 : !pdl.value -> ^bb801, ^bb1
  ^bb801:  // pred: ^bb800
    %420 = pdl_interp.get_value_type of %419 : !pdl.type
    pdl_interp.check_type %420 is f32 -> ^bb802, ^bb1
  ^bb802:  // pred: ^bb801
    %421 = pdl_interp.get_value_type of %418 : !pdl.type
    pdl_interp.are_equal %420, %421 : !pdl.type -> ^bb803, ^bb1
  ^bb803:  // pred: ^bb802
    %422 = pdl_interp.get_value_type of %399 : !pdl.type
    pdl_interp.are_equal %420, %422 : !pdl.type -> ^bb804, ^bb1
  ^bb804:  // pred: ^bb803
    %423 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %420, %423 : !pdl.type -> ^bb805, ^bb1
  ^bb805:  // pred: ^bb804
    %424 = pdl_interp.get_value_type of %417 : !pdl.type
    pdl_interp.are_equal %420, %424 : !pdl.type -> ^bb806, ^bb1
  ^bb806:  // pred: ^bb805
    %425 = pdl_interp.get_attribute "value" of %398
    pdl_interp.is_not_null %425 : !pdl.attribute -> ^bb807, ^bb1
  ^bb807:  // pred: ^bb806
    pdl_interp.check_attribute %425 is 1.000000e+00 : f32 -> ^bb808, ^bb1
  ^bb808:  // pred: ^bb807
    %426 = pdl_interp.get_value_type of %402 : !pdl.type
    pdl_interp.are_equal %420, %426 : !pdl.type -> ^bb809, ^bb1
  ^bb809:  // pred: ^bb808
    %427 = pdl_interp.get_operand 0 of %404
    pdl_interp.are_equal %419, %427 : !pdl.value -> ^bb810, ^bb1
  ^bb810:  // pred: ^bb809
    pdl_interp.record_match @rewriters::@sub_1_sin(%419, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.mulf", "arith.negf"]), loc([%arg0, %398, %2, %404, %405]), root("arith.subf") -> ^bb1
  ^bb811:  // pred: ^bb762
    pdl_interp.check_operand_count of %398 is 2 -> ^bb812, ^bb1
  ^bb812:  // pred: ^bb811
    pdl_interp.check_result_count of %398 is 1 -> ^bb813, ^bb1
  ^bb813:  // pred: ^bb812
    %428 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %428 : !pdl.value -> ^bb814, ^bb1
  ^bb814:  // pred: ^bb813
    pdl_interp.are_equal %428, %397 : !pdl.value -> ^bb815, ^bb1
  ^bb815:  // pred: ^bb814
    %429 = pdl_interp.get_operand 1 of %2
    %430 = pdl_interp.get_defining_op of %429 : !pdl.value
    pdl_interp.is_not_null %430 : !pdl.operation -> ^bb816, ^bb1
  ^bb816:  // pred: ^bb815
    %431 = pdl_interp.get_defining_op of %400 : !pdl.value
    pdl_interp.is_not_null %431 : !pdl.operation -> ^bb817, ^bb1
  ^bb817:  // pred: ^bb816
    pdl_interp.is_not_null %429 : !pdl.value -> ^bb818, ^bb1
  ^bb818:  // pred: ^bb817
    %432 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %432 : !pdl.value -> ^bb819, ^bb1
  ^bb819:  // pred: ^bb818
    %433 = pdl_interp.get_defining_op of %432 : !pdl.value
    pdl_interp.is_not_null %433 : !pdl.operation -> ^bb820, ^bb1
  ^bb820:  // pred: ^bb819
    %434 = pdl_interp.get_operand 1 of %398
    %435 = pdl_interp.get_defining_op of %434 : !pdl.value
    pdl_interp.is_not_null %435 : !pdl.operation -> ^bb821, ^bb1
  ^bb821:  // pred: ^bb820
    pdl_interp.switch_operation_name of %430 to ["math.sin", "math.cos", "math.powf", "math.cosh"](^bb822, ^bb875, ^bb946, ^bb999) -> ^bb1
  ^bb822:  // pred: ^bb821
    pdl_interp.check_operand_count of %430 is 1 -> ^bb823, ^bb1
  ^bb823:  // pred: ^bb822
    pdl_interp.check_result_count of %430 is 1 -> ^bb824, ^bb1
  ^bb824:  // pred: ^bb823
    %436 = pdl_interp.get_result 0 of %430
    pdl_interp.is_not_null %436 : !pdl.value -> ^bb825, ^bb1
  ^bb825:  // pred: ^bb824
    pdl_interp.are_equal %436, %429 : !pdl.value -> ^bb826, ^bb1
  ^bb826:  // pred: ^bb825
    pdl_interp.check_operation_name of %431 is "arith.constant" -> ^bb827, ^bb1
  ^bb827:  // pred: ^bb826
    pdl_interp.check_operand_count of %431 is 0 -> ^bb828, ^bb1
  ^bb828:  // pred: ^bb827
    pdl_interp.check_result_count of %431 is 1 -> ^bb829, ^bb1
  ^bb829:  // pred: ^bb828
    %437 = pdl_interp.get_result 0 of %431
    pdl_interp.is_not_null %437 : !pdl.value -> ^bb830, ^bb1
  ^bb830:  // pred: ^bb829
    pdl_interp.are_equal %437, %400 : !pdl.value -> ^bb831, ^bb1
  ^bb831:  // pred: ^bb830
    pdl_interp.is_not_null %434 : !pdl.value -> ^bb832, ^bb1
  ^bb832:  // pred: ^bb831
    pdl_interp.check_operation_name of %433 is "arith.constant" -> ^bb833, ^bb1
  ^bb833:  // pred: ^bb832
    pdl_interp.check_operand_count of %433 is 0 -> ^bb834, ^bb1
  ^bb834:  // pred: ^bb833
    pdl_interp.check_result_count of %433 is 1 -> ^bb835, ^bb1
  ^bb835:  // pred: ^bb834
    %438 = pdl_interp.get_result 0 of %433
    pdl_interp.is_not_null %438 : !pdl.value -> ^bb836, ^bb1
  ^bb836:  // pred: ^bb835
    pdl_interp.are_equal %438, %432 : !pdl.value -> ^bb837, ^bb1
  ^bb837:  // pred: ^bb836
    pdl_interp.check_operation_name of %435 is "math.powf" -> ^bb838, ^bb1
  ^bb838:  // pred: ^bb837
    pdl_interp.check_operand_count of %435 is 2 -> ^bb839, ^bb1
  ^bb839:  // pred: ^bb838
    pdl_interp.check_result_count of %435 is 1 -> ^bb840, ^bb1
  ^bb840:  // pred: ^bb839
    %439 = pdl_interp.get_result 0 of %435
    pdl_interp.is_not_null %439 : !pdl.value -> ^bb841, ^bb1
  ^bb841:  // pred: ^bb840
    pdl_interp.are_equal %439, %434 : !pdl.value -> ^bb842, ^bb1
  ^bb842:  // pred: ^bb841
    %440 = pdl_interp.get_operand 0 of %430
    pdl_interp.is_not_null %440 : !pdl.value -> ^bb843, ^bb1
  ^bb843:  // pred: ^bb842
    %441 = pdl_interp.get_attribute "value" of %431
    pdl_interp.is_not_null %441 : !pdl.attribute -> ^bb844, ^bb1
  ^bb844:  // pred: ^bb843
    pdl_interp.check_attribute %441 is 3.000000e+00 : f32 -> ^bb845, ^bb1
  ^bb845:  // pred: ^bb844
    %442 = pdl_interp.get_value_type of %437 : !pdl.type
    pdl_interp.check_type %442 is f32 -> ^bb846, ^bb1
  ^bb846:  // pred: ^bb845
    %443 = pdl_interp.get_value_type of %399 : !pdl.type
    pdl_interp.are_equal %442, %443 : !pdl.type -> ^bb847, ^bb1
  ^bb847:  // pred: ^bb846
    %444 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %442, %444 : !pdl.type -> ^bb848, ^bb1
  ^bb848:  // pred: ^bb847
    %445 = pdl_interp.get_operand 0 of %435
    %446 = pdl_interp.get_defining_op of %445 : !pdl.value
    pdl_interp.is_not_null %446 : !pdl.operation -> ^bb849, ^bb1
  ^bb849:  // pred: ^bb848
    %447 = pdl_interp.get_value_type of %436 : !pdl.type
    pdl_interp.are_equal %442, %447 : !pdl.type -> ^bb850, ^bb1
  ^bb850:  // pred: ^bb849
    pdl_interp.is_not_null %445 : !pdl.value -> ^bb851, ^bb1
  ^bb851:  // pred: ^bb850
    pdl_interp.check_operation_name of %446 is "math.sin" -> ^bb852, ^bb1
  ^bb852:  // pred: ^bb851
    pdl_interp.check_operand_count of %446 is 1 -> ^bb853, ^bb1
  ^bb853:  // pred: ^bb852
    pdl_interp.check_result_count of %446 is 1 -> ^bb854, ^bb1
  ^bb854:  // pred: ^bb853
    %448 = pdl_interp.get_result 0 of %446
    pdl_interp.is_not_null %448 : !pdl.value -> ^bb855, ^bb1
  ^bb855:  // pred: ^bb854
    pdl_interp.are_equal %448, %445 : !pdl.value -> ^bb856, ^bb1
  ^bb856:  // pred: ^bb855
    %449 = pdl_interp.get_attribute "value" of %433
    pdl_interp.is_not_null %449 : !pdl.attribute -> ^bb857, ^bb1
  ^bb857:  // pred: ^bb856
    pdl_interp.check_attribute %449 is 4.000000e+00 : f32 -> ^bb858, ^bb1
  ^bb858:  // pred: ^bb857
    %450 = pdl_interp.get_operand 1 of %435
    %451 = pdl_interp.get_defining_op of %450 : !pdl.value
    pdl_interp.is_not_null %451 : !pdl.operation -> ^bb859, ^bb1
  ^bb859:  // pred: ^bb858
    %452 = pdl_interp.get_value_type of %428 : !pdl.type
    pdl_interp.are_equal %442, %452 : !pdl.type -> ^bb860, ^bb1
  ^bb860:  // pred: ^bb859
    %453 = pdl_interp.get_value_type of %440 : !pdl.type
    pdl_interp.are_equal %442, %453 : !pdl.type -> ^bb861, ^bb1
  ^bb861:  // pred: ^bb860
    %454 = pdl_interp.get_value_type of %438 : !pdl.type
    pdl_interp.are_equal %442, %454 : !pdl.type -> ^bb862, ^bb1
  ^bb862:  // pred: ^bb861
    pdl_interp.is_not_null %450 : !pdl.value -> ^bb863, ^bb1
  ^bb863:  // pred: ^bb862
    pdl_interp.check_operation_name of %451 is "arith.constant" -> ^bb864, ^bb1
  ^bb864:  // pred: ^bb863
    pdl_interp.check_operand_count of %451 is 0 -> ^bb865, ^bb1
  ^bb865:  // pred: ^bb864
    pdl_interp.check_result_count of %451 is 1 -> ^bb866, ^bb1
  ^bb866:  // pred: ^bb865
    %455 = pdl_interp.get_result 0 of %451
    pdl_interp.is_not_null %455 : !pdl.value -> ^bb867, ^bb1
  ^bb867:  // pred: ^bb866
    pdl_interp.are_equal %455, %450 : !pdl.value -> ^bb868, ^bb1
  ^bb868:  // pred: ^bb867
    %456 = pdl_interp.get_value_type of %439 : !pdl.type
    pdl_interp.are_equal %442, %456 : !pdl.type -> ^bb869, ^bb1
  ^bb869:  // pred: ^bb868
    %457 = pdl_interp.get_value_type of %448 : !pdl.type
    pdl_interp.are_equal %457, %442 : !pdl.type -> ^bb870, ^bb1
  ^bb870:  // pred: ^bb869
    %458 = pdl_interp.get_operand 0 of %446
    pdl_interp.are_equal %458, %440 : !pdl.value -> ^bb871, ^bb1
  ^bb871:  // pred: ^bb870
    %459 = pdl_interp.get_value_type of %455 : !pdl.type
    pdl_interp.are_equal %459, %442 : !pdl.type -> ^bb872, ^bb1
  ^bb872:  // pred: ^bb871
    %460 = pdl_interp.get_attribute "value" of %451
    pdl_interp.is_not_null %460 : !pdl.attribute -> ^bb873, ^bb1
  ^bb873:  // pred: ^bb872
    pdl_interp.check_attribute %460 is 3.000000e+00 : f32 -> ^bb874, ^bb1
  ^bb874:  // pred: ^bb873
    pdl_interp.record_match @rewriters::@_3_sin(%440, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.sin"]), loc([%arg0, %2, %398, %430, %431, %433, %435, %446, %451]), root("arith.subf") -> ^bb1
  ^bb875:  // pred: ^bb821
    pdl_interp.check_operand_count of %430 is 1 -> ^bb876, ^bb1
  ^bb876:  // pred: ^bb875
    pdl_interp.check_result_count of %430 is 1 -> ^bb877, ^bb1
  ^bb877:  // pred: ^bb876
    %461 = pdl_interp.get_result 0 of %430
    pdl_interp.is_not_null %461 : !pdl.value -> ^bb878, ^bb1
  ^bb878:  // pred: ^bb877
    pdl_interp.are_equal %461, %429 : !pdl.value -> ^bb879, ^bb1
  ^bb879:  // pred: ^bb878
    pdl_interp.switch_operation_name of %431 to ["math.cos", "math.sin"](^bb880, ^bb917) -> ^bb1
  ^bb880:  // pred: ^bb879
    pdl_interp.check_operand_count of %431 is 1 -> ^bb881, ^bb1
  ^bb881:  // pred: ^bb880
    pdl_interp.check_result_count of %431 is 1 -> ^bb882, ^bb1
  ^bb882:  // pred: ^bb881
    %462 = pdl_interp.get_result 0 of %431
    pdl_interp.is_not_null %462 : !pdl.value -> ^bb883, ^bb1
  ^bb883:  // pred: ^bb882
    pdl_interp.are_equal %462, %400 : !pdl.value -> ^bb884, ^bb1
  ^bb884:  // pred: ^bb883
    pdl_interp.is_not_null %434 : !pdl.value -> ^bb885, ^bb1
  ^bb885:  // pred: ^bb884
    pdl_interp.check_operation_name of %433 is "math.sin" -> ^bb886, ^bb1
  ^bb886:  // pred: ^bb885
    pdl_interp.check_operand_count of %433 is 1 -> ^bb887, ^bb1
  ^bb887:  // pred: ^bb886
    pdl_interp.check_result_count of %433 is 1 -> ^bb888, ^bb1
  ^bb888:  // pred: ^bb887
    %463 = pdl_interp.get_result 0 of %433
    pdl_interp.is_not_null %463 : !pdl.value -> ^bb889, ^bb1
  ^bb889:  // pred: ^bb888
    pdl_interp.are_equal %463, %432 : !pdl.value -> ^bb890, ^bb1
  ^bb890:  // pred: ^bb889
    pdl_interp.check_operation_name of %435 is "math.sin" -> ^bb891, ^bb1
  ^bb891:  // pred: ^bb890
    pdl_interp.check_operand_count of %435 is 1 -> ^bb892, ^bb1
  ^bb892:  // pred: ^bb891
    pdl_interp.check_result_count of %435 is 1 -> ^bb893, ^bb1
  ^bb893:  // pred: ^bb892
    %464 = pdl_interp.get_result 0 of %435
    pdl_interp.is_not_null %464 : !pdl.value -> ^bb894, ^bb1
  ^bb894:  // pred: ^bb893
    pdl_interp.are_equal %464, %434 : !pdl.value -> ^bb895, ^bb1
  ^bb895:  // pred: ^bb894
    %465 = pdl_interp.get_operand 0 of %431
    pdl_interp.is_not_null %465 : !pdl.value -> ^bb896, ^bb1
  ^bb896:  // pred: ^bb895
    %466 = pdl_interp.get_value_type of %465 : !pdl.type
    pdl_interp.check_type %466 is f32 -> ^bb897, ^bb1
  ^bb897:  // pred: ^bb896
    %467 = pdl_interp.get_value_type of %462 : !pdl.type
    pdl_interp.are_equal %466, %467 : !pdl.type -> ^bb898, ^bb1
  ^bb898:  // pred: ^bb897
    %468 = pdl_interp.get_value_type of %399 : !pdl.type
    pdl_interp.are_equal %466, %468 : !pdl.type -> ^bb899, ^bb1
  ^bb899:  // pred: ^bb898
    %469 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %466, %469 : !pdl.type -> ^bb900, ^bb1
  ^bb900:  // pred: ^bb899
    %470 = pdl_interp.get_value_type of %461 : !pdl.type
    pdl_interp.are_equal %466, %470 : !pdl.type -> ^bb910, ^bb901
  ^bb901:  // 8 preds: ^bb900, ^bb910, ^bb911, ^bb912, ^bb913, ^bb914, ^bb915, ^bb916
    %471 = pdl_interp.get_operand 0 of %430
    pdl_interp.is_not_null %471 : !pdl.value -> ^bb902, ^bb1
  ^bb902:  // pred: ^bb901
    %472 = pdl_interp.get_value_type of %461 : !pdl.type
    pdl_interp.are_equal %466, %472 : !pdl.type -> ^bb903, ^bb1
  ^bb903:  // pred: ^bb902
    %473 = pdl_interp.get_value_type of %428 : !pdl.type
    pdl_interp.are_equal %466, %473 : !pdl.type -> ^bb904, ^bb1
  ^bb904:  // pred: ^bb903
    %474 = pdl_interp.get_value_type of %464 : !pdl.type
    pdl_interp.are_equal %466, %474 : !pdl.type -> ^bb905, ^bb1
  ^bb905:  // pred: ^bb904
    %475 = pdl_interp.get_value_type of %463 : !pdl.type
    pdl_interp.are_equal %466, %475 : !pdl.type -> ^bb906, ^bb1
  ^bb906:  // pred: ^bb905
    %476 = pdl_interp.get_operand 0 of %433
    pdl_interp.are_equal %465, %476 : !pdl.value -> ^bb907, ^bb1
  ^bb907:  // pred: ^bb906
    %477 = pdl_interp.get_value_type of %471 : !pdl.type
    pdl_interp.are_equal %466, %477 : !pdl.type -> ^bb908, ^bb1
  ^bb908:  // pred: ^bb907
    %478 = pdl_interp.get_operand 0 of %435
    pdl_interp.are_equal %471, %478 : !pdl.value -> ^bb909, ^bb1
  ^bb909:  // pred: ^bb908
    pdl_interp.record_match @rewriters::@cos_sum_rev(%465, %471, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "math.cos"]), loc([%arg0, %2, %398, %430, %431, %433, %435]), root("arith.subf") -> ^bb1
  ^bb910:  // pred: ^bb900
    %479 = pdl_interp.get_value_type of %428 : !pdl.type
    pdl_interp.are_equal %466, %479 : !pdl.type -> ^bb911, ^bb901
  ^bb911:  // pred: ^bb910
    %480 = pdl_interp.get_value_type of %464 : !pdl.type
    pdl_interp.are_equal %466, %480 : !pdl.type -> ^bb912, ^bb901
  ^bb912:  // pred: ^bb911
    %481 = pdl_interp.get_value_type of %463 : !pdl.type
    pdl_interp.are_equal %466, %481 : !pdl.type -> ^bb913, ^bb901
  ^bb913:  // pred: ^bb912
    %482 = pdl_interp.get_operand 0 of %433
    pdl_interp.are_equal %465, %482 : !pdl.value -> ^bb914, ^bb901
  ^bb914:  // pred: ^bb913
    %483 = pdl_interp.get_operand 0 of %430
    pdl_interp.are_equal %465, %483 : !pdl.value -> ^bb915, ^bb901
  ^bb915:  // pred: ^bb914
    %484 = pdl_interp.get_operand 0 of %435
    pdl_interp.are_equal %465, %484 : !pdl.value -> ^bb916, ^bb901
  ^bb916:  // pred: ^bb915
    pdl_interp.record_match @rewriters::@_2_cos(%465, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.cos"]), loc([%arg0, %2, %398, %430, %431, %433, %435]), root("arith.subf") -> ^bb901
  ^bb917:  // pred: ^bb879
    pdl_interp.check_operand_count of %431 is 1 -> ^bb918, ^bb1
  ^bb918:  // pred: ^bb917
    pdl_interp.check_result_count of %431 is 1 -> ^bb919, ^bb1
  ^bb919:  // pred: ^bb918
    %485 = pdl_interp.get_result 0 of %431
    pdl_interp.is_not_null %485 : !pdl.value -> ^bb920, ^bb1
  ^bb920:  // pred: ^bb919
    pdl_interp.are_equal %485, %400 : !pdl.value -> ^bb921, ^bb1
  ^bb921:  // pred: ^bb920
    pdl_interp.is_not_null %434 : !pdl.value -> ^bb922, ^bb1
  ^bb922:  // pred: ^bb921
    pdl_interp.check_operation_name of %433 is "math.cos" -> ^bb923, ^bb1
  ^bb923:  // pred: ^bb922
    pdl_interp.check_operand_count of %433 is 1 -> ^bb924, ^bb1
  ^bb924:  // pred: ^bb923
    pdl_interp.check_result_count of %433 is 1 -> ^bb925, ^bb1
  ^bb925:  // pred: ^bb924
    %486 = pdl_interp.get_result 0 of %433
    pdl_interp.is_not_null %486 : !pdl.value -> ^bb926, ^bb1
  ^bb926:  // pred: ^bb925
    pdl_interp.are_equal %486, %432 : !pdl.value -> ^bb927, ^bb1
  ^bb927:  // pred: ^bb926
    pdl_interp.check_operation_name of %435 is "math.sin" -> ^bb928, ^bb1
  ^bb928:  // pred: ^bb927
    pdl_interp.check_operand_count of %435 is 1 -> ^bb929, ^bb1
  ^bb929:  // pred: ^bb928
    pdl_interp.check_result_count of %435 is 1 -> ^bb930, ^bb1
  ^bb930:  // pred: ^bb929
    %487 = pdl_interp.get_result 0 of %435
    pdl_interp.is_not_null %487 : !pdl.value -> ^bb931, ^bb1
  ^bb931:  // pred: ^bb930
    pdl_interp.are_equal %487, %434 : !pdl.value -> ^bb932, ^bb1
  ^bb932:  // pred: ^bb931
    %488 = pdl_interp.get_operand 0 of %431
    pdl_interp.is_not_null %488 : !pdl.value -> ^bb933, ^bb1
  ^bb933:  // pred: ^bb932
    %489 = pdl_interp.get_value_type of %488 : !pdl.type
    pdl_interp.check_type %489 is f32 -> ^bb934, ^bb1
  ^bb934:  // pred: ^bb933
    %490 = pdl_interp.get_value_type of %485 : !pdl.type
    pdl_interp.are_equal %489, %490 : !pdl.type -> ^bb935, ^bb1
  ^bb935:  // pred: ^bb934
    %491 = pdl_interp.get_value_type of %399 : !pdl.type
    pdl_interp.are_equal %489, %491 : !pdl.type -> ^bb936, ^bb1
  ^bb936:  // pred: ^bb935
    %492 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %489, %492 : !pdl.type -> ^bb937, ^bb1
  ^bb937:  // pred: ^bb936
    %493 = pdl_interp.get_operand 0 of %430
    pdl_interp.is_not_null %493 : !pdl.value -> ^bb938, ^bb1
  ^bb938:  // pred: ^bb937
    %494 = pdl_interp.get_value_type of %461 : !pdl.type
    pdl_interp.are_equal %489, %494 : !pdl.type -> ^bb939, ^bb1
  ^bb939:  // pred: ^bb938
    %495 = pdl_interp.get_value_type of %428 : !pdl.type
    pdl_interp.are_equal %489, %495 : !pdl.type -> ^bb940, ^bb1
  ^bb940:  // pred: ^bb939
    %496 = pdl_interp.get_value_type of %487 : !pdl.type
    pdl_interp.are_equal %489, %496 : !pdl.type -> ^bb941, ^bb1
  ^bb941:  // pred: ^bb940
    %497 = pdl_interp.get_value_type of %486 : !pdl.type
    pdl_interp.are_equal %489, %497 : !pdl.type -> ^bb942, ^bb1
  ^bb942:  // pred: ^bb941
    %498 = pdl_interp.get_operand 0 of %433
    pdl_interp.are_equal %488, %498 : !pdl.value -> ^bb943, ^bb1
  ^bb943:  // pred: ^bb942
    %499 = pdl_interp.get_value_type of %493 : !pdl.type
    pdl_interp.are_equal %489, %499 : !pdl.type -> ^bb944, ^bb1
  ^bb944:  // pred: ^bb943
    %500 = pdl_interp.get_operand 0 of %435
    pdl_interp.are_equal %493, %500 : !pdl.value -> ^bb945, ^bb1
  ^bb945:  // pred: ^bb944
    pdl_interp.record_match @rewriters::@sin_diff_rev(%488, %493, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "math.sin"]), loc([%arg0, %2, %398, %430, %431, %433, %435]), root("arith.subf") -> ^bb1
  ^bb946:  // pred: ^bb821
    pdl_interp.check_operand_count of %430 is 2 -> ^bb947, ^bb1
  ^bb947:  // pred: ^bb946
    pdl_interp.check_result_count of %430 is 1 -> ^bb948, ^bb1
  ^bb948:  // pred: ^bb947
    %501 = pdl_interp.get_result 0 of %430
    pdl_interp.is_not_null %501 : !pdl.value -> ^bb949, ^bb1
  ^bb949:  // pred: ^bb948
    pdl_interp.are_equal %501, %429 : !pdl.value -> ^bb950, ^bb1
  ^bb950:  // pred: ^bb949
    pdl_interp.check_operation_name of %431 is "arith.constant" -> ^bb951, ^bb1
  ^bb951:  // pred: ^bb950
    pdl_interp.check_operand_count of %431 is 0 -> ^bb952, ^bb1
  ^bb952:  // pred: ^bb951
    pdl_interp.check_result_count of %431 is 1 -> ^bb953, ^bb1
  ^bb953:  // pred: ^bb952
    %502 = pdl_interp.get_result 0 of %431
    pdl_interp.is_not_null %502 : !pdl.value -> ^bb954, ^bb1
  ^bb954:  // pred: ^bb953
    pdl_interp.are_equal %502, %400 : !pdl.value -> ^bb955, ^bb1
  ^bb955:  // pred: ^bb954
    pdl_interp.is_not_null %434 : !pdl.value -> ^bb956, ^bb1
  ^bb956:  // pred: ^bb955
    pdl_interp.check_operation_name of %433 is "arith.constant" -> ^bb957, ^bb1
  ^bb957:  // pred: ^bb956
    pdl_interp.check_operand_count of %433 is 0 -> ^bb958, ^bb1
  ^bb958:  // pred: ^bb957
    pdl_interp.check_result_count of %433 is 1 -> ^bb959, ^bb1
  ^bb959:  // pred: ^bb958
    %503 = pdl_interp.get_result 0 of %433
    pdl_interp.is_not_null %503 : !pdl.value -> ^bb960, ^bb1
  ^bb960:  // pred: ^bb959
    pdl_interp.are_equal %503, %432 : !pdl.value -> ^bb961, ^bb1
  ^bb961:  // pred: ^bb960
    pdl_interp.check_operation_name of %435 is "math.cos" -> ^bb962, ^bb1
  ^bb962:  // pred: ^bb961
    pdl_interp.check_operand_count of %435 is 1 -> ^bb963, ^bb1
  ^bb963:  // pred: ^bb962
    pdl_interp.check_result_count of %435 is 1 -> ^bb964, ^bb1
  ^bb964:  // pred: ^bb963
    %504 = pdl_interp.get_result 0 of %435
    pdl_interp.is_not_null %504 : !pdl.value -> ^bb965, ^bb1
  ^bb965:  // pred: ^bb964
    pdl_interp.are_equal %504, %434 : !pdl.value -> ^bb966, ^bb1
  ^bb966:  // pred: ^bb965
    %505 = pdl_interp.get_operand 0 of %430
    pdl_interp.is_not_null %505 : !pdl.value -> ^bb967, ^bb1
  ^bb967:  // pred: ^bb966
    %506 = pdl_interp.get_defining_op of %505 : !pdl.value
    pdl_interp.is_not_null %506 : !pdl.operation -> ^bb968, ^bb1
  ^bb968:  // pred: ^bb967
    %507 = pdl_interp.get_attribute "value" of %431
    pdl_interp.is_not_null %507 : !pdl.attribute -> ^bb969, ^bb1
  ^bb969:  // pred: ^bb968
    pdl_interp.check_attribute %507 is 4.000000e+00 : f32 -> ^bb970, ^bb1
  ^bb970:  // pred: ^bb969
    %508 = pdl_interp.get_value_type of %502 : !pdl.type
    pdl_interp.check_type %508 is f32 -> ^bb971, ^bb1
  ^bb971:  // pred: ^bb970
    %509 = pdl_interp.get_value_type of %399 : !pdl.type
    pdl_interp.are_equal %508, %509 : !pdl.type -> ^bb972, ^bb1
  ^bb972:  // pred: ^bb971
    %510 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %508, %510 : !pdl.type -> ^bb973, ^bb1
  ^bb973:  // pred: ^bb972
    %511 = pdl_interp.get_value_type of %501 : !pdl.type
    pdl_interp.are_equal %508, %511 : !pdl.type -> ^bb974, ^bb1
  ^bb974:  // pred: ^bb973
    %512 = pdl_interp.get_operand 1 of %430
    %513 = pdl_interp.get_defining_op of %512 : !pdl.value
    pdl_interp.is_not_null %513 : !pdl.operation -> ^bb975, ^bb1
  ^bb975:  // pred: ^bb974
    pdl_interp.check_operation_name of %506 is "math.cos" -> ^bb976, ^bb1
  ^bb976:  // pred: ^bb975
    pdl_interp.check_operand_count of %506 is 1 -> ^bb977, ^bb1
  ^bb977:  // pred: ^bb976
    pdl_interp.check_result_count of %506 is 1 -> ^bb978, ^bb1
  ^bb978:  // pred: ^bb977
    %514 = pdl_interp.get_result 0 of %506
    pdl_interp.is_not_null %514 : !pdl.value -> ^bb979, ^bb1
  ^bb979:  // pred: ^bb978
    pdl_interp.are_equal %514, %505 : !pdl.value -> ^bb980, ^bb1
  ^bb980:  // pred: ^bb979
    %515 = pdl_interp.get_attribute "value" of %433
    pdl_interp.is_not_null %515 : !pdl.attribute -> ^bb981, ^bb1
  ^bb981:  // pred: ^bb980
    pdl_interp.check_attribute %515 is 3.000000e+00 : f32 -> ^bb982, ^bb1
  ^bb982:  // pred: ^bb981
    pdl_interp.is_not_null %512 : !pdl.value -> ^bb983, ^bb1
  ^bb983:  // pred: ^bb982
    pdl_interp.check_operation_name of %513 is "arith.constant" -> ^bb984, ^bb1
  ^bb984:  // pred: ^bb983
    pdl_interp.check_operand_count of %513 is 0 -> ^bb985, ^bb1
  ^bb985:  // pred: ^bb984
    pdl_interp.check_result_count of %513 is 1 -> ^bb986, ^bb1
  ^bb986:  // pred: ^bb985
    %516 = pdl_interp.get_result 0 of %513
    pdl_interp.is_not_null %516 : !pdl.value -> ^bb987, ^bb1
  ^bb987:  // pred: ^bb986
    pdl_interp.are_equal %516, %512 : !pdl.value -> ^bb988, ^bb1
  ^bb988:  // pred: ^bb987
    %517 = pdl_interp.get_value_type of %428 : !pdl.type
    pdl_interp.are_equal %508, %517 : !pdl.type -> ^bb989, ^bb1
  ^bb989:  // pred: ^bb988
    %518 = pdl_interp.get_value_type of %503 : !pdl.type
    pdl_interp.are_equal %508, %518 : !pdl.type -> ^bb990, ^bb1
  ^bb990:  // pred: ^bb989
    %519 = pdl_interp.get_operand 0 of %506
    pdl_interp.is_not_null %519 : !pdl.value -> ^bb991, ^bb1
  ^bb991:  // pred: ^bb990
    %520 = pdl_interp.get_attribute "value" of %513
    pdl_interp.is_not_null %520 : !pdl.attribute -> ^bb992, ^bb1
  ^bb992:  // pred: ^bb991
    pdl_interp.check_attribute %520 is 3.000000e+00 : f32 -> ^bb993, ^bb1
  ^bb993:  // pred: ^bb992
    %521 = pdl_interp.get_value_type of %504 : !pdl.type
    pdl_interp.are_equal %508, %521 : !pdl.type -> ^bb994, ^bb1
  ^bb994:  // pred: ^bb993
    %522 = pdl_interp.get_value_type of %514 : !pdl.type
    pdl_interp.are_equal %522, %508 : !pdl.type -> ^bb995, ^bb1
  ^bb995:  // pred: ^bb994
    %523 = pdl_interp.get_operand 0 of %435
    pdl_interp.are_equal %519, %523 : !pdl.value -> ^bb996, ^bb1
  ^bb996:  // pred: ^bb995
    %524 = pdl_interp.get_value_type of %519 : !pdl.type
    pdl_interp.are_equal %524, %508 : !pdl.type -> ^bb997, ^bb1
  ^bb997:  // pred: ^bb996
    %525 = pdl_interp.get_value_type of %516 : !pdl.type
    pdl_interp.are_equal %525, %508 : !pdl.type -> ^bb998, ^bb1
  ^bb998:  // pred: ^bb997
    pdl_interp.record_match @rewriters::@_3_cos(%519, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.cos"]), loc([%arg0, %2, %398, %430, %431, %433, %435, %506, %513]), root("arith.subf") -> ^bb1
  ^bb999:  // pred: ^bb821
    pdl_interp.check_operand_count of %430 is 1 -> ^bb1000, ^bb1
  ^bb1000:  // pred: ^bb999
    pdl_interp.check_result_count of %430 is 1 -> ^bb1001, ^bb1
  ^bb1001:  // pred: ^bb1000
    %526 = pdl_interp.get_result 0 of %430
    pdl_interp.is_not_null %526 : !pdl.value -> ^bb1002, ^bb1
  ^bb1002:  // pred: ^bb1001
    pdl_interp.are_equal %526, %429 : !pdl.value -> ^bb1003, ^bb1
  ^bb1003:  // pred: ^bb1002
    pdl_interp.switch_operation_name of %431 to ["math.cosh", "math.sinh"](^bb1004, ^bb1041) -> ^bb1
  ^bb1004:  // pred: ^bb1003
    pdl_interp.check_operand_count of %431 is 1 -> ^bb1005, ^bb1
  ^bb1005:  // pred: ^bb1004
    pdl_interp.check_result_count of %431 is 1 -> ^bb1006, ^bb1
  ^bb1006:  // pred: ^bb1005
    %527 = pdl_interp.get_result 0 of %431
    pdl_interp.is_not_null %527 : !pdl.value -> ^bb1007, ^bb1
  ^bb1007:  // pred: ^bb1006
    pdl_interp.are_equal %527, %400 : !pdl.value -> ^bb1008, ^bb1
  ^bb1008:  // pred: ^bb1007
    pdl_interp.is_not_null %434 : !pdl.value -> ^bb1009, ^bb1
  ^bb1009:  // pred: ^bb1008
    pdl_interp.check_operation_name of %433 is "math.sinh" -> ^bb1010, ^bb1
  ^bb1010:  // pred: ^bb1009
    pdl_interp.check_operand_count of %433 is 1 -> ^bb1011, ^bb1
  ^bb1011:  // pred: ^bb1010
    pdl_interp.check_result_count of %433 is 1 -> ^bb1012, ^bb1
  ^bb1012:  // pred: ^bb1011
    %528 = pdl_interp.get_result 0 of %433
    pdl_interp.is_not_null %528 : !pdl.value -> ^bb1013, ^bb1
  ^bb1013:  // pred: ^bb1012
    pdl_interp.are_equal %528, %432 : !pdl.value -> ^bb1014, ^bb1
  ^bb1014:  // pred: ^bb1013
    pdl_interp.check_operation_name of %435 is "math.sinh" -> ^bb1015, ^bb1
  ^bb1015:  // pred: ^bb1014
    pdl_interp.check_operand_count of %435 is 1 -> ^bb1016, ^bb1
  ^bb1016:  // pred: ^bb1015
    pdl_interp.check_result_count of %435 is 1 -> ^bb1017, ^bb1
  ^bb1017:  // pred: ^bb1016
    %529 = pdl_interp.get_result 0 of %435
    pdl_interp.is_not_null %529 : !pdl.value -> ^bb1018, ^bb1
  ^bb1018:  // pred: ^bb1017
    pdl_interp.are_equal %529, %434 : !pdl.value -> ^bb1019, ^bb1
  ^bb1019:  // pred: ^bb1018
    %530 = pdl_interp.get_operand 0 of %431
    pdl_interp.is_not_null %530 : !pdl.value -> ^bb1020, ^bb1
  ^bb1020:  // pred: ^bb1019
    %531 = pdl_interp.get_value_type of %530 : !pdl.type
    pdl_interp.check_type %531 is f32 -> ^bb1021, ^bb1
  ^bb1021:  // pred: ^bb1020
    %532 = pdl_interp.get_value_type of %527 : !pdl.type
    pdl_interp.are_equal %531, %532 : !pdl.type -> ^bb1022, ^bb1
  ^bb1022:  // pred: ^bb1021
    %533 = pdl_interp.get_value_type of %399 : !pdl.type
    pdl_interp.are_equal %531, %533 : !pdl.type -> ^bb1023, ^bb1
  ^bb1023:  // pred: ^bb1022
    %534 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %531, %534 : !pdl.type -> ^bb1024, ^bb1
  ^bb1024:  // pred: ^bb1023
    %535 = pdl_interp.get_value_type of %526 : !pdl.type
    pdl_interp.are_equal %531, %535 : !pdl.type -> ^bb1034, ^bb1025
  ^bb1025:  // 8 preds: ^bb1024, ^bb1034, ^bb1035, ^bb1036, ^bb1037, ^bb1038, ^bb1039, ^bb1040
    %536 = pdl_interp.get_operand 0 of %430
    pdl_interp.is_not_null %536 : !pdl.value -> ^bb1026, ^bb1
  ^bb1026:  // pred: ^bb1025
    %537 = pdl_interp.get_value_type of %526 : !pdl.type
    pdl_interp.are_equal %531, %537 : !pdl.type -> ^bb1027, ^bb1
  ^bb1027:  // pred: ^bb1026
    %538 = pdl_interp.get_value_type of %428 : !pdl.type
    pdl_interp.are_equal %531, %538 : !pdl.type -> ^bb1028, ^bb1
  ^bb1028:  // pred: ^bb1027
    %539 = pdl_interp.get_value_type of %529 : !pdl.type
    pdl_interp.are_equal %531, %539 : !pdl.type -> ^bb1029, ^bb1
  ^bb1029:  // pred: ^bb1028
    %540 = pdl_interp.get_value_type of %528 : !pdl.type
    pdl_interp.are_equal %531, %540 : !pdl.type -> ^bb1030, ^bb1
  ^bb1030:  // pred: ^bb1029
    %541 = pdl_interp.get_operand 0 of %433
    pdl_interp.are_equal %530, %541 : !pdl.value -> ^bb1031, ^bb1
  ^bb1031:  // pred: ^bb1030
    %542 = pdl_interp.get_value_type of %536 : !pdl.type
    pdl_interp.are_equal %531, %542 : !pdl.type -> ^bb1032, ^bb1
  ^bb1032:  // pred: ^bb1031
    %543 = pdl_interp.get_operand 0 of %435
    pdl_interp.are_equal %536, %543 : !pdl.value -> ^bb1033, ^bb1
  ^bb1033:  // pred: ^bb1032
    pdl_interp.record_match @rewriters::@cosh_diff_rev(%530, %536, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "math.cosh"]), loc([%arg0, %2, %398, %430, %431, %433, %435]), root("arith.subf") -> ^bb1
  ^bb1034:  // pred: ^bb1024
    %544 = pdl_interp.get_value_type of %428 : !pdl.type
    pdl_interp.are_equal %531, %544 : !pdl.type -> ^bb1035, ^bb1025
  ^bb1035:  // pred: ^bb1034
    %545 = pdl_interp.get_value_type of %529 : !pdl.type
    pdl_interp.are_equal %531, %545 : !pdl.type -> ^bb1036, ^bb1025
  ^bb1036:  // pred: ^bb1035
    %546 = pdl_interp.get_value_type of %528 : !pdl.type
    pdl_interp.are_equal %531, %546 : !pdl.type -> ^bb1037, ^bb1025
  ^bb1037:  // pred: ^bb1036
    %547 = pdl_interp.get_operand 0 of %433
    pdl_interp.are_equal %530, %547 : !pdl.value -> ^bb1038, ^bb1025
  ^bb1038:  // pred: ^bb1037
    %548 = pdl_interp.get_operand 0 of %430
    pdl_interp.are_equal %530, %548 : !pdl.value -> ^bb1039, ^bb1025
  ^bb1039:  // pred: ^bb1038
    %549 = pdl_interp.get_operand 0 of %435
    pdl_interp.are_equal %530, %549 : !pdl.value -> ^bb1040, ^bb1025
  ^bb1040:  // pred: ^bb1039
    pdl_interp.record_match @rewriters::@sinh_cosh(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2, %398, %430, %431, %433, %435]), root("arith.subf") -> ^bb1025
  ^bb1041:  // pred: ^bb1003
    pdl_interp.check_operand_count of %431 is 1 -> ^bb1042, ^bb1
  ^bb1042:  // pred: ^bb1041
    pdl_interp.check_result_count of %431 is 1 -> ^bb1043, ^bb1
  ^bb1043:  // pred: ^bb1042
    %550 = pdl_interp.get_result 0 of %431
    pdl_interp.is_not_null %550 : !pdl.value -> ^bb1044, ^bb1
  ^bb1044:  // pred: ^bb1043
    pdl_interp.are_equal %550, %400 : !pdl.value -> ^bb1045, ^bb1
  ^bb1045:  // pred: ^bb1044
    pdl_interp.is_not_null %434 : !pdl.value -> ^bb1046, ^bb1
  ^bb1046:  // pred: ^bb1045
    pdl_interp.check_operation_name of %433 is "math.cosh" -> ^bb1047, ^bb1
  ^bb1047:  // pred: ^bb1046
    pdl_interp.check_operand_count of %433 is 1 -> ^bb1048, ^bb1
  ^bb1048:  // pred: ^bb1047
    pdl_interp.check_result_count of %433 is 1 -> ^bb1049, ^bb1
  ^bb1049:  // pred: ^bb1048
    %551 = pdl_interp.get_result 0 of %433
    pdl_interp.is_not_null %551 : !pdl.value -> ^bb1050, ^bb1
  ^bb1050:  // pred: ^bb1049
    pdl_interp.are_equal %551, %432 : !pdl.value -> ^bb1051, ^bb1
  ^bb1051:  // pred: ^bb1050
    pdl_interp.check_operation_name of %435 is "math.sinh" -> ^bb1052, ^bb1
  ^bb1052:  // pred: ^bb1051
    pdl_interp.check_operand_count of %435 is 1 -> ^bb1053, ^bb1
  ^bb1053:  // pred: ^bb1052
    pdl_interp.check_result_count of %435 is 1 -> ^bb1054, ^bb1
  ^bb1054:  // pred: ^bb1053
    %552 = pdl_interp.get_result 0 of %435
    pdl_interp.is_not_null %552 : !pdl.value -> ^bb1055, ^bb1
  ^bb1055:  // pred: ^bb1054
    pdl_interp.are_equal %552, %434 : !pdl.value -> ^bb1056, ^bb1
  ^bb1056:  // pred: ^bb1055
    %553 = pdl_interp.get_operand 0 of %431
    pdl_interp.is_not_null %553 : !pdl.value -> ^bb1057, ^bb1
  ^bb1057:  // pred: ^bb1056
    %554 = pdl_interp.get_value_type of %553 : !pdl.type
    pdl_interp.check_type %554 is f32 -> ^bb1058, ^bb1
  ^bb1058:  // pred: ^bb1057
    %555 = pdl_interp.get_value_type of %550 : !pdl.type
    pdl_interp.are_equal %554, %555 : !pdl.type -> ^bb1059, ^bb1
  ^bb1059:  // pred: ^bb1058
    %556 = pdl_interp.get_value_type of %399 : !pdl.type
    pdl_interp.are_equal %554, %556 : !pdl.type -> ^bb1060, ^bb1
  ^bb1060:  // pred: ^bb1059
    %557 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %554, %557 : !pdl.type -> ^bb1061, ^bb1
  ^bb1061:  // pred: ^bb1060
    %558 = pdl_interp.get_operand 0 of %430
    pdl_interp.is_not_null %558 : !pdl.value -> ^bb1062, ^bb1
  ^bb1062:  // pred: ^bb1061
    %559 = pdl_interp.get_value_type of %526 : !pdl.type
    pdl_interp.are_equal %554, %559 : !pdl.type -> ^bb1063, ^bb1
  ^bb1063:  // pred: ^bb1062
    %560 = pdl_interp.get_value_type of %428 : !pdl.type
    pdl_interp.are_equal %554, %560 : !pdl.type -> ^bb1064, ^bb1
  ^bb1064:  // pred: ^bb1063
    %561 = pdl_interp.get_value_type of %552 : !pdl.type
    pdl_interp.are_equal %554, %561 : !pdl.type -> ^bb1065, ^bb1
  ^bb1065:  // pred: ^bb1064
    %562 = pdl_interp.get_value_type of %551 : !pdl.type
    pdl_interp.are_equal %554, %562 : !pdl.type -> ^bb1066, ^bb1
  ^bb1066:  // pred: ^bb1065
    %563 = pdl_interp.get_operand 0 of %433
    pdl_interp.are_equal %553, %563 : !pdl.value -> ^bb1067, ^bb1
  ^bb1067:  // pred: ^bb1066
    %564 = pdl_interp.get_value_type of %558 : !pdl.type
    pdl_interp.are_equal %554, %564 : !pdl.type -> ^bb1068, ^bb1
  ^bb1068:  // pred: ^bb1067
    %565 = pdl_interp.get_operand 0 of %435
    pdl_interp.are_equal %558, %565 : !pdl.value -> ^bb1069, ^bb1
  ^bb1069:  // pred: ^bb1068
    pdl_interp.record_match @rewriters::@sinh_diff_rev(%553, %558, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "math.sinh"]), loc([%arg0, %2, %398, %430, %431, %433, %435]), root("arith.subf") -> ^bb1
  ^bb1070:  // pred: ^bb761
    %566 = pdl_interp.get_value_type of %399 : !pdl.type
    pdl_interp.are_equal %401, %566 : !pdl.type -> ^bb1071, ^bb762
  ^bb1071:  // pred: ^bb1070
    %567 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %401, %567 : !pdl.type -> ^bb1072, ^bb762
  ^bb1072:  // pred: ^bb1071
    pdl_interp.switch_operation_name of %398 to ["arith.mulf", "arith.constant"](^bb1073, ^bb1096) -> ^bb762
  ^bb1073:  // pred: ^bb1072
    pdl_interp.check_operand_count of %398 is 2 -> ^bb1074, ^bb762
  ^bb1074:  // pred: ^bb1073
    pdl_interp.check_result_count of %398 is 1 -> ^bb1075, ^bb762
  ^bb1075:  // pred: ^bb1074
    %568 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %568 : !pdl.value -> ^bb1076, ^bb762
  ^bb1076:  // pred: ^bb1075
    pdl_interp.are_equal %568, %397 : !pdl.value -> ^bb1077, ^bb762
  ^bb1077:  // pred: ^bb1076
    %569 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %569 : !pdl.value -> ^bb1084, ^bb1078
  ^bb1078:  // 7 preds: ^bb1077, ^bb1085, ^bb1086, ^bb1087, ^bb1088, ^bb1089, ^bb1090
    %570 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %570 : !pdl.value -> ^bb1079, ^bb762
  ^bb1079:  // pred: ^bb1078
    %571 = pdl_interp.get_value_type of %568 : !pdl.type
    pdl_interp.are_equal %401, %571 : !pdl.type -> ^bb1080, ^bb762
  ^bb1080:  // pred: ^bb1079
    %572 = pdl_interp.get_value_type of %570 : !pdl.type
    pdl_interp.are_equal %401, %572 : !pdl.type -> ^bb1081, ^bb762
  ^bb1081:  // pred: ^bb1080
    %573 = pdl_interp.get_operand 1 of %2
    pdl_interp.are_equal %400, %573 : !pdl.value -> ^bb1082, ^bb762
  ^bb1082:  // pred: ^bb1081
    %574 = pdl_interp.get_operand 1 of %398
    pdl_interp.are_equal %570, %574 : !pdl.value -> ^bb1083, ^bb762
  ^bb1083:  // pred: ^bb1082
    pdl_interp.record_match @rewriters::@difference_of_squares(%400, %570, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.subf", "arith.mulf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb762
  ^bb1084:  // pred: ^bb1077
    %575 = pdl_interp.get_operand 1 of %398
    pdl_interp.is_not_null %575 : !pdl.value -> ^bb1091, ^bb1085
  ^bb1085:  // 6 preds: ^bb1084, ^bb1091, ^bb1092, ^bb1093, ^bb1094, ^bb1095
    %576 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %576 : !pdl.value -> ^bb1086, ^bb1078
  ^bb1086:  // pred: ^bb1085
    %577 = pdl_interp.get_value_type of %568 : !pdl.type
    pdl_interp.are_equal %401, %577 : !pdl.type -> ^bb1087, ^bb1078
  ^bb1087:  // pred: ^bb1086
    %578 = pdl_interp.get_value_type of %569 : !pdl.type
    pdl_interp.are_equal %401, %578 : !pdl.type -> ^bb1088, ^bb1078
  ^bb1088:  // pred: ^bb1087
    %579 = pdl_interp.get_value_type of %576 : !pdl.type
    pdl_interp.are_equal %401, %579 : !pdl.type -> ^bb1089, ^bb1078
  ^bb1089:  // pred: ^bb1088
    %580 = pdl_interp.get_operand 1 of %398
    pdl_interp.are_equal %569, %580 : !pdl.value -> ^bb1090, ^bb1078
  ^bb1090:  // pred: ^bb1089
    pdl_interp.record_match @rewriters::@distribute_rgt_outsub_(%400, %576, %569, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.mulf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1078
  ^bb1091:  // pred: ^bb1084
    %581 = pdl_interp.get_value_type of %568 : !pdl.type
    pdl_interp.are_equal %401, %581 : !pdl.type -> ^bb1092, ^bb1085
  ^bb1092:  // pred: ^bb1091
    %582 = pdl_interp.get_value_type of %569 : !pdl.type
    pdl_interp.are_equal %401, %582 : !pdl.type -> ^bb1093, ^bb1085
  ^bb1093:  // pred: ^bb1092
    %583 = pdl_interp.get_operand 0 of %398
    pdl_interp.are_equal %400, %583 : !pdl.value -> ^bb1094, ^bb1085
  ^bb1094:  // pred: ^bb1093
    %584 = pdl_interp.get_value_type of %575 : !pdl.type
    pdl_interp.are_equal %401, %584 : !pdl.type -> ^bb1095, ^bb1085
  ^bb1095:  // pred: ^bb1094
    pdl_interp.record_match @rewriters::@distribute_lft_outsub_(%569, %575, %400, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.mulf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1085
  ^bb1096:  // pred: ^bb1072
    pdl_interp.check_operand_count of %398 is 0 -> ^bb1097, ^bb762
  ^bb1097:  // pred: ^bb1096
    pdl_interp.check_result_count of %398 is 1 -> ^bb1098, ^bb762
  ^bb1098:  // pred: ^bb1097
    %585 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %585 : !pdl.value -> ^bb1099, ^bb762
  ^bb1099:  // pred: ^bb1098
    pdl_interp.are_equal %585, %397 : !pdl.value -> ^bb1100, ^bb762
  ^bb1100:  // pred: ^bb1099
    %586 = pdl_interp.get_value_type of %585 : !pdl.type
    pdl_interp.are_equal %401, %586 : !pdl.type -> ^bb1101, ^bb762
  ^bb1101:  // pred: ^bb1100
    %587 = pdl_interp.get_attribute "value" of %398
    pdl_interp.is_not_null %587 : !pdl.attribute -> ^bb1102, ^bb762
  ^bb1102:  // pred: ^bb1101
    pdl_interp.check_attribute %587 is 1.000000e+00 : f32 -> ^bb1103, ^bb762
  ^bb1103:  // pred: ^bb1102
    %588 = pdl_interp.get_operand 1 of %2
    pdl_interp.are_equal %400, %588 : !pdl.value -> ^bb1104, ^bb762
  ^bb1104:  // pred: ^bb1103
    pdl_interp.record_match @rewriters::@difference_of_sqr_1(%400, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.constant", "arith.subf", "arith.mulf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb762
  ^bb1105:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 2 -> ^bb1106, ^bb1
  ^bb1106:  // pred: ^bb1105
    pdl_interp.check_result_count of %2 is 1 -> ^bb1107, ^bb1
  ^bb1107:  // pred: ^bb1106
    %589 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %589 : !pdl.value -> ^bb1108, ^bb1
  ^bb1108:  // pred: ^bb1107
    pdl_interp.are_equal %589, %1 : !pdl.value -> ^bb1109, ^bb1
  ^bb1109:  // pred: ^bb1108
    %590 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %590 : !pdl.value -> ^bb1110, ^bb1
  ^bb1110:  // pred: ^bb1109
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1111, ^bb1
  ^bb1111:  // pred: ^bb1110
    %591 = pdl_interp.get_value_type of %590 : !pdl.type
    pdl_interp.check_type %591 is f32 -> ^bb1112, ^bb1
  ^bb1112:  // pred: ^bb1111
    %592 = pdl_interp.get_value_type of %589 : !pdl.type
    pdl_interp.are_equal %591, %592 : !pdl.type -> ^bb1113, ^bb1
  ^bb1113:  // pred: ^bb1112
    %593 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %591, %593 : !pdl.type -> ^bb1114, ^bb1
  ^bb1114:  // pred: ^bb1113
    pdl_interp.check_operation_name of %398 is "math.powf" -> ^bb1115, ^bb1
  ^bb1115:  // pred: ^bb1114
    pdl_interp.check_operand_count of %398 is 2 -> ^bb1116, ^bb1
  ^bb1116:  // pred: ^bb1115
    pdl_interp.check_result_count of %398 is 1 -> ^bb1117, ^bb1
  ^bb1117:  // pred: ^bb1116
    %594 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %594 : !pdl.value -> ^bb1118, ^bb1
  ^bb1118:  // pred: ^bb1117
    pdl_interp.are_equal %594, %397 : !pdl.value -> ^bb1119, ^bb1
  ^bb1119:  // pred: ^bb1118
    %595 = pdl_interp.get_operand 1 of %2
    %596 = pdl_interp.get_defining_op of %595 : !pdl.value
    pdl_interp.is_not_null %596 : !pdl.operation -> ^bb1120, ^bb1
  ^bb1120:  // pred: ^bb1119
    pdl_interp.is_not_null %595 : !pdl.value -> ^bb1121, ^bb1
  ^bb1121:  // pred: ^bb1120
    %597 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %597 : !pdl.value -> ^bb1122, ^bb1
  ^bb1122:  // pred: ^bb1121
    %598 = pdl_interp.get_operand 1 of %398
    %599 = pdl_interp.get_defining_op of %598 : !pdl.value
    pdl_interp.is_not_null %599 : !pdl.operation -> ^bb1123, ^bb1
  ^bb1123:  // pred: ^bb1122
    pdl_interp.check_operation_name of %596 is "arith.constant" -> ^bb1124, ^bb1
  ^bb1124:  // pred: ^bb1123
    pdl_interp.check_operand_count of %596 is 0 -> ^bb1125, ^bb1
  ^bb1125:  // pred: ^bb1124
    pdl_interp.check_result_count of %596 is 1 -> ^bb1126, ^bb1
  ^bb1126:  // pred: ^bb1125
    %600 = pdl_interp.get_result 0 of %596
    pdl_interp.is_not_null %600 : !pdl.value -> ^bb1127, ^bb1
  ^bb1127:  // pred: ^bb1126
    pdl_interp.are_equal %600, %595 : !pdl.value -> ^bb1128, ^bb1
  ^bb1128:  // pred: ^bb1127
    pdl_interp.is_not_null %598 : !pdl.value -> ^bb1129, ^bb1
  ^bb1129:  // pred: ^bb1128
    %601 = pdl_interp.get_value_type of %594 : !pdl.type
    pdl_interp.are_equal %591, %601 : !pdl.type -> ^bb1130, ^bb1
  ^bb1130:  // pred: ^bb1129
    pdl_interp.check_operation_name of %599 is "arith.constant" -> ^bb1131, ^bb1
  ^bb1131:  // pred: ^bb1130
    pdl_interp.check_operand_count of %599 is 0 -> ^bb1132, ^bb1
  ^bb1132:  // pred: ^bb1131
    pdl_interp.check_result_count of %599 is 1 -> ^bb1133, ^bb1
  ^bb1133:  // pred: ^bb1132
    %602 = pdl_interp.get_result 0 of %599
    pdl_interp.is_not_null %602 : !pdl.value -> ^bb1134, ^bb1
  ^bb1134:  // pred: ^bb1133
    pdl_interp.are_equal %602, %598 : !pdl.value -> ^bb1135, ^bb1
  ^bb1135:  // pred: ^bb1134
    %603 = pdl_interp.get_attribute "value" of %596
    pdl_interp.is_not_null %603 : !pdl.attribute -> ^bb1136, ^bb1
  ^bb1136:  // pred: ^bb1135
    pdl_interp.check_attribute %603 is 3.000000e+00 : f32 -> ^bb1137, ^bb1
  ^bb1137:  // pred: ^bb1136
    %604 = pdl_interp.get_value_type of %597 : !pdl.type
    pdl_interp.are_equal %591, %604 : !pdl.type -> ^bb1138, ^bb1
  ^bb1138:  // pred: ^bb1137
    %605 = pdl_interp.get_value_type of %600 : !pdl.type
    pdl_interp.are_equal %605, %591 : !pdl.type -> ^bb1139, ^bb1
  ^bb1139:  // pred: ^bb1138
    %606 = pdl_interp.get_attribute "value" of %599
    pdl_interp.is_not_null %606 : !pdl.attribute -> ^bb1140, ^bb1
  ^bb1140:  // pred: ^bb1139
    pdl_interp.check_attribute %606 is 3.000000e+00 : f32 -> ^bb1141, ^bb1
  ^bb1141:  // pred: ^bb1140
    %607 = pdl_interp.get_value_type of %602 : !pdl.type
    pdl_interp.are_equal %607, %591 : !pdl.type -> ^bb1142, ^bb1
  ^bb1142:  // pred: ^bb1141
    pdl_interp.record_match @rewriters::@difference_cubes(%590, %597, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.mulf", "arith.addf", "arith.addf", "arith.subf", "arith.mulf"]), loc([%arg0, %2, %398, %596, %599]), root("arith.subf") -> ^bb1
  ^bb1143:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 2 -> ^bb1144, ^bb1
  ^bb1144:  // pred: ^bb1143
    pdl_interp.check_result_count of %2 is 1 -> ^bb1145, ^bb1
  ^bb1145:  // pred: ^bb1144
    %608 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %608 : !pdl.value -> ^bb1146, ^bb1
  ^bb1146:  // pred: ^bb1145
    pdl_interp.are_equal %608, %1 : !pdl.value -> ^bb1147, ^bb1
  ^bb1147:  // pred: ^bb1146
    %609 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %609 : !pdl.value -> ^bb1148, ^bb1
  ^bb1148:  // pred: ^bb1147
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1149, ^bb1
  ^bb1149:  // pred: ^bb1148
    %610 = pdl_interp.get_value_type of %609 : !pdl.type
    pdl_interp.check_type %610 is f32 -> ^bb1209, ^bb1150
  ^bb1150:  // 16 preds: ^bb1149, ^bb1209, ^bb1210, ^bb1211, ^bb1212, ^bb1213, ^bb1214, ^bb1215, ^bb1216, ^bb1217, ^bb1219, ^bb1220, ^bb1221, ^bb1222, ^bb1223, ^bb1224
    pdl_interp.switch_operation_name of %398 to ["math.asin", "math.acos"](^bb1151, ^bb1180) -> ^bb1
  ^bb1151:  // pred: ^bb1150
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1152, ^bb1
  ^bb1152:  // pred: ^bb1151
    pdl_interp.check_result_count of %398 is 1 -> ^bb1153, ^bb1
  ^bb1153:  // pred: ^bb1152
    %611 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %611 : !pdl.value -> ^bb1154, ^bb1
  ^bb1154:  // pred: ^bb1153
    pdl_interp.are_equal %611, %397 : !pdl.value -> ^bb1155, ^bb1
  ^bb1155:  // pred: ^bb1154
    %612 = pdl_interp.get_operand 1 of %2
    %613 = pdl_interp.get_defining_op of %612 : !pdl.value
    pdl_interp.is_not_null %613 : !pdl.operation -> ^bb1156, ^bb1
  ^bb1156:  // pred: ^bb1155
    %614 = pdl_interp.get_defining_op of %609 : !pdl.value
    pdl_interp.is_not_null %614 : !pdl.operation -> ^bb1157, ^bb1
  ^bb1157:  // pred: ^bb1156
    pdl_interp.is_not_null %612 : !pdl.value -> ^bb1158, ^bb1
  ^bb1158:  // pred: ^bb1157
    %615 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %615 : !pdl.value -> ^bb1159, ^bb1
  ^bb1159:  // pred: ^bb1158
    pdl_interp.check_operation_name of %613 is "arith.constant" -> ^bb1160, ^bb1
  ^bb1160:  // pred: ^bb1159
    pdl_interp.check_operand_count of %613 is 0 -> ^bb1161, ^bb1
  ^bb1161:  // pred: ^bb1160
    pdl_interp.check_result_count of %613 is 1 -> ^bb1162, ^bb1
  ^bb1162:  // pred: ^bb1161
    %616 = pdl_interp.get_result 0 of %613
    pdl_interp.is_not_null %616 : !pdl.value -> ^bb1163, ^bb1
  ^bb1163:  // pred: ^bb1162
    pdl_interp.are_equal %616, %612 : !pdl.value -> ^bb1164, ^bb1
  ^bb1164:  // pred: ^bb1163
    pdl_interp.check_operation_name of %614 is "math_xdsl.constant" -> ^bb1165, ^bb1
  ^bb1165:  // pred: ^bb1164
    pdl_interp.check_operand_count of %614 is 0 -> ^bb1166, ^bb1
  ^bb1166:  // pred: ^bb1165
    pdl_interp.check_result_count of %614 is 1 -> ^bb1167, ^bb1
  ^bb1167:  // pred: ^bb1166
    %617 = pdl_interp.get_result 0 of %614
    pdl_interp.is_not_null %617 : !pdl.value -> ^bb1168, ^bb1
  ^bb1168:  // pred: ^bb1167
    pdl_interp.are_equal %617, %609 : !pdl.value -> ^bb1169, ^bb1
  ^bb1169:  // pred: ^bb1168
    %618 = pdl_interp.get_attribute "value" of %613
    pdl_interp.is_not_null %618 : !pdl.attribute -> ^bb1170, ^bb1
  ^bb1170:  // pred: ^bb1169
    pdl_interp.check_attribute %618 is 2.000000e+00 : f32 -> ^bb1171, ^bb1
  ^bb1171:  // pred: ^bb1170
    %619 = pdl_interp.get_attribute "value" of %614
    pdl_interp.is_not_null %619 : !pdl.attribute -> ^bb1172, ^bb1
  ^bb1172:  // pred: ^bb1171
    pdl_interp.check_attribute %619 is #math_xdsl<constant pi> -> ^bb1173, ^bb1
  ^bb1173:  // pred: ^bb1172
    %620 = pdl_interp.get_value_type of %617 : !pdl.type
    pdl_interp.check_type %620 is f32 -> ^bb1174, ^bb1
  ^bb1174:  // pred: ^bb1173
    %621 = pdl_interp.get_value_type of %608 : !pdl.type
    pdl_interp.are_equal %620, %621 : !pdl.type -> ^bb1175, ^bb1
  ^bb1175:  // pred: ^bb1174
    %622 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %620, %622 : !pdl.type -> ^bb1176, ^bb1
  ^bb1176:  // pred: ^bb1175
    %623 = pdl_interp.get_value_type of %616 : !pdl.type
    pdl_interp.are_equal %620, %623 : !pdl.type -> ^bb1177, ^bb1
  ^bb1177:  // pred: ^bb1176
    %624 = pdl_interp.get_value_type of %611 : !pdl.type
    pdl_interp.are_equal %620, %624 : !pdl.type -> ^bb1178, ^bb1
  ^bb1178:  // pred: ^bb1177
    %625 = pdl_interp.get_value_type of %615 : !pdl.type
    pdl_interp.are_equal %620, %625 : !pdl.type -> ^bb1179, ^bb1
  ^bb1179:  // pred: ^bb1178
    pdl_interp.record_match @rewriters::@acos_asin_rev(%615, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.acos"]), loc([%arg0, %2, %398, %613, %614]), root("arith.subf") -> ^bb1
  ^bb1180:  // pred: ^bb1150
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1181, ^bb1
  ^bb1181:  // pred: ^bb1180
    pdl_interp.check_result_count of %398 is 1 -> ^bb1182, ^bb1
  ^bb1182:  // pred: ^bb1181
    %626 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %626 : !pdl.value -> ^bb1183, ^bb1
  ^bb1183:  // pred: ^bb1182
    pdl_interp.are_equal %626, %397 : !pdl.value -> ^bb1184, ^bb1
  ^bb1184:  // pred: ^bb1183
    %627 = pdl_interp.get_operand 1 of %2
    %628 = pdl_interp.get_defining_op of %627 : !pdl.value
    pdl_interp.is_not_null %628 : !pdl.operation -> ^bb1185, ^bb1
  ^bb1185:  // pred: ^bb1184
    %629 = pdl_interp.get_defining_op of %609 : !pdl.value
    pdl_interp.is_not_null %629 : !pdl.operation -> ^bb1186, ^bb1
  ^bb1186:  // pred: ^bb1185
    pdl_interp.is_not_null %627 : !pdl.value -> ^bb1187, ^bb1
  ^bb1187:  // pred: ^bb1186
    %630 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %630 : !pdl.value -> ^bb1188, ^bb1
  ^bb1188:  // pred: ^bb1187
    pdl_interp.check_operation_name of %628 is "arith.constant" -> ^bb1189, ^bb1
  ^bb1189:  // pred: ^bb1188
    pdl_interp.check_operand_count of %628 is 0 -> ^bb1190, ^bb1
  ^bb1190:  // pred: ^bb1189
    pdl_interp.check_result_count of %628 is 1 -> ^bb1191, ^bb1
  ^bb1191:  // pred: ^bb1190
    %631 = pdl_interp.get_result 0 of %628
    pdl_interp.is_not_null %631 : !pdl.value -> ^bb1192, ^bb1
  ^bb1192:  // pred: ^bb1191
    pdl_interp.are_equal %631, %627 : !pdl.value -> ^bb1193, ^bb1
  ^bb1193:  // pred: ^bb1192
    pdl_interp.check_operation_name of %629 is "math_xdsl.constant" -> ^bb1194, ^bb1
  ^bb1194:  // pred: ^bb1193
    pdl_interp.check_operand_count of %629 is 0 -> ^bb1195, ^bb1
  ^bb1195:  // pred: ^bb1194
    pdl_interp.check_result_count of %629 is 1 -> ^bb1196, ^bb1
  ^bb1196:  // pred: ^bb1195
    %632 = pdl_interp.get_result 0 of %629
    pdl_interp.is_not_null %632 : !pdl.value -> ^bb1197, ^bb1
  ^bb1197:  // pred: ^bb1196
    pdl_interp.are_equal %632, %609 : !pdl.value -> ^bb1198, ^bb1
  ^bb1198:  // pred: ^bb1197
    %633 = pdl_interp.get_attribute "value" of %628
    pdl_interp.is_not_null %633 : !pdl.attribute -> ^bb1199, ^bb1
  ^bb1199:  // pred: ^bb1198
    pdl_interp.check_attribute %633 is 2.000000e+00 : f32 -> ^bb1200, ^bb1
  ^bb1200:  // pred: ^bb1199
    %634 = pdl_interp.get_attribute "value" of %629
    pdl_interp.is_not_null %634 : !pdl.attribute -> ^bb1201, ^bb1
  ^bb1201:  // pred: ^bb1200
    pdl_interp.check_attribute %634 is #math_xdsl<constant pi> -> ^bb1202, ^bb1
  ^bb1202:  // pred: ^bb1201
    %635 = pdl_interp.get_value_type of %632 : !pdl.type
    pdl_interp.check_type %635 is f32 -> ^bb1203, ^bb1
  ^bb1203:  // pred: ^bb1202
    %636 = pdl_interp.get_value_type of %608 : !pdl.type
    pdl_interp.are_equal %635, %636 : !pdl.type -> ^bb1204, ^bb1
  ^bb1204:  // pred: ^bb1203
    %637 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %635, %637 : !pdl.type -> ^bb1205, ^bb1
  ^bb1205:  // pred: ^bb1204
    %638 = pdl_interp.get_value_type of %631 : !pdl.type
    pdl_interp.are_equal %635, %638 : !pdl.type -> ^bb1206, ^bb1
  ^bb1206:  // pred: ^bb1205
    %639 = pdl_interp.get_value_type of %626 : !pdl.type
    pdl_interp.are_equal %635, %639 : !pdl.type -> ^bb1207, ^bb1
  ^bb1207:  // pred: ^bb1206
    %640 = pdl_interp.get_value_type of %630 : !pdl.type
    pdl_interp.are_equal %635, %640 : !pdl.type -> ^bb1208, ^bb1
  ^bb1208:  // pred: ^bb1207
    pdl_interp.record_match @rewriters::@asin_acos_rev(%630, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.asin"]), loc([%arg0, %2, %398, %628, %629]), root("arith.subf") -> ^bb1
  ^bb1209:  // pred: ^bb1149
    %641 = pdl_interp.get_value_type of %608 : !pdl.type
    pdl_interp.are_equal %610, %641 : !pdl.type -> ^bb1210, ^bb1150
  ^bb1210:  // pred: ^bb1209
    %642 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %610, %642 : !pdl.type -> ^bb1211, ^bb1150
  ^bb1211:  // pred: ^bb1210
    pdl_interp.check_operation_name of %398 is "arith.divf" -> ^bb1212, ^bb1150
  ^bb1212:  // pred: ^bb1211
    pdl_interp.check_operand_count of %398 is 2 -> ^bb1213, ^bb1150
  ^bb1213:  // pred: ^bb1212
    pdl_interp.check_result_count of %398 is 1 -> ^bb1214, ^bb1150
  ^bb1214:  // pred: ^bb1213
    %643 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %643 : !pdl.value -> ^bb1215, ^bb1150
  ^bb1215:  // pred: ^bb1214
    pdl_interp.are_equal %643, %397 : !pdl.value -> ^bb1216, ^bb1150
  ^bb1216:  // pred: ^bb1215
    %644 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %644 : !pdl.value -> ^bb1217, ^bb1150
  ^bb1217:  // pred: ^bb1216
    %645 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %645 : !pdl.value -> ^bb1218, ^bb1150
  ^bb1218:  // pred: ^bb1217
    %646 = pdl_interp.get_value_type of %643 : !pdl.type
    pdl_interp.are_equal %610, %646 : !pdl.type -> ^bb1225, ^bb1219
  ^bb1219:  // 5 preds: ^bb1218, ^bb1225, ^bb1226, ^bb1227, ^bb1228
    %647 = pdl_interp.get_operand 1 of %398
    pdl_interp.is_not_null %647 : !pdl.value -> ^bb1220, ^bb1150
  ^bb1220:  // pred: ^bb1219
    %648 = pdl_interp.get_value_type of %643 : !pdl.type
    pdl_interp.are_equal %610, %648 : !pdl.type -> ^bb1221, ^bb1150
  ^bb1221:  // pred: ^bb1220
    %649 = pdl_interp.get_value_type of %644 : !pdl.type
    pdl_interp.are_equal %610, %649 : !pdl.type -> ^bb1222, ^bb1150
  ^bb1222:  // pred: ^bb1221
    %650 = pdl_interp.get_value_type of %645 : !pdl.type
    pdl_interp.are_equal %610, %650 : !pdl.type -> ^bb1223, ^bb1150
  ^bb1223:  // pred: ^bb1222
    %651 = pdl_interp.get_value_type of %647 : !pdl.type
    pdl_interp.are_equal %610, %651 : !pdl.type -> ^bb1224, ^bb1150
  ^bb1224:  // pred: ^bb1223
    pdl_interp.record_match @rewriters::@frac_sub(%609, %647, %644, %645, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.subf", "arith.mulf", "arith.divf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1150
  ^bb1225:  // pred: ^bb1218
    %652 = pdl_interp.get_value_type of %644 : !pdl.type
    pdl_interp.are_equal %610, %652 : !pdl.type -> ^bb1226, ^bb1219
  ^bb1226:  // pred: ^bb1225
    %653 = pdl_interp.get_value_type of %645 : !pdl.type
    pdl_interp.are_equal %610, %653 : !pdl.type -> ^bb1227, ^bb1219
  ^bb1227:  // pred: ^bb1226
    %654 = pdl_interp.get_operand 1 of %398
    pdl_interp.are_equal %644, %654 : !pdl.value -> ^bb1228, ^bb1219
  ^bb1228:  // pred: ^bb1227
    pdl_interp.record_match @rewriters::@sub_div(%609, %645, %644, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.divf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1219
  ^bb1229:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1230, ^bb1
  ^bb1230:  // pred: ^bb1229
    pdl_interp.check_result_count of %2 is 1 -> ^bb1231, ^bb1
  ^bb1231:  // pred: ^bb1230
    %655 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %655 : !pdl.value -> ^bb1232, ^bb1
  ^bb1232:  // pred: ^bb1231
    pdl_interp.are_equal %655, %1 : !pdl.value -> ^bb1233, ^bb1
  ^bb1233:  // pred: ^bb1232
    %656 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %656 : !pdl.value -> ^bb1234, ^bb1
  ^bb1234:  // pred: ^bb1233
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1235, ^bb1
  ^bb1235:  // pred: ^bb1234
    %657 = pdl_interp.get_value_type of %656 : !pdl.type
    pdl_interp.check_type %657 is f32 -> ^bb1236, ^bb1
  ^bb1236:  // pred: ^bb1235
    %658 = pdl_interp.get_value_type of %655 : !pdl.type
    pdl_interp.are_equal %657, %658 : !pdl.type -> ^bb1237, ^bb1
  ^bb1237:  // pred: ^bb1236
    %659 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %657, %659 : !pdl.type -> ^bb1238, ^bb1
  ^bb1238:  // pred: ^bb1237
    pdl_interp.check_operation_name of %398 is "math.log" -> ^bb1239, ^bb1
  ^bb1239:  // pred: ^bb1238
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1240, ^bb1
  ^bb1240:  // pred: ^bb1239
    pdl_interp.check_result_count of %398 is 1 -> ^bb1241, ^bb1
  ^bb1241:  // pred: ^bb1240
    %660 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %660 : !pdl.value -> ^bb1242, ^bb1
  ^bb1242:  // pred: ^bb1241
    pdl_interp.are_equal %660, %397 : !pdl.value -> ^bb1243, ^bb1
  ^bb1243:  // pred: ^bb1242
    %661 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %661 : !pdl.value -> ^bb1244, ^bb1
  ^bb1244:  // pred: ^bb1243
    %662 = pdl_interp.get_value_type of %660 : !pdl.type
    pdl_interp.are_equal %657, %662 : !pdl.type -> ^bb1245, ^bb1
  ^bb1245:  // pred: ^bb1244
    %663 = pdl_interp.get_value_type of %661 : !pdl.type
    pdl_interp.are_equal %657, %663 : !pdl.type -> ^bb1246, ^bb1
  ^bb1246:  // pred: ^bb1245
    pdl_interp.record_match @rewriters::@diff_log(%656, %661, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "math.log"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1
  ^bb1247:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 0 -> ^bb1248, ^bb1
  ^bb1248:  // pred: ^bb1247
    pdl_interp.check_result_count of %2 is 1 -> ^bb1249, ^bb1
  ^bb1249:  // pred: ^bb1248
    %664 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %664 : !pdl.value -> ^bb1250, ^bb1
  ^bb1250:  // pred: ^bb1249
    pdl_interp.are_equal %664, %1 : !pdl.value -> ^bb1251, ^bb1
  ^bb1251:  // pred: ^bb1250
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1252, ^bb1
  ^bb1252:  // pred: ^bb1251
    pdl_interp.check_operation_name of %398 is "arith.mulf" -> ^bb1253, ^bb1
  ^bb1253:  // pred: ^bb1252
    pdl_interp.check_operand_count of %398 is 2 -> ^bb1254, ^bb1
  ^bb1254:  // pred: ^bb1253
    pdl_interp.check_result_count of %398 is 1 -> ^bb1255, ^bb1
  ^bb1255:  // pred: ^bb1254
    %665 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %665 : !pdl.value -> ^bb1256, ^bb1
  ^bb1256:  // pred: ^bb1255
    pdl_interp.are_equal %665, %397 : !pdl.value -> ^bb1257, ^bb1
  ^bb1257:  // pred: ^bb1256
    %666 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %666 : !pdl.value -> ^bb1258, ^bb1
  ^bb1258:  // pred: ^bb1257
    %667 = pdl_interp.get_defining_op of %666 : !pdl.value
    pdl_interp.is_not_null %667 : !pdl.operation -> ^bb1259, ^bb1
  ^bb1259:  // pred: ^bb1258
    %668 = pdl_interp.get_operand 1 of %398
    %669 = pdl_interp.get_defining_op of %668 : !pdl.value
    pdl_interp.is_not_null %669 : !pdl.operation -> ^bb1260, ^bb1
  ^bb1260:  // pred: ^bb1259
    pdl_interp.is_not_null %668 : !pdl.value -> ^bb1261, ^bb1
  ^bb1261:  // pred: ^bb1260
    pdl_interp.switch_operation_name of %667 to ["math.sin", "math.cos", "arith.constant"](^bb1262, ^bb1283, ^bb1304) -> ^bb1
  ^bb1262:  // pred: ^bb1261
    pdl_interp.check_operand_count of %667 is 1 -> ^bb1263, ^bb1
  ^bb1263:  // pred: ^bb1262
    pdl_interp.check_result_count of %667 is 1 -> ^bb1264, ^bb1
  ^bb1264:  // pred: ^bb1263
    %670 = pdl_interp.get_result 0 of %667
    pdl_interp.is_not_null %670 : !pdl.value -> ^bb1265, ^bb1
  ^bb1265:  // pred: ^bb1264
    pdl_interp.are_equal %670, %666 : !pdl.value -> ^bb1266, ^bb1
  ^bb1266:  // pred: ^bb1265
    pdl_interp.check_operation_name of %669 is "math.sin" -> ^bb1267, ^bb1
  ^bb1267:  // pred: ^bb1266
    pdl_interp.check_operand_count of %669 is 1 -> ^bb1268, ^bb1
  ^bb1268:  // pred: ^bb1267
    pdl_interp.check_result_count of %669 is 1 -> ^bb1269, ^bb1
  ^bb1269:  // pred: ^bb1268
    %671 = pdl_interp.get_result 0 of %669
    pdl_interp.is_not_null %671 : !pdl.value -> ^bb1270, ^bb1
  ^bb1270:  // pred: ^bb1269
    pdl_interp.are_equal %671, %668 : !pdl.value -> ^bb1271, ^bb1
  ^bb1271:  // pred: ^bb1270
    %672 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %672 : !pdl.attribute -> ^bb1272, ^bb1
  ^bb1272:  // pred: ^bb1271
    pdl_interp.check_attribute %672 is 1.000000e+00 : f32 -> ^bb1273, ^bb1
  ^bb1273:  // pred: ^bb1272
    %673 = pdl_interp.get_value_type of %664 : !pdl.type
    pdl_interp.check_type %673 is f32 -> ^bb1274, ^bb1
  ^bb1274:  // pred: ^bb1273
    %674 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %673, %674 : !pdl.type -> ^bb1275, ^bb1
  ^bb1275:  // pred: ^bb1274
    %675 = pdl_interp.get_value_type of %665 : !pdl.type
    pdl_interp.are_equal %673, %675 : !pdl.type -> ^bb1276, ^bb1
  ^bb1276:  // pred: ^bb1275
    %676 = pdl_interp.get_operand 0 of %667
    pdl_interp.is_not_null %676 : !pdl.value -> ^bb1277, ^bb1
  ^bb1277:  // pred: ^bb1276
    %677 = pdl_interp.get_value_type of %670 : !pdl.type
    pdl_interp.are_equal %677, %673 : !pdl.type -> ^bb1278, ^bb1
  ^bb1278:  // pred: ^bb1277
    %678 = pdl_interp.get_value_type of %671 : !pdl.type
    pdl_interp.are_equal %678, %673 : !pdl.type -> ^bb1279, ^bb1
  ^bb1279:  // pred: ^bb1278
    %679 = pdl_interp.get_operand 0 of %669
    pdl_interp.are_equal %676, %679 : !pdl.value -> ^bb1280, ^bb1
  ^bb1280:  // pred: ^bb1279
    %680 = pdl_interp.get_value_type of %676 : !pdl.type
    pdl_interp.are_equal %680, %673 : !pdl.type -> ^bb1281, ^bb1
  ^bb1281:  // pred: ^bb1280
    pdl_interp.record_match @rewriters::@_1_sub_sin(%676, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.mulf"]), loc([%arg0, %2, %398, %667, %669]), root("arith.subf") -> ^bb1282
  ^bb1282:  // pred: ^bb1281
    pdl_interp.record_match @rewriters::@sqr_cos_b_rev(%676, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.mulf"]), loc([%arg0, %2, %398, %667, %669]), root("arith.subf") -> ^bb1
  ^bb1283:  // pred: ^bb1261
    pdl_interp.check_operand_count of %667 is 1 -> ^bb1284, ^bb1
  ^bb1284:  // pred: ^bb1283
    pdl_interp.check_result_count of %667 is 1 -> ^bb1285, ^bb1
  ^bb1285:  // pred: ^bb1284
    %681 = pdl_interp.get_result 0 of %667
    pdl_interp.is_not_null %681 : !pdl.value -> ^bb1286, ^bb1
  ^bb1286:  // pred: ^bb1285
    pdl_interp.are_equal %681, %666 : !pdl.value -> ^bb1287, ^bb1
  ^bb1287:  // pred: ^bb1286
    pdl_interp.check_operation_name of %669 is "math.cos" -> ^bb1288, ^bb1
  ^bb1288:  // pred: ^bb1287
    pdl_interp.check_operand_count of %669 is 1 -> ^bb1289, ^bb1
  ^bb1289:  // pred: ^bb1288
    pdl_interp.check_result_count of %669 is 1 -> ^bb1290, ^bb1
  ^bb1290:  // pred: ^bb1289
    %682 = pdl_interp.get_result 0 of %669
    pdl_interp.is_not_null %682 : !pdl.value -> ^bb1291, ^bb1
  ^bb1291:  // pred: ^bb1290
    pdl_interp.are_equal %682, %668 : !pdl.value -> ^bb1292, ^bb1
  ^bb1292:  // pred: ^bb1291
    %683 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %683 : !pdl.attribute -> ^bb1293, ^bb1
  ^bb1293:  // pred: ^bb1292
    pdl_interp.check_attribute %683 is 1.000000e+00 : f32 -> ^bb1294, ^bb1
  ^bb1294:  // pred: ^bb1293
    %684 = pdl_interp.get_value_type of %664 : !pdl.type
    pdl_interp.check_type %684 is f32 -> ^bb1295, ^bb1
  ^bb1295:  // pred: ^bb1294
    %685 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %684, %685 : !pdl.type -> ^bb1296, ^bb1
  ^bb1296:  // pred: ^bb1295
    %686 = pdl_interp.get_value_type of %665 : !pdl.type
    pdl_interp.are_equal %684, %686 : !pdl.type -> ^bb1297, ^bb1
  ^bb1297:  // pred: ^bb1296
    %687 = pdl_interp.get_operand 0 of %667
    pdl_interp.is_not_null %687 : !pdl.value -> ^bb1298, ^bb1
  ^bb1298:  // pred: ^bb1297
    %688 = pdl_interp.get_value_type of %681 : !pdl.type
    pdl_interp.are_equal %688, %684 : !pdl.type -> ^bb1299, ^bb1
  ^bb1299:  // pred: ^bb1298
    %689 = pdl_interp.get_value_type of %682 : !pdl.type
    pdl_interp.are_equal %689, %684 : !pdl.type -> ^bb1300, ^bb1
  ^bb1300:  // pred: ^bb1299
    %690 = pdl_interp.get_operand 0 of %669
    pdl_interp.are_equal %687, %690 : !pdl.value -> ^bb1301, ^bb1
  ^bb1301:  // pred: ^bb1300
    %691 = pdl_interp.get_value_type of %687 : !pdl.type
    pdl_interp.are_equal %691, %684 : !pdl.type -> ^bb1302, ^bb1
  ^bb1302:  // pred: ^bb1301
    pdl_interp.record_match @rewriters::@_1_sub_cos(%687, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.mulf"]), loc([%arg0, %2, %398, %667, %669]), root("arith.subf") -> ^bb1303
  ^bb1303:  // pred: ^bb1302
    pdl_interp.record_match @rewriters::@sqr_sin_b_rev(%687, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.mulf"]), loc([%arg0, %2, %398, %667, %669]), root("arith.subf") -> ^bb1
  ^bb1304:  // pred: ^bb1261
    pdl_interp.check_operand_count of %667 is 0 -> ^bb1305, ^bb1
  ^bb1305:  // pred: ^bb1304
    pdl_interp.check_result_count of %667 is 1 -> ^bb1306, ^bb1
  ^bb1306:  // pred: ^bb1305
    %692 = pdl_interp.get_result 0 of %667
    pdl_interp.is_not_null %692 : !pdl.value -> ^bb1307, ^bb1
  ^bb1307:  // pred: ^bb1306
    pdl_interp.are_equal %692, %666 : !pdl.value -> ^bb1308, ^bb1
  ^bb1308:  // pred: ^bb1307
    pdl_interp.check_operation_name of %669 is "math.cos" -> ^bb1309, ^bb1
  ^bb1309:  // pred: ^bb1308
    pdl_interp.check_operand_count of %669 is 1 -> ^bb1310, ^bb1
  ^bb1310:  // pred: ^bb1309
    pdl_interp.check_result_count of %669 is 1 -> ^bb1311, ^bb1
  ^bb1311:  // pred: ^bb1310
    %693 = pdl_interp.get_result 0 of %669
    pdl_interp.is_not_null %693 : !pdl.value -> ^bb1312, ^bb1
  ^bb1312:  // pred: ^bb1311
    pdl_interp.are_equal %693, %668 : !pdl.value -> ^bb1313, ^bb1
  ^bb1313:  // pred: ^bb1312
    %694 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %694 : !pdl.attribute -> ^bb1314, ^bb1
  ^bb1314:  // pred: ^bb1313
    pdl_interp.check_attribute %694 is 5.000000e-01 : f32 -> ^bb1315, ^bb1
  ^bb1315:  // pred: ^bb1314
    %695 = pdl_interp.get_value_type of %664 : !pdl.type
    pdl_interp.check_type %695 is f32 -> ^bb1316, ^bb1
  ^bb1316:  // pred: ^bb1315
    %696 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %695, %696 : !pdl.type -> ^bb1317, ^bb1
  ^bb1317:  // pred: ^bb1316
    %697 = pdl_interp.get_operand 0 of %669
    %698 = pdl_interp.get_defining_op of %697 : !pdl.value
    pdl_interp.is_not_null %698 : !pdl.operation -> ^bb1318, ^bb1
  ^bb1318:  // pred: ^bb1317
    %699 = pdl_interp.get_value_type of %665 : !pdl.type
    pdl_interp.are_equal %695, %699 : !pdl.type -> ^bb1319, ^bb1
  ^bb1319:  // pred: ^bb1318
    %700 = pdl_interp.get_operand 0 of %698
    %701 = pdl_interp.get_defining_op of %700 : !pdl.value
    pdl_interp.is_not_null %701 : !pdl.operation -> ^bb1320, ^bb1
  ^bb1320:  // pred: ^bb1319
    %702 = pdl_interp.get_value_type of %692 : !pdl.type
    pdl_interp.are_equal %702, %695 : !pdl.type -> ^bb1321, ^bb1
  ^bb1321:  // pred: ^bb1320
    pdl_interp.is_not_null %697 : !pdl.value -> ^bb1322, ^bb1
  ^bb1322:  // pred: ^bb1321
    pdl_interp.check_operation_name of %698 is "arith.mulf" -> ^bb1323, ^bb1
  ^bb1323:  // pred: ^bb1322
    pdl_interp.check_operand_count of %698 is 2 -> ^bb1324, ^bb1
  ^bb1324:  // pred: ^bb1323
    pdl_interp.check_result_count of %698 is 1 -> ^bb1325, ^bb1
  ^bb1325:  // pred: ^bb1324
    %703 = pdl_interp.get_result 0 of %698
    pdl_interp.is_not_null %703 : !pdl.value -> ^bb1326, ^bb1
  ^bb1326:  // pred: ^bb1325
    pdl_interp.are_equal %703, %697 : !pdl.value -> ^bb1327, ^bb1
  ^bb1327:  // pred: ^bb1326
    %704 = pdl_interp.get_attribute "value" of %667
    pdl_interp.is_not_null %704 : !pdl.attribute -> ^bb1328, ^bb1
  ^bb1328:  // pred: ^bb1327
    pdl_interp.check_attribute %704 is 5.000000e-01 : f32 -> ^bb1329, ^bb1
  ^bb1329:  // pred: ^bb1328
    %705 = pdl_interp.get_value_type of %693 : !pdl.type
    pdl_interp.are_equal %705, %695 : !pdl.type -> ^bb1330, ^bb1
  ^bb1330:  // pred: ^bb1329
    pdl_interp.is_not_null %700 : !pdl.value -> ^bb1331, ^bb1
  ^bb1331:  // pred: ^bb1330
    pdl_interp.check_operation_name of %701 is "arith.constant" -> ^bb1332, ^bb1
  ^bb1332:  // pred: ^bb1331
    pdl_interp.check_operand_count of %701 is 0 -> ^bb1333, ^bb1
  ^bb1333:  // pred: ^bb1332
    pdl_interp.check_result_count of %701 is 1 -> ^bb1334, ^bb1
  ^bb1334:  // pred: ^bb1333
    %706 = pdl_interp.get_result 0 of %701
    pdl_interp.is_not_null %706 : !pdl.value -> ^bb1335, ^bb1
  ^bb1335:  // pred: ^bb1334
    pdl_interp.are_equal %706, %700 : !pdl.value -> ^bb1336, ^bb1
  ^bb1336:  // pred: ^bb1335
    %707 = pdl_interp.get_operand 1 of %698
    pdl_interp.is_not_null %707 : !pdl.value -> ^bb1337, ^bb1
  ^bb1337:  // pred: ^bb1336
    %708 = pdl_interp.get_value_type of %703 : !pdl.type
    pdl_interp.are_equal %708, %695 : !pdl.type -> ^bb1338, ^bb1
  ^bb1338:  // pred: ^bb1337
    %709 = pdl_interp.get_value_type of %706 : !pdl.type
    pdl_interp.are_equal %709, %695 : !pdl.type -> ^bb1339, ^bb1
  ^bb1339:  // pred: ^bb1338
    %710 = pdl_interp.get_attribute "value" of %701
    pdl_interp.is_not_null %710 : !pdl.attribute -> ^bb1340, ^bb1
  ^bb1340:  // pred: ^bb1339
    pdl_interp.check_attribute %710 is 2.000000e+00 : f32 -> ^bb1341, ^bb1
  ^bb1341:  // pred: ^bb1340
    %711 = pdl_interp.get_value_type of %707 : !pdl.type
    pdl_interp.are_equal %711, %695 : !pdl.type -> ^bb1342, ^bb1
  ^bb1342:  // pred: ^bb1341
    pdl_interp.record_match @rewriters::@sqr_sin_a_rev(%707, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.mulf"]), loc([%arg0, %2, %398, %667, %669, %698, %701]), root("arith.subf") -> ^bb1
  ^bb1343:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1344, ^bb1
  ^bb1344:  // pred: ^bb1343
    pdl_interp.check_result_count of %2 is 1 -> ^bb1345, ^bb1
  ^bb1345:  // pred: ^bb1344
    %712 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %712 : !pdl.value -> ^bb1346, ^bb1
  ^bb1346:  // pred: ^bb1345
    pdl_interp.are_equal %712, %1 : !pdl.value -> ^bb1347, ^bb1
  ^bb1347:  // pred: ^bb1346
    %713 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %713 : !pdl.value -> ^bb1348, ^bb1
  ^bb1348:  // pred: ^bb1347
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1349, ^bb1
  ^bb1349:  // pred: ^bb1348
    pdl_interp.check_operation_name of %398 is "arith.divf" -> ^bb1350, ^bb1
  ^bb1350:  // pred: ^bb1349
    pdl_interp.check_operand_count of %398 is 2 -> ^bb1351, ^bb1
  ^bb1351:  // pred: ^bb1350
    pdl_interp.check_result_count of %398 is 1 -> ^bb1352, ^bb1
  ^bb1352:  // pred: ^bb1351
    %714 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %714 : !pdl.value -> ^bb1353, ^bb1
  ^bb1353:  // pred: ^bb1352
    pdl_interp.are_equal %714, %397 : !pdl.value -> ^bb1354, ^bb1
  ^bb1354:  // pred: ^bb1353
    %715 = pdl_interp.get_defining_op of %713 : !pdl.value
    pdl_interp.is_not_null %715 : !pdl.operation -> ^bb1355, ^bb1
  ^bb1355:  // pred: ^bb1354
    %716 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %716 : !pdl.value -> ^bb1356, ^bb1
  ^bb1356:  // pred: ^bb1355
    %717 = pdl_interp.get_defining_op of %716 : !pdl.value
    pdl_interp.is_not_null %717 : !pdl.operation -> ^bb1357, ^bb1
  ^bb1357:  // pred: ^bb1356
    %718 = pdl_interp.get_operand 1 of %398
    %719 = pdl_interp.get_defining_op of %718 : !pdl.value
    pdl_interp.is_not_null %719 : !pdl.operation -> ^bb1358, ^bb1
  ^bb1358:  // pred: ^bb1357
    pdl_interp.check_operation_name of %715 is "arith.remf" -> ^bb1359, ^bb1
  ^bb1359:  // pred: ^bb1358
    pdl_interp.check_operand_count of %715 is 2 -> ^bb1360, ^bb1
  ^bb1360:  // pred: ^bb1359
    pdl_interp.check_result_count of %715 is 1 -> ^bb1361, ^bb1
  ^bb1361:  // pred: ^bb1360
    %720 = pdl_interp.get_result 0 of %715
    pdl_interp.is_not_null %720 : !pdl.value -> ^bb1362, ^bb1
  ^bb1362:  // pred: ^bb1361
    pdl_interp.are_equal %720, %713 : !pdl.value -> ^bb1363, ^bb1
  ^bb1363:  // pred: ^bb1362
    pdl_interp.is_not_null %718 : !pdl.value -> ^bb1364, ^bb1
  ^bb1364:  // pred: ^bb1363
    pdl_interp.check_operation_name of %717 is "math_xdsl.constant" -> ^bb1365, ^bb1
  ^bb1365:  // pred: ^bb1364
    pdl_interp.check_operand_count of %717 is 0 -> ^bb1366, ^bb1
  ^bb1366:  // pred: ^bb1365
    pdl_interp.check_result_count of %717 is 1 -> ^bb1367, ^bb1
  ^bb1367:  // pred: ^bb1366
    %721 = pdl_interp.get_result 0 of %717
    pdl_interp.is_not_null %721 : !pdl.value -> ^bb1368, ^bb1
  ^bb1368:  // pred: ^bb1367
    pdl_interp.are_equal %721, %716 : !pdl.value -> ^bb1369, ^bb1
  ^bb1369:  // pred: ^bb1368
    pdl_interp.check_operation_name of %719 is "arith.constant" -> ^bb1370, ^bb1
  ^bb1370:  // pred: ^bb1369
    pdl_interp.check_operand_count of %719 is 0 -> ^bb1371, ^bb1
  ^bb1371:  // pred: ^bb1370
    pdl_interp.check_result_count of %719 is 1 -> ^bb1372, ^bb1
  ^bb1372:  // pred: ^bb1371
    %722 = pdl_interp.get_result 0 of %719
    pdl_interp.is_not_null %722 : !pdl.value -> ^bb1373, ^bb1
  ^bb1373:  // pred: ^bb1372
    pdl_interp.are_equal %722, %718 : !pdl.value -> ^bb1374, ^bb1
  ^bb1374:  // pred: ^bb1373
    %723 = pdl_interp.get_operand 0 of %715
    pdl_interp.is_not_null %723 : !pdl.value -> ^bb1375, ^bb1
  ^bb1375:  // pred: ^bb1374
    %724 = pdl_interp.get_defining_op of %723 : !pdl.value
    pdl_interp.is_not_null %724 : !pdl.operation -> ^bb1376, ^bb1
  ^bb1376:  // pred: ^bb1375
    %725 = pdl_interp.get_operand 1 of %715
    %726 = pdl_interp.get_defining_op of %725 : !pdl.value
    pdl_interp.is_not_null %726 : !pdl.operation -> ^bb1377, ^bb1
  ^bb1377:  // pred: ^bb1376
    %727 = pdl_interp.get_attribute "value" of %717
    pdl_interp.is_not_null %727 : !pdl.attribute -> ^bb1378, ^bb1
  ^bb1378:  // pred: ^bb1377
    pdl_interp.check_attribute %727 is #math_xdsl<constant pi> -> ^bb1379, ^bb1
  ^bb1379:  // pred: ^bb1378
    pdl_interp.is_not_null %725 : !pdl.value -> ^bb1380, ^bb1
  ^bb1380:  // pred: ^bb1379
    %728 = pdl_interp.get_attribute "value" of %719
    pdl_interp.is_not_null %728 : !pdl.attribute -> ^bb1381, ^bb1
  ^bb1381:  // pred: ^bb1380
    pdl_interp.check_attribute %728 is 2.000000e+00 : f32 -> ^bb1382, ^bb1
  ^bb1382:  // pred: ^bb1381
    pdl_interp.check_operation_name of %724 is "arith.addf" -> ^bb1383, ^bb1
  ^bb1383:  // pred: ^bb1382
    pdl_interp.check_operand_count of %724 is 2 -> ^bb1384, ^bb1
  ^bb1384:  // pred: ^bb1383
    pdl_interp.check_result_count of %724 is 1 -> ^bb1385, ^bb1
  ^bb1385:  // pred: ^bb1384
    %729 = pdl_interp.get_result 0 of %724
    pdl_interp.is_not_null %729 : !pdl.value -> ^bb1386, ^bb1
  ^bb1386:  // pred: ^bb1385
    pdl_interp.are_equal %729, %723 : !pdl.value -> ^bb1387, ^bb1
  ^bb1387:  // pred: ^bb1386
    pdl_interp.check_operation_name of %726 is "arith.mulf" -> ^bb1388, ^bb1
  ^bb1388:  // pred: ^bb1387
    pdl_interp.check_operand_count of %726 is 2 -> ^bb1389, ^bb1
  ^bb1389:  // pred: ^bb1388
    pdl_interp.check_result_count of %726 is 1 -> ^bb1390, ^bb1
  ^bb1390:  // pred: ^bb1389
    %730 = pdl_interp.get_result 0 of %726
    pdl_interp.is_not_null %730 : !pdl.value -> ^bb1391, ^bb1
  ^bb1391:  // pred: ^bb1390
    pdl_interp.are_equal %730, %725 : !pdl.value -> ^bb1392, ^bb1
  ^bb1392:  // pred: ^bb1391
    %731 = pdl_interp.get_operand 0 of %724
    pdl_interp.is_not_null %731 : !pdl.value -> ^bb1393, ^bb1
  ^bb1393:  // pred: ^bb1392
    %732 = pdl_interp.get_operand 1 of %724
    pdl_interp.is_not_null %732 : !pdl.value -> ^bb1394, ^bb1
  ^bb1394:  // pred: ^bb1393
    %733 = pdl_interp.get_value_type of %731 : !pdl.type
    pdl_interp.check_type %733 is f32 -> ^bb1395, ^bb1
  ^bb1395:  // pred: ^bb1394
    %734 = pdl_interp.get_value_type of %729 : !pdl.type
    pdl_interp.are_equal %733, %734 : !pdl.type -> ^bb1396, ^bb1
  ^bb1396:  // pred: ^bb1395
    %735 = pdl_interp.get_value_type of %720 : !pdl.type
    pdl_interp.are_equal %733, %735 : !pdl.type -> ^bb1397, ^bb1
  ^bb1397:  // pred: ^bb1396
    %736 = pdl_interp.get_value_type of %712 : !pdl.type
    pdl_interp.are_equal %733, %736 : !pdl.type -> ^bb1398, ^bb1
  ^bb1398:  // pred: ^bb1397
    %737 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %733, %737 : !pdl.type -> ^bb1399, ^bb1
  ^bb1399:  // pred: ^bb1398
    %738 = pdl_interp.get_operand 0 of %726
    pdl_interp.is_not_null %738 : !pdl.value -> ^bb1400, ^bb1
  ^bb1400:  // pred: ^bb1399
    %739 = pdl_interp.get_value_type of %714 : !pdl.type
    pdl_interp.are_equal %733, %739 : !pdl.type -> ^bb1401, ^bb1
  ^bb1401:  // pred: ^bb1400
    %740 = pdl_interp.get_defining_op of %738 : !pdl.value
    pdl_interp.is_not_null %740 : !pdl.operation -> ^bb1402, ^bb1
  ^bb1402:  // pred: ^bb1401
    %741 = pdl_interp.get_value_type of %730 : !pdl.type
    pdl_interp.are_equal %733, %741 : !pdl.type -> ^bb1403, ^bb1
  ^bb1403:  // pred: ^bb1402
    pdl_interp.check_operation_name of %740 is "arith.constant" -> ^bb1404, ^bb1
  ^bb1404:  // pred: ^bb1403
    pdl_interp.check_operand_count of %740 is 0 -> ^bb1405, ^bb1
  ^bb1405:  // pred: ^bb1404
    pdl_interp.check_result_count of %740 is 1 -> ^bb1406, ^bb1
  ^bb1406:  // pred: ^bb1405
    %742 = pdl_interp.get_attribute "value" of %740
    pdl_interp.is_not_null %742 : !pdl.attribute -> ^bb1407, ^bb1
  ^bb1407:  // pred: ^bb1406
    pdl_interp.check_attribute %742 is 2.000000e+00 : f32 -> ^bb1408, ^bb1
  ^bb1408:  // pred: ^bb1407
    %743 = pdl_interp.get_result 0 of %740
    pdl_interp.is_not_null %743 : !pdl.value -> ^bb1409, ^bb1
  ^bb1409:  // pred: ^bb1408
    pdl_interp.are_equal %743, %738 : !pdl.value -> ^bb1410, ^bb1
  ^bb1410:  // pred: ^bb1409
    %744 = pdl_interp.get_defining_op of %732 : !pdl.value
    pdl_interp.is_not_null %744 : !pdl.operation -> ^bb1411, ^bb1
  ^bb1411:  // pred: ^bb1410
    %745 = pdl_interp.get_operand 1 of %726
    %746 = pdl_interp.get_defining_op of %745 : !pdl.value
    pdl_interp.is_not_null %746 : !pdl.operation -> ^bb1412, ^bb1
  ^bb1412:  // pred: ^bb1411
    %747 = pdl_interp.get_operand 0 of %744
    %748 = pdl_interp.get_defining_op of %747 : !pdl.value
    pdl_interp.is_not_null %748 : !pdl.operation -> ^bb1413, ^bb1
  ^bb1413:  // pred: ^bb1412
    %749 = pdl_interp.get_operand 1 of %744
    %750 = pdl_interp.get_defining_op of %749 : !pdl.value
    pdl_interp.is_not_null %750 : !pdl.operation -> ^bb1414, ^bb1
  ^bb1414:  // pred: ^bb1413
    pdl_interp.is_not_null %745 : !pdl.value -> ^bb1415, ^bb1
  ^bb1415:  // pred: ^bb1414
    %751 = pdl_interp.get_value_type of %721 : !pdl.type
    pdl_interp.are_equal %733, %751 : !pdl.type -> ^bb1416, ^bb1
  ^bb1416:  // pred: ^bb1415
    %752 = pdl_interp.get_value_type of %722 : !pdl.type
    pdl_interp.are_equal %733, %752 : !pdl.type -> ^bb1417, ^bb1
  ^bb1417:  // pred: ^bb1416
    pdl_interp.check_operation_name of %744 is "arith.divf" -> ^bb1418, ^bb1
  ^bb1418:  // pred: ^bb1417
    pdl_interp.check_operation_name of %746 is "math_xdsl.constant" -> ^bb1419, ^bb1
  ^bb1419:  // pred: ^bb1418
    pdl_interp.check_operand_count of %744 is 2 -> ^bb1420, ^bb1
  ^bb1420:  // pred: ^bb1419
    pdl_interp.check_operand_count of %746 is 0 -> ^bb1421, ^bb1
  ^bb1421:  // pred: ^bb1420
    pdl_interp.check_result_count of %744 is 1 -> ^bb1422, ^bb1
  ^bb1422:  // pred: ^bb1421
    pdl_interp.check_result_count of %746 is 1 -> ^bb1423, ^bb1
  ^bb1423:  // pred: ^bb1422
    pdl_interp.is_not_null %747 : !pdl.value -> ^bb1424, ^bb1
  ^bb1424:  // pred: ^bb1423
    pdl_interp.is_not_null %749 : !pdl.value -> ^bb1425, ^bb1
  ^bb1425:  // pred: ^bb1424
    %753 = pdl_interp.get_attribute "value" of %746
    pdl_interp.is_not_null %753 : !pdl.attribute -> ^bb1426, ^bb1
  ^bb1426:  // pred: ^bb1425
    pdl_interp.check_attribute %753 is #math_xdsl<constant pi> -> ^bb1427, ^bb1
  ^bb1427:  // pred: ^bb1426
    %754 = pdl_interp.get_result 0 of %744
    pdl_interp.is_not_null %754 : !pdl.value -> ^bb1428, ^bb1
  ^bb1428:  // pred: ^bb1427
    %755 = pdl_interp.get_result 0 of %746
    pdl_interp.is_not_null %755 : !pdl.value -> ^bb1429, ^bb1
  ^bb1429:  // pred: ^bb1428
    pdl_interp.are_equal %754, %732 : !pdl.value -> ^bb1430, ^bb1
  ^bb1430:  // pred: ^bb1429
    pdl_interp.are_equal %755, %745 : !pdl.value -> ^bb1431, ^bb1
  ^bb1431:  // pred: ^bb1430
    %756 = pdl_interp.get_value_type of %754 : !pdl.type
    pdl_interp.are_equal %756, %733 : !pdl.type -> ^bb1432, ^bb1
  ^bb1432:  // pred: ^bb1431
    %757 = pdl_interp.get_value_type of %743 : !pdl.type
    pdl_interp.are_equal %757, %733 : !pdl.type -> ^bb1433, ^bb1
  ^bb1433:  // pred: ^bb1432
    %758 = pdl_interp.get_value_type of %755 : !pdl.type
    pdl_interp.are_equal %758, %733 : !pdl.type -> ^bb1434, ^bb1
  ^bb1434:  // pred: ^bb1433
    pdl_interp.check_operation_name of %748 is "math_xdsl.constant" -> ^bb1435, ^bb1
  ^bb1435:  // pred: ^bb1434
    pdl_interp.check_operation_name of %750 is "arith.constant" -> ^bb1436, ^bb1
  ^bb1436:  // pred: ^bb1435
    pdl_interp.check_operand_count of %748 is 0 -> ^bb1437, ^bb1
  ^bb1437:  // pred: ^bb1436
    pdl_interp.check_operand_count of %750 is 0 -> ^bb1438, ^bb1
  ^bb1438:  // pred: ^bb1437
    pdl_interp.check_result_count of %748 is 1 -> ^bb1439, ^bb1
  ^bb1439:  // pred: ^bb1438
    pdl_interp.check_result_count of %750 is 1 -> ^bb1440, ^bb1
  ^bb1440:  // pred: ^bb1439
    %759 = pdl_interp.get_attribute "value" of %748
    pdl_interp.is_not_null %759 : !pdl.attribute -> ^bb1441, ^bb1
  ^bb1441:  // pred: ^bb1440
    %760 = pdl_interp.get_attribute "value" of %750
    pdl_interp.is_not_null %760 : !pdl.attribute -> ^bb1442, ^bb1
  ^bb1442:  // pred: ^bb1441
    pdl_interp.check_attribute %759 is #math_xdsl<constant pi> -> ^bb1443, ^bb1
  ^bb1443:  // pred: ^bb1442
    pdl_interp.check_attribute %760 is 2.000000e+00 : f32 -> ^bb1444, ^bb1
  ^bb1444:  // pred: ^bb1443
    %761 = pdl_interp.get_result 0 of %748
    pdl_interp.is_not_null %761 : !pdl.value -> ^bb1445, ^bb1
  ^bb1445:  // pred: ^bb1444
    %762 = pdl_interp.get_result 0 of %750
    pdl_interp.is_not_null %762 : !pdl.value -> ^bb1446, ^bb1
  ^bb1446:  // pred: ^bb1445
    pdl_interp.are_equal %761, %747 : !pdl.value -> ^bb1447, ^bb1
  ^bb1447:  // pred: ^bb1446
    pdl_interp.are_equal %762, %749 : !pdl.value -> ^bb1448, ^bb1
  ^bb1448:  // pred: ^bb1447
    %763 = pdl_interp.get_value_type of %761 : !pdl.type
    pdl_interp.are_equal %763, %733 : !pdl.type -> ^bb1449, ^bb1
  ^bb1449:  // pred: ^bb1448
    %764 = pdl_interp.get_value_type of %762 : !pdl.type
    pdl_interp.are_equal %764, %733 : !pdl.type -> ^bb1450, ^bb1
  ^bb1450:  // pred: ^bb1449
    pdl_interp.record_match @rewriters::@asin_sin_rev(%731, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.asin"]), loc([%arg0, %2, %398, %715, %717, %719, %724, %726, %740, %744, %746, %748, %750]), root("arith.subf") -> ^bb1
  ^bb1451:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1452, ^bb1
  ^bb1452:  // pred: ^bb1451
    pdl_interp.check_result_count of %2 is 1 -> ^bb1453, ^bb1
  ^bb1453:  // pred: ^bb1452
    %765 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %765 : !pdl.value -> ^bb1454, ^bb1
  ^bb1454:  // pred: ^bb1453
    pdl_interp.are_equal %765, %1 : !pdl.value -> ^bb1455, ^bb1
  ^bb1455:  // pred: ^bb1454
    %766 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %766 : !pdl.value -> ^bb1456, ^bb1
  ^bb1456:  // pred: ^bb1455
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1457, ^bb1
  ^bb1457:  // pred: ^bb1456
    %767 = pdl_interp.get_value_type of %766 : !pdl.type
    pdl_interp.check_type %767 is f32 -> ^bb1458, ^bb1
  ^bb1458:  // pred: ^bb1457
    %768 = pdl_interp.get_value_type of %765 : !pdl.type
    pdl_interp.are_equal %767, %768 : !pdl.type -> ^bb1459, ^bb1
  ^bb1459:  // pred: ^bb1458
    %769 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %767, %769 : !pdl.type -> ^bb1460, ^bb1
  ^bb1460:  // pred: ^bb1459
    pdl_interp.check_operation_name of %398 is "math.sin" -> ^bb1461, ^bb1
  ^bb1461:  // pred: ^bb1460
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1462, ^bb1
  ^bb1462:  // pred: ^bb1461
    pdl_interp.check_result_count of %398 is 1 -> ^bb1463, ^bb1
  ^bb1463:  // pred: ^bb1462
    %770 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %770 : !pdl.value -> ^bb1464, ^bb1
  ^bb1464:  // pred: ^bb1463
    pdl_interp.are_equal %770, %397 : !pdl.value -> ^bb1465, ^bb1
  ^bb1465:  // pred: ^bb1464
    %771 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %771 : !pdl.value -> ^bb1466, ^bb1
  ^bb1466:  // pred: ^bb1465
    %772 = pdl_interp.get_value_type of %770 : !pdl.type
    pdl_interp.are_equal %767, %772 : !pdl.type -> ^bb1467, ^bb1
  ^bb1467:  // pred: ^bb1466
    %773 = pdl_interp.get_value_type of %771 : !pdl.type
    pdl_interp.are_equal %767, %773 : !pdl.type -> ^bb1468, ^bb1
  ^bb1468:  // pred: ^bb1467
    pdl_interp.record_match @rewriters::@diff_sin(%766, %771, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.subf", "arith.constant", "arith.divf", "math.sin", "arith.addf", "arith.constant", "arith.divf", "math.cos", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1
  ^bb1469:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1470, ^bb1
  ^bb1470:  // pred: ^bb1469
    pdl_interp.check_result_count of %2 is 1 -> ^bb1471, ^bb1
  ^bb1471:  // pred: ^bb1470
    %774 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %774 : !pdl.value -> ^bb1472, ^bb1
  ^bb1472:  // pred: ^bb1471
    pdl_interp.are_equal %774, %1 : !pdl.value -> ^bb1473, ^bb1
  ^bb1473:  // pred: ^bb1472
    %775 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %775 : !pdl.value -> ^bb1474, ^bb1
  ^bb1474:  // pred: ^bb1473
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1475, ^bb1
  ^bb1475:  // pred: ^bb1474
    %776 = pdl_interp.get_value_type of %775 : !pdl.type
    pdl_interp.check_type %776 is f32 -> ^bb1476, ^bb1
  ^bb1476:  // pred: ^bb1475
    %777 = pdl_interp.get_value_type of %774 : !pdl.type
    pdl_interp.are_equal %776, %777 : !pdl.type -> ^bb1477, ^bb1
  ^bb1477:  // pred: ^bb1476
    %778 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %776, %778 : !pdl.type -> ^bb1478, ^bb1
  ^bb1478:  // pred: ^bb1477
    pdl_interp.check_operation_name of %398 is "math.cos" -> ^bb1479, ^bb1
  ^bb1479:  // pred: ^bb1478
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1480, ^bb1
  ^bb1480:  // pred: ^bb1479
    pdl_interp.check_result_count of %398 is 1 -> ^bb1481, ^bb1
  ^bb1481:  // pred: ^bb1480
    %779 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %779 : !pdl.value -> ^bb1482, ^bb1
  ^bb1482:  // pred: ^bb1481
    pdl_interp.are_equal %779, %397 : !pdl.value -> ^bb1483, ^bb1
  ^bb1483:  // pred: ^bb1482
    %780 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %780 : !pdl.value -> ^bb1484, ^bb1
  ^bb1484:  // pred: ^bb1483
    %781 = pdl_interp.get_value_type of %779 : !pdl.type
    pdl_interp.are_equal %776, %781 : !pdl.type -> ^bb1485, ^bb1
  ^bb1485:  // pred: ^bb1484
    %782 = pdl_interp.get_value_type of %780 : !pdl.type
    pdl_interp.are_equal %776, %782 : !pdl.type -> ^bb1486, ^bb1
  ^bb1486:  // pred: ^bb1485
    pdl_interp.record_match @rewriters::@diff_cos(%775, %780, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.subf", "arith.constant", "arith.divf", "math.sin", "arith.addf", "arith.constant", "arith.divf", "math.sin", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1
  ^bb1487:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1488, ^bb1
  ^bb1488:  // pred: ^bb1487
    pdl_interp.check_result_count of %2 is 1 -> ^bb1489, ^bb1
  ^bb1489:  // pred: ^bb1488
    %783 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %783 : !pdl.value -> ^bb1490, ^bb1
  ^bb1490:  // pred: ^bb1489
    pdl_interp.are_equal %783, %1 : !pdl.value -> ^bb1491, ^bb1
  ^bb1491:  // pred: ^bb1490
    %784 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %784 : !pdl.value -> ^bb1492, ^bb1
  ^bb1492:  // pred: ^bb1491
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1493, ^bb1
  ^bb1493:  // pred: ^bb1492
    %785 = pdl_interp.get_value_type of %784 : !pdl.type
    pdl_interp.check_type %785 is f32 -> ^bb1494, ^bb1
  ^bb1494:  // pred: ^bb1493
    %786 = pdl_interp.get_value_type of %783 : !pdl.type
    pdl_interp.are_equal %785, %786 : !pdl.type -> ^bb1495, ^bb1
  ^bb1495:  // pred: ^bb1494
    %787 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %785, %787 : !pdl.type -> ^bb1496, ^bb1
  ^bb1496:  // pred: ^bb1495
    pdl_interp.check_operation_name of %398 is "math.atan" -> ^bb1497, ^bb1
  ^bb1497:  // pred: ^bb1496
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1498, ^bb1
  ^bb1498:  // pred: ^bb1497
    pdl_interp.check_result_count of %398 is 1 -> ^bb1499, ^bb1
  ^bb1499:  // pred: ^bb1498
    %788 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %788 : !pdl.value -> ^bb1500, ^bb1
  ^bb1500:  // pred: ^bb1499
    pdl_interp.are_equal %788, %397 : !pdl.value -> ^bb1501, ^bb1
  ^bb1501:  // pred: ^bb1500
    %789 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %789 : !pdl.value -> ^bb1502, ^bb1
  ^bb1502:  // pred: ^bb1501
    %790 = pdl_interp.get_value_type of %788 : !pdl.type
    pdl_interp.are_equal %785, %790 : !pdl.type -> ^bb1503, ^bb1
  ^bb1503:  // pred: ^bb1502
    %791 = pdl_interp.get_value_type of %789 : !pdl.type
    pdl_interp.are_equal %785, %791 : !pdl.type -> ^bb1504, ^bb1
  ^bb1504:  // pred: ^bb1503
    pdl_interp.record_match @rewriters::@diff_atan(%784, %789, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.constant", "arith.mulf", "arith.addf", "math.atan2"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1
  ^bb1505:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 0 -> ^bb1506, ^bb1
  ^bb1506:  // pred: ^bb1505
    pdl_interp.check_result_count of %2 is 1 -> ^bb1507, ^bb1
  ^bb1507:  // pred: ^bb1506
    %792 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %792 : !pdl.value -> ^bb1508, ^bb1
  ^bb1508:  // pred: ^bb1507
    pdl_interp.are_equal %792, %1 : !pdl.value -> ^bb1509, ^bb1
  ^bb1509:  // pred: ^bb1508
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1510, ^bb1
  ^bb1510:  // pred: ^bb1509
    pdl_interp.check_operation_name of %398 is "math.acos" -> ^bb1511, ^bb1
  ^bb1511:  // pred: ^bb1510
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1512, ^bb1
  ^bb1512:  // pred: ^bb1511
    pdl_interp.check_result_count of %398 is 1 -> ^bb1513, ^bb1
  ^bb1513:  // pred: ^bb1512
    %793 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %793 : !pdl.value -> ^bb1514, ^bb1
  ^bb1514:  // pred: ^bb1513
    pdl_interp.are_equal %793, %397 : !pdl.value -> ^bb1515, ^bb1
  ^bb1515:  // pred: ^bb1514
    %794 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %794 : !pdl.value -> ^bb1516, ^bb1
  ^bb1516:  // pred: ^bb1515
    %795 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %795 : !pdl.attribute -> ^bb1517, ^bb1
  ^bb1517:  // pred: ^bb1516
    pdl_interp.check_attribute %795 is #math_xdsl<constant pi> -> ^bb1518, ^bb1
  ^bb1518:  // pred: ^bb1517
    %796 = pdl_interp.get_value_type of %792 : !pdl.type
    pdl_interp.check_type %796 is f32 -> ^bb1519, ^bb1
  ^bb1519:  // pred: ^bb1518
    %797 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %796, %797 : !pdl.type -> ^bb1520, ^bb1
  ^bb1520:  // pred: ^bb1519
    %798 = pdl_interp.get_value_type of %793 : !pdl.type
    pdl_interp.are_equal %796, %798 : !pdl.type -> ^bb1521, ^bb1
  ^bb1521:  // pred: ^bb1520
    %799 = pdl_interp.get_value_type of %794 : !pdl.type
    pdl_interp.are_equal %796, %799 : !pdl.type -> ^bb1522, ^bb1
  ^bb1522:  // pred: ^bb1521
    pdl_interp.record_match @rewriters::@acos_neg_rev(%794, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.acos"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1
  ^bb1523:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1524, ^bb1
  ^bb1524:  // pred: ^bb1523
    pdl_interp.check_result_count of %2 is 1 -> ^bb1525, ^bb1
  ^bb1525:  // pred: ^bb1524
    %800 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %800 : !pdl.value -> ^bb1526, ^bb1
  ^bb1526:  // pred: ^bb1525
    pdl_interp.are_equal %800, %1 : !pdl.value -> ^bb1527, ^bb1
  ^bb1527:  // pred: ^bb1526
    %801 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %801 : !pdl.value -> ^bb1528, ^bb1
  ^bb1528:  // pred: ^bb1527
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1529, ^bb1
  ^bb1529:  // pred: ^bb1528
    %802 = pdl_interp.get_value_type of %801 : !pdl.type
    pdl_interp.check_type %802 is f32 -> ^bb1530, ^bb1
  ^bb1530:  // pred: ^bb1529
    %803 = pdl_interp.get_value_type of %800 : !pdl.type
    pdl_interp.are_equal %802, %803 : !pdl.type -> ^bb1531, ^bb1
  ^bb1531:  // pred: ^bb1530
    %804 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %802, %804 : !pdl.type -> ^bb1532, ^bb1
  ^bb1532:  // pred: ^bb1531
    pdl_interp.switch_operation_name of %398 to ["math.sinh", "math.cosh"](^bb1533, ^bb1540) -> ^bb1
  ^bb1533:  // pred: ^bb1532
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1534, ^bb1
  ^bb1534:  // pred: ^bb1533
    pdl_interp.check_result_count of %398 is 1 -> ^bb1535, ^bb1
  ^bb1535:  // pred: ^bb1534
    %805 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %805 : !pdl.value -> ^bb1536, ^bb1
  ^bb1536:  // pred: ^bb1535
    pdl_interp.are_equal %805, %397 : !pdl.value -> ^bb1537, ^bb1
  ^bb1537:  // pred: ^bb1536
    %806 = pdl_interp.get_value_type of %805 : !pdl.type
    pdl_interp.are_equal %802, %806 : !pdl.type -> ^bb1538, ^bb1
  ^bb1538:  // pred: ^bb1537
    %807 = pdl_interp.get_operand 0 of %398
    pdl_interp.are_equal %801, %807 : !pdl.value -> ^bb1539, ^bb1
  ^bb1539:  // pred: ^bb1538
    pdl_interp.record_match @rewriters::@sinhsub__cosh(%801, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.exp"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1
  ^bb1540:  // pred: ^bb1532
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1541, ^bb1
  ^bb1541:  // pred: ^bb1540
    pdl_interp.check_result_count of %398 is 1 -> ^bb1542, ^bb1
  ^bb1542:  // pred: ^bb1541
    %808 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %808 : !pdl.value -> ^bb1543, ^bb1
  ^bb1543:  // pred: ^bb1542
    pdl_interp.are_equal %808, %397 : !pdl.value -> ^bb1544, ^bb1
  ^bb1544:  // pred: ^bb1543
    %809 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %809 : !pdl.value -> ^bb1545, ^bb1
  ^bb1545:  // pred: ^bb1544
    %810 = pdl_interp.get_value_type of %808 : !pdl.type
    pdl_interp.are_equal %802, %810 : !pdl.type -> ^bb1546, ^bb1
  ^bb1546:  // pred: ^bb1545
    %811 = pdl_interp.get_value_type of %809 : !pdl.type
    pdl_interp.are_equal %802, %811 : !pdl.type -> ^bb1547, ^bb1
  ^bb1547:  // pred: ^bb1546
    pdl_interp.record_match @rewriters::@diff_cosh(%801, %809, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.constant", "arith.divf", "math.sinh", "arith.subf", "arith.constant", "arith.divf", "math.sinh", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1
  ^bb1548:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1549, ^bb1
  ^bb1549:  // pred: ^bb1548
    pdl_interp.check_result_count of %2 is 1 -> ^bb1550, ^bb1
  ^bb1550:  // pred: ^bb1549
    %812 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %812 : !pdl.value -> ^bb1551, ^bb1
  ^bb1551:  // pred: ^bb1550
    pdl_interp.are_equal %812, %1 : !pdl.value -> ^bb1552, ^bb1
  ^bb1552:  // pred: ^bb1551
    %813 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %813 : !pdl.value -> ^bb1553, ^bb1
  ^bb1553:  // pred: ^bb1552
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1554, ^bb1
  ^bb1554:  // pred: ^bb1553
    %814 = pdl_interp.get_value_type of %813 : !pdl.type
    pdl_interp.check_type %814 is f32 -> ^bb1555, ^bb1
  ^bb1555:  // pred: ^bb1554
    %815 = pdl_interp.get_value_type of %812 : !pdl.type
    pdl_interp.are_equal %814, %815 : !pdl.type -> ^bb1556, ^bb1
  ^bb1556:  // pred: ^bb1555
    %816 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %814, %816 : !pdl.type -> ^bb1557, ^bb1
  ^bb1557:  // pred: ^bb1556
    pdl_interp.check_operation_name of %398 is "math.exp" -> ^bb1558, ^bb1
  ^bb1558:  // pred: ^bb1557
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1559, ^bb1
  ^bb1559:  // pred: ^bb1558
    pdl_interp.check_result_count of %398 is 1 -> ^bb1560, ^bb1
  ^bb1560:  // pred: ^bb1559
    %817 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %817 : !pdl.value -> ^bb1561, ^bb1
  ^bb1561:  // pred: ^bb1560
    pdl_interp.are_equal %817, %397 : !pdl.value -> ^bb1562, ^bb1
  ^bb1562:  // pred: ^bb1561
    %818 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %818 : !pdl.value -> ^bb1563, ^bb1
  ^bb1563:  // pred: ^bb1562
    %819 = pdl_interp.get_defining_op of %818 : !pdl.value
    pdl_interp.is_not_null %819 : !pdl.operation -> ^bb1564, ^bb1
  ^bb1564:  // pred: ^bb1563
    %820 = pdl_interp.get_value_type of %817 : !pdl.type
    pdl_interp.are_equal %814, %820 : !pdl.type -> ^bb1565, ^bb1
  ^bb1565:  // pred: ^bb1564
    pdl_interp.check_operation_name of %819 is "arith.negf" -> ^bb1566, ^bb1
  ^bb1566:  // pred: ^bb1565
    pdl_interp.check_operand_count of %819 is 1 -> ^bb1567, ^bb1
  ^bb1567:  // pred: ^bb1566
    pdl_interp.check_result_count of %819 is 1 -> ^bb1568, ^bb1
  ^bb1568:  // pred: ^bb1567
    %821 = pdl_interp.get_result 0 of %819
    pdl_interp.is_not_null %821 : !pdl.value -> ^bb1569, ^bb1
  ^bb1569:  // pred: ^bb1568
    pdl_interp.are_equal %821, %818 : !pdl.value -> ^bb1570, ^bb1
  ^bb1570:  // pred: ^bb1569
    %822 = pdl_interp.get_value_type of %821 : !pdl.type
    pdl_interp.are_equal %822, %814 : !pdl.type -> ^bb1571, ^bb1
  ^bb1571:  // pred: ^bb1570
    %823 = pdl_interp.get_operand 0 of %819
    pdl_interp.are_equal %823, %813 : !pdl.value -> ^bb1572, ^bb1
  ^bb1572:  // pred: ^bb1571
    pdl_interp.record_match @rewriters::@sinh_undef(%813, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sinh", "arith.mulf"]), loc([%arg0, %2, %398, %819]), root("arith.subf") -> ^bb1
  ^bb1573:  // pred: ^bb754
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1574, ^bb1
  ^bb1574:  // pred: ^bb1573
    pdl_interp.check_result_count of %2 is 1 -> ^bb1575, ^bb1
  ^bb1575:  // pred: ^bb1574
    %824 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %824 : !pdl.value -> ^bb1576, ^bb1
  ^bb1576:  // pred: ^bb1575
    pdl_interp.are_equal %824, %1 : !pdl.value -> ^bb1577, ^bb1
  ^bb1577:  // pred: ^bb1576
    %825 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %825 : !pdl.value -> ^bb1578, ^bb1
  ^bb1578:  // pred: ^bb1577
    pdl_interp.is_not_null %397 : !pdl.value -> ^bb1579, ^bb1
  ^bb1579:  // pred: ^bb1578
    %826 = pdl_interp.get_value_type of %825 : !pdl.type
    pdl_interp.check_type %826 is f32 -> ^bb1580, ^bb1
  ^bb1580:  // pred: ^bb1579
    %827 = pdl_interp.get_value_type of %824 : !pdl.type
    pdl_interp.are_equal %826, %827 : !pdl.type -> ^bb1581, ^bb1
  ^bb1581:  // pred: ^bb1580
    %828 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %826, %828 : !pdl.type -> ^bb1582, ^bb1
  ^bb1582:  // pred: ^bb1581
    pdl_interp.check_operation_name of %398 is "math.sinh" -> ^bb1583, ^bb1
  ^bb1583:  // pred: ^bb1582
    pdl_interp.check_operand_count of %398 is 1 -> ^bb1584, ^bb1
  ^bb1584:  // pred: ^bb1583
    pdl_interp.check_result_count of %398 is 1 -> ^bb1585, ^bb1
  ^bb1585:  // pred: ^bb1584
    %829 = pdl_interp.get_result 0 of %398
    pdl_interp.is_not_null %829 : !pdl.value -> ^bb1586, ^bb1
  ^bb1586:  // pred: ^bb1585
    pdl_interp.are_equal %829, %397 : !pdl.value -> ^bb1587, ^bb1
  ^bb1587:  // pred: ^bb1586
    %830 = pdl_interp.get_operand 0 of %398
    pdl_interp.is_not_null %830 : !pdl.value -> ^bb1588, ^bb1
  ^bb1588:  // pred: ^bb1587
    %831 = pdl_interp.get_value_type of %829 : !pdl.type
    pdl_interp.are_equal %826, %831 : !pdl.type -> ^bb1589, ^bb1
  ^bb1589:  // pred: ^bb1588
    %832 = pdl_interp.get_value_type of %830 : !pdl.type
    pdl_interp.are_equal %826, %832 : !pdl.type -> ^bb1590, ^bb1
  ^bb1590:  // pred: ^bb1589
    pdl_interp.record_match @rewriters::@diff_sinh(%825, %830, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.constant", "arith.divf", "math.cosh", "arith.subf", "arith.constant", "arith.divf", "math.sinh", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %398]), root("arith.subf") -> ^bb1
  ^bb1591:  // pred: ^bb752
    pdl_interp.check_operand_count of %2 is 2 -> ^bb1592, ^bb753
  ^bb1592:  // pred: ^bb1591
    pdl_interp.check_result_count of %2 is 1 -> ^bb1593, ^bb753
  ^bb1593:  // pred: ^bb1592
    %833 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %833 : !pdl.value -> ^bb1594, ^bb753
  ^bb1594:  // pred: ^bb1593
    pdl_interp.are_equal %833, %1 : !pdl.value -> ^bb1595, ^bb753
  ^bb1595:  // pred: ^bb1594
    %834 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %834 : !pdl.value -> ^bb1596, ^bb753
  ^bb1596:  // pred: ^bb1595
    %835 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %835 : !pdl.value -> ^bb1597, ^bb753
  ^bb1597:  // pred: ^bb1596
    %836 = pdl_interp.get_value_type of %834 : !pdl.type
    pdl_interp.check_type %836 is f32 -> ^bb1598, ^bb753
  ^bb1598:  // pred: ^bb1597
    %837 = pdl_interp.get_value_type of %833 : !pdl.type
    pdl_interp.are_equal %836, %837 : !pdl.type -> ^bb1599, ^bb753
  ^bb1599:  // pred: ^bb1598
    %838 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %836, %838 : !pdl.type -> ^bb1600, ^bb753
  ^bb1600:  // pred: ^bb1599
    %839 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %839 : !pdl.value -> ^bb1601, ^bb753
  ^bb1601:  // pred: ^bb1600
    %840 = pdl_interp.get_value_type of %839 : !pdl.type
    pdl_interp.are_equal %836, %840 : !pdl.type -> ^bb1602, ^bb753
  ^bb1602:  // pred: ^bb1601
    %841 = pdl_interp.get_value_type of %835 : !pdl.type
    pdl_interp.are_equal %836, %841 : !pdl.type -> ^bb1603, ^bb753
  ^bb1603:  // pred: ^bb1602
    pdl_interp.record_match @rewriters::@associatesub_ladd(%839, %835, %834, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.addf"]), loc([%arg0, %2]), root("arith.subf") -> ^bb753
  ^bb1604:  // pred: ^bb752
    pdl_interp.check_operand_count of %2 is 2 -> ^bb1605, ^bb753
  ^bb1605:  // pred: ^bb1604
    pdl_interp.check_result_count of %2 is 1 -> ^bb1606, ^bb753
  ^bb1606:  // pred: ^bb1605
    %842 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %842 : !pdl.value -> ^bb1607, ^bb753
  ^bb1607:  // pred: ^bb1606
    pdl_interp.are_equal %842, %1 : !pdl.value -> ^bb1608, ^bb753
  ^bb1608:  // pred: ^bb1607
    %843 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %843 : !pdl.value -> ^bb1609, ^bb753
  ^bb1609:  // pred: ^bb1608
    %844 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %844 : !pdl.value -> ^bb1610, ^bb753
  ^bb1610:  // pred: ^bb1609
    %845 = pdl_interp.get_value_type of %843 : !pdl.type
    pdl_interp.check_type %845 is f32 -> ^bb1611, ^bb753
  ^bb1611:  // pred: ^bb1610
    %846 = pdl_interp.get_value_type of %842 : !pdl.type
    pdl_interp.are_equal %845, %846 : !pdl.type -> ^bb1612, ^bb753
  ^bb1612:  // pred: ^bb1611
    %847 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %845, %847 : !pdl.type -> ^bb1613, ^bb753
  ^bb1613:  // pred: ^bb1612
    %848 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %848 : !pdl.value -> ^bb1614, ^bb753
  ^bb1614:  // pred: ^bb1613
    %849 = pdl_interp.get_value_type of %848 : !pdl.type
    pdl_interp.are_equal %845, %849 : !pdl.type -> ^bb1615, ^bb753
  ^bb1615:  // pred: ^bb1614
    %850 = pdl_interp.get_value_type of %844 : !pdl.type
    pdl_interp.are_equal %845, %850 : !pdl.type -> ^bb1616, ^bb753
  ^bb1616:  // pred: ^bb1615
    pdl_interp.record_match @rewriters::@associatesub_l_(%848, %844, %843, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.subf"]), loc([%arg0, %2]), root("arith.subf") -> ^bb753
  ^bb1617:  // pred: ^bb752
    pdl_interp.check_operand_count of %2 is 0 -> ^bb1618, ^bb753
  ^bb1618:  // pred: ^bb1617
    pdl_interp.check_result_count of %2 is 1 -> ^bb1619, ^bb753
  ^bb1619:  // pred: ^bb1618
    %851 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %851 : !pdl.value -> ^bb1620, ^bb753
  ^bb1620:  // pred: ^bb1619
    pdl_interp.are_equal %851, %1 : !pdl.value -> ^bb1621, ^bb753
  ^bb1621:  // pred: ^bb1620
    %852 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %852 : !pdl.value -> ^bb1622, ^bb753
  ^bb1622:  // pred: ^bb1621
    %853 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %853 : !pdl.attribute -> ^bb1623, ^bb753
  ^bb1623:  // pred: ^bb1622
    pdl_interp.check_attribute %853 is 0.000000e+00 : f32 -> ^bb1624, ^bb753
  ^bb1624:  // pred: ^bb1623
    %854 = pdl_interp.get_value_type of %851 : !pdl.type
    pdl_interp.check_type %854 is f32 -> ^bb1625, ^bb753
  ^bb1625:  // pred: ^bb1624
    %855 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %854, %855 : !pdl.type -> ^bb1626, ^bb753
  ^bb1626:  // pred: ^bb1625
    %856 = pdl_interp.get_value_type of %852 : !pdl.type
    pdl_interp.are_equal %854, %856 : !pdl.type -> ^bb1627, ^bb753
  ^bb1627:  // pred: ^bb1626
    pdl_interp.record_match @rewriters::@sub0_neg(%852, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf"]), loc([%arg0, %2]), root("arith.subf") -> ^bb753
  ^bb1628:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb1629, ^bb1
  ^bb1629:  // pred: ^bb1628
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb1630, ^bb1
  ^bb1630:  // pred: ^bb1629
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb1631, ^bb1
  ^bb1631:  // pred: ^bb1630
    pdl_interp.switch_operation_name of %2 to ["arith.mulf", "arith.divf", "arith.constant", "arith.negf", "arith.addf", "arith.subf", "math.powf"](^bb2698, ^bb2717, ^bb2745, ^bb2768, ^bb2779, ^bb2809, ^bb2839) -> ^bb1632
  ^bb1632:  // 138 preds: ^bb1631, ^bb2698, ^bb2699, ^bb2700, ^bb2701, ^bb2702, ^bb2704, ^bb2705, ^bb2706, ^bb2707, ^bb2708, ^bb2709, ^bb2717, ^bb2718, ^bb2719, ^bb2720, ^bb2721, ^bb2723, ^bb2724, ^bb2725, ^bb2726, ^bb2727, ^bb2728, ^bb2729, ^bb2730, ^bb2731, ^bb2732, ^bb2733, ^bb2734, ^bb2735, ^bb2736, ^bb2737, ^bb2745, ^bb2746, ^bb2747, ^bb2748, ^bb2749, ^bb2750, ^bb2751, ^bb2752, ^bb2753, ^bb2754, ^bb2755, ^bb2756, ^bb2757, ^bb2758, ^bb2759, ^bb2760, ^bb2761, ^bb2762, ^bb2763, ^bb2764, ^bb2765, ^bb2766, ^bb2767, ^bb2768, ^bb2769, ^bb2770, ^bb2771, ^bb2772, ^bb2773, ^bb2774, ^bb2775, ^bb2776, ^bb2777, ^bb2778, ^bb2779, ^bb2780, ^bb2781, ^bb2782, ^bb2783, ^bb2784, ^bb2785, ^bb2786, ^bb2787, ^bb2788, ^bb2789, ^bb2790, ^bb2791, ^bb2792, ^bb2793, ^bb2794, ^bb2795, ^bb2796, ^bb2797, ^bb2798, ^bb2799, ^bb2800, ^bb2801, ^bb2802, ^bb2803, ^bb2804, ^bb2805, ^bb2806, ^bb2807, ^bb2808, ^bb2809, ^bb2810, ^bb2811, ^bb2812, ^bb2813, ^bb2814, ^bb2815, ^bb2816, ^bb2817, ^bb2818, ^bb2819, ^bb2820, ^bb2821, ^bb2822, ^bb2823, ^bb2824, ^bb2825, ^bb2826, ^bb2827, ^bb2828, ^bb2829, ^bb2830, ^bb2831, ^bb2832, ^bb2833, ^bb2834, ^bb2835, ^bb2836, ^bb2837, ^bb2838, ^bb2839, ^bb2840, ^bb2841, ^bb2842, ^bb2843, ^bb2844, ^bb2845, ^bb2846, ^bb2847, ^bb2848, ^bb2849, ^bb2850
    %857 = pdl_interp.get_operand 1 of %arg0
    %858 = pdl_interp.get_defining_op of %857 : !pdl.value
    pdl_interp.is_not_null %858 : !pdl.operation -> ^bb1633, ^bb1
  ^bb1633:  // pred: ^bb1632
    pdl_interp.switch_operation_name of %2 to ["arith.mulf", "math.powf", "arith.addf", "arith.divf", "math.sqrt", "arith.negf", "math.absf", "math.cbrt", "math.exp", "math.sin", "math.cos", "arith.constant"](^bb1634, ^bb1688, ^bb1744, ^bb1887, ^bb1909, ^bb1930, ^bb1947, ^bb1968, ^bb2010, ^bb2031, ^bb2061, ^bb2084) -> ^bb1
  ^bb1634:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 2 -> ^bb1635, ^bb1
  ^bb1635:  // pred: ^bb1634
    pdl_interp.check_result_count of %2 is 1 -> ^bb1636, ^bb1
  ^bb1636:  // pred: ^bb1635
    %859 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %859 : !pdl.value -> ^bb1637, ^bb1
  ^bb1637:  // pred: ^bb1636
    pdl_interp.are_equal %859, %1 : !pdl.value -> ^bb1638, ^bb1
  ^bb1638:  // pred: ^bb1637
    %860 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %860 : !pdl.value -> ^bb1639, ^bb1
  ^bb1639:  // pred: ^bb1638
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb1640, ^bb1
  ^bb1640:  // pred: ^bb1639
    %861 = pdl_interp.get_value_type of %860 : !pdl.type
    pdl_interp.check_type %861 is f32 -> ^bb1669, ^bb1641
  ^bb1641:  // 14 preds: ^bb1640, ^bb1669, ^bb1670, ^bb1671, ^bb1672, ^bb1673, ^bb1674, ^bb1675, ^bb1677, ^bb1678, ^bb1679, ^bb1680, ^bb1681, ^bb1682
    pdl_interp.check_operation_name of %858 is "math.cbrt" -> ^bb1642, ^bb1
  ^bb1642:  // pred: ^bb1641
    pdl_interp.check_operand_count of %858 is 1 -> ^bb1643, ^bb1
  ^bb1643:  // pred: ^bb1642
    pdl_interp.check_result_count of %858 is 1 -> ^bb1644, ^bb1
  ^bb1644:  // pred: ^bb1643
    %862 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %862 : !pdl.value -> ^bb1645, ^bb1
  ^bb1645:  // pred: ^bb1644
    pdl_interp.are_equal %862, %857 : !pdl.value -> ^bb1646, ^bb1
  ^bb1646:  // pred: ^bb1645
    %863 = pdl_interp.get_operand 1 of %2
    %864 = pdl_interp.get_defining_op of %863 : !pdl.value
    pdl_interp.is_not_null %864 : !pdl.operation -> ^bb1647, ^bb1
  ^bb1647:  // pred: ^bb1646
    %865 = pdl_interp.get_defining_op of %860 : !pdl.value
    pdl_interp.is_not_null %865 : !pdl.operation -> ^bb1648, ^bb1
  ^bb1648:  // pred: ^bb1647
    pdl_interp.is_not_null %863 : !pdl.value -> ^bb1649, ^bb1
  ^bb1649:  // pred: ^bb1648
    pdl_interp.check_operation_name of %864 is "math.cbrt" -> ^bb1650, ^bb1
  ^bb1650:  // pred: ^bb1649
    pdl_interp.check_operand_count of %864 is 1 -> ^bb1651, ^bb1
  ^bb1651:  // pred: ^bb1650
    pdl_interp.check_result_count of %864 is 1 -> ^bb1652, ^bb1
  ^bb1652:  // pred: ^bb1651
    %866 = pdl_interp.get_result 0 of %864
    pdl_interp.is_not_null %866 : !pdl.value -> ^bb1653, ^bb1
  ^bb1653:  // pred: ^bb1652
    pdl_interp.are_equal %866, %863 : !pdl.value -> ^bb1654, ^bb1
  ^bb1654:  // pred: ^bb1653
    pdl_interp.check_operation_name of %865 is "math.cbrt" -> ^bb1655, ^bb1
  ^bb1655:  // pred: ^bb1654
    pdl_interp.check_operand_count of %865 is 1 -> ^bb1656, ^bb1
  ^bb1656:  // pred: ^bb1655
    pdl_interp.check_result_count of %865 is 1 -> ^bb1657, ^bb1
  ^bb1657:  // pred: ^bb1656
    %867 = pdl_interp.get_result 0 of %865
    pdl_interp.is_not_null %867 : !pdl.value -> ^bb1658, ^bb1
  ^bb1658:  // pred: ^bb1657
    pdl_interp.are_equal %867, %860 : !pdl.value -> ^bb1659, ^bb1
  ^bb1659:  // pred: ^bb1658
    %868 = pdl_interp.get_operand 0 of %865
    pdl_interp.is_not_null %868 : !pdl.value -> ^bb1660, ^bb1
  ^bb1660:  // pred: ^bb1659
    %869 = pdl_interp.get_value_type of %868 : !pdl.type
    pdl_interp.check_type %869 is f32 -> ^bb1661, ^bb1
  ^bb1661:  // pred: ^bb1660
    %870 = pdl_interp.get_value_type of %867 : !pdl.type
    pdl_interp.are_equal %869, %870 : !pdl.type -> ^bb1662, ^bb1
  ^bb1662:  // pred: ^bb1661
    %871 = pdl_interp.get_value_type of %859 : !pdl.type
    pdl_interp.are_equal %869, %871 : !pdl.type -> ^bb1663, ^bb1
  ^bb1663:  // pred: ^bb1662
    %872 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %869, %872 : !pdl.type -> ^bb1664, ^bb1
  ^bb1664:  // pred: ^bb1663
    %873 = pdl_interp.get_value_type of %866 : !pdl.type
    pdl_interp.are_equal %869, %873 : !pdl.type -> ^bb1665, ^bb1
  ^bb1665:  // pred: ^bb1664
    %874 = pdl_interp.get_value_type of %862 : !pdl.type
    pdl_interp.are_equal %869, %874 : !pdl.type -> ^bb1666, ^bb1
  ^bb1666:  // pred: ^bb1665
    %875 = pdl_interp.get_operand 0 of %864
    pdl_interp.are_equal %868, %875 : !pdl.value -> ^bb1667, ^bb1
  ^bb1667:  // pred: ^bb1666
    %876 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %868, %876 : !pdl.value -> ^bb1668, ^bb1
  ^bb1668:  // pred: ^bb1667
    pdl_interp.record_match @rewriters::@rem_3cbrt_lft(%868, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %858, %2, %864, %865]), root("arith.mulf") -> ^bb1
  ^bb1669:  // pred: ^bb1640
    %877 = pdl_interp.get_value_type of %859 : !pdl.type
    pdl_interp.are_equal %861, %877 : !pdl.type -> ^bb1670, ^bb1641
  ^bb1670:  // pred: ^bb1669
    %878 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %861, %878 : !pdl.type -> ^bb1671, ^bb1641
  ^bb1671:  // pred: ^bb1670
    pdl_interp.check_operation_name of %858 is "arith.mulf" -> ^bb1672, ^bb1641
  ^bb1672:  // pred: ^bb1671
    pdl_interp.check_operand_count of %858 is 2 -> ^bb1673, ^bb1641
  ^bb1673:  // pred: ^bb1672
    pdl_interp.check_result_count of %858 is 1 -> ^bb1674, ^bb1641
  ^bb1674:  // pred: ^bb1673
    %879 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %879 : !pdl.value -> ^bb1675, ^bb1641
  ^bb1675:  // pred: ^bb1674
    pdl_interp.are_equal %879, %857 : !pdl.value -> ^bb1676, ^bb1641
  ^bb1676:  // pred: ^bb1675
    %880 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %880 : !pdl.value -> ^bb1683, ^bb1677
  ^bb1677:  // 6 preds: ^bb1676, ^bb1683, ^bb1684, ^bb1685, ^bb1686, ^bb1687
    %881 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %881 : !pdl.value -> ^bb1678, ^bb1641
  ^bb1678:  // pred: ^bb1677
    %882 = pdl_interp.get_value_type of %879 : !pdl.type
    pdl_interp.are_equal %861, %882 : !pdl.type -> ^bb1679, ^bb1641
  ^bb1679:  // pred: ^bb1678
    %883 = pdl_interp.get_value_type of %881 : !pdl.type
    pdl_interp.are_equal %861, %883 : !pdl.type -> ^bb1680, ^bb1641
  ^bb1680:  // pred: ^bb1679
    %884 = pdl_interp.get_operand 1 of %2
    pdl_interp.are_equal %860, %884 : !pdl.value -> ^bb1681, ^bb1641
  ^bb1681:  // pred: ^bb1680
    %885 = pdl_interp.get_operand 1 of %858
    pdl_interp.are_equal %881, %885 : !pdl.value -> ^bb1682, ^bb1641
  ^bb1682:  // pred: ^bb1681
    pdl_interp.record_match @rewriters::@unswap_sqr(%860, %881, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1641
  ^bb1683:  // pred: ^bb1676
    %886 = pdl_interp.get_value_type of %879 : !pdl.type
    pdl_interp.are_equal %861, %886 : !pdl.type -> ^bb1684, ^bb1677
  ^bb1684:  // pred: ^bb1683
    %887 = pdl_interp.get_value_type of %880 : !pdl.type
    pdl_interp.are_equal %861, %887 : !pdl.type -> ^bb1685, ^bb1677
  ^bb1685:  // pred: ^bb1684
    %888 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %860, %888 : !pdl.value -> ^bb1686, ^bb1677
  ^bb1686:  // pred: ^bb1685
    %889 = pdl_interp.get_operand 1 of %858
    pdl_interp.are_equal %880, %889 : !pdl.value -> ^bb1687, ^bb1677
  ^bb1687:  // pred: ^bb1686
    pdl_interp.record_match @rewriters::@swap_sqr(%860, %880, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1677
  ^bb1688:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 2 -> ^bb1689, ^bb1
  ^bb1689:  // pred: ^bb1688
    pdl_interp.check_result_count of %2 is 1 -> ^bb1690, ^bb1
  ^bb1690:  // pred: ^bb1689
    %890 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %890 : !pdl.value -> ^bb1691, ^bb1
  ^bb1691:  // pred: ^bb1690
    pdl_interp.are_equal %890, %1 : !pdl.value -> ^bb1692, ^bb1
  ^bb1692:  // pred: ^bb1691
    %891 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %891 : !pdl.value -> ^bb1693, ^bb1
  ^bb1693:  // pred: ^bb1692
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb1694, ^bb1
  ^bb1694:  // pred: ^bb1693
    %892 = pdl_interp.get_value_type of %891 : !pdl.type
    pdl_interp.check_type %892 is f32 -> ^bb1695, ^bb1
  ^bb1695:  // pred: ^bb1694
    %893 = pdl_interp.get_value_type of %890 : !pdl.type
    pdl_interp.are_equal %892, %893 : !pdl.type -> ^bb1696, ^bb1
  ^bb1696:  // pred: ^bb1695
    %894 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %892, %894 : !pdl.type -> ^bb1697, ^bb1
  ^bb1697:  // pred: ^bb1696
    pdl_interp.check_operation_name of %858 is "math.powf" -> ^bb1698, ^bb1
  ^bb1698:  // pred: ^bb1697
    pdl_interp.check_operand_count of %858 is 2 -> ^bb1699, ^bb1
  ^bb1699:  // pred: ^bb1698
    pdl_interp.check_result_count of %858 is 1 -> ^bb1700, ^bb1
  ^bb1700:  // pred: ^bb1699
    %895 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %895 : !pdl.value -> ^bb1701, ^bb1
  ^bb1701:  // pred: ^bb1700
    pdl_interp.are_equal %895, %857 : !pdl.value -> ^bb1702, ^bb1
  ^bb1702:  // pred: ^bb1701
    %896 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %896 : !pdl.value -> ^bb1727, ^bb1703
  ^bb1703:  // 7 preds: ^bb1702, ^bb1729, ^bb1730, ^bb1731, ^bb1732, ^bb1733, ^bb1734
    %897 = pdl_interp.get_operand 1 of %2
    %898 = pdl_interp.get_defining_op of %897 : !pdl.value
    pdl_interp.is_not_null %898 : !pdl.operation -> ^bb1704, ^bb1
  ^bb1704:  // pred: ^bb1703
    pdl_interp.is_not_null %897 : !pdl.value -> ^bb1705, ^bb1
  ^bb1705:  // pred: ^bb1704
    %899 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %899 : !pdl.value -> ^bb1706, ^bb1
  ^bb1706:  // pred: ^bb1705
    %900 = pdl_interp.get_operand 1 of %858
    %901 = pdl_interp.get_defining_op of %900 : !pdl.value
    pdl_interp.is_not_null %901 : !pdl.operation -> ^bb1707, ^bb1
  ^bb1707:  // pred: ^bb1706
    pdl_interp.check_operation_name of %898 is "arith.constant" -> ^bb1708, ^bb1
  ^bb1708:  // pred: ^bb1707
    pdl_interp.check_operand_count of %898 is 0 -> ^bb1709, ^bb1
  ^bb1709:  // pred: ^bb1708
    pdl_interp.check_result_count of %898 is 1 -> ^bb1710, ^bb1
  ^bb1710:  // pred: ^bb1709
    %902 = pdl_interp.get_result 0 of %898
    pdl_interp.is_not_null %902 : !pdl.value -> ^bb1711, ^bb1
  ^bb1711:  // pred: ^bb1710
    pdl_interp.are_equal %902, %897 : !pdl.value -> ^bb1712, ^bb1
  ^bb1712:  // pred: ^bb1711
    pdl_interp.is_not_null %900 : !pdl.value -> ^bb1713, ^bb1
  ^bb1713:  // pred: ^bb1712
    %903 = pdl_interp.get_value_type of %895 : !pdl.type
    pdl_interp.are_equal %892, %903 : !pdl.type -> ^bb1714, ^bb1
  ^bb1714:  // pred: ^bb1713
    pdl_interp.check_operation_name of %901 is "arith.constant" -> ^bb1715, ^bb1
  ^bb1715:  // pred: ^bb1714
    pdl_interp.check_operand_count of %901 is 0 -> ^bb1716, ^bb1
  ^bb1716:  // pred: ^bb1715
    pdl_interp.check_result_count of %901 is 1 -> ^bb1717, ^bb1
  ^bb1717:  // pred: ^bb1716
    %904 = pdl_interp.get_result 0 of %901
    pdl_interp.is_not_null %904 : !pdl.value -> ^bb1718, ^bb1
  ^bb1718:  // pred: ^bb1717
    pdl_interp.are_equal %904, %900 : !pdl.value -> ^bb1719, ^bb1
  ^bb1719:  // pred: ^bb1718
    %905 = pdl_interp.get_attribute "value" of %898
    pdl_interp.is_not_null %905 : !pdl.attribute -> ^bb1720, ^bb1
  ^bb1720:  // pred: ^bb1719
    pdl_interp.check_attribute %905 is 3.000000e+00 : f32 -> ^bb1721, ^bb1
  ^bb1721:  // pred: ^bb1720
    %906 = pdl_interp.get_value_type of %899 : !pdl.type
    pdl_interp.are_equal %892, %906 : !pdl.type -> ^bb1722, ^bb1
  ^bb1722:  // pred: ^bb1721
    %907 = pdl_interp.get_value_type of %902 : !pdl.type
    pdl_interp.are_equal %907, %892 : !pdl.type -> ^bb1723, ^bb1
  ^bb1723:  // pred: ^bb1722
    %908 = pdl_interp.get_attribute "value" of %901
    pdl_interp.is_not_null %908 : !pdl.attribute -> ^bb1724, ^bb1
  ^bb1724:  // pred: ^bb1723
    pdl_interp.check_attribute %908 is 3.000000e+00 : f32 -> ^bb1725, ^bb1
  ^bb1725:  // pred: ^bb1724
    %909 = pdl_interp.get_value_type of %904 : !pdl.type
    pdl_interp.are_equal %909, %892 : !pdl.type -> ^bb1726, ^bb1
  ^bb1726:  // pred: ^bb1725
    pdl_interp.record_match @rewriters::@cube_prod_rev(%891, %899, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.constant", "math.powf"]), loc([%arg0, %2, %858, %898, %901]), root("arith.mulf") -> ^bb1
  ^bb1727:  // pred: ^bb1702
    %910 = pdl_interp.get_value_type of %895 : !pdl.type
    pdl_interp.are_equal %892, %910 : !pdl.type -> ^bb1740, ^bb1728
  ^bb1728:  // 5 preds: ^bb1727, ^bb1740, ^bb1741, ^bb1742, ^bb1743
    %911 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %911 : !pdl.value -> ^bb1735, ^bb1729
  ^bb1729:  // 6 preds: ^bb1728, ^bb1735, ^bb1736, ^bb1737, ^bb1738, ^bb1739
    %912 = pdl_interp.get_operand 1 of %858
    pdl_interp.is_not_null %912 : !pdl.value -> ^bb1730, ^bb1703
  ^bb1730:  // pred: ^bb1729
    %913 = pdl_interp.get_value_type of %895 : !pdl.type
    pdl_interp.are_equal %892, %913 : !pdl.type -> ^bb1731, ^bb1703
  ^bb1731:  // pred: ^bb1730
    %914 = pdl_interp.get_value_type of %896 : !pdl.type
    pdl_interp.are_equal %892, %914 : !pdl.type -> ^bb1732, ^bb1703
  ^bb1732:  // pred: ^bb1731
    %915 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %891, %915 : !pdl.value -> ^bb1733, ^bb1703
  ^bb1733:  // pred: ^bb1732
    %916 = pdl_interp.get_value_type of %912 : !pdl.type
    pdl_interp.are_equal %892, %916 : !pdl.type -> ^bb1734, ^bb1703
  ^bb1734:  // pred: ^bb1733
    pdl_interp.record_match @rewriters::@pow_prod_up(%896, %912, %891, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "math.powf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1703
  ^bb1735:  // pred: ^bb1728
    %917 = pdl_interp.get_value_type of %895 : !pdl.type
    pdl_interp.are_equal %892, %917 : !pdl.type -> ^bb1736, ^bb1729
  ^bb1736:  // pred: ^bb1735
    %918 = pdl_interp.get_value_type of %896 : !pdl.type
    pdl_interp.are_equal %892, %918 : !pdl.type -> ^bb1737, ^bb1729
  ^bb1737:  // pred: ^bb1736
    %919 = pdl_interp.get_value_type of %911 : !pdl.type
    pdl_interp.are_equal %892, %919 : !pdl.type -> ^bb1738, ^bb1729
  ^bb1738:  // pred: ^bb1737
    %920 = pdl_interp.get_operand 1 of %858
    pdl_interp.are_equal %896, %920 : !pdl.value -> ^bb1739, ^bb1729
  ^bb1739:  // pred: ^bb1738
    pdl_interp.record_match @rewriters::@pow_prod_down(%891, %911, %896, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "math.powf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1729
  ^bb1740:  // pred: ^bb1727
    %921 = pdl_interp.get_value_type of %896 : !pdl.type
    pdl_interp.are_equal %892, %921 : !pdl.type -> ^bb1741, ^bb1728
  ^bb1741:  // pred: ^bb1740
    %922 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %891, %922 : !pdl.value -> ^bb1742, ^bb1728
  ^bb1742:  // pred: ^bb1741
    %923 = pdl_interp.get_operand 1 of %858
    pdl_interp.are_equal %896, %923 : !pdl.value -> ^bb1743, ^bb1728
  ^bb1743:  // pred: ^bb1742
    pdl_interp.record_match @rewriters::@pow_sqr(%896, %891, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.powf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1728
  ^bb1744:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 2 -> ^bb1745, ^bb1
  ^bb1745:  // pred: ^bb1744
    pdl_interp.check_result_count of %2 is 1 -> ^bb1746, ^bb1
  ^bb1746:  // pred: ^bb1745
    %924 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %924 : !pdl.value -> ^bb1747, ^bb1
  ^bb1747:  // pred: ^bb1746
    pdl_interp.are_equal %924, %1 : !pdl.value -> ^bb1748, ^bb1
  ^bb1748:  // pred: ^bb1747
    %925 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %925 : !pdl.value -> ^bb1749, ^bb1
  ^bb1749:  // pred: ^bb1748
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb1750, ^bb1
  ^bb1750:  // pred: ^bb1749
    %926 = pdl_interp.get_value_type of %925 : !pdl.type
    pdl_interp.check_type %926 is f32 -> ^bb1850, ^bb1751
  ^bb1751:  // 14 preds: ^bb1750, ^bb1850, ^bb1851, ^bb1852, ^bb1853, ^bb1854, ^bb1855, ^bb1856, ^bb1858, ^bb1859, ^bb1860, ^bb1861, ^bb1862, ^bb1863
    pdl_interp.switch_operation_name of %858 to ["arith.subf", "arith.addf"](^bb1752, ^bb1801) -> ^bb1
  ^bb1752:  // pred: ^bb1751
    pdl_interp.check_operand_count of %858 is 2 -> ^bb1753, ^bb1
  ^bb1753:  // pred: ^bb1752
    pdl_interp.check_result_count of %858 is 1 -> ^bb1754, ^bb1
  ^bb1754:  // pred: ^bb1753
    %927 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %927 : !pdl.value -> ^bb1755, ^bb1
  ^bb1755:  // pred: ^bb1754
    pdl_interp.are_equal %927, %857 : !pdl.value -> ^bb1756, ^bb1
  ^bb1756:  // pred: ^bb1755
    %928 = pdl_interp.get_operand 1 of %2
    %929 = pdl_interp.get_defining_op of %928 : !pdl.value
    pdl_interp.is_not_null %929 : !pdl.operation -> ^bb1757, ^bb1
  ^bb1757:  // pred: ^bb1756
    %930 = pdl_interp.get_defining_op of %925 : !pdl.value
    pdl_interp.is_not_null %930 : !pdl.operation -> ^bb1758, ^bb1
  ^bb1758:  // pred: ^bb1757
    pdl_interp.is_not_null %928 : !pdl.value -> ^bb1759, ^bb1
  ^bb1759:  // pred: ^bb1758
    pdl_interp.check_operation_name of %929 is "arith.addf" -> ^bb1760, ^bb1
  ^bb1760:  // pred: ^bb1759
    pdl_interp.check_operand_count of %929 is 2 -> ^bb1761, ^bb1
  ^bb1761:  // pred: ^bb1760
    pdl_interp.check_result_count of %929 is 1 -> ^bb1762, ^bb1
  ^bb1762:  // pred: ^bb1761
    %931 = pdl_interp.get_result 0 of %929
    pdl_interp.is_not_null %931 : !pdl.value -> ^bb1763, ^bb1
  ^bb1763:  // pred: ^bb1762
    pdl_interp.are_equal %931, %928 : !pdl.value -> ^bb1764, ^bb1
  ^bb1764:  // pred: ^bb1763
    pdl_interp.check_operation_name of %930 is "arith.mulf" -> ^bb1765, ^bb1
  ^bb1765:  // pred: ^bb1764
    pdl_interp.check_operand_count of %930 is 2 -> ^bb1766, ^bb1
  ^bb1766:  // pred: ^bb1765
    pdl_interp.check_result_count of %930 is 1 -> ^bb1767, ^bb1
  ^bb1767:  // pred: ^bb1766
    %932 = pdl_interp.get_result 0 of %930
    pdl_interp.is_not_null %932 : !pdl.value -> ^bb1768, ^bb1
  ^bb1768:  // pred: ^bb1767
    pdl_interp.are_equal %932, %925 : !pdl.value -> ^bb1769, ^bb1
  ^bb1769:  // pred: ^bb1768
    %933 = pdl_interp.get_operand 0 of %930
    pdl_interp.is_not_null %933 : !pdl.value -> ^bb1770, ^bb1
  ^bb1770:  // pred: ^bb1769
    %934 = pdl_interp.get_value_type of %933 : !pdl.type
    pdl_interp.check_type %934 is f32 -> ^bb1771, ^bb1
  ^bb1771:  // pred: ^bb1770
    %935 = pdl_interp.get_value_type of %932 : !pdl.type
    pdl_interp.are_equal %934, %935 : !pdl.type -> ^bb1772, ^bb1
  ^bb1772:  // pred: ^bb1771
    %936 = pdl_interp.get_value_type of %924 : !pdl.type
    pdl_interp.are_equal %934, %936 : !pdl.type -> ^bb1773, ^bb1
  ^bb1773:  // pred: ^bb1772
    %937 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %934, %937 : !pdl.type -> ^bb1774, ^bb1
  ^bb1774:  // pred: ^bb1773
    %938 = pdl_interp.get_operand 0 of %929
    pdl_interp.is_not_null %938 : !pdl.value -> ^bb1775, ^bb1
  ^bb1775:  // pred: ^bb1774
    %939 = pdl_interp.get_defining_op of %938 : !pdl.value
    pdl_interp.is_not_null %939 : !pdl.operation -> ^bb1776, ^bb1
  ^bb1776:  // pred: ^bb1775
    %940 = pdl_interp.get_value_type of %931 : !pdl.type
    pdl_interp.are_equal %934, %940 : !pdl.type -> ^bb1777, ^bb1
  ^bb1777:  // pred: ^bb1776
    %941 = pdl_interp.get_value_type of %927 : !pdl.type
    pdl_interp.are_equal %934, %941 : !pdl.type -> ^bb1778, ^bb1
  ^bb1778:  // pred: ^bb1777
    %942 = pdl_interp.get_operand 1 of %929
    %943 = pdl_interp.get_defining_op of %942 : !pdl.value
    pdl_interp.is_not_null %943 : !pdl.operation -> ^bb1779, ^bb1
  ^bb1779:  // pred: ^bb1778
    pdl_interp.check_operation_name of %939 is "arith.mulf" -> ^bb1780, ^bb1
  ^bb1780:  // pred: ^bb1779
    pdl_interp.check_operand_count of %939 is 2 -> ^bb1781, ^bb1
  ^bb1781:  // pred: ^bb1780
    pdl_interp.check_result_count of %939 is 1 -> ^bb1782, ^bb1
  ^bb1782:  // pred: ^bb1781
    %944 = pdl_interp.get_result 0 of %939
    pdl_interp.is_not_null %944 : !pdl.value -> ^bb1783, ^bb1
  ^bb1783:  // pred: ^bb1782
    pdl_interp.are_equal %944, %938 : !pdl.value -> ^bb1784, ^bb1
  ^bb1784:  // pred: ^bb1783
    pdl_interp.is_not_null %942 : !pdl.value -> ^bb1785, ^bb1
  ^bb1785:  // pred: ^bb1784
    pdl_interp.check_operation_name of %943 is "arith.mulf" -> ^bb1786, ^bb1
  ^bb1786:  // pred: ^bb1785
    pdl_interp.check_operand_count of %943 is 2 -> ^bb1787, ^bb1
  ^bb1787:  // pred: ^bb1786
    pdl_interp.check_result_count of %943 is 1 -> ^bb1788, ^bb1
  ^bb1788:  // pred: ^bb1787
    %945 = pdl_interp.get_result 0 of %943
    pdl_interp.is_not_null %945 : !pdl.value -> ^bb1789, ^bb1
  ^bb1789:  // pred: ^bb1788
    pdl_interp.are_equal %945, %942 : !pdl.value -> ^bb1790, ^bb1
  ^bb1790:  // pred: ^bb1789
    %946 = pdl_interp.get_value_type of %944 : !pdl.type
    pdl_interp.are_equal %946, %934 : !pdl.type -> ^bb1791, ^bb1
  ^bb1791:  // pred: ^bb1790
    %947 = pdl_interp.get_operand 0 of %939
    pdl_interp.is_not_null %947 : !pdl.value -> ^bb1792, ^bb1
  ^bb1792:  // pred: ^bb1791
    %948 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %933, %948 : !pdl.value -> ^bb1793, ^bb1
  ^bb1793:  // pred: ^bb1792
    %949 = pdl_interp.get_value_type of %945 : !pdl.type
    pdl_interp.are_equal %949, %934 : !pdl.type -> ^bb1794, ^bb1
  ^bb1794:  // pred: ^bb1793
    %950 = pdl_interp.get_operand 0 of %943
    pdl_interp.are_equal %950, %933 : !pdl.value -> ^bb1795, ^bb1
  ^bb1795:  // pred: ^bb1794
    %951 = pdl_interp.get_operand 1 of %930
    pdl_interp.are_equal %933, %951 : !pdl.value -> ^bb1796, ^bb1
  ^bb1796:  // pred: ^bb1795
    %952 = pdl_interp.get_operand 1 of %939
    pdl_interp.are_equal %947, %952 : !pdl.value -> ^bb1797, ^bb1
  ^bb1797:  // pred: ^bb1796
    %953 = pdl_interp.get_operand 1 of %943
    pdl_interp.are_equal %947, %953 : !pdl.value -> ^bb1798, ^bb1
  ^bb1798:  // pred: ^bb1797
    %954 = pdl_interp.get_operand 1 of %858
    pdl_interp.are_equal %947, %954 : !pdl.value -> ^bb1799, ^bb1
  ^bb1799:  // pred: ^bb1798
    %955 = pdl_interp.get_value_type of %947 : !pdl.type
    pdl_interp.are_equal %955, %934 : !pdl.type -> ^bb1800, ^bb1
  ^bb1800:  // pred: ^bb1799
    pdl_interp.record_match @rewriters::@difference_cubes_rev(%933, %947, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.constant", "math.powf", "arith.subf"]), loc([%arg0, %2, %858, %929, %930, %939, %943]), root("arith.mulf") -> ^bb1
  ^bb1801:  // pred: ^bb1751
    pdl_interp.check_operand_count of %858 is 2 -> ^bb1802, ^bb1
  ^bb1802:  // pred: ^bb1801
    pdl_interp.check_result_count of %858 is 1 -> ^bb1803, ^bb1
  ^bb1803:  // pred: ^bb1802
    %956 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %956 : !pdl.value -> ^bb1804, ^bb1
  ^bb1804:  // pred: ^bb1803
    pdl_interp.are_equal %956, %857 : !pdl.value -> ^bb1805, ^bb1
  ^bb1805:  // pred: ^bb1804
    %957 = pdl_interp.get_operand 1 of %2
    %958 = pdl_interp.get_defining_op of %957 : !pdl.value
    pdl_interp.is_not_null %958 : !pdl.operation -> ^bb1806, ^bb1
  ^bb1806:  // pred: ^bb1805
    %959 = pdl_interp.get_defining_op of %925 : !pdl.value
    pdl_interp.is_not_null %959 : !pdl.operation -> ^bb1807, ^bb1
  ^bb1807:  // pred: ^bb1806
    pdl_interp.is_not_null %957 : !pdl.value -> ^bb1808, ^bb1
  ^bb1808:  // pred: ^bb1807
    pdl_interp.check_operation_name of %958 is "arith.subf" -> ^bb1809, ^bb1
  ^bb1809:  // pred: ^bb1808
    pdl_interp.check_operand_count of %958 is 2 -> ^bb1810, ^bb1
  ^bb1810:  // pred: ^bb1809
    pdl_interp.check_result_count of %958 is 1 -> ^bb1811, ^bb1
  ^bb1811:  // pred: ^bb1810
    %960 = pdl_interp.get_result 0 of %958
    pdl_interp.is_not_null %960 : !pdl.value -> ^bb1812, ^bb1
  ^bb1812:  // pred: ^bb1811
    pdl_interp.are_equal %960, %957 : !pdl.value -> ^bb1813, ^bb1
  ^bb1813:  // pred: ^bb1812
    pdl_interp.check_operation_name of %959 is "arith.mulf" -> ^bb1814, ^bb1
  ^bb1814:  // pred: ^bb1813
    pdl_interp.check_operand_count of %959 is 2 -> ^bb1815, ^bb1
  ^bb1815:  // pred: ^bb1814
    pdl_interp.check_result_count of %959 is 1 -> ^bb1816, ^bb1
  ^bb1816:  // pred: ^bb1815
    %961 = pdl_interp.get_result 0 of %959
    pdl_interp.is_not_null %961 : !pdl.value -> ^bb1817, ^bb1
  ^bb1817:  // pred: ^bb1816
    pdl_interp.are_equal %961, %925 : !pdl.value -> ^bb1818, ^bb1
  ^bb1818:  // pred: ^bb1817
    %962 = pdl_interp.get_operand 0 of %959
    pdl_interp.is_not_null %962 : !pdl.value -> ^bb1819, ^bb1
  ^bb1819:  // pred: ^bb1818
    %963 = pdl_interp.get_value_type of %962 : !pdl.type
    pdl_interp.check_type %963 is f32 -> ^bb1820, ^bb1
  ^bb1820:  // pred: ^bb1819
    %964 = pdl_interp.get_value_type of %961 : !pdl.type
    pdl_interp.are_equal %963, %964 : !pdl.type -> ^bb1821, ^bb1
  ^bb1821:  // pred: ^bb1820
    %965 = pdl_interp.get_value_type of %924 : !pdl.type
    pdl_interp.are_equal %963, %965 : !pdl.type -> ^bb1822, ^bb1
  ^bb1822:  // pred: ^bb1821
    %966 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %963, %966 : !pdl.type -> ^bb1823, ^bb1
  ^bb1823:  // pred: ^bb1822
    %967 = pdl_interp.get_operand 0 of %958
    pdl_interp.is_not_null %967 : !pdl.value -> ^bb1824, ^bb1
  ^bb1824:  // pred: ^bb1823
    %968 = pdl_interp.get_defining_op of %967 : !pdl.value
    pdl_interp.is_not_null %968 : !pdl.operation -> ^bb1825, ^bb1
  ^bb1825:  // pred: ^bb1824
    %969 = pdl_interp.get_value_type of %960 : !pdl.type
    pdl_interp.are_equal %963, %969 : !pdl.type -> ^bb1826, ^bb1
  ^bb1826:  // pred: ^bb1825
    %970 = pdl_interp.get_value_type of %956 : !pdl.type
    pdl_interp.are_equal %963, %970 : !pdl.type -> ^bb1827, ^bb1
  ^bb1827:  // pred: ^bb1826
    %971 = pdl_interp.get_operand 1 of %958
    %972 = pdl_interp.get_defining_op of %971 : !pdl.value
    pdl_interp.is_not_null %972 : !pdl.operation -> ^bb1828, ^bb1
  ^bb1828:  // pred: ^bb1827
    pdl_interp.check_operation_name of %968 is "arith.mulf" -> ^bb1829, ^bb1
  ^bb1829:  // pred: ^bb1828
    pdl_interp.check_operand_count of %968 is 2 -> ^bb1830, ^bb1
  ^bb1830:  // pred: ^bb1829
    pdl_interp.check_result_count of %968 is 1 -> ^bb1831, ^bb1
  ^bb1831:  // pred: ^bb1830
    %973 = pdl_interp.get_result 0 of %968
    pdl_interp.is_not_null %973 : !pdl.value -> ^bb1832, ^bb1
  ^bb1832:  // pred: ^bb1831
    pdl_interp.are_equal %973, %967 : !pdl.value -> ^bb1833, ^bb1
  ^bb1833:  // pred: ^bb1832
    pdl_interp.is_not_null %971 : !pdl.value -> ^bb1834, ^bb1
  ^bb1834:  // pred: ^bb1833
    pdl_interp.check_operation_name of %972 is "arith.mulf" -> ^bb1835, ^bb1
  ^bb1835:  // pred: ^bb1834
    pdl_interp.check_operand_count of %972 is 2 -> ^bb1836, ^bb1
  ^bb1836:  // pred: ^bb1835
    pdl_interp.check_result_count of %972 is 1 -> ^bb1837, ^bb1
  ^bb1837:  // pred: ^bb1836
    %974 = pdl_interp.get_result 0 of %972
    pdl_interp.is_not_null %974 : !pdl.value -> ^bb1838, ^bb1
  ^bb1838:  // pred: ^bb1837
    pdl_interp.are_equal %974, %971 : !pdl.value -> ^bb1839, ^bb1
  ^bb1839:  // pred: ^bb1838
    %975 = pdl_interp.get_value_type of %973 : !pdl.type
    pdl_interp.are_equal %975, %963 : !pdl.type -> ^bb1840, ^bb1
  ^bb1840:  // pred: ^bb1839
    %976 = pdl_interp.get_operand 0 of %968
    pdl_interp.is_not_null %976 : !pdl.value -> ^bb1841, ^bb1
  ^bb1841:  // pred: ^bb1840
    %977 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %962, %977 : !pdl.value -> ^bb1842, ^bb1
  ^bb1842:  // pred: ^bb1841
    %978 = pdl_interp.get_value_type of %974 : !pdl.type
    pdl_interp.are_equal %978, %963 : !pdl.type -> ^bb1843, ^bb1
  ^bb1843:  // pred: ^bb1842
    %979 = pdl_interp.get_operand 0 of %972
    pdl_interp.are_equal %979, %962 : !pdl.value -> ^bb1844, ^bb1
  ^bb1844:  // pred: ^bb1843
    %980 = pdl_interp.get_operand 1 of %959
    pdl_interp.are_equal %962, %980 : !pdl.value -> ^bb1845, ^bb1
  ^bb1845:  // pred: ^bb1844
    %981 = pdl_interp.get_operand 1 of %968
    pdl_interp.are_equal %976, %981 : !pdl.value -> ^bb1846, ^bb1
  ^bb1846:  // pred: ^bb1845
    %982 = pdl_interp.get_operand 1 of %972
    pdl_interp.are_equal %976, %982 : !pdl.value -> ^bb1847, ^bb1
  ^bb1847:  // pred: ^bb1846
    %983 = pdl_interp.get_operand 1 of %858
    pdl_interp.are_equal %976, %983 : !pdl.value -> ^bb1848, ^bb1
  ^bb1848:  // pred: ^bb1847
    %984 = pdl_interp.get_value_type of %976 : !pdl.type
    pdl_interp.are_equal %984, %963 : !pdl.type -> ^bb1849, ^bb1
  ^bb1849:  // pred: ^bb1848
    pdl_interp.record_match @rewriters::@sum_cubes_rev(%962, %976, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.constant", "math.powf", "arith.addf"]), loc([%arg0, %2, %858, %958, %959, %968, %972]), root("arith.mulf") -> ^bb1
  ^bb1850:  // pred: ^bb1750
    %985 = pdl_interp.get_value_type of %924 : !pdl.type
    pdl_interp.are_equal %926, %985 : !pdl.type -> ^bb1851, ^bb1751
  ^bb1851:  // pred: ^bb1850
    %986 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %926, %986 : !pdl.type -> ^bb1852, ^bb1751
  ^bb1852:  // pred: ^bb1851
    pdl_interp.check_operation_name of %858 is "arith.subf" -> ^bb1853, ^bb1751
  ^bb1853:  // pred: ^bb1852
    pdl_interp.check_operand_count of %858 is 2 -> ^bb1854, ^bb1751
  ^bb1854:  // pred: ^bb1853
    pdl_interp.check_result_count of %858 is 1 -> ^bb1855, ^bb1751
  ^bb1855:  // pred: ^bb1854
    %987 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %987 : !pdl.value -> ^bb1856, ^bb1751
  ^bb1856:  // pred: ^bb1855
    pdl_interp.are_equal %987, %857 : !pdl.value -> ^bb1857, ^bb1751
  ^bb1857:  // pred: ^bb1856
    %988 = pdl_interp.get_operand 1 of %2
    %989 = pdl_interp.get_defining_op of %988 : !pdl.value
    pdl_interp.is_not_null %989 : !pdl.operation -> ^bb1864, ^bb1858
  ^bb1858:  // 23 preds: ^bb1857, ^bb1864, ^bb1865, ^bb1866, ^bb1867, ^bb1868, ^bb1869, ^bb1870, ^bb1871, ^bb1872, ^bb1873, ^bb1874, ^bb1875, ^bb1876, ^bb1877, ^bb1878, ^bb1879, ^bb1880, ^bb1881, ^bb1882, ^bb1883, ^bb1884, ^bb1886
    %990 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %990 : !pdl.value -> ^bb1859, ^bb1751
  ^bb1859:  // pred: ^bb1858
    %991 = pdl_interp.get_value_type of %987 : !pdl.type
    pdl_interp.are_equal %926, %991 : !pdl.type -> ^bb1860, ^bb1751
  ^bb1860:  // pred: ^bb1859
    %992 = pdl_interp.get_value_type of %990 : !pdl.type
    pdl_interp.are_equal %926, %992 : !pdl.type -> ^bb1861, ^bb1751
  ^bb1861:  // pred: ^bb1860
    %993 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %925, %993 : !pdl.value -> ^bb1862, ^bb1751
  ^bb1862:  // pred: ^bb1861
    %994 = pdl_interp.get_operand 1 of %858
    pdl_interp.are_equal %990, %994 : !pdl.value -> ^bb1863, ^bb1751
  ^bb1863:  // pred: ^bb1862
    pdl_interp.record_match @rewriters::@difference_of_squares_rev(%925, %990, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.subf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1751
  ^bb1864:  // pred: ^bb1857
    pdl_interp.is_not_null %988 : !pdl.value -> ^bb1865, ^bb1858
  ^bb1865:  // pred: ^bb1864
    %995 = pdl_interp.get_operand 1 of %858
    %996 = pdl_interp.get_defining_op of %995 : !pdl.value
    pdl_interp.is_not_null %996 : !pdl.operation -> ^bb1866, ^bb1858
  ^bb1866:  // pred: ^bb1865
    pdl_interp.check_operation_name of %989 is "arith.constant" -> ^bb1867, ^bb1858
  ^bb1867:  // pred: ^bb1866
    pdl_interp.check_operand_count of %989 is 0 -> ^bb1868, ^bb1858
  ^bb1868:  // pred: ^bb1867
    pdl_interp.check_result_count of %989 is 1 -> ^bb1869, ^bb1858
  ^bb1869:  // pred: ^bb1868
    %997 = pdl_interp.get_result 0 of %989
    pdl_interp.is_not_null %997 : !pdl.value -> ^bb1870, ^bb1858
  ^bb1870:  // pred: ^bb1869
    pdl_interp.are_equal %997, %988 : !pdl.value -> ^bb1871, ^bb1858
  ^bb1871:  // pred: ^bb1870
    pdl_interp.is_not_null %995 : !pdl.value -> ^bb1872, ^bb1858
  ^bb1872:  // pred: ^bb1871
    %998 = pdl_interp.get_value_type of %987 : !pdl.type
    pdl_interp.are_equal %926, %998 : !pdl.type -> ^bb1873, ^bb1858
  ^bb1873:  // pred: ^bb1872
    pdl_interp.check_operation_name of %996 is "arith.constant" -> ^bb1874, ^bb1858
  ^bb1874:  // pred: ^bb1873
    pdl_interp.check_operand_count of %996 is 0 -> ^bb1875, ^bb1858
  ^bb1875:  // pred: ^bb1874
    pdl_interp.check_result_count of %996 is 1 -> ^bb1876, ^bb1858
  ^bb1876:  // pred: ^bb1875
    %999 = pdl_interp.get_result 0 of %996
    pdl_interp.is_not_null %999 : !pdl.value -> ^bb1877, ^bb1858
  ^bb1877:  // pred: ^bb1876
    pdl_interp.are_equal %999, %995 : !pdl.value -> ^bb1878, ^bb1858
  ^bb1878:  // pred: ^bb1877
    %1000 = pdl_interp.get_attribute "value" of %989
    pdl_interp.is_not_null %1000 : !pdl.attribute -> ^bb1879, ^bb1858
  ^bb1879:  // pred: ^bb1878
    pdl_interp.check_attribute %1000 is 1.000000e+00 : f32 -> ^bb1880, ^bb1858
  ^bb1880:  // pred: ^bb1879
    %1001 = pdl_interp.get_value_type of %997 : !pdl.type
    pdl_interp.are_equal %1001, %926 : !pdl.type -> ^bb1881, ^bb1858
  ^bb1881:  // pred: ^bb1880
    %1002 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %925, %1002 : !pdl.value -> ^bb1882, ^bb1858
  ^bb1882:  // pred: ^bb1881
    %1003 = pdl_interp.get_attribute "value" of %996
    pdl_interp.is_not_null %1003 : !pdl.attribute -> ^bb1883, ^bb1858
  ^bb1883:  // pred: ^bb1882
    pdl_interp.check_attribute %1003 is 1.000000e+00 : f32 -> ^bb1884, ^bb1858
  ^bb1884:  // pred: ^bb1883
    %1004 = pdl_interp.get_value_type of %999 : !pdl.type
    pdl_interp.are_equal %1004, %926 : !pdl.type -> ^bb1885, ^bb1858
  ^bb1885:  // pred: ^bb1884
    pdl_interp.record_match @rewriters::@difference_of_sqrsub_1_rev(%925, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.constant", "arith.addf"]), loc([%arg0, %2, %858, %989, %996]), root("arith.mulf") -> ^bb1886
  ^bb1886:  // pred: ^bb1885
    pdl_interp.record_match @rewriters::@difference_of_sqr_1_rev(%925, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.constant", "arith.subf"]), loc([%arg0, %2, %858, %989, %996]), root("arith.mulf") -> ^bb1858
  ^bb1887:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 2 -> ^bb1888, ^bb1
  ^bb1888:  // pred: ^bb1887
    pdl_interp.check_result_count of %2 is 1 -> ^bb1889, ^bb1
  ^bb1889:  // pred: ^bb1888
    %1005 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1005 : !pdl.value -> ^bb1890, ^bb1
  ^bb1890:  // pred: ^bb1889
    pdl_interp.are_equal %1005, %1 : !pdl.value -> ^bb1891, ^bb1
  ^bb1891:  // pred: ^bb1890
    %1006 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1006 : !pdl.value -> ^bb1892, ^bb1
  ^bb1892:  // pred: ^bb1891
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb1893, ^bb1
  ^bb1893:  // pred: ^bb1892
    %1007 = pdl_interp.get_value_type of %1006 : !pdl.type
    pdl_interp.check_type %1007 is f32 -> ^bb1894, ^bb1
  ^bb1894:  // pred: ^bb1893
    %1008 = pdl_interp.get_value_type of %1005 : !pdl.type
    pdl_interp.are_equal %1007, %1008 : !pdl.type -> ^bb1895, ^bb1
  ^bb1895:  // pred: ^bb1894
    %1009 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1007, %1009 : !pdl.type -> ^bb1896, ^bb1
  ^bb1896:  // pred: ^bb1895
    pdl_interp.check_operation_name of %858 is "arith.divf" -> ^bb1897, ^bb1
  ^bb1897:  // pred: ^bb1896
    pdl_interp.check_operand_count of %858 is 2 -> ^bb1898, ^bb1
  ^bb1898:  // pred: ^bb1897
    pdl_interp.check_result_count of %858 is 1 -> ^bb1899, ^bb1
  ^bb1899:  // pred: ^bb1898
    %1010 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1010 : !pdl.value -> ^bb1900, ^bb1
  ^bb1900:  // pred: ^bb1899
    pdl_interp.are_equal %1010, %857 : !pdl.value -> ^bb1901, ^bb1
  ^bb1901:  // pred: ^bb1900
    %1011 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %1011 : !pdl.value -> ^bb1902, ^bb1
  ^bb1902:  // pred: ^bb1901
    %1012 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1012 : !pdl.value -> ^bb1903, ^bb1
  ^bb1903:  // pred: ^bb1902
    %1013 = pdl_interp.get_operand 1 of %858
    pdl_interp.is_not_null %1013 : !pdl.value -> ^bb1904, ^bb1
  ^bb1904:  // pred: ^bb1903
    %1014 = pdl_interp.get_value_type of %1010 : !pdl.type
    pdl_interp.are_equal %1007, %1014 : !pdl.type -> ^bb1905, ^bb1
  ^bb1905:  // pred: ^bb1904
    %1015 = pdl_interp.get_value_type of %1011 : !pdl.type
    pdl_interp.are_equal %1007, %1015 : !pdl.type -> ^bb1906, ^bb1
  ^bb1906:  // pred: ^bb1905
    %1016 = pdl_interp.get_value_type of %1012 : !pdl.type
    pdl_interp.are_equal %1007, %1016 : !pdl.type -> ^bb1907, ^bb1
  ^bb1907:  // pred: ^bb1906
    %1017 = pdl_interp.get_value_type of %1013 : !pdl.type
    pdl_interp.are_equal %1007, %1017 : !pdl.type -> ^bb1908, ^bb1
  ^bb1908:  // pred: ^bb1907
    pdl_interp.record_match @rewriters::@frac_times(%1006, %1012, %1011, %1013, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.divf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb1909:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1910, ^bb1
  ^bb1910:  // pred: ^bb1909
    pdl_interp.check_result_count of %2 is 1 -> ^bb1911, ^bb1
  ^bb1911:  // pred: ^bb1910
    %1018 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1018 : !pdl.value -> ^bb1912, ^bb1
  ^bb1912:  // pred: ^bb1911
    pdl_interp.are_equal %1018, %1 : !pdl.value -> ^bb1913, ^bb1
  ^bb1913:  // pred: ^bb1912
    %1019 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1019 : !pdl.value -> ^bb1914, ^bb1
  ^bb1914:  // pred: ^bb1913
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb1915, ^bb1
  ^bb1915:  // pred: ^bb1914
    %1020 = pdl_interp.get_value_type of %1019 : !pdl.type
    pdl_interp.check_type %1020 is f32 -> ^bb1916, ^bb1
  ^bb1916:  // pred: ^bb1915
    %1021 = pdl_interp.get_value_type of %1018 : !pdl.type
    pdl_interp.are_equal %1020, %1021 : !pdl.type -> ^bb1917, ^bb1
  ^bb1917:  // pred: ^bb1916
    %1022 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1020, %1022 : !pdl.type -> ^bb1918, ^bb1
  ^bb1918:  // pred: ^bb1917
    pdl_interp.check_operation_name of %858 is "math.sqrt" -> ^bb1919, ^bb1
  ^bb1919:  // pred: ^bb1918
    pdl_interp.check_operand_count of %858 is 1 -> ^bb1920, ^bb1
  ^bb1920:  // pred: ^bb1919
    pdl_interp.check_result_count of %858 is 1 -> ^bb1921, ^bb1
  ^bb1921:  // pred: ^bb1920
    %1023 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1023 : !pdl.value -> ^bb1922, ^bb1
  ^bb1922:  // pred: ^bb1921
    pdl_interp.are_equal %1023, %857 : !pdl.value -> ^bb1923, ^bb1
  ^bb1923:  // pred: ^bb1922
    %1024 = pdl_interp.get_value_type of %1023 : !pdl.type
    pdl_interp.are_equal %1020, %1024 : !pdl.type -> ^bb1928, ^bb1924
  ^bb1924:  // 3 preds: ^bb1923, ^bb1928, ^bb1929
    %1025 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1025 : !pdl.value -> ^bb1925, ^bb1
  ^bb1925:  // pred: ^bb1924
    %1026 = pdl_interp.get_value_type of %1023 : !pdl.type
    pdl_interp.are_equal %1020, %1026 : !pdl.type -> ^bb1926, ^bb1
  ^bb1926:  // pred: ^bb1925
    %1027 = pdl_interp.get_value_type of %1025 : !pdl.type
    pdl_interp.are_equal %1020, %1027 : !pdl.type -> ^bb1927, ^bb1
  ^bb1927:  // pred: ^bb1926
    pdl_interp.record_match @rewriters::@sqrt_unprod(%1019, %1025, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "math.sqrt"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb1928:  // pred: ^bb1923
    %1028 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %1019, %1028 : !pdl.value -> ^bb1929, ^bb1924
  ^bb1929:  // pred: ^bb1928
    pdl_interp.record_match @rewriters::@rem_square_sqrt(%1019, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1924
  ^bb1930:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1931, ^bb1
  ^bb1931:  // pred: ^bb1930
    pdl_interp.check_result_count of %2 is 1 -> ^bb1932, ^bb1
  ^bb1932:  // pred: ^bb1931
    %1029 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1029 : !pdl.value -> ^bb1933, ^bb1
  ^bb1933:  // pred: ^bb1932
    pdl_interp.are_equal %1029, %1 : !pdl.value -> ^bb1934, ^bb1
  ^bb1934:  // pred: ^bb1933
    %1030 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1030 : !pdl.value -> ^bb1935, ^bb1
  ^bb1935:  // pred: ^bb1934
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb1936, ^bb1
  ^bb1936:  // pred: ^bb1935
    %1031 = pdl_interp.get_value_type of %1030 : !pdl.type
    pdl_interp.check_type %1031 is f32 -> ^bb1937, ^bb1
  ^bb1937:  // pred: ^bb1936
    %1032 = pdl_interp.get_value_type of %1029 : !pdl.type
    pdl_interp.are_equal %1031, %1032 : !pdl.type -> ^bb1938, ^bb1
  ^bb1938:  // pred: ^bb1937
    %1033 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1031, %1033 : !pdl.type -> ^bb1939, ^bb1
  ^bb1939:  // pred: ^bb1938
    pdl_interp.check_operation_name of %858 is "arith.negf" -> ^bb1940, ^bb1
  ^bb1940:  // pred: ^bb1939
    pdl_interp.check_operand_count of %858 is 1 -> ^bb1941, ^bb1
  ^bb1941:  // pred: ^bb1940
    pdl_interp.check_result_count of %858 is 1 -> ^bb1942, ^bb1
  ^bb1942:  // pred: ^bb1941
    %1034 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1034 : !pdl.value -> ^bb1943, ^bb1
  ^bb1943:  // pred: ^bb1942
    pdl_interp.are_equal %1034, %857 : !pdl.value -> ^bb1944, ^bb1
  ^bb1944:  // pred: ^bb1943
    %1035 = pdl_interp.get_value_type of %1034 : !pdl.type
    pdl_interp.are_equal %1031, %1035 : !pdl.type -> ^bb1945, ^bb1
  ^bb1945:  // pred: ^bb1944
    %1036 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %1030, %1036 : !pdl.value -> ^bb1946, ^bb1
  ^bb1946:  // pred: ^bb1945
    pdl_interp.record_match @rewriters::@sqr_neg(%1030, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb1947:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1948, ^bb1
  ^bb1948:  // pred: ^bb1947
    pdl_interp.check_result_count of %2 is 1 -> ^bb1949, ^bb1
  ^bb1949:  // pred: ^bb1948
    %1037 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1037 : !pdl.value -> ^bb1950, ^bb1
  ^bb1950:  // pred: ^bb1949
    pdl_interp.are_equal %1037, %1 : !pdl.value -> ^bb1951, ^bb1
  ^bb1951:  // pred: ^bb1950
    %1038 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1038 : !pdl.value -> ^bb1952, ^bb1
  ^bb1952:  // pred: ^bb1951
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb1953, ^bb1
  ^bb1953:  // pred: ^bb1952
    %1039 = pdl_interp.get_value_type of %1038 : !pdl.type
    pdl_interp.check_type %1039 is f32 -> ^bb1954, ^bb1
  ^bb1954:  // pred: ^bb1953
    %1040 = pdl_interp.get_value_type of %1037 : !pdl.type
    pdl_interp.are_equal %1039, %1040 : !pdl.type -> ^bb1955, ^bb1
  ^bb1955:  // pred: ^bb1954
    %1041 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1039, %1041 : !pdl.type -> ^bb1956, ^bb1
  ^bb1956:  // pred: ^bb1955
    pdl_interp.check_operation_name of %858 is "math.absf" -> ^bb1957, ^bb1
  ^bb1957:  // pred: ^bb1956
    pdl_interp.check_operand_count of %858 is 1 -> ^bb1958, ^bb1
  ^bb1958:  // pred: ^bb1957
    pdl_interp.check_result_count of %858 is 1 -> ^bb1959, ^bb1
  ^bb1959:  // pred: ^bb1958
    %1042 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1042 : !pdl.value -> ^bb1960, ^bb1
  ^bb1960:  // pred: ^bb1959
    pdl_interp.are_equal %1042, %857 : !pdl.value -> ^bb1961, ^bb1
  ^bb1961:  // pred: ^bb1960
    %1043 = pdl_interp.get_value_type of %1042 : !pdl.type
    pdl_interp.are_equal %1039, %1043 : !pdl.type -> ^bb1966, ^bb1962
  ^bb1962:  // 3 preds: ^bb1961, ^bb1966, ^bb1967
    %1044 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1044 : !pdl.value -> ^bb1963, ^bb1
  ^bb1963:  // pred: ^bb1962
    %1045 = pdl_interp.get_value_type of %1042 : !pdl.type
    pdl_interp.are_equal %1039, %1045 : !pdl.type -> ^bb1964, ^bb1
  ^bb1964:  // pred: ^bb1963
    %1046 = pdl_interp.get_value_type of %1044 : !pdl.type
    pdl_interp.are_equal %1039, %1046 : !pdl.type -> ^bb1965, ^bb1
  ^bb1965:  // pred: ^bb1964
    pdl_interp.record_match @rewriters::@mul_fabs(%1038, %1044, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "math.absf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb1966:  // pred: ^bb1961
    %1047 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %1038, %1047 : !pdl.value -> ^bb1967, ^bb1962
  ^bb1967:  // pred: ^bb1966
    pdl_interp.record_match @rewriters::@sqr_abs(%1038, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1962
  ^bb1968:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 1 -> ^bb1969, ^bb1
  ^bb1969:  // pred: ^bb1968
    pdl_interp.check_result_count of %2 is 1 -> ^bb1970, ^bb1
  ^bb1970:  // pred: ^bb1969
    %1048 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1048 : !pdl.value -> ^bb1971, ^bb1
  ^bb1971:  // pred: ^bb1970
    pdl_interp.are_equal %1048, %1 : !pdl.value -> ^bb1972, ^bb1
  ^bb1972:  // pred: ^bb1971
    %1049 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1049 : !pdl.value -> ^bb1973, ^bb1
  ^bb1973:  // pred: ^bb1972
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb1974, ^bb1
  ^bb1974:  // pred: ^bb1973
    %1050 = pdl_interp.get_value_type of %1049 : !pdl.type
    pdl_interp.check_type %1050 is f32 -> ^bb1975, ^bb1
  ^bb1975:  // pred: ^bb1974
    %1051 = pdl_interp.get_value_type of %1048 : !pdl.type
    pdl_interp.are_equal %1050, %1051 : !pdl.type -> ^bb1976, ^bb1
  ^bb1976:  // pred: ^bb1975
    %1052 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1050, %1052 : !pdl.type -> ^bb1977, ^bb1
  ^bb1977:  // pred: ^bb1976
    pdl_interp.switch_operation_name of %858 to ["arith.mulf", "math.cbrt"](^bb1978, ^bb2002) -> ^bb1
  ^bb1978:  // pred: ^bb1977
    pdl_interp.check_operand_count of %858 is 2 -> ^bb1979, ^bb1
  ^bb1979:  // pred: ^bb1978
    pdl_interp.check_result_count of %858 is 1 -> ^bb1980, ^bb1
  ^bb1980:  // pred: ^bb1979
    %1053 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1053 : !pdl.value -> ^bb1981, ^bb1
  ^bb1981:  // pred: ^bb1980
    pdl_interp.are_equal %1053, %857 : !pdl.value -> ^bb1982, ^bb1
  ^bb1982:  // pred: ^bb1981
    %1054 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1054 : !pdl.value -> ^bb1983, ^bb1
  ^bb1983:  // pred: ^bb1982
    %1055 = pdl_interp.get_defining_op of %1054 : !pdl.value
    pdl_interp.is_not_null %1055 : !pdl.operation -> ^bb1984, ^bb1
  ^bb1984:  // pred: ^bb1983
    %1056 = pdl_interp.get_operand 1 of %858
    %1057 = pdl_interp.get_defining_op of %1056 : !pdl.value
    pdl_interp.is_not_null %1057 : !pdl.operation -> ^bb1985, ^bb1
  ^bb1985:  // pred: ^bb1984
    pdl_interp.is_not_null %1056 : !pdl.value -> ^bb1986, ^bb1
  ^bb1986:  // pred: ^bb1985
    %1058 = pdl_interp.get_value_type of %1053 : !pdl.type
    pdl_interp.are_equal %1050, %1058 : !pdl.type -> ^bb1987, ^bb1
  ^bb1987:  // pred: ^bb1986
    pdl_interp.check_operation_name of %1055 is "math.cbrt" -> ^bb1988, ^bb1
  ^bb1988:  // pred: ^bb1987
    pdl_interp.check_operand_count of %1055 is 1 -> ^bb1989, ^bb1
  ^bb1989:  // pred: ^bb1988
    pdl_interp.check_result_count of %1055 is 1 -> ^bb1990, ^bb1
  ^bb1990:  // pred: ^bb1989
    %1059 = pdl_interp.get_result 0 of %1055
    pdl_interp.is_not_null %1059 : !pdl.value -> ^bb1991, ^bb1
  ^bb1991:  // pred: ^bb1990
    pdl_interp.are_equal %1059, %1054 : !pdl.value -> ^bb1992, ^bb1
  ^bb1992:  // pred: ^bb1991
    pdl_interp.check_operation_name of %1057 is "math.cbrt" -> ^bb1993, ^bb1
  ^bb1993:  // pred: ^bb1992
    pdl_interp.check_operand_count of %1057 is 1 -> ^bb1994, ^bb1
  ^bb1994:  // pred: ^bb1993
    pdl_interp.check_result_count of %1057 is 1 -> ^bb1995, ^bb1
  ^bb1995:  // pred: ^bb1994
    %1060 = pdl_interp.get_result 0 of %1057
    pdl_interp.is_not_null %1060 : !pdl.value -> ^bb1996, ^bb1
  ^bb1996:  // pred: ^bb1995
    pdl_interp.are_equal %1060, %1056 : !pdl.value -> ^bb1997, ^bb1
  ^bb1997:  // pred: ^bb1996
    %1061 = pdl_interp.get_value_type of %1060 : !pdl.type
    pdl_interp.are_equal %1061, %1050 : !pdl.type -> ^bb1998, ^bb1
  ^bb1998:  // pred: ^bb1997
    %1062 = pdl_interp.get_value_type of %1059 : !pdl.type
    pdl_interp.are_equal %1062, %1050 : !pdl.type -> ^bb1999, ^bb1
  ^bb1999:  // pred: ^bb1998
    %1063 = pdl_interp.get_operand 0 of %1055
    pdl_interp.are_equal %1063, %1049 : !pdl.value -> ^bb2000, ^bb1
  ^bb2000:  // pred: ^bb1999
    %1064 = pdl_interp.get_operand 0 of %1057
    pdl_interp.are_equal %1064, %1049 : !pdl.value -> ^bb2001, ^bb1
  ^bb2001:  // pred: ^bb2000
    pdl_interp.record_match @rewriters::@rem_3cbrt_rft(%1049, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2, %858, %1055, %1057]), root("arith.mulf") -> ^bb1
  ^bb2002:  // pred: ^bb1977
    pdl_interp.check_operand_count of %858 is 1 -> ^bb2003, ^bb1
  ^bb2003:  // pred: ^bb2002
    pdl_interp.check_result_count of %858 is 1 -> ^bb2004, ^bb1
  ^bb2004:  // pred: ^bb2003
    %1065 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1065 : !pdl.value -> ^bb2005, ^bb1
  ^bb2005:  // pred: ^bb2004
    pdl_interp.are_equal %1065, %857 : !pdl.value -> ^bb2006, ^bb1
  ^bb2006:  // pred: ^bb2005
    %1066 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1066 : !pdl.value -> ^bb2007, ^bb1
  ^bb2007:  // pred: ^bb2006
    %1067 = pdl_interp.get_value_type of %1065 : !pdl.type
    pdl_interp.are_equal %1050, %1067 : !pdl.type -> ^bb2008, ^bb1
  ^bb2008:  // pred: ^bb2007
    %1068 = pdl_interp.get_value_type of %1066 : !pdl.type
    pdl_interp.are_equal %1050, %1068 : !pdl.type -> ^bb2009, ^bb1
  ^bb2009:  // pred: ^bb2008
    pdl_interp.record_match @rewriters::@cbrt_unprod(%1049, %1066, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "math.cbrt"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb2010:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 1 -> ^bb2011, ^bb1
  ^bb2011:  // pred: ^bb2010
    pdl_interp.check_result_count of %2 is 1 -> ^bb2012, ^bb1
  ^bb2012:  // pred: ^bb2011
    %1069 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1069 : !pdl.value -> ^bb2013, ^bb1
  ^bb2013:  // pred: ^bb2012
    pdl_interp.are_equal %1069, %1 : !pdl.value -> ^bb2014, ^bb1
  ^bb2014:  // pred: ^bb2013
    %1070 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1070 : !pdl.value -> ^bb2015, ^bb1
  ^bb2015:  // pred: ^bb2014
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb2016, ^bb1
  ^bb2016:  // pred: ^bb2015
    %1071 = pdl_interp.get_value_type of %1070 : !pdl.type
    pdl_interp.check_type %1071 is f32 -> ^bb2017, ^bb1
  ^bb2017:  // pred: ^bb2016
    %1072 = pdl_interp.get_value_type of %1069 : !pdl.type
    pdl_interp.are_equal %1071, %1072 : !pdl.type -> ^bb2018, ^bb1
  ^bb2018:  // pred: ^bb2017
    %1073 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1071, %1073 : !pdl.type -> ^bb2019, ^bb1
  ^bb2019:  // pred: ^bb2018
    pdl_interp.check_operation_name of %858 is "math.exp" -> ^bb2020, ^bb1
  ^bb2020:  // pred: ^bb2019
    pdl_interp.check_operand_count of %858 is 1 -> ^bb2021, ^bb1
  ^bb2021:  // pred: ^bb2020
    pdl_interp.check_result_count of %858 is 1 -> ^bb2022, ^bb1
  ^bb2022:  // pred: ^bb2021
    %1074 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1074 : !pdl.value -> ^bb2023, ^bb1
  ^bb2023:  // pred: ^bb2022
    pdl_interp.are_equal %1074, %857 : !pdl.value -> ^bb2024, ^bb1
  ^bb2024:  // pred: ^bb2023
    %1075 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1075 : !pdl.value -> ^bb2028, ^bb2025
  ^bb2025:  // 4 preds: ^bb2024, ^bb2028, ^bb2029, ^bb2030
    %1076 = pdl_interp.get_value_type of %1074 : !pdl.type
    pdl_interp.are_equal %1071, %1076 : !pdl.type -> ^bb2026, ^bb1
  ^bb2026:  // pred: ^bb2025
    %1077 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %1070, %1077 : !pdl.value -> ^bb2027, ^bb1
  ^bb2027:  // pred: ^bb2026
    pdl_interp.record_match @rewriters::@exp_lft_sqr_rev(%1070, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.exp"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb2028:  // pred: ^bb2024
    %1078 = pdl_interp.get_value_type of %1074 : !pdl.type
    pdl_interp.are_equal %1071, %1078 : !pdl.type -> ^bb2029, ^bb2025
  ^bb2029:  // pred: ^bb2028
    %1079 = pdl_interp.get_value_type of %1075 : !pdl.type
    pdl_interp.are_equal %1071, %1079 : !pdl.type -> ^bb2030, ^bb2025
  ^bb2030:  // pred: ^bb2029
    pdl_interp.record_match @rewriters::@prod_exp(%1070, %1075, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "math.exp"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb2025
  ^bb2031:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 1 -> ^bb2032, ^bb1
  ^bb2032:  // pred: ^bb2031
    pdl_interp.check_result_count of %2 is 1 -> ^bb2033, ^bb1
  ^bb2033:  // pred: ^bb2032
    %1080 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1080 : !pdl.value -> ^bb2034, ^bb1
  ^bb2034:  // pred: ^bb2033
    pdl_interp.are_equal %1080, %1 : !pdl.value -> ^bb2035, ^bb1
  ^bb2035:  // pred: ^bb2034
    %1081 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1081 : !pdl.value -> ^bb2036, ^bb1
  ^bb2036:  // pred: ^bb2035
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb2037, ^bb1
  ^bb2037:  // pred: ^bb2036
    %1082 = pdl_interp.get_value_type of %1081 : !pdl.type
    pdl_interp.check_type %1082 is f32 -> ^bb2038, ^bb1
  ^bb2038:  // pred: ^bb2037
    %1083 = pdl_interp.get_value_type of %1080 : !pdl.type
    pdl_interp.are_equal %1082, %1083 : !pdl.type -> ^bb2039, ^bb1
  ^bb2039:  // pred: ^bb2038
    %1084 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1082, %1084 : !pdl.type -> ^bb2040, ^bb1
  ^bb2040:  // pred: ^bb2039
    pdl_interp.switch_operation_name of %858 to ["math.sin", "math.cos"](^bb2041, ^bb2053) -> ^bb1
  ^bb2041:  // pred: ^bb2040
    pdl_interp.check_operand_count of %858 is 1 -> ^bb2042, ^bb1
  ^bb2042:  // pred: ^bb2041
    pdl_interp.check_result_count of %858 is 1 -> ^bb2043, ^bb1
  ^bb2043:  // pred: ^bb2042
    %1085 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1085 : !pdl.value -> ^bb2044, ^bb1
  ^bb2044:  // pred: ^bb2043
    pdl_interp.are_equal %1085, %857 : !pdl.value -> ^bb2045, ^bb1
  ^bb2045:  // pred: ^bb2044
    %1086 = pdl_interp.get_value_type of %1085 : !pdl.type
    pdl_interp.are_equal %1082, %1086 : !pdl.type -> ^bb2050, ^bb2046
  ^bb2046:  // 3 preds: ^bb2045, ^bb2050, ^bb2052
    %1087 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1087 : !pdl.value -> ^bb2047, ^bb1
  ^bb2047:  // pred: ^bb2046
    %1088 = pdl_interp.get_value_type of %1085 : !pdl.type
    pdl_interp.are_equal %1082, %1088 : !pdl.type -> ^bb2048, ^bb1
  ^bb2048:  // pred: ^bb2047
    %1089 = pdl_interp.get_value_type of %1087 : !pdl.type
    pdl_interp.are_equal %1082, %1089 : !pdl.type -> ^bb2049, ^bb1
  ^bb2049:  // pred: ^bb2048
    pdl_interp.record_match @rewriters::@sin_mult(%1081, %1087, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "math.cos", "arith.addf", "math.cos", "arith.subf", "arith.constant", "arith.divf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb2050:  // pred: ^bb2045
    %1090 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %1081, %1090 : !pdl.value -> ^bb2051, ^bb2046
  ^bb2051:  // pred: ^bb2050
    pdl_interp.record_match @rewriters::@sqr_sin_a(%1081, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.constant", "arith.constant", "arith.mulf", "math.cos", "arith.mulf", "arith.subf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb2052
  ^bb2052:  // pred: ^bb2051
    pdl_interp.record_match @rewriters::@sqr_sin_b(%1081, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.cos", "math.cos", "arith.mulf", "arith.subf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb2046
  ^bb2053:  // pred: ^bb2040
    pdl_interp.check_operand_count of %858 is 1 -> ^bb2054, ^bb1
  ^bb2054:  // pred: ^bb2053
    pdl_interp.check_result_count of %858 is 1 -> ^bb2055, ^bb1
  ^bb2055:  // pred: ^bb2054
    %1091 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1091 : !pdl.value -> ^bb2056, ^bb1
  ^bb2056:  // pred: ^bb2055
    pdl_interp.are_equal %1091, %857 : !pdl.value -> ^bb2057, ^bb1
  ^bb2057:  // pred: ^bb2056
    %1092 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1092 : !pdl.value -> ^bb2058, ^bb1
  ^bb2058:  // pred: ^bb2057
    %1093 = pdl_interp.get_value_type of %1091 : !pdl.type
    pdl_interp.are_equal %1082, %1093 : !pdl.type -> ^bb2059, ^bb1
  ^bb2059:  // pred: ^bb2058
    %1094 = pdl_interp.get_value_type of %1092 : !pdl.type
    pdl_interp.are_equal %1082, %1094 : !pdl.type -> ^bb2060, ^bb1
  ^bb2060:  // pred: ^bb2059
    pdl_interp.record_match @rewriters::@sin_cos_mult(%1081, %1092, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "math.sin", "arith.addf", "math.sin", "arith.addf", "arith.constant", "arith.divf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb2061:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 1 -> ^bb2062, ^bb1
  ^bb2062:  // pred: ^bb2061
    pdl_interp.check_result_count of %2 is 1 -> ^bb2063, ^bb1
  ^bb2063:  // pred: ^bb2062
    %1095 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1095 : !pdl.value -> ^bb2064, ^bb1
  ^bb2064:  // pred: ^bb2063
    pdl_interp.are_equal %1095, %1 : !pdl.value -> ^bb2065, ^bb1
  ^bb2065:  // pred: ^bb2064
    %1096 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1096 : !pdl.value -> ^bb2066, ^bb1
  ^bb2066:  // pred: ^bb2065
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb2067, ^bb1
  ^bb2067:  // pred: ^bb2066
    %1097 = pdl_interp.get_value_type of %1096 : !pdl.type
    pdl_interp.check_type %1097 is f32 -> ^bb2068, ^bb1
  ^bb2068:  // pred: ^bb2067
    %1098 = pdl_interp.get_value_type of %1095 : !pdl.type
    pdl_interp.are_equal %1097, %1098 : !pdl.type -> ^bb2069, ^bb1
  ^bb2069:  // pred: ^bb2068
    %1099 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1097, %1099 : !pdl.type -> ^bb2070, ^bb1
  ^bb2070:  // pred: ^bb2069
    pdl_interp.check_operation_name of %858 is "math.cos" -> ^bb2071, ^bb1
  ^bb2071:  // pred: ^bb2070
    pdl_interp.check_operand_count of %858 is 1 -> ^bb2072, ^bb1
  ^bb2072:  // pred: ^bb2071
    pdl_interp.check_result_count of %858 is 1 -> ^bb2073, ^bb1
  ^bb2073:  // pred: ^bb2072
    %1100 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1100 : !pdl.value -> ^bb2074, ^bb1
  ^bb2074:  // pred: ^bb2073
    pdl_interp.are_equal %1100, %857 : !pdl.value -> ^bb2075, ^bb1
  ^bb2075:  // pred: ^bb2074
    %1101 = pdl_interp.get_value_type of %1100 : !pdl.type
    pdl_interp.are_equal %1097, %1101 : !pdl.type -> ^bb2080, ^bb2076
  ^bb2076:  // 3 preds: ^bb2075, ^bb2080, ^bb2083
    %1102 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1102 : !pdl.value -> ^bb2077, ^bb1
  ^bb2077:  // pred: ^bb2076
    %1103 = pdl_interp.get_value_type of %1100 : !pdl.type
    pdl_interp.are_equal %1097, %1103 : !pdl.type -> ^bb2078, ^bb1
  ^bb2078:  // pred: ^bb2077
    %1104 = pdl_interp.get_value_type of %1102 : !pdl.type
    pdl_interp.are_equal %1097, %1104 : !pdl.type -> ^bb2079, ^bb1
  ^bb2079:  // pred: ^bb2078
    pdl_interp.record_match @rewriters::@cos_mult(%1096, %1102, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "math.cos", "arith.subf", "math.cos", "arith.addf", "arith.constant", "arith.divf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb2080:  // pred: ^bb2075
    %1105 = pdl_interp.get_operand 0 of %858
    pdl_interp.are_equal %1096, %1105 : !pdl.value -> ^bb2081, ^bb2076
  ^bb2081:  // pred: ^bb2080
    pdl_interp.record_match @rewriters::@sqr_cos_a(%1096, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.constant", "arith.constant", "arith.mulf", "math.cos", "arith.mulf", "arith.addf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb2082
  ^bb2082:  // pred: ^bb2081
    pdl_interp.record_match @rewriters::@_1_sub_sin_rev(%1096, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sin", "math.sin", "arith.mulf", "arith.subf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb2083
  ^bb2083:  // pred: ^bb2082
    pdl_interp.record_match @rewriters::@sqr_cos_b(%1096, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sin", "math.sin", "arith.mulf", "arith.subf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb2076
  ^bb2084:  // pred: ^bb1633
    pdl_interp.check_operand_count of %2 is 0 -> ^bb2085, ^bb1
  ^bb2085:  // pred: ^bb2084
    pdl_interp.check_result_count of %2 is 1 -> ^bb2086, ^bb1
  ^bb2086:  // pred: ^bb2085
    %1106 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1106 : !pdl.value -> ^bb2087, ^bb1
  ^bb2087:  // pred: ^bb2086
    pdl_interp.are_equal %1106, %1 : !pdl.value -> ^bb2088, ^bb1
  ^bb2088:  // pred: ^bb2087
    pdl_interp.is_not_null %857 : !pdl.value -> ^bb2089, ^bb1
  ^bb2089:  // pred: ^bb2088
    pdl_interp.switch_operation_name of %858 to ["arith.mulf", "math.sinh", "math.cosh", "math.acosh"](^bb2090, ^bb2662, ^bb2674, ^bb2686) -> ^bb1
  ^bb2090:  // pred: ^bb2089
    pdl_interp.check_operand_count of %858 is 2 -> ^bb2091, ^bb1
  ^bb2091:  // pred: ^bb2090
    pdl_interp.check_result_count of %858 is 1 -> ^bb2092, ^bb1
  ^bb2092:  // pred: ^bb2091
    %1107 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1107 : !pdl.value -> ^bb2093, ^bb1
  ^bb2093:  // pred: ^bb2092
    pdl_interp.are_equal %1107, %857 : !pdl.value -> ^bb2094, ^bb1
  ^bb2094:  // pred: ^bb2093
    %1108 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1108 : !pdl.value -> ^bb2095, ^bb1
  ^bb2095:  // pred: ^bb2094
    %1109 = pdl_interp.get_defining_op of %1108 : !pdl.value
    pdl_interp.is_not_null %1109 : !pdl.operation -> ^bb2096, ^bb1
  ^bb2096:  // pred: ^bb2095
    %1110 = pdl_interp.get_operand 1 of %858
    %1111 = pdl_interp.get_defining_op of %1110 : !pdl.value
    pdl_interp.is_not_null %1111 : !pdl.operation -> ^bb2097, ^bb1
  ^bb2097:  // pred: ^bb2096
    pdl_interp.is_not_null %1110 : !pdl.value -> ^bb2098, ^bb1
  ^bb2098:  // pred: ^bb2097
    pdl_interp.switch_operation_name of %1109 to ["math.sin", "math.cos", "math.sinh", "math.cosh"](^bb2099, ^bb2290, ^bb2365, ^bb2517) -> ^bb1
  ^bb2099:  // pred: ^bb2098
    pdl_interp.check_operand_count of %1109 is 1 -> ^bb2100, ^bb1
  ^bb2100:  // pred: ^bb2099
    pdl_interp.check_result_count of %1109 is 1 -> ^bb2101, ^bb1
  ^bb2101:  // pred: ^bb2100
    %1112 = pdl_interp.get_result 0 of %1109
    pdl_interp.is_not_null %1112 : !pdl.value -> ^bb2102, ^bb1
  ^bb2102:  // pred: ^bb2101
    pdl_interp.are_equal %1112, %1108 : !pdl.value -> ^bb2103, ^bb1
  ^bb2103:  // pred: ^bb2102
    pdl_interp.switch_operation_name of %1111 to ["math.cos", "math.sin"](^bb2104, ^bb2220) -> ^bb1
  ^bb2104:  // pred: ^bb2103
    pdl_interp.check_operand_count of %1111 is 1 -> ^bb2105, ^bb1
  ^bb2105:  // pred: ^bb2104
    pdl_interp.check_result_count of %1111 is 1 -> ^bb2106, ^bb1
  ^bb2106:  // pred: ^bb2105
    %1113 = pdl_interp.get_result 0 of %1111
    pdl_interp.is_not_null %1113 : !pdl.value -> ^bb2107, ^bb1
  ^bb2107:  // pred: ^bb2106
    pdl_interp.are_equal %1113, %1110 : !pdl.value -> ^bb2108, ^bb1
  ^bb2108:  // pred: ^bb2107
    %1114 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1114 : !pdl.attribute -> ^bb2109, ^bb1
  ^bb2109:  // pred: ^bb2108
    pdl_interp.check_attribute %1114 is 2.000000e+00 : f32 -> ^bb2110, ^bb1
  ^bb2110:  // pred: ^bb2109
    %1115 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1115 is f32 -> ^bb2111, ^bb1
  ^bb2111:  // pred: ^bb2110
    %1116 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1115, %1116 : !pdl.type -> ^bb2112, ^bb1
  ^bb2112:  // pred: ^bb2111
    %1117 = pdl_interp.get_value_type of %1107 : !pdl.type
    pdl_interp.are_equal %1115, %1117 : !pdl.type -> ^bb2214, ^bb2113
  ^bb2113:  // 7 preds: ^bb2112, ^bb2214, ^bb2215, ^bb2216, ^bb2217, ^bb2218, ^bb2219
    %1118 = pdl_interp.get_operand 0 of %1111
    %1119 = pdl_interp.get_defining_op of %1118 : !pdl.value
    pdl_interp.is_not_null %1119 : !pdl.operation -> ^bb2114, ^bb1
  ^bb2114:  // pred: ^bb2113
    %1120 = pdl_interp.get_operand 0 of %1109
    %1121 = pdl_interp.get_defining_op of %1120 : !pdl.value
    pdl_interp.is_not_null %1121 : !pdl.operation -> ^bb2115, ^bb1
  ^bb2115:  // pred: ^bb2114
    %1122 = pdl_interp.get_value_type of %1107 : !pdl.type
    pdl_interp.are_equal %1115, %1122 : !pdl.type -> ^bb2116, ^bb1
  ^bb2116:  // pred: ^bb2115
    pdl_interp.is_not_null %1120 : !pdl.value -> ^bb2117, ^bb1
  ^bb2117:  // pred: ^bb2116
    %1123 = pdl_interp.get_operand 0 of %1119
    %1124 = pdl_interp.get_defining_op of %1123 : !pdl.value
    pdl_interp.is_not_null %1124 : !pdl.operation -> ^bb2118, ^bb1
  ^bb2118:  // pred: ^bb2117
    %1125 = pdl_interp.get_value_type of %1112 : !pdl.type
    pdl_interp.are_equal %1125, %1115 : !pdl.type -> ^bb2119, ^bb1
  ^bb2119:  // pred: ^bb2118
    %1126 = pdl_interp.get_operand 0 of %1121
    %1127 = pdl_interp.get_defining_op of %1126 : !pdl.value
    pdl_interp.is_not_null %1127 : !pdl.operation -> ^bb2120, ^bb1
  ^bb2120:  // pred: ^bb2119
    pdl_interp.is_not_null %1118 : !pdl.value -> ^bb2121, ^bb1
  ^bb2121:  // pred: ^bb2120
    pdl_interp.check_operation_name of %1119 is "arith.divf" -> ^bb2122, ^bb1
  ^bb2122:  // pred: ^bb2121
    pdl_interp.check_operand_count of %1119 is 2 -> ^bb2123, ^bb1
  ^bb2123:  // pred: ^bb2122
    pdl_interp.check_result_count of %1119 is 1 -> ^bb2124, ^bb1
  ^bb2124:  // pred: ^bb2123
    %1128 = pdl_interp.get_result 0 of %1119
    pdl_interp.is_not_null %1128 : !pdl.value -> ^bb2125, ^bb1
  ^bb2125:  // pred: ^bb2124
    pdl_interp.are_equal %1128, %1118 : !pdl.value -> ^bb2126, ^bb1
  ^bb2126:  // pred: ^bb2125
    %1129 = pdl_interp.get_value_type of %1113 : !pdl.type
    pdl_interp.are_equal %1129, %1115 : !pdl.type -> ^bb2127, ^bb1
  ^bb2127:  // pred: ^bb2126
    pdl_interp.check_operation_name of %1121 is "arith.divf" -> ^bb2128, ^bb1
  ^bb2128:  // pred: ^bb2127
    pdl_interp.check_operand_count of %1121 is 2 -> ^bb2129, ^bb1
  ^bb2129:  // pred: ^bb2128
    pdl_interp.check_result_count of %1121 is 1 -> ^bb2130, ^bb1
  ^bb2130:  // pred: ^bb2129
    %1130 = pdl_interp.get_result 0 of %1121
    pdl_interp.is_not_null %1130 : !pdl.value -> ^bb2131, ^bb1
  ^bb2131:  // pred: ^bb2130
    pdl_interp.are_equal %1130, %1120 : !pdl.value -> ^bb2132, ^bb1
  ^bb2132:  // pred: ^bb2131
    %1131 = pdl_interp.get_operand 1 of %1121
    %1132 = pdl_interp.get_defining_op of %1131 : !pdl.value
    pdl_interp.is_not_null %1132 : !pdl.operation -> ^bb2133, ^bb1
  ^bb2133:  // pred: ^bb2132
    %1133 = pdl_interp.get_operand 1 of %1119
    %1134 = pdl_interp.get_defining_op of %1133 : !pdl.value
    pdl_interp.is_not_null %1134 : !pdl.operation -> ^bb2134, ^bb1
  ^bb2134:  // pred: ^bb2133
    pdl_interp.is_not_null %1123 : !pdl.value -> ^bb2135, ^bb1
  ^bb2135:  // pred: ^bb2134
    pdl_interp.switch_operation_name of %1124 to ["arith.addf", "arith.subf"](^bb2136, ^bb2175) -> ^bb1
  ^bb2136:  // pred: ^bb2135
    pdl_interp.check_operand_count of %1124 is 2 -> ^bb2137, ^bb1
  ^bb2137:  // pred: ^bb2136
    pdl_interp.check_result_count of %1124 is 1 -> ^bb2138, ^bb1
  ^bb2138:  // pred: ^bb2137
    %1135 = pdl_interp.get_result 0 of %1124
    pdl_interp.is_not_null %1135 : !pdl.value -> ^bb2139, ^bb1
  ^bb2139:  // pred: ^bb2138
    pdl_interp.are_equal %1135, %1123 : !pdl.value -> ^bb2140, ^bb1
  ^bb2140:  // pred: ^bb2139
    pdl_interp.is_not_null %1133 : !pdl.value -> ^bb2141, ^bb1
  ^bb2141:  // pred: ^bb2140
    %1136 = pdl_interp.get_value_type of %1128 : !pdl.type
    pdl_interp.are_equal %1136, %1115 : !pdl.type -> ^bb2142, ^bb1
  ^bb2142:  // pred: ^bb2141
    %1137 = pdl_interp.get_value_type of %1135 : !pdl.type
    pdl_interp.are_equal %1137, %1115 : !pdl.type -> ^bb2143, ^bb1
  ^bb2143:  // pred: ^bb2142
    %1138 = pdl_interp.get_value_type of %1130 : !pdl.type
    pdl_interp.are_equal %1138, %1115 : !pdl.type -> ^bb2144, ^bb1
  ^bb2144:  // pred: ^bb2143
    pdl_interp.is_not_null %1126 : !pdl.value -> ^bb2145, ^bb1
  ^bb2145:  // pred: ^bb2144
    pdl_interp.check_operation_name of %1127 is "arith.subf" -> ^bb2146, ^bb1
  ^bb2146:  // pred: ^bb2145
    pdl_interp.check_operand_count of %1127 is 2 -> ^bb2147, ^bb1
  ^bb2147:  // pred: ^bb2146
    pdl_interp.check_result_count of %1127 is 1 -> ^bb2148, ^bb1
  ^bb2148:  // pred: ^bb2147
    %1139 = pdl_interp.get_result 0 of %1127
    pdl_interp.is_not_null %1139 : !pdl.value -> ^bb2149, ^bb1
  ^bb2149:  // pred: ^bb2148
    pdl_interp.are_equal %1139, %1126 : !pdl.value -> ^bb2150, ^bb1
  ^bb2150:  // pred: ^bb2149
    pdl_interp.is_not_null %1131 : !pdl.value -> ^bb2151, ^bb1
  ^bb2151:  // pred: ^bb2150
    pdl_interp.check_operation_name of %1132 is "arith.constant" -> ^bb2152, ^bb1
  ^bb2152:  // pred: ^bb2151
    pdl_interp.check_operation_name of %1134 is "arith.constant" -> ^bb2153, ^bb1
  ^bb2153:  // pred: ^bb2152
    pdl_interp.check_operand_count of %1132 is 0 -> ^bb2154, ^bb1
  ^bb2154:  // pred: ^bb2153
    pdl_interp.check_operand_count of %1134 is 0 -> ^bb2155, ^bb1
  ^bb2155:  // pred: ^bb2154
    pdl_interp.check_result_count of %1132 is 1 -> ^bb2156, ^bb1
  ^bb2156:  // pred: ^bb2155
    pdl_interp.check_result_count of %1134 is 1 -> ^bb2157, ^bb1
  ^bb2157:  // pred: ^bb2156
    %1140 = pdl_interp.get_operand 0 of %1127
    pdl_interp.is_not_null %1140 : !pdl.value -> ^bb2158, ^bb1
  ^bb2158:  // pred: ^bb2157
    %1141 = pdl_interp.get_operand 1 of %1127
    pdl_interp.is_not_null %1141 : !pdl.value -> ^bb2159, ^bb1
  ^bb2159:  // pred: ^bb2158
    %1142 = pdl_interp.get_operand 0 of %1124
    pdl_interp.are_equal %1140, %1142 : !pdl.value -> ^bb2160, ^bb1
  ^bb2160:  // pred: ^bb2159
    %1143 = pdl_interp.get_operand 1 of %1124
    pdl_interp.are_equal %1141, %1143 : !pdl.value -> ^bb2161, ^bb1
  ^bb2161:  // pred: ^bb2160
    %1144 = pdl_interp.get_attribute "value" of %1132
    pdl_interp.is_not_null %1144 : !pdl.attribute -> ^bb2162, ^bb1
  ^bb2162:  // pred: ^bb2161
    %1145 = pdl_interp.get_attribute "value" of %1134
    pdl_interp.is_not_null %1145 : !pdl.attribute -> ^bb2163, ^bb1
  ^bb2163:  // pred: ^bb2162
    pdl_interp.check_attribute %1144 is 2.000000e+00 : f32 -> ^bb2164, ^bb1
  ^bb2164:  // pred: ^bb2163
    pdl_interp.check_attribute %1145 is 2.000000e+00 : f32 -> ^bb2165, ^bb1
  ^bb2165:  // pred: ^bb2164
    %1146 = pdl_interp.get_result 0 of %1132
    pdl_interp.is_not_null %1146 : !pdl.value -> ^bb2166, ^bb1
  ^bb2166:  // pred: ^bb2165
    %1147 = pdl_interp.get_result 0 of %1134
    pdl_interp.is_not_null %1147 : !pdl.value -> ^bb2167, ^bb1
  ^bb2167:  // pred: ^bb2166
    pdl_interp.are_equal %1146, %1131 : !pdl.value -> ^bb2168, ^bb1
  ^bb2168:  // pred: ^bb2167
    pdl_interp.are_equal %1147, %1133 : !pdl.value -> ^bb2169, ^bb1
  ^bb2169:  // pred: ^bb2168
    %1148 = pdl_interp.get_value_type of %1140 : !pdl.type
    pdl_interp.are_equal %1148, %1115 : !pdl.type -> ^bb2170, ^bb1
  ^bb2170:  // pred: ^bb2169
    %1149 = pdl_interp.get_value_type of %1141 : !pdl.type
    pdl_interp.are_equal %1149, %1115 : !pdl.type -> ^bb2171, ^bb1
  ^bb2171:  // pred: ^bb2170
    %1150 = pdl_interp.get_value_type of %1139 : !pdl.type
    pdl_interp.are_equal %1150, %1115 : !pdl.type -> ^bb2172, ^bb1
  ^bb2172:  // pred: ^bb2171
    %1151 = pdl_interp.get_value_type of %1146 : !pdl.type
    pdl_interp.are_equal %1151, %1115 : !pdl.type -> ^bb2173, ^bb1
  ^bb2173:  // pred: ^bb2172
    %1152 = pdl_interp.get_value_type of %1147 : !pdl.type
    pdl_interp.are_equal %1152, %1115 : !pdl.type -> ^bb2174, ^bb1
  ^bb2174:  // pred: ^bb2173
    pdl_interp.record_match @rewriters::@diff_sin_rev(%1140, %1141, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.subf"]), loc([%arg0, %2, %858, %1109, %1111, %1119, %1121, %1124, %1127, %1132, %1134]), root("arith.mulf") -> ^bb1
  ^bb2175:  // pred: ^bb2135
    pdl_interp.check_operand_count of %1124 is 2 -> ^bb2176, ^bb1
  ^bb2176:  // pred: ^bb2175
    pdl_interp.check_result_count of %1124 is 1 -> ^bb2177, ^bb1
  ^bb2177:  // pred: ^bb2176
    %1153 = pdl_interp.get_result 0 of %1124
    pdl_interp.is_not_null %1153 : !pdl.value -> ^bb2178, ^bb1
  ^bb2178:  // pred: ^bb2177
    pdl_interp.are_equal %1153, %1123 : !pdl.value -> ^bb2179, ^bb1
  ^bb2179:  // pred: ^bb2178
    pdl_interp.is_not_null %1133 : !pdl.value -> ^bb2180, ^bb1
  ^bb2180:  // pred: ^bb2179
    %1154 = pdl_interp.get_value_type of %1128 : !pdl.type
    pdl_interp.are_equal %1154, %1115 : !pdl.type -> ^bb2181, ^bb1
  ^bb2181:  // pred: ^bb2180
    %1155 = pdl_interp.get_value_type of %1153 : !pdl.type
    pdl_interp.are_equal %1155, %1115 : !pdl.type -> ^bb2182, ^bb1
  ^bb2182:  // pred: ^bb2181
    %1156 = pdl_interp.get_value_type of %1130 : !pdl.type
    pdl_interp.are_equal %1156, %1115 : !pdl.type -> ^bb2183, ^bb1
  ^bb2183:  // pred: ^bb2182
    pdl_interp.is_not_null %1126 : !pdl.value -> ^bb2184, ^bb1
  ^bb2184:  // pred: ^bb2183
    pdl_interp.check_operation_name of %1127 is "arith.addf" -> ^bb2185, ^bb1
  ^bb2185:  // pred: ^bb2184
    pdl_interp.check_operand_count of %1127 is 2 -> ^bb2186, ^bb1
  ^bb2186:  // pred: ^bb2185
    pdl_interp.check_result_count of %1127 is 1 -> ^bb2187, ^bb1
  ^bb2187:  // pred: ^bb2186
    %1157 = pdl_interp.get_result 0 of %1127
    pdl_interp.is_not_null %1157 : !pdl.value -> ^bb2188, ^bb1
  ^bb2188:  // pred: ^bb2187
    pdl_interp.are_equal %1157, %1126 : !pdl.value -> ^bb2189, ^bb1
  ^bb2189:  // pred: ^bb2188
    pdl_interp.is_not_null %1131 : !pdl.value -> ^bb2190, ^bb1
  ^bb2190:  // pred: ^bb2189
    pdl_interp.check_operation_name of %1132 is "arith.constant" -> ^bb2191, ^bb1
  ^bb2191:  // pred: ^bb2190
    pdl_interp.check_operation_name of %1134 is "arith.constant" -> ^bb2192, ^bb1
  ^bb2192:  // pred: ^bb2191
    pdl_interp.check_operand_count of %1132 is 0 -> ^bb2193, ^bb1
  ^bb2193:  // pred: ^bb2192
    pdl_interp.check_operand_count of %1134 is 0 -> ^bb2194, ^bb1
  ^bb2194:  // pred: ^bb2193
    pdl_interp.check_result_count of %1132 is 1 -> ^bb2195, ^bb1
  ^bb2195:  // pred: ^bb2194
    pdl_interp.check_result_count of %1134 is 1 -> ^bb2196, ^bb1
  ^bb2196:  // pred: ^bb2195
    %1158 = pdl_interp.get_operand 0 of %1127
    pdl_interp.is_not_null %1158 : !pdl.value -> ^bb2197, ^bb1
  ^bb2197:  // pred: ^bb2196
    %1159 = pdl_interp.get_operand 1 of %1127
    pdl_interp.is_not_null %1159 : !pdl.value -> ^bb2198, ^bb1
  ^bb2198:  // pred: ^bb2197
    %1160 = pdl_interp.get_operand 0 of %1124
    pdl_interp.are_equal %1158, %1160 : !pdl.value -> ^bb2199, ^bb1
  ^bb2199:  // pred: ^bb2198
    %1161 = pdl_interp.get_operand 1 of %1124
    pdl_interp.are_equal %1159, %1161 : !pdl.value -> ^bb2200, ^bb1
  ^bb2200:  // pred: ^bb2199
    %1162 = pdl_interp.get_attribute "value" of %1132
    pdl_interp.is_not_null %1162 : !pdl.attribute -> ^bb2201, ^bb1
  ^bb2201:  // pred: ^bb2200
    %1163 = pdl_interp.get_attribute "value" of %1134
    pdl_interp.is_not_null %1163 : !pdl.attribute -> ^bb2202, ^bb1
  ^bb2202:  // pred: ^bb2201
    pdl_interp.check_attribute %1162 is 2.000000e+00 : f32 -> ^bb2203, ^bb1
  ^bb2203:  // pred: ^bb2202
    pdl_interp.check_attribute %1163 is 2.000000e+00 : f32 -> ^bb2204, ^bb1
  ^bb2204:  // pred: ^bb2203
    %1164 = pdl_interp.get_result 0 of %1132
    pdl_interp.is_not_null %1164 : !pdl.value -> ^bb2205, ^bb1
  ^bb2205:  // pred: ^bb2204
    %1165 = pdl_interp.get_result 0 of %1134
    pdl_interp.is_not_null %1165 : !pdl.value -> ^bb2206, ^bb1
  ^bb2206:  // pred: ^bb2205
    pdl_interp.are_equal %1164, %1131 : !pdl.value -> ^bb2207, ^bb1
  ^bb2207:  // pred: ^bb2206
    pdl_interp.are_equal %1165, %1133 : !pdl.value -> ^bb2208, ^bb1
  ^bb2208:  // pred: ^bb2207
    %1166 = pdl_interp.get_value_type of %1158 : !pdl.type
    pdl_interp.are_equal %1166, %1115 : !pdl.type -> ^bb2209, ^bb1
  ^bb2209:  // pred: ^bb2208
    %1167 = pdl_interp.get_value_type of %1159 : !pdl.type
    pdl_interp.are_equal %1167, %1115 : !pdl.type -> ^bb2210, ^bb1
  ^bb2210:  // pred: ^bb2209
    %1168 = pdl_interp.get_value_type of %1157 : !pdl.type
    pdl_interp.are_equal %1168, %1115 : !pdl.type -> ^bb2211, ^bb1
  ^bb2211:  // pred: ^bb2210
    %1169 = pdl_interp.get_value_type of %1164 : !pdl.type
    pdl_interp.are_equal %1169, %1115 : !pdl.type -> ^bb2212, ^bb1
  ^bb2212:  // pred: ^bb2211
    %1170 = pdl_interp.get_value_type of %1165 : !pdl.type
    pdl_interp.are_equal %1170, %1115 : !pdl.type -> ^bb2213, ^bb1
  ^bb2213:  // pred: ^bb2212
    pdl_interp.record_match @rewriters::@sum_sin_rev(%1158, %1159, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.addf"]), loc([%arg0, %2, %858, %1109, %1111, %1119, %1121, %1124, %1127, %1132, %1134]), root("arith.mulf") -> ^bb1
  ^bb2214:  // pred: ^bb2112
    %1171 = pdl_interp.get_operand 0 of %1109
    pdl_interp.is_not_null %1171 : !pdl.value -> ^bb2215, ^bb2113
  ^bb2215:  // pred: ^bb2214
    %1172 = pdl_interp.get_value_type of %1112 : !pdl.type
    pdl_interp.are_equal %1172, %1115 : !pdl.type -> ^bb2216, ^bb2113
  ^bb2216:  // pred: ^bb2215
    %1173 = pdl_interp.get_value_type of %1113 : !pdl.type
    pdl_interp.are_equal %1173, %1115 : !pdl.type -> ^bb2217, ^bb2113
  ^bb2217:  // pred: ^bb2216
    %1174 = pdl_interp.get_operand 0 of %1111
    pdl_interp.are_equal %1171, %1174 : !pdl.value -> ^bb2218, ^bb2113
  ^bb2218:  // pred: ^bb2217
    %1175 = pdl_interp.get_value_type of %1171 : !pdl.type
    pdl_interp.are_equal %1175, %1115 : !pdl.type -> ^bb2219, ^bb2113
  ^bb2219:  // pred: ^bb2218
    pdl_interp.record_match @rewriters::@_2_sin(%1171, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.sin"]), loc([%arg0, %2, %858, %1109, %1111]), root("arith.mulf") -> ^bb2113
  ^bb2220:  // pred: ^bb2103
    pdl_interp.check_operand_count of %1111 is 1 -> ^bb2221, ^bb1
  ^bb2221:  // pred: ^bb2220
    pdl_interp.check_result_count of %1111 is 1 -> ^bb2222, ^bb1
  ^bb2222:  // pred: ^bb2221
    %1176 = pdl_interp.get_result 0 of %1111
    pdl_interp.is_not_null %1176 : !pdl.value -> ^bb2223, ^bb1
  ^bb2223:  // pred: ^bb2222
    pdl_interp.are_equal %1176, %1110 : !pdl.value -> ^bb2224, ^bb1
  ^bb2224:  // pred: ^bb2223
    %1177 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1177 : !pdl.attribute -> ^bb2225, ^bb1
  ^bb2225:  // pred: ^bb2224
    pdl_interp.check_attribute %1177 is -2.000000e+00 : f32 -> ^bb2226, ^bb1
  ^bb2226:  // pred: ^bb2225
    %1178 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1178 is f32 -> ^bb2227, ^bb1
  ^bb2227:  // pred: ^bb2226
    %1179 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1178, %1179 : !pdl.type -> ^bb2228, ^bb1
  ^bb2228:  // pred: ^bb2227
    %1180 = pdl_interp.get_operand 0 of %1111
    %1181 = pdl_interp.get_defining_op of %1180 : !pdl.value
    pdl_interp.is_not_null %1181 : !pdl.operation -> ^bb2229, ^bb1
  ^bb2229:  // pred: ^bb2228
    %1182 = pdl_interp.get_operand 0 of %1109
    %1183 = pdl_interp.get_defining_op of %1182 : !pdl.value
    pdl_interp.is_not_null %1183 : !pdl.operation -> ^bb2230, ^bb1
  ^bb2230:  // pred: ^bb2229
    %1184 = pdl_interp.get_value_type of %1107 : !pdl.type
    pdl_interp.are_equal %1178, %1184 : !pdl.type -> ^bb2231, ^bb1
  ^bb2231:  // pred: ^bb2230
    pdl_interp.is_not_null %1182 : !pdl.value -> ^bb2232, ^bb1
  ^bb2232:  // pred: ^bb2231
    %1185 = pdl_interp.get_operand 0 of %1181
    %1186 = pdl_interp.get_defining_op of %1185 : !pdl.value
    pdl_interp.is_not_null %1186 : !pdl.operation -> ^bb2233, ^bb1
  ^bb2233:  // pred: ^bb2232
    %1187 = pdl_interp.get_value_type of %1112 : !pdl.type
    pdl_interp.are_equal %1187, %1178 : !pdl.type -> ^bb2234, ^bb1
  ^bb2234:  // pred: ^bb2233
    %1188 = pdl_interp.get_operand 0 of %1183
    %1189 = pdl_interp.get_defining_op of %1188 : !pdl.value
    pdl_interp.is_not_null %1189 : !pdl.operation -> ^bb2235, ^bb1
  ^bb2235:  // pred: ^bb2234
    pdl_interp.is_not_null %1180 : !pdl.value -> ^bb2236, ^bb1
  ^bb2236:  // pred: ^bb2235
    pdl_interp.check_operation_name of %1181 is "arith.divf" -> ^bb2237, ^bb1
  ^bb2237:  // pred: ^bb2236
    pdl_interp.check_operand_count of %1181 is 2 -> ^bb2238, ^bb1
  ^bb2238:  // pred: ^bb2237
    pdl_interp.check_result_count of %1181 is 1 -> ^bb2239, ^bb1
  ^bb2239:  // pred: ^bb2238
    %1190 = pdl_interp.get_result 0 of %1181
    pdl_interp.is_not_null %1190 : !pdl.value -> ^bb2240, ^bb1
  ^bb2240:  // pred: ^bb2239
    pdl_interp.are_equal %1190, %1180 : !pdl.value -> ^bb2241, ^bb1
  ^bb2241:  // pred: ^bb2240
    %1191 = pdl_interp.get_value_type of %1176 : !pdl.type
    pdl_interp.are_equal %1191, %1178 : !pdl.type -> ^bb2242, ^bb1
  ^bb2242:  // pred: ^bb2241
    pdl_interp.check_operation_name of %1183 is "arith.divf" -> ^bb2243, ^bb1
  ^bb2243:  // pred: ^bb2242
    pdl_interp.check_operand_count of %1183 is 2 -> ^bb2244, ^bb1
  ^bb2244:  // pred: ^bb2243
    pdl_interp.check_result_count of %1183 is 1 -> ^bb2245, ^bb1
  ^bb2245:  // pred: ^bb2244
    %1192 = pdl_interp.get_result 0 of %1183
    pdl_interp.is_not_null %1192 : !pdl.value -> ^bb2246, ^bb1
  ^bb2246:  // pred: ^bb2245
    pdl_interp.are_equal %1192, %1182 : !pdl.value -> ^bb2247, ^bb1
  ^bb2247:  // pred: ^bb2246
    %1193 = pdl_interp.get_operand 1 of %1183
    %1194 = pdl_interp.get_defining_op of %1193 : !pdl.value
    pdl_interp.is_not_null %1194 : !pdl.operation -> ^bb2248, ^bb1
  ^bb2248:  // pred: ^bb2247
    %1195 = pdl_interp.get_operand 1 of %1181
    %1196 = pdl_interp.get_defining_op of %1195 : !pdl.value
    pdl_interp.is_not_null %1196 : !pdl.operation -> ^bb2249, ^bb1
  ^bb2249:  // pred: ^bb2248
    pdl_interp.is_not_null %1185 : !pdl.value -> ^bb2250, ^bb1
  ^bb2250:  // pred: ^bb2249
    pdl_interp.check_operation_name of %1186 is "arith.addf" -> ^bb2251, ^bb1
  ^bb2251:  // pred: ^bb2250
    pdl_interp.check_operand_count of %1186 is 2 -> ^bb2252, ^bb1
  ^bb2252:  // pred: ^bb2251
    pdl_interp.check_result_count of %1186 is 1 -> ^bb2253, ^bb1
  ^bb2253:  // pred: ^bb2252
    %1197 = pdl_interp.get_result 0 of %1186
    pdl_interp.is_not_null %1197 : !pdl.value -> ^bb2254, ^bb1
  ^bb2254:  // pred: ^bb2253
    pdl_interp.are_equal %1197, %1185 : !pdl.value -> ^bb2255, ^bb1
  ^bb2255:  // pred: ^bb2254
    pdl_interp.is_not_null %1195 : !pdl.value -> ^bb2256, ^bb1
  ^bb2256:  // pred: ^bb2255
    %1198 = pdl_interp.get_value_type of %1190 : !pdl.type
    pdl_interp.are_equal %1198, %1178 : !pdl.type -> ^bb2257, ^bb1
  ^bb2257:  // pred: ^bb2256
    %1199 = pdl_interp.get_value_type of %1197 : !pdl.type
    pdl_interp.are_equal %1199, %1178 : !pdl.type -> ^bb2258, ^bb1
  ^bb2258:  // pred: ^bb2257
    %1200 = pdl_interp.get_value_type of %1192 : !pdl.type
    pdl_interp.are_equal %1200, %1178 : !pdl.type -> ^bb2259, ^bb1
  ^bb2259:  // pred: ^bb2258
    pdl_interp.is_not_null %1188 : !pdl.value -> ^bb2260, ^bb1
  ^bb2260:  // pred: ^bb2259
    pdl_interp.check_operation_name of %1189 is "arith.subf" -> ^bb2261, ^bb1
  ^bb2261:  // pred: ^bb2260
    pdl_interp.check_operand_count of %1189 is 2 -> ^bb2262, ^bb1
  ^bb2262:  // pred: ^bb2261
    pdl_interp.check_result_count of %1189 is 1 -> ^bb2263, ^bb1
  ^bb2263:  // pred: ^bb2262
    %1201 = pdl_interp.get_result 0 of %1189
    pdl_interp.is_not_null %1201 : !pdl.value -> ^bb2264, ^bb1
  ^bb2264:  // pred: ^bb2263
    pdl_interp.are_equal %1201, %1188 : !pdl.value -> ^bb2265, ^bb1
  ^bb2265:  // pred: ^bb2264
    pdl_interp.is_not_null %1193 : !pdl.value -> ^bb2266, ^bb1
  ^bb2266:  // pred: ^bb2265
    pdl_interp.check_operation_name of %1194 is "arith.constant" -> ^bb2267, ^bb1
  ^bb2267:  // pred: ^bb2266
    pdl_interp.check_operation_name of %1196 is "arith.constant" -> ^bb2268, ^bb1
  ^bb2268:  // pred: ^bb2267
    pdl_interp.check_operand_count of %1194 is 0 -> ^bb2269, ^bb1
  ^bb2269:  // pred: ^bb2268
    pdl_interp.check_operand_count of %1196 is 0 -> ^bb2270, ^bb1
  ^bb2270:  // pred: ^bb2269
    pdl_interp.check_result_count of %1194 is 1 -> ^bb2271, ^bb1
  ^bb2271:  // pred: ^bb2270
    pdl_interp.check_result_count of %1196 is 1 -> ^bb2272, ^bb1
  ^bb2272:  // pred: ^bb2271
    %1202 = pdl_interp.get_operand 0 of %1189
    pdl_interp.is_not_null %1202 : !pdl.value -> ^bb2273, ^bb1
  ^bb2273:  // pred: ^bb2272
    %1203 = pdl_interp.get_operand 1 of %1189
    pdl_interp.is_not_null %1203 : !pdl.value -> ^bb2274, ^bb1
  ^bb2274:  // pred: ^bb2273
    %1204 = pdl_interp.get_operand 0 of %1186
    pdl_interp.are_equal %1202, %1204 : !pdl.value -> ^bb2275, ^bb1
  ^bb2275:  // pred: ^bb2274
    %1205 = pdl_interp.get_operand 1 of %1186
    pdl_interp.are_equal %1203, %1205 : !pdl.value -> ^bb2276, ^bb1
  ^bb2276:  // pred: ^bb2275
    %1206 = pdl_interp.get_attribute "value" of %1194
    pdl_interp.is_not_null %1206 : !pdl.attribute -> ^bb2277, ^bb1
  ^bb2277:  // pred: ^bb2276
    %1207 = pdl_interp.get_attribute "value" of %1196
    pdl_interp.is_not_null %1207 : !pdl.attribute -> ^bb2278, ^bb1
  ^bb2278:  // pred: ^bb2277
    pdl_interp.check_attribute %1206 is 2.000000e+00 : f32 -> ^bb2279, ^bb1
  ^bb2279:  // pred: ^bb2278
    pdl_interp.check_attribute %1207 is 2.000000e+00 : f32 -> ^bb2280, ^bb1
  ^bb2280:  // pred: ^bb2279
    %1208 = pdl_interp.get_result 0 of %1194
    pdl_interp.is_not_null %1208 : !pdl.value -> ^bb2281, ^bb1
  ^bb2281:  // pred: ^bb2280
    %1209 = pdl_interp.get_result 0 of %1196
    pdl_interp.is_not_null %1209 : !pdl.value -> ^bb2282, ^bb1
  ^bb2282:  // pred: ^bb2281
    pdl_interp.are_equal %1208, %1193 : !pdl.value -> ^bb2283, ^bb1
  ^bb2283:  // pred: ^bb2282
    pdl_interp.are_equal %1209, %1195 : !pdl.value -> ^bb2284, ^bb1
  ^bb2284:  // pred: ^bb2283
    %1210 = pdl_interp.get_value_type of %1202 : !pdl.type
    pdl_interp.are_equal %1210, %1178 : !pdl.type -> ^bb2285, ^bb1
  ^bb2285:  // pred: ^bb2284
    %1211 = pdl_interp.get_value_type of %1203 : !pdl.type
    pdl_interp.are_equal %1211, %1178 : !pdl.type -> ^bb2286, ^bb1
  ^bb2286:  // pred: ^bb2285
    %1212 = pdl_interp.get_value_type of %1201 : !pdl.type
    pdl_interp.are_equal %1212, %1178 : !pdl.type -> ^bb2287, ^bb1
  ^bb2287:  // pred: ^bb2286
    %1213 = pdl_interp.get_value_type of %1208 : !pdl.type
    pdl_interp.are_equal %1213, %1178 : !pdl.type -> ^bb2288, ^bb1
  ^bb2288:  // pred: ^bb2287
    %1214 = pdl_interp.get_value_type of %1209 : !pdl.type
    pdl_interp.are_equal %1214, %1178 : !pdl.type -> ^bb2289, ^bb1
  ^bb2289:  // pred: ^bb2288
    pdl_interp.record_match @rewriters::@diff_cos_rev(%1202, %1203, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.subf"]), loc([%arg0, %2, %858, %1109, %1111, %1181, %1183, %1186, %1189, %1194, %1196]), root("arith.mulf") -> ^bb1
  ^bb2290:  // pred: ^bb2098
    pdl_interp.check_operand_count of %1109 is 1 -> ^bb2291, ^bb1
  ^bb2291:  // pred: ^bb2290
    pdl_interp.check_result_count of %1109 is 1 -> ^bb2292, ^bb1
  ^bb2292:  // pred: ^bb2291
    %1215 = pdl_interp.get_result 0 of %1109
    pdl_interp.is_not_null %1215 : !pdl.value -> ^bb2293, ^bb1
  ^bb2293:  // pred: ^bb2292
    pdl_interp.are_equal %1215, %1108 : !pdl.value -> ^bb2294, ^bb1
  ^bb2294:  // pred: ^bb2293
    pdl_interp.check_operation_name of %1111 is "math.cos" -> ^bb2295, ^bb1
  ^bb2295:  // pred: ^bb2294
    pdl_interp.check_operand_count of %1111 is 1 -> ^bb2296, ^bb1
  ^bb2296:  // pred: ^bb2295
    pdl_interp.check_result_count of %1111 is 1 -> ^bb2297, ^bb1
  ^bb2297:  // pred: ^bb2296
    %1216 = pdl_interp.get_result 0 of %1111
    pdl_interp.is_not_null %1216 : !pdl.value -> ^bb2298, ^bb1
  ^bb2298:  // pred: ^bb2297
    pdl_interp.are_equal %1216, %1110 : !pdl.value -> ^bb2299, ^bb1
  ^bb2299:  // pred: ^bb2298
    %1217 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1217 : !pdl.attribute -> ^bb2300, ^bb1
  ^bb2300:  // pred: ^bb2299
    pdl_interp.check_attribute %1217 is 2.000000e+00 : f32 -> ^bb2301, ^bb1
  ^bb2301:  // pred: ^bb2300
    %1218 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1218 is f32 -> ^bb2302, ^bb1
  ^bb2302:  // pred: ^bb2301
    %1219 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1218, %1219 : !pdl.type -> ^bb2303, ^bb1
  ^bb2303:  // pred: ^bb2302
    %1220 = pdl_interp.get_operand 0 of %1111
    %1221 = pdl_interp.get_defining_op of %1220 : !pdl.value
    pdl_interp.is_not_null %1221 : !pdl.operation -> ^bb2304, ^bb1
  ^bb2304:  // pred: ^bb2303
    %1222 = pdl_interp.get_operand 0 of %1109
    %1223 = pdl_interp.get_defining_op of %1222 : !pdl.value
    pdl_interp.is_not_null %1223 : !pdl.operation -> ^bb2305, ^bb1
  ^bb2305:  // pred: ^bb2304
    %1224 = pdl_interp.get_value_type of %1107 : !pdl.type
    pdl_interp.are_equal %1218, %1224 : !pdl.type -> ^bb2306, ^bb1
  ^bb2306:  // pred: ^bb2305
    pdl_interp.is_not_null %1222 : !pdl.value -> ^bb2307, ^bb1
  ^bb2307:  // pred: ^bb2306
    %1225 = pdl_interp.get_operand 0 of %1221
    %1226 = pdl_interp.get_defining_op of %1225 : !pdl.value
    pdl_interp.is_not_null %1226 : !pdl.operation -> ^bb2308, ^bb1
  ^bb2308:  // pred: ^bb2307
    %1227 = pdl_interp.get_value_type of %1215 : !pdl.type
    pdl_interp.are_equal %1227, %1218 : !pdl.type -> ^bb2309, ^bb1
  ^bb2309:  // pred: ^bb2308
    %1228 = pdl_interp.get_operand 0 of %1223
    %1229 = pdl_interp.get_defining_op of %1228 : !pdl.value
    pdl_interp.is_not_null %1229 : !pdl.operation -> ^bb2310, ^bb1
  ^bb2310:  // pred: ^bb2309
    pdl_interp.is_not_null %1220 : !pdl.value -> ^bb2311, ^bb1
  ^bb2311:  // pred: ^bb2310
    pdl_interp.check_operation_name of %1221 is "arith.divf" -> ^bb2312, ^bb1
  ^bb2312:  // pred: ^bb2311
    pdl_interp.check_operand_count of %1221 is 2 -> ^bb2313, ^bb1
  ^bb2313:  // pred: ^bb2312
    pdl_interp.check_result_count of %1221 is 1 -> ^bb2314, ^bb1
  ^bb2314:  // pred: ^bb2313
    %1230 = pdl_interp.get_result 0 of %1221
    pdl_interp.is_not_null %1230 : !pdl.value -> ^bb2315, ^bb1
  ^bb2315:  // pred: ^bb2314
    pdl_interp.are_equal %1230, %1220 : !pdl.value -> ^bb2316, ^bb1
  ^bb2316:  // pred: ^bb2315
    %1231 = pdl_interp.get_value_type of %1216 : !pdl.type
    pdl_interp.are_equal %1231, %1218 : !pdl.type -> ^bb2317, ^bb1
  ^bb2317:  // pred: ^bb2316
    pdl_interp.check_operation_name of %1223 is "arith.divf" -> ^bb2318, ^bb1
  ^bb2318:  // pred: ^bb2317
    pdl_interp.check_operand_count of %1223 is 2 -> ^bb2319, ^bb1
  ^bb2319:  // pred: ^bb2318
    pdl_interp.check_result_count of %1223 is 1 -> ^bb2320, ^bb1
  ^bb2320:  // pred: ^bb2319
    %1232 = pdl_interp.get_result 0 of %1223
    pdl_interp.is_not_null %1232 : !pdl.value -> ^bb2321, ^bb1
  ^bb2321:  // pred: ^bb2320
    pdl_interp.are_equal %1232, %1222 : !pdl.value -> ^bb2322, ^bb1
  ^bb2322:  // pred: ^bb2321
    %1233 = pdl_interp.get_operand 1 of %1223
    %1234 = pdl_interp.get_defining_op of %1233 : !pdl.value
    pdl_interp.is_not_null %1234 : !pdl.operation -> ^bb2323, ^bb1
  ^bb2323:  // pred: ^bb2322
    %1235 = pdl_interp.get_operand 1 of %1221
    %1236 = pdl_interp.get_defining_op of %1235 : !pdl.value
    pdl_interp.is_not_null %1236 : !pdl.operation -> ^bb2324, ^bb1
  ^bb2324:  // pred: ^bb2323
    pdl_interp.is_not_null %1225 : !pdl.value -> ^bb2325, ^bb1
  ^bb2325:  // pred: ^bb2324
    pdl_interp.check_operation_name of %1226 is "arith.subf" -> ^bb2326, ^bb1
  ^bb2326:  // pred: ^bb2325
    pdl_interp.check_operand_count of %1226 is 2 -> ^bb2327, ^bb1
  ^bb2327:  // pred: ^bb2326
    pdl_interp.check_result_count of %1226 is 1 -> ^bb2328, ^bb1
  ^bb2328:  // pred: ^bb2327
    %1237 = pdl_interp.get_result 0 of %1226
    pdl_interp.is_not_null %1237 : !pdl.value -> ^bb2329, ^bb1
  ^bb2329:  // pred: ^bb2328
    pdl_interp.are_equal %1237, %1225 : !pdl.value -> ^bb2330, ^bb1
  ^bb2330:  // pred: ^bb2329
    pdl_interp.is_not_null %1235 : !pdl.value -> ^bb2331, ^bb1
  ^bb2331:  // pred: ^bb2330
    %1238 = pdl_interp.get_value_type of %1230 : !pdl.type
    pdl_interp.are_equal %1238, %1218 : !pdl.type -> ^bb2332, ^bb1
  ^bb2332:  // pred: ^bb2331
    %1239 = pdl_interp.get_value_type of %1237 : !pdl.type
    pdl_interp.are_equal %1239, %1218 : !pdl.type -> ^bb2333, ^bb1
  ^bb2333:  // pred: ^bb2332
    %1240 = pdl_interp.get_value_type of %1232 : !pdl.type
    pdl_interp.are_equal %1240, %1218 : !pdl.type -> ^bb2334, ^bb1
  ^bb2334:  // pred: ^bb2333
    pdl_interp.is_not_null %1228 : !pdl.value -> ^bb2335, ^bb1
  ^bb2335:  // pred: ^bb2334
    pdl_interp.check_operation_name of %1229 is "arith.addf" -> ^bb2336, ^bb1
  ^bb2336:  // pred: ^bb2335
    pdl_interp.check_operand_count of %1229 is 2 -> ^bb2337, ^bb1
  ^bb2337:  // pred: ^bb2336
    pdl_interp.check_result_count of %1229 is 1 -> ^bb2338, ^bb1
  ^bb2338:  // pred: ^bb2337
    %1241 = pdl_interp.get_result 0 of %1229
    pdl_interp.is_not_null %1241 : !pdl.value -> ^bb2339, ^bb1
  ^bb2339:  // pred: ^bb2338
    pdl_interp.are_equal %1241, %1228 : !pdl.value -> ^bb2340, ^bb1
  ^bb2340:  // pred: ^bb2339
    pdl_interp.is_not_null %1233 : !pdl.value -> ^bb2341, ^bb1
  ^bb2341:  // pred: ^bb2340
    pdl_interp.check_operation_name of %1234 is "arith.constant" -> ^bb2342, ^bb1
  ^bb2342:  // pred: ^bb2341
    pdl_interp.check_operation_name of %1236 is "arith.constant" -> ^bb2343, ^bb1
  ^bb2343:  // pred: ^bb2342
    pdl_interp.check_operand_count of %1234 is 0 -> ^bb2344, ^bb1
  ^bb2344:  // pred: ^bb2343
    pdl_interp.check_operand_count of %1236 is 0 -> ^bb2345, ^bb1
  ^bb2345:  // pred: ^bb2344
    pdl_interp.check_result_count of %1234 is 1 -> ^bb2346, ^bb1
  ^bb2346:  // pred: ^bb2345
    pdl_interp.check_result_count of %1236 is 1 -> ^bb2347, ^bb1
  ^bb2347:  // pred: ^bb2346
    %1242 = pdl_interp.get_operand 0 of %1229
    pdl_interp.is_not_null %1242 : !pdl.value -> ^bb2348, ^bb1
  ^bb2348:  // pred: ^bb2347
    %1243 = pdl_interp.get_operand 1 of %1229
    pdl_interp.is_not_null %1243 : !pdl.value -> ^bb2349, ^bb1
  ^bb2349:  // pred: ^bb2348
    %1244 = pdl_interp.get_operand 0 of %1226
    pdl_interp.are_equal %1242, %1244 : !pdl.value -> ^bb2350, ^bb1
  ^bb2350:  // pred: ^bb2349
    %1245 = pdl_interp.get_operand 1 of %1226
    pdl_interp.are_equal %1243, %1245 : !pdl.value -> ^bb2351, ^bb1
  ^bb2351:  // pred: ^bb2350
    %1246 = pdl_interp.get_attribute "value" of %1234
    pdl_interp.is_not_null %1246 : !pdl.attribute -> ^bb2352, ^bb1
  ^bb2352:  // pred: ^bb2351
    %1247 = pdl_interp.get_attribute "value" of %1236
    pdl_interp.is_not_null %1247 : !pdl.attribute -> ^bb2353, ^bb1
  ^bb2353:  // pred: ^bb2352
    pdl_interp.check_attribute %1246 is 2.000000e+00 : f32 -> ^bb2354, ^bb1
  ^bb2354:  // pred: ^bb2353
    pdl_interp.check_attribute %1247 is 2.000000e+00 : f32 -> ^bb2355, ^bb1
  ^bb2355:  // pred: ^bb2354
    %1248 = pdl_interp.get_result 0 of %1234
    pdl_interp.is_not_null %1248 : !pdl.value -> ^bb2356, ^bb1
  ^bb2356:  // pred: ^bb2355
    %1249 = pdl_interp.get_result 0 of %1236
    pdl_interp.is_not_null %1249 : !pdl.value -> ^bb2357, ^bb1
  ^bb2357:  // pred: ^bb2356
    pdl_interp.are_equal %1248, %1233 : !pdl.value -> ^bb2358, ^bb1
  ^bb2358:  // pred: ^bb2357
    pdl_interp.are_equal %1249, %1235 : !pdl.value -> ^bb2359, ^bb1
  ^bb2359:  // pred: ^bb2358
    %1250 = pdl_interp.get_value_type of %1242 : !pdl.type
    pdl_interp.are_equal %1250, %1218 : !pdl.type -> ^bb2360, ^bb1
  ^bb2360:  // pred: ^bb2359
    %1251 = pdl_interp.get_value_type of %1243 : !pdl.type
    pdl_interp.are_equal %1251, %1218 : !pdl.type -> ^bb2361, ^bb1
  ^bb2361:  // pred: ^bb2360
    %1252 = pdl_interp.get_value_type of %1241 : !pdl.type
    pdl_interp.are_equal %1252, %1218 : !pdl.type -> ^bb2362, ^bb1
  ^bb2362:  // pred: ^bb2361
    %1253 = pdl_interp.get_value_type of %1248 : !pdl.type
    pdl_interp.are_equal %1253, %1218 : !pdl.type -> ^bb2363, ^bb1
  ^bb2363:  // pred: ^bb2362
    %1254 = pdl_interp.get_value_type of %1249 : !pdl.type
    pdl_interp.are_equal %1254, %1218 : !pdl.type -> ^bb2364, ^bb1
  ^bb2364:  // pred: ^bb2363
    pdl_interp.record_match @rewriters::@sum_cos_rev(%1242, %1243, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.addf"]), loc([%arg0, %2, %858, %1109, %1111, %1221, %1223, %1226, %1229, %1234, %1236]), root("arith.mulf") -> ^bb1
  ^bb2365:  // pred: ^bb2098
    pdl_interp.check_operand_count of %1109 is 1 -> ^bb2366, ^bb1
  ^bb2366:  // pred: ^bb2365
    pdl_interp.check_result_count of %1109 is 1 -> ^bb2367, ^bb1
  ^bb2367:  // pred: ^bb2366
    %1255 = pdl_interp.get_result 0 of %1109
    pdl_interp.is_not_null %1255 : !pdl.value -> ^bb2368, ^bb1
  ^bb2368:  // pred: ^bb2367
    pdl_interp.are_equal %1255, %1108 : !pdl.value -> ^bb2369, ^bb1
  ^bb2369:  // pred: ^bb2368
    pdl_interp.switch_operation_name of %1111 to ["math.sinh", "math.cosh"](^bb2370, ^bb2440) -> ^bb1
  ^bb2370:  // pred: ^bb2369
    pdl_interp.check_operand_count of %1111 is 1 -> ^bb2371, ^bb1
  ^bb2371:  // pred: ^bb2370
    pdl_interp.check_result_count of %1111 is 1 -> ^bb2372, ^bb1
  ^bb2372:  // pred: ^bb2371
    %1256 = pdl_interp.get_result 0 of %1111
    pdl_interp.is_not_null %1256 : !pdl.value -> ^bb2373, ^bb1
  ^bb2373:  // pred: ^bb2372
    pdl_interp.are_equal %1256, %1110 : !pdl.value -> ^bb2374, ^bb1
  ^bb2374:  // pred: ^bb2373
    %1257 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1257 : !pdl.attribute -> ^bb2375, ^bb1
  ^bb2375:  // pred: ^bb2374
    pdl_interp.check_attribute %1257 is 2.000000e+00 : f32 -> ^bb2376, ^bb1
  ^bb2376:  // pred: ^bb2375
    %1258 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1258 is f32 -> ^bb2377, ^bb1
  ^bb2377:  // pred: ^bb2376
    %1259 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1258, %1259 : !pdl.type -> ^bb2378, ^bb1
  ^bb2378:  // pred: ^bb2377
    %1260 = pdl_interp.get_operand 0 of %1111
    %1261 = pdl_interp.get_defining_op of %1260 : !pdl.value
    pdl_interp.is_not_null %1261 : !pdl.operation -> ^bb2379, ^bb1
  ^bb2379:  // pred: ^bb2378
    %1262 = pdl_interp.get_operand 0 of %1109
    %1263 = pdl_interp.get_defining_op of %1262 : !pdl.value
    pdl_interp.is_not_null %1263 : !pdl.operation -> ^bb2380, ^bb1
  ^bb2380:  // pred: ^bb2379
    %1264 = pdl_interp.get_value_type of %1107 : !pdl.type
    pdl_interp.are_equal %1258, %1264 : !pdl.type -> ^bb2381, ^bb1
  ^bb2381:  // pred: ^bb2380
    pdl_interp.is_not_null %1262 : !pdl.value -> ^bb2382, ^bb1
  ^bb2382:  // pred: ^bb2381
    %1265 = pdl_interp.get_operand 0 of %1261
    %1266 = pdl_interp.get_defining_op of %1265 : !pdl.value
    pdl_interp.is_not_null %1266 : !pdl.operation -> ^bb2383, ^bb1
  ^bb2383:  // pred: ^bb2382
    %1267 = pdl_interp.get_value_type of %1255 : !pdl.type
    pdl_interp.are_equal %1267, %1258 : !pdl.type -> ^bb2384, ^bb1
  ^bb2384:  // pred: ^bb2383
    %1268 = pdl_interp.get_operand 0 of %1263
    %1269 = pdl_interp.get_defining_op of %1268 : !pdl.value
    pdl_interp.is_not_null %1269 : !pdl.operation -> ^bb2385, ^bb1
  ^bb2385:  // pred: ^bb2384
    pdl_interp.is_not_null %1260 : !pdl.value -> ^bb2386, ^bb1
  ^bb2386:  // pred: ^bb2385
    pdl_interp.check_operation_name of %1261 is "arith.divf" -> ^bb2387, ^bb1
  ^bb2387:  // pred: ^bb2386
    pdl_interp.check_operand_count of %1261 is 2 -> ^bb2388, ^bb1
  ^bb2388:  // pred: ^bb2387
    pdl_interp.check_result_count of %1261 is 1 -> ^bb2389, ^bb1
  ^bb2389:  // pred: ^bb2388
    %1270 = pdl_interp.get_result 0 of %1261
    pdl_interp.is_not_null %1270 : !pdl.value -> ^bb2390, ^bb1
  ^bb2390:  // pred: ^bb2389
    pdl_interp.are_equal %1270, %1260 : !pdl.value -> ^bb2391, ^bb1
  ^bb2391:  // pred: ^bb2390
    %1271 = pdl_interp.get_value_type of %1256 : !pdl.type
    pdl_interp.are_equal %1271, %1258 : !pdl.type -> ^bb2392, ^bb1
  ^bb2392:  // pred: ^bb2391
    pdl_interp.check_operation_name of %1263 is "arith.divf" -> ^bb2393, ^bb1
  ^bb2393:  // pred: ^bb2392
    pdl_interp.check_operand_count of %1263 is 2 -> ^bb2394, ^bb1
  ^bb2394:  // pred: ^bb2393
    pdl_interp.check_result_count of %1263 is 1 -> ^bb2395, ^bb1
  ^bb2395:  // pred: ^bb2394
    %1272 = pdl_interp.get_result 0 of %1263
    pdl_interp.is_not_null %1272 : !pdl.value -> ^bb2396, ^bb1
  ^bb2396:  // pred: ^bb2395
    pdl_interp.are_equal %1272, %1262 : !pdl.value -> ^bb2397, ^bb1
  ^bb2397:  // pred: ^bb2396
    %1273 = pdl_interp.get_operand 1 of %1263
    %1274 = pdl_interp.get_defining_op of %1273 : !pdl.value
    pdl_interp.is_not_null %1274 : !pdl.operation -> ^bb2398, ^bb1
  ^bb2398:  // pred: ^bb2397
    %1275 = pdl_interp.get_operand 1 of %1261
    %1276 = pdl_interp.get_defining_op of %1275 : !pdl.value
    pdl_interp.is_not_null %1276 : !pdl.operation -> ^bb2399, ^bb1
  ^bb2399:  // pred: ^bb2398
    pdl_interp.is_not_null %1265 : !pdl.value -> ^bb2400, ^bb1
  ^bb2400:  // pred: ^bb2399
    pdl_interp.check_operation_name of %1266 is "arith.subf" -> ^bb2401, ^bb1
  ^bb2401:  // pred: ^bb2400
    pdl_interp.check_operand_count of %1266 is 2 -> ^bb2402, ^bb1
  ^bb2402:  // pred: ^bb2401
    pdl_interp.check_result_count of %1266 is 1 -> ^bb2403, ^bb1
  ^bb2403:  // pred: ^bb2402
    %1277 = pdl_interp.get_result 0 of %1266
    pdl_interp.is_not_null %1277 : !pdl.value -> ^bb2404, ^bb1
  ^bb2404:  // pred: ^bb2403
    pdl_interp.are_equal %1277, %1265 : !pdl.value -> ^bb2405, ^bb1
  ^bb2405:  // pred: ^bb2404
    pdl_interp.is_not_null %1275 : !pdl.value -> ^bb2406, ^bb1
  ^bb2406:  // pred: ^bb2405
    %1278 = pdl_interp.get_value_type of %1270 : !pdl.type
    pdl_interp.are_equal %1278, %1258 : !pdl.type -> ^bb2407, ^bb1
  ^bb2407:  // pred: ^bb2406
    %1279 = pdl_interp.get_value_type of %1277 : !pdl.type
    pdl_interp.are_equal %1279, %1258 : !pdl.type -> ^bb2408, ^bb1
  ^bb2408:  // pred: ^bb2407
    %1280 = pdl_interp.get_value_type of %1272 : !pdl.type
    pdl_interp.are_equal %1280, %1258 : !pdl.type -> ^bb2409, ^bb1
  ^bb2409:  // pred: ^bb2408
    pdl_interp.is_not_null %1268 : !pdl.value -> ^bb2410, ^bb1
  ^bb2410:  // pred: ^bb2409
    pdl_interp.check_operation_name of %1269 is "arith.addf" -> ^bb2411, ^bb1
  ^bb2411:  // pred: ^bb2410
    pdl_interp.check_operand_count of %1269 is 2 -> ^bb2412, ^bb1
  ^bb2412:  // pred: ^bb2411
    pdl_interp.check_result_count of %1269 is 1 -> ^bb2413, ^bb1
  ^bb2413:  // pred: ^bb2412
    %1281 = pdl_interp.get_result 0 of %1269
    pdl_interp.is_not_null %1281 : !pdl.value -> ^bb2414, ^bb1
  ^bb2414:  // pred: ^bb2413
    pdl_interp.are_equal %1281, %1268 : !pdl.value -> ^bb2415, ^bb1
  ^bb2415:  // pred: ^bb2414
    pdl_interp.is_not_null %1273 : !pdl.value -> ^bb2416, ^bb1
  ^bb2416:  // pred: ^bb2415
    pdl_interp.check_operation_name of %1274 is "arith.constant" -> ^bb2417, ^bb1
  ^bb2417:  // pred: ^bb2416
    pdl_interp.check_operation_name of %1276 is "arith.constant" -> ^bb2418, ^bb1
  ^bb2418:  // pred: ^bb2417
    pdl_interp.check_operand_count of %1274 is 0 -> ^bb2419, ^bb1
  ^bb2419:  // pred: ^bb2418
    pdl_interp.check_operand_count of %1276 is 0 -> ^bb2420, ^bb1
  ^bb2420:  // pred: ^bb2419
    pdl_interp.check_result_count of %1274 is 1 -> ^bb2421, ^bb1
  ^bb2421:  // pred: ^bb2420
    pdl_interp.check_result_count of %1276 is 1 -> ^bb2422, ^bb1
  ^bb2422:  // pred: ^bb2421
    %1282 = pdl_interp.get_operand 0 of %1269
    pdl_interp.is_not_null %1282 : !pdl.value -> ^bb2423, ^bb1
  ^bb2423:  // pred: ^bb2422
    %1283 = pdl_interp.get_operand 1 of %1269
    pdl_interp.is_not_null %1283 : !pdl.value -> ^bb2424, ^bb1
  ^bb2424:  // pred: ^bb2423
    %1284 = pdl_interp.get_operand 0 of %1266
    pdl_interp.are_equal %1282, %1284 : !pdl.value -> ^bb2425, ^bb1
  ^bb2425:  // pred: ^bb2424
    %1285 = pdl_interp.get_operand 1 of %1266
    pdl_interp.are_equal %1283, %1285 : !pdl.value -> ^bb2426, ^bb1
  ^bb2426:  // pred: ^bb2425
    %1286 = pdl_interp.get_attribute "value" of %1274
    pdl_interp.is_not_null %1286 : !pdl.attribute -> ^bb2427, ^bb1
  ^bb2427:  // pred: ^bb2426
    %1287 = pdl_interp.get_attribute "value" of %1276
    pdl_interp.is_not_null %1287 : !pdl.attribute -> ^bb2428, ^bb1
  ^bb2428:  // pred: ^bb2427
    pdl_interp.check_attribute %1286 is 2.000000e+00 : f32 -> ^bb2429, ^bb1
  ^bb2429:  // pred: ^bb2428
    pdl_interp.check_attribute %1287 is 2.000000e+00 : f32 -> ^bb2430, ^bb1
  ^bb2430:  // pred: ^bb2429
    %1288 = pdl_interp.get_result 0 of %1274
    pdl_interp.is_not_null %1288 : !pdl.value -> ^bb2431, ^bb1
  ^bb2431:  // pred: ^bb2430
    %1289 = pdl_interp.get_result 0 of %1276
    pdl_interp.is_not_null %1289 : !pdl.value -> ^bb2432, ^bb1
  ^bb2432:  // pred: ^bb2431
    pdl_interp.are_equal %1288, %1273 : !pdl.value -> ^bb2433, ^bb1
  ^bb2433:  // pred: ^bb2432
    pdl_interp.are_equal %1289, %1275 : !pdl.value -> ^bb2434, ^bb1
  ^bb2434:  // pred: ^bb2433
    %1290 = pdl_interp.get_value_type of %1282 : !pdl.type
    pdl_interp.are_equal %1290, %1258 : !pdl.type -> ^bb2435, ^bb1
  ^bb2435:  // pred: ^bb2434
    %1291 = pdl_interp.get_value_type of %1283 : !pdl.type
    pdl_interp.are_equal %1291, %1258 : !pdl.type -> ^bb2436, ^bb1
  ^bb2436:  // pred: ^bb2435
    %1292 = pdl_interp.get_value_type of %1281 : !pdl.type
    pdl_interp.are_equal %1292, %1258 : !pdl.type -> ^bb2437, ^bb1
  ^bb2437:  // pred: ^bb2436
    %1293 = pdl_interp.get_value_type of %1288 : !pdl.type
    pdl_interp.are_equal %1293, %1258 : !pdl.type -> ^bb2438, ^bb1
  ^bb2438:  // pred: ^bb2437
    %1294 = pdl_interp.get_value_type of %1289 : !pdl.type
    pdl_interp.are_equal %1294, %1258 : !pdl.type -> ^bb2439, ^bb1
  ^bb2439:  // pred: ^bb2438
    pdl_interp.record_match @rewriters::@diff_cosh_rev(%1282, %1283, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh", "math.cosh", "arith.subf"]), loc([%arg0, %2, %858, %1109, %1111, %1261, %1263, %1266, %1269, %1274, %1276]), root("arith.mulf") -> ^bb1
  ^bb2440:  // pred: ^bb2369
    pdl_interp.check_operand_count of %1111 is 1 -> ^bb2441, ^bb1
  ^bb2441:  // pred: ^bb2440
    pdl_interp.check_result_count of %1111 is 1 -> ^bb2442, ^bb1
  ^bb2442:  // pred: ^bb2441
    %1295 = pdl_interp.get_result 0 of %1111
    pdl_interp.is_not_null %1295 : !pdl.value -> ^bb2443, ^bb1
  ^bb2443:  // pred: ^bb2442
    pdl_interp.are_equal %1295, %1110 : !pdl.value -> ^bb2444, ^bb1
  ^bb2444:  // pred: ^bb2443
    %1296 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1296 : !pdl.attribute -> ^bb2445, ^bb1
  ^bb2445:  // pred: ^bb2444
    pdl_interp.check_attribute %1296 is 2.000000e+00 : f32 -> ^bb2446, ^bb1
  ^bb2446:  // pred: ^bb2445
    %1297 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1297 is f32 -> ^bb2447, ^bb1
  ^bb2447:  // pred: ^bb2446
    %1298 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1297, %1298 : !pdl.type -> ^bb2448, ^bb1
  ^bb2448:  // pred: ^bb2447
    %1299 = pdl_interp.get_value_type of %1107 : !pdl.type
    pdl_interp.are_equal %1297, %1299 : !pdl.type -> ^bb2511, ^bb2449
  ^bb2449:  // 7 preds: ^bb2448, ^bb2511, ^bb2512, ^bb2513, ^bb2514, ^bb2515, ^bb2516
    %1300 = pdl_interp.get_operand 0 of %1111
    %1301 = pdl_interp.get_defining_op of %1300 : !pdl.value
    pdl_interp.is_not_null %1301 : !pdl.operation -> ^bb2450, ^bb1
  ^bb2450:  // pred: ^bb2449
    %1302 = pdl_interp.get_operand 0 of %1109
    %1303 = pdl_interp.get_defining_op of %1302 : !pdl.value
    pdl_interp.is_not_null %1303 : !pdl.operation -> ^bb2451, ^bb1
  ^bb2451:  // pred: ^bb2450
    %1304 = pdl_interp.get_value_type of %1107 : !pdl.type
    pdl_interp.are_equal %1297, %1304 : !pdl.type -> ^bb2452, ^bb1
  ^bb2452:  // pred: ^bb2451
    pdl_interp.is_not_null %1302 : !pdl.value -> ^bb2453, ^bb1
  ^bb2453:  // pred: ^bb2452
    %1305 = pdl_interp.get_operand 0 of %1301
    %1306 = pdl_interp.get_defining_op of %1305 : !pdl.value
    pdl_interp.is_not_null %1306 : !pdl.operation -> ^bb2454, ^bb1
  ^bb2454:  // pred: ^bb2453
    %1307 = pdl_interp.get_value_type of %1255 : !pdl.type
    pdl_interp.are_equal %1307, %1297 : !pdl.type -> ^bb2455, ^bb1
  ^bb2455:  // pred: ^bb2454
    %1308 = pdl_interp.get_operand 0 of %1303
    %1309 = pdl_interp.get_defining_op of %1308 : !pdl.value
    pdl_interp.is_not_null %1309 : !pdl.operation -> ^bb2456, ^bb1
  ^bb2456:  // pred: ^bb2455
    pdl_interp.is_not_null %1300 : !pdl.value -> ^bb2457, ^bb1
  ^bb2457:  // pred: ^bb2456
    pdl_interp.check_operation_name of %1301 is "arith.divf" -> ^bb2458, ^bb1
  ^bb2458:  // pred: ^bb2457
    pdl_interp.check_operand_count of %1301 is 2 -> ^bb2459, ^bb1
  ^bb2459:  // pred: ^bb2458
    pdl_interp.check_result_count of %1301 is 1 -> ^bb2460, ^bb1
  ^bb2460:  // pred: ^bb2459
    %1310 = pdl_interp.get_result 0 of %1301
    pdl_interp.is_not_null %1310 : !pdl.value -> ^bb2461, ^bb1
  ^bb2461:  // pred: ^bb2460
    pdl_interp.are_equal %1310, %1300 : !pdl.value -> ^bb2462, ^bb1
  ^bb2462:  // pred: ^bb2461
    %1311 = pdl_interp.get_value_type of %1295 : !pdl.type
    pdl_interp.are_equal %1311, %1297 : !pdl.type -> ^bb2463, ^bb1
  ^bb2463:  // pred: ^bb2462
    pdl_interp.check_operation_name of %1303 is "arith.divf" -> ^bb2464, ^bb1
  ^bb2464:  // pred: ^bb2463
    pdl_interp.check_operand_count of %1303 is 2 -> ^bb2465, ^bb1
  ^bb2465:  // pred: ^bb2464
    pdl_interp.check_result_count of %1303 is 1 -> ^bb2466, ^bb1
  ^bb2466:  // pred: ^bb2465
    %1312 = pdl_interp.get_result 0 of %1303
    pdl_interp.is_not_null %1312 : !pdl.value -> ^bb2467, ^bb1
  ^bb2467:  // pred: ^bb2466
    pdl_interp.are_equal %1312, %1302 : !pdl.value -> ^bb2468, ^bb1
  ^bb2468:  // pred: ^bb2467
    %1313 = pdl_interp.get_operand 1 of %1303
    %1314 = pdl_interp.get_defining_op of %1313 : !pdl.value
    pdl_interp.is_not_null %1314 : !pdl.operation -> ^bb2469, ^bb1
  ^bb2469:  // pred: ^bb2468
    %1315 = pdl_interp.get_operand 1 of %1301
    %1316 = pdl_interp.get_defining_op of %1315 : !pdl.value
    pdl_interp.is_not_null %1316 : !pdl.operation -> ^bb2470, ^bb1
  ^bb2470:  // pred: ^bb2469
    pdl_interp.is_not_null %1305 : !pdl.value -> ^bb2471, ^bb1
  ^bb2471:  // pred: ^bb2470
    pdl_interp.check_operation_name of %1306 is "arith.subf" -> ^bb2472, ^bb1
  ^bb2472:  // pred: ^bb2471
    pdl_interp.check_operand_count of %1306 is 2 -> ^bb2473, ^bb1
  ^bb2473:  // pred: ^bb2472
    pdl_interp.check_result_count of %1306 is 1 -> ^bb2474, ^bb1
  ^bb2474:  // pred: ^bb2473
    %1317 = pdl_interp.get_result 0 of %1306
    pdl_interp.is_not_null %1317 : !pdl.value -> ^bb2475, ^bb1
  ^bb2475:  // pred: ^bb2474
    pdl_interp.are_equal %1317, %1305 : !pdl.value -> ^bb2476, ^bb1
  ^bb2476:  // pred: ^bb2475
    pdl_interp.is_not_null %1315 : !pdl.value -> ^bb2477, ^bb1
  ^bb2477:  // pred: ^bb2476
    %1318 = pdl_interp.get_value_type of %1310 : !pdl.type
    pdl_interp.are_equal %1318, %1297 : !pdl.type -> ^bb2478, ^bb1
  ^bb2478:  // pred: ^bb2477
    %1319 = pdl_interp.get_value_type of %1317 : !pdl.type
    pdl_interp.are_equal %1319, %1297 : !pdl.type -> ^bb2479, ^bb1
  ^bb2479:  // pred: ^bb2478
    %1320 = pdl_interp.get_value_type of %1312 : !pdl.type
    pdl_interp.are_equal %1320, %1297 : !pdl.type -> ^bb2480, ^bb1
  ^bb2480:  // pred: ^bb2479
    pdl_interp.is_not_null %1308 : !pdl.value -> ^bb2481, ^bb1
  ^bb2481:  // pred: ^bb2480
    pdl_interp.check_operation_name of %1309 is "arith.addf" -> ^bb2482, ^bb1
  ^bb2482:  // pred: ^bb2481
    pdl_interp.check_operand_count of %1309 is 2 -> ^bb2483, ^bb1
  ^bb2483:  // pred: ^bb2482
    pdl_interp.check_result_count of %1309 is 1 -> ^bb2484, ^bb1
  ^bb2484:  // pred: ^bb2483
    %1321 = pdl_interp.get_result 0 of %1309
    pdl_interp.is_not_null %1321 : !pdl.value -> ^bb2485, ^bb1
  ^bb2485:  // pred: ^bb2484
    pdl_interp.are_equal %1321, %1308 : !pdl.value -> ^bb2486, ^bb1
  ^bb2486:  // pred: ^bb2485
    pdl_interp.is_not_null %1313 : !pdl.value -> ^bb2487, ^bb1
  ^bb2487:  // pred: ^bb2486
    pdl_interp.check_operation_name of %1314 is "arith.constant" -> ^bb2488, ^bb1
  ^bb2488:  // pred: ^bb2487
    pdl_interp.check_operation_name of %1316 is "arith.constant" -> ^bb2489, ^bb1
  ^bb2489:  // pred: ^bb2488
    pdl_interp.check_operand_count of %1314 is 0 -> ^bb2490, ^bb1
  ^bb2490:  // pred: ^bb2489
    pdl_interp.check_operand_count of %1316 is 0 -> ^bb2491, ^bb1
  ^bb2491:  // pred: ^bb2490
    pdl_interp.check_result_count of %1314 is 1 -> ^bb2492, ^bb1
  ^bb2492:  // pred: ^bb2491
    pdl_interp.check_result_count of %1316 is 1 -> ^bb2493, ^bb1
  ^bb2493:  // pred: ^bb2492
    %1322 = pdl_interp.get_operand 0 of %1309
    pdl_interp.is_not_null %1322 : !pdl.value -> ^bb2494, ^bb1
  ^bb2494:  // pred: ^bb2493
    %1323 = pdl_interp.get_operand 1 of %1309
    pdl_interp.is_not_null %1323 : !pdl.value -> ^bb2495, ^bb1
  ^bb2495:  // pred: ^bb2494
    %1324 = pdl_interp.get_operand 0 of %1306
    pdl_interp.are_equal %1322, %1324 : !pdl.value -> ^bb2496, ^bb1
  ^bb2496:  // pred: ^bb2495
    %1325 = pdl_interp.get_operand 1 of %1306
    pdl_interp.are_equal %1323, %1325 : !pdl.value -> ^bb2497, ^bb1
  ^bb2497:  // pred: ^bb2496
    %1326 = pdl_interp.get_attribute "value" of %1314
    pdl_interp.is_not_null %1326 : !pdl.attribute -> ^bb2498, ^bb1
  ^bb2498:  // pred: ^bb2497
    %1327 = pdl_interp.get_attribute "value" of %1316
    pdl_interp.is_not_null %1327 : !pdl.attribute -> ^bb2499, ^bb1
  ^bb2499:  // pred: ^bb2498
    pdl_interp.check_attribute %1326 is 2.000000e+00 : f32 -> ^bb2500, ^bb1
  ^bb2500:  // pred: ^bb2499
    pdl_interp.check_attribute %1327 is 2.000000e+00 : f32 -> ^bb2501, ^bb1
  ^bb2501:  // pred: ^bb2500
    %1328 = pdl_interp.get_result 0 of %1314
    pdl_interp.is_not_null %1328 : !pdl.value -> ^bb2502, ^bb1
  ^bb2502:  // pred: ^bb2501
    %1329 = pdl_interp.get_result 0 of %1316
    pdl_interp.is_not_null %1329 : !pdl.value -> ^bb2503, ^bb1
  ^bb2503:  // pred: ^bb2502
    pdl_interp.are_equal %1328, %1313 : !pdl.value -> ^bb2504, ^bb1
  ^bb2504:  // pred: ^bb2503
    pdl_interp.are_equal %1329, %1315 : !pdl.value -> ^bb2505, ^bb1
  ^bb2505:  // pred: ^bb2504
    %1330 = pdl_interp.get_value_type of %1322 : !pdl.type
    pdl_interp.are_equal %1330, %1297 : !pdl.type -> ^bb2506, ^bb1
  ^bb2506:  // pred: ^bb2505
    %1331 = pdl_interp.get_value_type of %1323 : !pdl.type
    pdl_interp.are_equal %1331, %1297 : !pdl.type -> ^bb2507, ^bb1
  ^bb2507:  // pred: ^bb2506
    %1332 = pdl_interp.get_value_type of %1321 : !pdl.type
    pdl_interp.are_equal %1332, %1297 : !pdl.type -> ^bb2508, ^bb1
  ^bb2508:  // pred: ^bb2507
    %1333 = pdl_interp.get_value_type of %1328 : !pdl.type
    pdl_interp.are_equal %1333, %1297 : !pdl.type -> ^bb2509, ^bb1
  ^bb2509:  // pred: ^bb2508
    %1334 = pdl_interp.get_value_type of %1329 : !pdl.type
    pdl_interp.are_equal %1334, %1297 : !pdl.type -> ^bb2510, ^bb1
  ^bb2510:  // pred: ^bb2509
    pdl_interp.record_match @rewriters::@sum_sinh_rev(%1322, %1323, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sinh", "math.sinh", "arith.addf"]), loc([%arg0, %2, %858, %1109, %1111, %1301, %1303, %1306, %1309, %1314, %1316]), root("arith.mulf") -> ^bb1
  ^bb2511:  // pred: ^bb2448
    %1335 = pdl_interp.get_operand 0 of %1109
    pdl_interp.is_not_null %1335 : !pdl.value -> ^bb2512, ^bb2449
  ^bb2512:  // pred: ^bb2511
    %1336 = pdl_interp.get_value_type of %1255 : !pdl.type
    pdl_interp.are_equal %1336, %1297 : !pdl.type -> ^bb2513, ^bb2449
  ^bb2513:  // pred: ^bb2512
    %1337 = pdl_interp.get_value_type of %1295 : !pdl.type
    pdl_interp.are_equal %1337, %1297 : !pdl.type -> ^bb2514, ^bb2449
  ^bb2514:  // pred: ^bb2513
    %1338 = pdl_interp.get_operand 0 of %1111
    pdl_interp.are_equal %1335, %1338 : !pdl.value -> ^bb2515, ^bb2449
  ^bb2515:  // pred: ^bb2514
    %1339 = pdl_interp.get_value_type of %1335 : !pdl.type
    pdl_interp.are_equal %1339, %1297 : !pdl.type -> ^bb2516, ^bb2449
  ^bb2516:  // pred: ^bb2515
    pdl_interp.record_match @rewriters::@sinh_2_rev(%1335, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.sinh"]), loc([%arg0, %2, %858, %1109, %1111]), root("arith.mulf") -> ^bb2449
  ^bb2517:  // pred: ^bb2098
    pdl_interp.check_operand_count of %1109 is 1 -> ^bb2518, ^bb1
  ^bb2518:  // pred: ^bb2517
    pdl_interp.check_result_count of %1109 is 1 -> ^bb2519, ^bb1
  ^bb2519:  // pred: ^bb2518
    %1340 = pdl_interp.get_result 0 of %1109
    pdl_interp.is_not_null %1340 : !pdl.value -> ^bb2520, ^bb1
  ^bb2520:  // pred: ^bb2519
    pdl_interp.are_equal %1340, %1108 : !pdl.value -> ^bb2521, ^bb1
  ^bb2521:  // pred: ^bb2520
    pdl_interp.switch_operation_name of %1111 to ["math.sinh", "math.cosh"](^bb2522, ^bb2592) -> ^bb1
  ^bb2522:  // pred: ^bb2521
    pdl_interp.check_operand_count of %1111 is 1 -> ^bb2523, ^bb1
  ^bb2523:  // pred: ^bb2522
    pdl_interp.check_result_count of %1111 is 1 -> ^bb2524, ^bb1
  ^bb2524:  // pred: ^bb2523
    %1341 = pdl_interp.get_result 0 of %1111
    pdl_interp.is_not_null %1341 : !pdl.value -> ^bb2525, ^bb1
  ^bb2525:  // pred: ^bb2524
    pdl_interp.are_equal %1341, %1110 : !pdl.value -> ^bb2526, ^bb1
  ^bb2526:  // pred: ^bb2525
    %1342 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1342 : !pdl.attribute -> ^bb2527, ^bb1
  ^bb2527:  // pred: ^bb2526
    pdl_interp.check_attribute %1342 is 2.000000e+00 : f32 -> ^bb2528, ^bb1
  ^bb2528:  // pred: ^bb2527
    %1343 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1343 is f32 -> ^bb2529, ^bb1
  ^bb2529:  // pred: ^bb2528
    %1344 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1343, %1344 : !pdl.type -> ^bb2530, ^bb1
  ^bb2530:  // pred: ^bb2529
    %1345 = pdl_interp.get_operand 0 of %1111
    %1346 = pdl_interp.get_defining_op of %1345 : !pdl.value
    pdl_interp.is_not_null %1346 : !pdl.operation -> ^bb2531, ^bb1
  ^bb2531:  // pred: ^bb2530
    %1347 = pdl_interp.get_operand 0 of %1109
    %1348 = pdl_interp.get_defining_op of %1347 : !pdl.value
    pdl_interp.is_not_null %1348 : !pdl.operation -> ^bb2532, ^bb1
  ^bb2532:  // pred: ^bb2531
    %1349 = pdl_interp.get_value_type of %1107 : !pdl.type
    pdl_interp.are_equal %1343, %1349 : !pdl.type -> ^bb2533, ^bb1
  ^bb2533:  // pred: ^bb2532
    pdl_interp.is_not_null %1347 : !pdl.value -> ^bb2534, ^bb1
  ^bb2534:  // pred: ^bb2533
    %1350 = pdl_interp.get_operand 0 of %1346
    %1351 = pdl_interp.get_defining_op of %1350 : !pdl.value
    pdl_interp.is_not_null %1351 : !pdl.operation -> ^bb2535, ^bb1
  ^bb2535:  // pred: ^bb2534
    %1352 = pdl_interp.get_value_type of %1340 : !pdl.type
    pdl_interp.are_equal %1352, %1343 : !pdl.type -> ^bb2536, ^bb1
  ^bb2536:  // pred: ^bb2535
    %1353 = pdl_interp.get_operand 0 of %1348
    %1354 = pdl_interp.get_defining_op of %1353 : !pdl.value
    pdl_interp.is_not_null %1354 : !pdl.operation -> ^bb2537, ^bb1
  ^bb2537:  // pred: ^bb2536
    pdl_interp.is_not_null %1345 : !pdl.value -> ^bb2538, ^bb1
  ^bb2538:  // pred: ^bb2537
    pdl_interp.check_operation_name of %1346 is "arith.divf" -> ^bb2539, ^bb1
  ^bb2539:  // pred: ^bb2538
    pdl_interp.check_operand_count of %1346 is 2 -> ^bb2540, ^bb1
  ^bb2540:  // pred: ^bb2539
    pdl_interp.check_result_count of %1346 is 1 -> ^bb2541, ^bb1
  ^bb2541:  // pred: ^bb2540
    %1355 = pdl_interp.get_result 0 of %1346
    pdl_interp.is_not_null %1355 : !pdl.value -> ^bb2542, ^bb1
  ^bb2542:  // pred: ^bb2541
    pdl_interp.are_equal %1355, %1345 : !pdl.value -> ^bb2543, ^bb1
  ^bb2543:  // pred: ^bb2542
    %1356 = pdl_interp.get_value_type of %1341 : !pdl.type
    pdl_interp.are_equal %1356, %1343 : !pdl.type -> ^bb2544, ^bb1
  ^bb2544:  // pred: ^bb2543
    pdl_interp.check_operation_name of %1348 is "arith.divf" -> ^bb2545, ^bb1
  ^bb2545:  // pred: ^bb2544
    pdl_interp.check_operand_count of %1348 is 2 -> ^bb2546, ^bb1
  ^bb2546:  // pred: ^bb2545
    pdl_interp.check_result_count of %1348 is 1 -> ^bb2547, ^bb1
  ^bb2547:  // pred: ^bb2546
    %1357 = pdl_interp.get_result 0 of %1348
    pdl_interp.is_not_null %1357 : !pdl.value -> ^bb2548, ^bb1
  ^bb2548:  // pred: ^bb2547
    pdl_interp.are_equal %1357, %1347 : !pdl.value -> ^bb2549, ^bb1
  ^bb2549:  // pred: ^bb2548
    %1358 = pdl_interp.get_operand 1 of %1348
    %1359 = pdl_interp.get_defining_op of %1358 : !pdl.value
    pdl_interp.is_not_null %1359 : !pdl.operation -> ^bb2550, ^bb1
  ^bb2550:  // pred: ^bb2549
    %1360 = pdl_interp.get_operand 1 of %1346
    %1361 = pdl_interp.get_defining_op of %1360 : !pdl.value
    pdl_interp.is_not_null %1361 : !pdl.operation -> ^bb2551, ^bb1
  ^bb2551:  // pred: ^bb2550
    pdl_interp.is_not_null %1350 : !pdl.value -> ^bb2552, ^bb1
  ^bb2552:  // pred: ^bb2551
    pdl_interp.check_operation_name of %1351 is "arith.subf" -> ^bb2553, ^bb1
  ^bb2553:  // pred: ^bb2552
    pdl_interp.check_operand_count of %1351 is 2 -> ^bb2554, ^bb1
  ^bb2554:  // pred: ^bb2553
    pdl_interp.check_result_count of %1351 is 1 -> ^bb2555, ^bb1
  ^bb2555:  // pred: ^bb2554
    %1362 = pdl_interp.get_result 0 of %1351
    pdl_interp.is_not_null %1362 : !pdl.value -> ^bb2556, ^bb1
  ^bb2556:  // pred: ^bb2555
    pdl_interp.are_equal %1362, %1350 : !pdl.value -> ^bb2557, ^bb1
  ^bb2557:  // pred: ^bb2556
    pdl_interp.is_not_null %1360 : !pdl.value -> ^bb2558, ^bb1
  ^bb2558:  // pred: ^bb2557
    %1363 = pdl_interp.get_value_type of %1355 : !pdl.type
    pdl_interp.are_equal %1363, %1343 : !pdl.type -> ^bb2559, ^bb1
  ^bb2559:  // pred: ^bb2558
    %1364 = pdl_interp.get_value_type of %1362 : !pdl.type
    pdl_interp.are_equal %1364, %1343 : !pdl.type -> ^bb2560, ^bb1
  ^bb2560:  // pred: ^bb2559
    %1365 = pdl_interp.get_value_type of %1357 : !pdl.type
    pdl_interp.are_equal %1365, %1343 : !pdl.type -> ^bb2561, ^bb1
  ^bb2561:  // pred: ^bb2560
    pdl_interp.is_not_null %1353 : !pdl.value -> ^bb2562, ^bb1
  ^bb2562:  // pred: ^bb2561
    pdl_interp.check_operation_name of %1354 is "arith.addf" -> ^bb2563, ^bb1
  ^bb2563:  // pred: ^bb2562
    pdl_interp.check_operand_count of %1354 is 2 -> ^bb2564, ^bb1
  ^bb2564:  // pred: ^bb2563
    pdl_interp.check_result_count of %1354 is 1 -> ^bb2565, ^bb1
  ^bb2565:  // pred: ^bb2564
    %1366 = pdl_interp.get_result 0 of %1354
    pdl_interp.is_not_null %1366 : !pdl.value -> ^bb2566, ^bb1
  ^bb2566:  // pred: ^bb2565
    pdl_interp.are_equal %1366, %1353 : !pdl.value -> ^bb2567, ^bb1
  ^bb2567:  // pred: ^bb2566
    pdl_interp.is_not_null %1358 : !pdl.value -> ^bb2568, ^bb1
  ^bb2568:  // pred: ^bb2567
    pdl_interp.check_operation_name of %1359 is "arith.constant" -> ^bb2569, ^bb1
  ^bb2569:  // pred: ^bb2568
    pdl_interp.check_operation_name of %1361 is "arith.constant" -> ^bb2570, ^bb1
  ^bb2570:  // pred: ^bb2569
    pdl_interp.check_operand_count of %1359 is 0 -> ^bb2571, ^bb1
  ^bb2571:  // pred: ^bb2570
    pdl_interp.check_operand_count of %1361 is 0 -> ^bb2572, ^bb1
  ^bb2572:  // pred: ^bb2571
    pdl_interp.check_result_count of %1359 is 1 -> ^bb2573, ^bb1
  ^bb2573:  // pred: ^bb2572
    pdl_interp.check_result_count of %1361 is 1 -> ^bb2574, ^bb1
  ^bb2574:  // pred: ^bb2573
    %1367 = pdl_interp.get_operand 0 of %1354
    pdl_interp.is_not_null %1367 : !pdl.value -> ^bb2575, ^bb1
  ^bb2575:  // pred: ^bb2574
    %1368 = pdl_interp.get_operand 1 of %1354
    pdl_interp.is_not_null %1368 : !pdl.value -> ^bb2576, ^bb1
  ^bb2576:  // pred: ^bb2575
    %1369 = pdl_interp.get_operand 0 of %1351
    pdl_interp.are_equal %1367, %1369 : !pdl.value -> ^bb2577, ^bb1
  ^bb2577:  // pred: ^bb2576
    %1370 = pdl_interp.get_operand 1 of %1351
    pdl_interp.are_equal %1368, %1370 : !pdl.value -> ^bb2578, ^bb1
  ^bb2578:  // pred: ^bb2577
    %1371 = pdl_interp.get_attribute "value" of %1359
    pdl_interp.is_not_null %1371 : !pdl.attribute -> ^bb2579, ^bb1
  ^bb2579:  // pred: ^bb2578
    %1372 = pdl_interp.get_attribute "value" of %1361
    pdl_interp.is_not_null %1372 : !pdl.attribute -> ^bb2580, ^bb1
  ^bb2580:  // pred: ^bb2579
    pdl_interp.check_attribute %1371 is 2.000000e+00 : f32 -> ^bb2581, ^bb1
  ^bb2581:  // pred: ^bb2580
    pdl_interp.check_attribute %1372 is 2.000000e+00 : f32 -> ^bb2582, ^bb1
  ^bb2582:  // pred: ^bb2581
    %1373 = pdl_interp.get_result 0 of %1359
    pdl_interp.is_not_null %1373 : !pdl.value -> ^bb2583, ^bb1
  ^bb2583:  // pred: ^bb2582
    %1374 = pdl_interp.get_result 0 of %1361
    pdl_interp.is_not_null %1374 : !pdl.value -> ^bb2584, ^bb1
  ^bb2584:  // pred: ^bb2583
    pdl_interp.are_equal %1373, %1358 : !pdl.value -> ^bb2585, ^bb1
  ^bb2585:  // pred: ^bb2584
    pdl_interp.are_equal %1374, %1360 : !pdl.value -> ^bb2586, ^bb1
  ^bb2586:  // pred: ^bb2585
    %1375 = pdl_interp.get_value_type of %1367 : !pdl.type
    pdl_interp.are_equal %1375, %1343 : !pdl.type -> ^bb2587, ^bb1
  ^bb2587:  // pred: ^bb2586
    %1376 = pdl_interp.get_value_type of %1368 : !pdl.type
    pdl_interp.are_equal %1376, %1343 : !pdl.type -> ^bb2588, ^bb1
  ^bb2588:  // pred: ^bb2587
    %1377 = pdl_interp.get_value_type of %1366 : !pdl.type
    pdl_interp.are_equal %1377, %1343 : !pdl.type -> ^bb2589, ^bb1
  ^bb2589:  // pred: ^bb2588
    %1378 = pdl_interp.get_value_type of %1373 : !pdl.type
    pdl_interp.are_equal %1378, %1343 : !pdl.type -> ^bb2590, ^bb1
  ^bb2590:  // pred: ^bb2589
    %1379 = pdl_interp.get_value_type of %1374 : !pdl.type
    pdl_interp.are_equal %1379, %1343 : !pdl.type -> ^bb2591, ^bb1
  ^bb2591:  // pred: ^bb2590
    pdl_interp.record_match @rewriters::@diff_sinh_rev(%1367, %1368, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sinh", "math.sinh", "arith.subf"]), loc([%arg0, %2, %858, %1109, %1111, %1346, %1348, %1351, %1354, %1359, %1361]), root("arith.mulf") -> ^bb1
  ^bb2592:  // pred: ^bb2521
    pdl_interp.check_operand_count of %1111 is 1 -> ^bb2593, ^bb1
  ^bb2593:  // pred: ^bb2592
    pdl_interp.check_result_count of %1111 is 1 -> ^bb2594, ^bb1
  ^bb2594:  // pred: ^bb2593
    %1380 = pdl_interp.get_result 0 of %1111
    pdl_interp.is_not_null %1380 : !pdl.value -> ^bb2595, ^bb1
  ^bb2595:  // pred: ^bb2594
    pdl_interp.are_equal %1380, %1110 : !pdl.value -> ^bb2596, ^bb1
  ^bb2596:  // pred: ^bb2595
    %1381 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1381 : !pdl.attribute -> ^bb2597, ^bb1
  ^bb2597:  // pred: ^bb2596
    pdl_interp.check_attribute %1381 is 2.000000e+00 : f32 -> ^bb2598, ^bb1
  ^bb2598:  // pred: ^bb2597
    %1382 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1382 is f32 -> ^bb2599, ^bb1
  ^bb2599:  // pred: ^bb2598
    %1383 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1382, %1383 : !pdl.type -> ^bb2600, ^bb1
  ^bb2600:  // pred: ^bb2599
    %1384 = pdl_interp.get_operand 0 of %1111
    %1385 = pdl_interp.get_defining_op of %1384 : !pdl.value
    pdl_interp.is_not_null %1385 : !pdl.operation -> ^bb2601, ^bb1
  ^bb2601:  // pred: ^bb2600
    %1386 = pdl_interp.get_operand 0 of %1109
    %1387 = pdl_interp.get_defining_op of %1386 : !pdl.value
    pdl_interp.is_not_null %1387 : !pdl.operation -> ^bb2602, ^bb1
  ^bb2602:  // pred: ^bb2601
    %1388 = pdl_interp.get_value_type of %1107 : !pdl.type
    pdl_interp.are_equal %1382, %1388 : !pdl.type -> ^bb2603, ^bb1
  ^bb2603:  // pred: ^bb2602
    pdl_interp.is_not_null %1386 : !pdl.value -> ^bb2604, ^bb1
  ^bb2604:  // pred: ^bb2603
    %1389 = pdl_interp.get_operand 0 of %1385
    %1390 = pdl_interp.get_defining_op of %1389 : !pdl.value
    pdl_interp.is_not_null %1390 : !pdl.operation -> ^bb2605, ^bb1
  ^bb2605:  // pred: ^bb2604
    %1391 = pdl_interp.get_value_type of %1340 : !pdl.type
    pdl_interp.are_equal %1391, %1382 : !pdl.type -> ^bb2606, ^bb1
  ^bb2606:  // pred: ^bb2605
    %1392 = pdl_interp.get_operand 0 of %1387
    %1393 = pdl_interp.get_defining_op of %1392 : !pdl.value
    pdl_interp.is_not_null %1393 : !pdl.operation -> ^bb2607, ^bb1
  ^bb2607:  // pred: ^bb2606
    pdl_interp.is_not_null %1384 : !pdl.value -> ^bb2608, ^bb1
  ^bb2608:  // pred: ^bb2607
    pdl_interp.check_operation_name of %1385 is "arith.divf" -> ^bb2609, ^bb1
  ^bb2609:  // pred: ^bb2608
    pdl_interp.check_operand_count of %1385 is 2 -> ^bb2610, ^bb1
  ^bb2610:  // pred: ^bb2609
    pdl_interp.check_result_count of %1385 is 1 -> ^bb2611, ^bb1
  ^bb2611:  // pred: ^bb2610
    %1394 = pdl_interp.get_result 0 of %1385
    pdl_interp.is_not_null %1394 : !pdl.value -> ^bb2612, ^bb1
  ^bb2612:  // pred: ^bb2611
    pdl_interp.are_equal %1394, %1384 : !pdl.value -> ^bb2613, ^bb1
  ^bb2613:  // pred: ^bb2612
    %1395 = pdl_interp.get_value_type of %1380 : !pdl.type
    pdl_interp.are_equal %1395, %1382 : !pdl.type -> ^bb2614, ^bb1
  ^bb2614:  // pred: ^bb2613
    pdl_interp.check_operation_name of %1387 is "arith.divf" -> ^bb2615, ^bb1
  ^bb2615:  // pred: ^bb2614
    pdl_interp.check_operand_count of %1387 is 2 -> ^bb2616, ^bb1
  ^bb2616:  // pred: ^bb2615
    pdl_interp.check_result_count of %1387 is 1 -> ^bb2617, ^bb1
  ^bb2617:  // pred: ^bb2616
    %1396 = pdl_interp.get_result 0 of %1387
    pdl_interp.is_not_null %1396 : !pdl.value -> ^bb2618, ^bb1
  ^bb2618:  // pred: ^bb2617
    pdl_interp.are_equal %1396, %1386 : !pdl.value -> ^bb2619, ^bb1
  ^bb2619:  // pred: ^bb2618
    %1397 = pdl_interp.get_operand 1 of %1387
    %1398 = pdl_interp.get_defining_op of %1397 : !pdl.value
    pdl_interp.is_not_null %1398 : !pdl.operation -> ^bb2620, ^bb1
  ^bb2620:  // pred: ^bb2619
    %1399 = pdl_interp.get_operand 1 of %1385
    %1400 = pdl_interp.get_defining_op of %1399 : !pdl.value
    pdl_interp.is_not_null %1400 : !pdl.operation -> ^bb2621, ^bb1
  ^bb2621:  // pred: ^bb2620
    pdl_interp.is_not_null %1389 : !pdl.value -> ^bb2622, ^bb1
  ^bb2622:  // pred: ^bb2621
    pdl_interp.check_operation_name of %1390 is "arith.subf" -> ^bb2623, ^bb1
  ^bb2623:  // pred: ^bb2622
    pdl_interp.check_operand_count of %1390 is 2 -> ^bb2624, ^bb1
  ^bb2624:  // pred: ^bb2623
    pdl_interp.check_result_count of %1390 is 1 -> ^bb2625, ^bb1
  ^bb2625:  // pred: ^bb2624
    %1401 = pdl_interp.get_result 0 of %1390
    pdl_interp.is_not_null %1401 : !pdl.value -> ^bb2626, ^bb1
  ^bb2626:  // pred: ^bb2625
    pdl_interp.are_equal %1401, %1389 : !pdl.value -> ^bb2627, ^bb1
  ^bb2627:  // pred: ^bb2626
    pdl_interp.is_not_null %1399 : !pdl.value -> ^bb2628, ^bb1
  ^bb2628:  // pred: ^bb2627
    %1402 = pdl_interp.get_value_type of %1394 : !pdl.type
    pdl_interp.are_equal %1402, %1382 : !pdl.type -> ^bb2629, ^bb1
  ^bb2629:  // pred: ^bb2628
    %1403 = pdl_interp.get_value_type of %1401 : !pdl.type
    pdl_interp.are_equal %1403, %1382 : !pdl.type -> ^bb2630, ^bb1
  ^bb2630:  // pred: ^bb2629
    %1404 = pdl_interp.get_value_type of %1396 : !pdl.type
    pdl_interp.are_equal %1404, %1382 : !pdl.type -> ^bb2631, ^bb1
  ^bb2631:  // pred: ^bb2630
    pdl_interp.is_not_null %1392 : !pdl.value -> ^bb2632, ^bb1
  ^bb2632:  // pred: ^bb2631
    pdl_interp.check_operation_name of %1393 is "arith.addf" -> ^bb2633, ^bb1
  ^bb2633:  // pred: ^bb2632
    pdl_interp.check_operand_count of %1393 is 2 -> ^bb2634, ^bb1
  ^bb2634:  // pred: ^bb2633
    pdl_interp.check_result_count of %1393 is 1 -> ^bb2635, ^bb1
  ^bb2635:  // pred: ^bb2634
    %1405 = pdl_interp.get_result 0 of %1393
    pdl_interp.is_not_null %1405 : !pdl.value -> ^bb2636, ^bb1
  ^bb2636:  // pred: ^bb2635
    pdl_interp.are_equal %1405, %1392 : !pdl.value -> ^bb2637, ^bb1
  ^bb2637:  // pred: ^bb2636
    pdl_interp.is_not_null %1397 : !pdl.value -> ^bb2638, ^bb1
  ^bb2638:  // pred: ^bb2637
    pdl_interp.check_operation_name of %1398 is "arith.constant" -> ^bb2639, ^bb1
  ^bb2639:  // pred: ^bb2638
    pdl_interp.check_operation_name of %1400 is "arith.constant" -> ^bb2640, ^bb1
  ^bb2640:  // pred: ^bb2639
    pdl_interp.check_operand_count of %1398 is 0 -> ^bb2641, ^bb1
  ^bb2641:  // pred: ^bb2640
    pdl_interp.check_operand_count of %1400 is 0 -> ^bb2642, ^bb1
  ^bb2642:  // pred: ^bb2641
    pdl_interp.check_result_count of %1398 is 1 -> ^bb2643, ^bb1
  ^bb2643:  // pred: ^bb2642
    pdl_interp.check_result_count of %1400 is 1 -> ^bb2644, ^bb1
  ^bb2644:  // pred: ^bb2643
    %1406 = pdl_interp.get_operand 0 of %1393
    pdl_interp.is_not_null %1406 : !pdl.value -> ^bb2645, ^bb1
  ^bb2645:  // pred: ^bb2644
    %1407 = pdl_interp.get_operand 1 of %1393
    pdl_interp.is_not_null %1407 : !pdl.value -> ^bb2646, ^bb1
  ^bb2646:  // pred: ^bb2645
    %1408 = pdl_interp.get_operand 0 of %1390
    pdl_interp.are_equal %1406, %1408 : !pdl.value -> ^bb2647, ^bb1
  ^bb2647:  // pred: ^bb2646
    %1409 = pdl_interp.get_operand 1 of %1390
    pdl_interp.are_equal %1407, %1409 : !pdl.value -> ^bb2648, ^bb1
  ^bb2648:  // pred: ^bb2647
    %1410 = pdl_interp.get_attribute "value" of %1398
    pdl_interp.is_not_null %1410 : !pdl.attribute -> ^bb2649, ^bb1
  ^bb2649:  // pred: ^bb2648
    %1411 = pdl_interp.get_attribute "value" of %1400
    pdl_interp.is_not_null %1411 : !pdl.attribute -> ^bb2650, ^bb1
  ^bb2650:  // pred: ^bb2649
    pdl_interp.check_attribute %1410 is 2.000000e+00 : f32 -> ^bb2651, ^bb1
  ^bb2651:  // pred: ^bb2650
    pdl_interp.check_attribute %1411 is 2.000000e+00 : f32 -> ^bb2652, ^bb1
  ^bb2652:  // pred: ^bb2651
    %1412 = pdl_interp.get_result 0 of %1398
    pdl_interp.is_not_null %1412 : !pdl.value -> ^bb2653, ^bb1
  ^bb2653:  // pred: ^bb2652
    %1413 = pdl_interp.get_result 0 of %1400
    pdl_interp.is_not_null %1413 : !pdl.value -> ^bb2654, ^bb1
  ^bb2654:  // pred: ^bb2653
    pdl_interp.are_equal %1412, %1397 : !pdl.value -> ^bb2655, ^bb1
  ^bb2655:  // pred: ^bb2654
    pdl_interp.are_equal %1413, %1399 : !pdl.value -> ^bb2656, ^bb1
  ^bb2656:  // pred: ^bb2655
    %1414 = pdl_interp.get_value_type of %1406 : !pdl.type
    pdl_interp.are_equal %1414, %1382 : !pdl.type -> ^bb2657, ^bb1
  ^bb2657:  // pred: ^bb2656
    %1415 = pdl_interp.get_value_type of %1407 : !pdl.type
    pdl_interp.are_equal %1415, %1382 : !pdl.type -> ^bb2658, ^bb1
  ^bb2658:  // pred: ^bb2657
    %1416 = pdl_interp.get_value_type of %1405 : !pdl.type
    pdl_interp.are_equal %1416, %1382 : !pdl.type -> ^bb2659, ^bb1
  ^bb2659:  // pred: ^bb2658
    %1417 = pdl_interp.get_value_type of %1412 : !pdl.type
    pdl_interp.are_equal %1417, %1382 : !pdl.type -> ^bb2660, ^bb1
  ^bb2660:  // pred: ^bb2659
    %1418 = pdl_interp.get_value_type of %1413 : !pdl.type
    pdl_interp.are_equal %1418, %1382 : !pdl.type -> ^bb2661, ^bb1
  ^bb2661:  // pred: ^bb2660
    pdl_interp.record_match @rewriters::@sum_cosh_rev(%1406, %1407, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh", "math.cosh", "arith.addf"]), loc([%arg0, %2, %858, %1109, %1111, %1385, %1387, %1390, %1393, %1398, %1400]), root("arith.mulf") -> ^bb1
  ^bb2662:  // pred: ^bb2089
    pdl_interp.check_operand_count of %858 is 1 -> ^bb2663, ^bb1
  ^bb2663:  // pred: ^bb2662
    pdl_interp.check_result_count of %858 is 1 -> ^bb2664, ^bb1
  ^bb2664:  // pred: ^bb2663
    %1419 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1419 : !pdl.value -> ^bb2665, ^bb1
  ^bb2665:  // pred: ^bb2664
    pdl_interp.are_equal %1419, %857 : !pdl.value -> ^bb2666, ^bb1
  ^bb2666:  // pred: ^bb2665
    %1420 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1420 : !pdl.value -> ^bb2667, ^bb1
  ^bb2667:  // pred: ^bb2666
    %1421 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1421 : !pdl.attribute -> ^bb2668, ^bb1
  ^bb2668:  // pred: ^bb2667
    pdl_interp.check_attribute %1421 is 2.000000e+00 : f32 -> ^bb2669, ^bb1
  ^bb2669:  // pred: ^bb2668
    %1422 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1422 is f32 -> ^bb2670, ^bb1
  ^bb2670:  // pred: ^bb2669
    %1423 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1422, %1423 : !pdl.type -> ^bb2671, ^bb1
  ^bb2671:  // pred: ^bb2670
    %1424 = pdl_interp.get_value_type of %1419 : !pdl.type
    pdl_interp.are_equal %1422, %1424 : !pdl.type -> ^bb2672, ^bb1
  ^bb2672:  // pred: ^bb2671
    %1425 = pdl_interp.get_value_type of %1420 : !pdl.type
    pdl_interp.are_equal %1422, %1425 : !pdl.type -> ^bb2673, ^bb1
  ^bb2673:  // pred: ^bb2672
    pdl_interp.record_match @rewriters::@sinh_undef_rev(%1420, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "arith.negf", "math.exp", "arith.subf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb2674:  // pred: ^bb2089
    pdl_interp.check_operand_count of %858 is 1 -> ^bb2675, ^bb1
  ^bb2675:  // pred: ^bb2674
    pdl_interp.check_result_count of %858 is 1 -> ^bb2676, ^bb1
  ^bb2676:  // pred: ^bb2675
    %1426 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1426 : !pdl.value -> ^bb2677, ^bb1
  ^bb2677:  // pred: ^bb2676
    pdl_interp.are_equal %1426, %857 : !pdl.value -> ^bb2678, ^bb1
  ^bb2678:  // pred: ^bb2677
    %1427 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1427 : !pdl.value -> ^bb2679, ^bb1
  ^bb2679:  // pred: ^bb2678
    %1428 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1428 : !pdl.attribute -> ^bb2680, ^bb1
  ^bb2680:  // pred: ^bb2679
    pdl_interp.check_attribute %1428 is 2.000000e+00 : f32 -> ^bb2681, ^bb1
  ^bb2681:  // pred: ^bb2680
    %1429 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1429 is f32 -> ^bb2682, ^bb1
  ^bb2682:  // pred: ^bb2681
    %1430 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1429, %1430 : !pdl.type -> ^bb2683, ^bb1
  ^bb2683:  // pred: ^bb2682
    %1431 = pdl_interp.get_value_type of %1426 : !pdl.type
    pdl_interp.are_equal %1429, %1431 : !pdl.type -> ^bb2684, ^bb1
  ^bb2684:  // pred: ^bb2683
    %1432 = pdl_interp.get_value_type of %1427 : !pdl.type
    pdl_interp.are_equal %1429, %1432 : !pdl.type -> ^bb2685, ^bb1
  ^bb2685:  // pred: ^bb2684
    pdl_interp.record_match @rewriters::@cosh_undef_rev(%1427, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "arith.negf", "math.exp", "arith.addf"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb2686:  // pred: ^bb2089
    pdl_interp.check_operand_count of %858 is 1 -> ^bb2687, ^bb1
  ^bb2687:  // pred: ^bb2686
    pdl_interp.check_result_count of %858 is 1 -> ^bb2688, ^bb1
  ^bb2688:  // pred: ^bb2687
    %1433 = pdl_interp.get_result 0 of %858
    pdl_interp.is_not_null %1433 : !pdl.value -> ^bb2689, ^bb1
  ^bb2689:  // pred: ^bb2688
    pdl_interp.are_equal %1433, %857 : !pdl.value -> ^bb2690, ^bb1
  ^bb2690:  // pred: ^bb2689
    %1434 = pdl_interp.get_operand 0 of %858
    pdl_interp.is_not_null %1434 : !pdl.value -> ^bb2691, ^bb1
  ^bb2691:  // pred: ^bb2690
    %1435 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1435 : !pdl.attribute -> ^bb2692, ^bb1
  ^bb2692:  // pred: ^bb2691
    pdl_interp.check_attribute %1435 is 2.000000e+00 : f32 -> ^bb2693, ^bb1
  ^bb2693:  // pred: ^bb2692
    %1436 = pdl_interp.get_value_type of %1106 : !pdl.type
    pdl_interp.check_type %1436 is f32 -> ^bb2694, ^bb1
  ^bb2694:  // pred: ^bb2693
    %1437 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1436, %1437 : !pdl.type -> ^bb2695, ^bb1
  ^bb2695:  // pred: ^bb2694
    %1438 = pdl_interp.get_value_type of %1433 : !pdl.type
    pdl_interp.are_equal %1436, %1438 : !pdl.type -> ^bb2696, ^bb1
  ^bb2696:  // pred: ^bb2695
    %1439 = pdl_interp.get_value_type of %1434 : !pdl.type
    pdl_interp.are_equal %1436, %1439 : !pdl.type -> ^bb2697, ^bb1
  ^bb2697:  // pred: ^bb2696
    pdl_interp.record_match @rewriters::@acosh_2_rev(%1434, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "arith.mulf", "arith.constant", "arith.subf", "math.acosh"]), loc([%arg0, %2, %858]), root("arith.mulf") -> ^bb1
  ^bb2698:  // pred: ^bb1631
    pdl_interp.check_operand_count of %2 is 2 -> ^bb2699, ^bb1632
  ^bb2699:  // pred: ^bb2698
    pdl_interp.check_result_count of %2 is 1 -> ^bb2700, ^bb1632
  ^bb2700:  // pred: ^bb2699
    %1440 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1440 : !pdl.value -> ^bb2701, ^bb1632
  ^bb2701:  // pred: ^bb2700
    pdl_interp.are_equal %1440, %1 : !pdl.value -> ^bb2702, ^bb1632
  ^bb2702:  // pred: ^bb2701
    %1441 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1441 : !pdl.value -> ^bb2703, ^bb1632
  ^bb2703:  // pred: ^bb2702
    %1442 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %1442 : !pdl.value -> ^bb2710, ^bb2704
  ^bb2704:  // 8 preds: ^bb2703, ^bb2710, ^bb2711, ^bb2712, ^bb2713, ^bb2714, ^bb2715, ^bb2716
    %1443 = pdl_interp.get_value_type of %1441 : !pdl.type
    pdl_interp.check_type %1443 is f32 -> ^bb2705, ^bb1632
  ^bb2705:  // pred: ^bb2704
    %1444 = pdl_interp.get_value_type of %1440 : !pdl.type
    pdl_interp.are_equal %1443, %1444 : !pdl.type -> ^bb2706, ^bb1632
  ^bb2706:  // pred: ^bb2705
    %1445 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1443, %1445 : !pdl.type -> ^bb2707, ^bb1632
  ^bb2707:  // pred: ^bb2706
    %1446 = pdl_interp.get_operand 1 of %2
    pdl_interp.are_equal %1441, %1446 : !pdl.value -> ^bb2708, ^bb1632
  ^bb2708:  // pred: ^bb2707
    %1447 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %1441, %1447 : !pdl.value -> ^bb2709, ^bb1632
  ^bb2709:  // pred: ^bb2708
    pdl_interp.record_match @rewriters::@pow3(%1441, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf"]), loc([%arg0, %2]), root("arith.mulf") -> ^bb1632
  ^bb2710:  // pred: ^bb2703
    %1448 = pdl_interp.get_value_type of %1441 : !pdl.type
    pdl_interp.check_type %1448 is f32 -> ^bb2711, ^bb2704
  ^bb2711:  // pred: ^bb2710
    %1449 = pdl_interp.get_value_type of %1440 : !pdl.type
    pdl_interp.are_equal %1448, %1449 : !pdl.type -> ^bb2712, ^bb2704
  ^bb2712:  // pred: ^bb2711
    %1450 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1448, %1450 : !pdl.type -> ^bb2713, ^bb2704
  ^bb2713:  // pred: ^bb2712
    %1451 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %1451 : !pdl.value -> ^bb2714, ^bb2704
  ^bb2714:  // pred: ^bb2713
    %1452 = pdl_interp.get_value_type of %1451 : !pdl.type
    pdl_interp.are_equal %1448, %1452 : !pdl.type -> ^bb2715, ^bb2704
  ^bb2715:  // pred: ^bb2714
    %1453 = pdl_interp.get_value_type of %1442 : !pdl.type
    pdl_interp.are_equal %1448, %1453 : !pdl.type -> ^bb2716, ^bb2704
  ^bb2716:  // pred: ^bb2715
    pdl_interp.record_match @rewriters::@associate_mullmul(%1451, %1442, %1441, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf"]), loc([%arg0, %2]), root("arith.mulf") -> ^bb2704
  ^bb2717:  // pred: ^bb1631
    pdl_interp.check_operand_count of %2 is 2 -> ^bb2718, ^bb1632
  ^bb2718:  // pred: ^bb2717
    pdl_interp.check_result_count of %2 is 1 -> ^bb2719, ^bb1632
  ^bb2719:  // pred: ^bb2718
    %1454 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1454 : !pdl.value -> ^bb2720, ^bb1632
  ^bb2720:  // pred: ^bb2719
    pdl_interp.are_equal %1454, %1 : !pdl.value -> ^bb2721, ^bb1632
  ^bb2721:  // pred: ^bb2720
    %1455 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1455 : !pdl.value -> ^bb2722, ^bb1632
  ^bb2722:  // pred: ^bb2721
    %1456 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %1456 : !pdl.value -> ^bb2738, ^bb2723
  ^bb2723:  // 8 preds: ^bb2722, ^bb2738, ^bb2739, ^bb2740, ^bb2741, ^bb2742, ^bb2743, ^bb2744
    %1457 = pdl_interp.get_defining_op of %1455 : !pdl.value
    pdl_interp.is_not_null %1457 : !pdl.operation -> ^bb2724, ^bb1632
  ^bb2724:  // pred: ^bb2723
    %1458 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %1458 : !pdl.value -> ^bb2725, ^bb1632
  ^bb2725:  // pred: ^bb2724
    pdl_interp.check_operation_name of %1457 is "arith.constant" -> ^bb2726, ^bb1632
  ^bb2726:  // pred: ^bb2725
    pdl_interp.check_operand_count of %1457 is 0 -> ^bb2727, ^bb1632
  ^bb2727:  // pred: ^bb2726
    pdl_interp.check_result_count of %1457 is 1 -> ^bb2728, ^bb1632
  ^bb2728:  // pred: ^bb2727
    %1459 = pdl_interp.get_result 0 of %1457
    pdl_interp.is_not_null %1459 : !pdl.value -> ^bb2729, ^bb1632
  ^bb2729:  // pred: ^bb2728
    pdl_interp.are_equal %1459, %1455 : !pdl.value -> ^bb2730, ^bb1632
  ^bb2730:  // pred: ^bb2729
    %1460 = pdl_interp.get_attribute "value" of %1457
    pdl_interp.is_not_null %1460 : !pdl.attribute -> ^bb2731, ^bb1632
  ^bb2731:  // pred: ^bb2730
    pdl_interp.check_attribute %1460 is 1.000000e+00 : f32 -> ^bb2732, ^bb1632
  ^bb2732:  // pred: ^bb2731
    %1461 = pdl_interp.get_value_type of %1459 : !pdl.type
    pdl_interp.check_type %1461 is f32 -> ^bb2733, ^bb1632
  ^bb2733:  // pred: ^bb2732
    %1462 = pdl_interp.get_value_type of %1454 : !pdl.type
    pdl_interp.are_equal %1461, %1462 : !pdl.type -> ^bb2734, ^bb1632
  ^bb2734:  // pred: ^bb2733
    %1463 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1461, %1463 : !pdl.type -> ^bb2735, ^bb1632
  ^bb2735:  // pred: ^bb2734
    %1464 = pdl_interp.get_value_type of %1458 : !pdl.type
    pdl_interp.are_equal %1461, %1464 : !pdl.type -> ^bb2736, ^bb1632
  ^bb2736:  // pred: ^bb2735
    %1465 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %1458, %1465 : !pdl.value -> ^bb2737, ^bb1632
  ^bb2737:  // pred: ^bb2736
    pdl_interp.record_match @rewriters::@lft_mult_inverse(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2, %1457]), root("arith.mulf") -> ^bb1632
  ^bb2738:  // pred: ^bb2722
    %1466 = pdl_interp.get_value_type of %1455 : !pdl.type
    pdl_interp.check_type %1466 is f32 -> ^bb2739, ^bb2723
  ^bb2739:  // pred: ^bb2738
    %1467 = pdl_interp.get_value_type of %1454 : !pdl.type
    pdl_interp.are_equal %1466, %1467 : !pdl.type -> ^bb2740, ^bb2723
  ^bb2740:  // pred: ^bb2739
    %1468 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1466, %1468 : !pdl.type -> ^bb2741, ^bb2723
  ^bb2741:  // pred: ^bb2740
    %1469 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %1469 : !pdl.value -> ^bb2742, ^bb2723
  ^bb2742:  // pred: ^bb2741
    %1470 = pdl_interp.get_value_type of %1469 : !pdl.type
    pdl_interp.are_equal %1466, %1470 : !pdl.type -> ^bb2743, ^bb2723
  ^bb2743:  // pred: ^bb2742
    %1471 = pdl_interp.get_value_type of %1456 : !pdl.type
    pdl_interp.are_equal %1466, %1471 : !pdl.type -> ^bb2744, ^bb2723
  ^bb2744:  // pred: ^bb2743
    pdl_interp.record_match @rewriters::@associate_mulldiv(%1455, %1456, %1469, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.divf"]), loc([%arg0, %2]), root("arith.mulf") -> ^bb2723
  ^bb2745:  // pred: ^bb1631
    pdl_interp.check_operand_count of %2 is 0 -> ^bb2746, ^bb1632
  ^bb2746:  // pred: ^bb2745
    pdl_interp.check_result_count of %2 is 1 -> ^bb2747, ^bb1632
  ^bb2747:  // pred: ^bb2746
    %1472 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1472 : !pdl.value -> ^bb2748, ^bb1632
  ^bb2748:  // pred: ^bb2747
    pdl_interp.are_equal %1472, %1 : !pdl.value -> ^bb2749, ^bb1632
  ^bb2749:  // pred: ^bb2748
    %1473 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %1473 : !pdl.value -> ^bb2750, ^bb1632
  ^bb2750:  // pred: ^bb2749
    %1474 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1474 : !pdl.attribute -> ^bb2751, ^bb1632
  ^bb2751:  // pred: ^bb2750
    pdl_interp.switch_attribute %1474 to [0.000000e+00 : f32, 1.000000e+00 : f32, -1.000000e+00 : f32, 2.000000e+00 : f32](^bb2752, ^bb2756, ^bb2760, ^bb2764) -> ^bb1632
  ^bb2752:  // pred: ^bb2751
    %1475 = pdl_interp.get_value_type of %1472 : !pdl.type
    pdl_interp.check_type %1475 is f32 -> ^bb2753, ^bb1632
  ^bb2753:  // pred: ^bb2752
    %1476 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1475, %1476 : !pdl.type -> ^bb2754, ^bb1632
  ^bb2754:  // pred: ^bb2753
    %1477 = pdl_interp.get_value_type of %1473 : !pdl.type
    pdl_interp.are_equal %1475, %1477 : !pdl.type -> ^bb2755, ^bb1632
  ^bb2755:  // pred: ^bb2754
    pdl_interp.record_match @rewriters::@mul0_lft(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("arith.mulf") -> ^bb1632
  ^bb2756:  // pred: ^bb2751
    %1478 = pdl_interp.get_value_type of %1472 : !pdl.type
    pdl_interp.check_type %1478 is f32 -> ^bb2757, ^bb1632
  ^bb2757:  // pred: ^bb2756
    %1479 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1478, %1479 : !pdl.type -> ^bb2758, ^bb1632
  ^bb2758:  // pred: ^bb2757
    %1480 = pdl_interp.get_value_type of %1473 : !pdl.type
    pdl_interp.are_equal %1478, %1480 : !pdl.type -> ^bb2759, ^bb1632
  ^bb2759:  // pred: ^bb2758
    pdl_interp.record_match @rewriters::@mul_lft_identity(%1473, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("arith.mulf") -> ^bb1632
  ^bb2760:  // pred: ^bb2751
    %1481 = pdl_interp.get_value_type of %1472 : !pdl.type
    pdl_interp.check_type %1481 is f32 -> ^bb2761, ^bb1632
  ^bb2761:  // pred: ^bb2760
    %1482 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1481, %1482 : !pdl.type -> ^bb2762, ^bb1632
  ^bb2762:  // pred: ^bb2761
    %1483 = pdl_interp.get_value_type of %1473 : !pdl.type
    pdl_interp.are_equal %1481, %1483 : !pdl.type -> ^bb2763, ^bb1632
  ^bb2763:  // pred: ^bb2762
    pdl_interp.record_match @rewriters::@mul_1_neg(%1473, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf"]), loc([%arg0, %2]), root("arith.mulf") -> ^bb1632
  ^bb2764:  // pred: ^bb2751
    %1484 = pdl_interp.get_value_type of %1472 : !pdl.type
    pdl_interp.check_type %1484 is f32 -> ^bb2765, ^bb1632
  ^bb2765:  // pred: ^bb2764
    %1485 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1484, %1485 : !pdl.type -> ^bb2766, ^bb1632
  ^bb2766:  // pred: ^bb2765
    %1486 = pdl_interp.get_value_type of %1473 : !pdl.type
    pdl_interp.are_equal %1484, %1486 : !pdl.type -> ^bb2767, ^bb1632
  ^bb2767:  // pred: ^bb2766
    pdl_interp.record_match @rewriters::@count_2_rev(%1473, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf"]), loc([%arg0, %2]), root("arith.mulf") -> ^bb1632
  ^bb2768:  // pred: ^bb1631
    pdl_interp.check_operand_count of %2 is 1 -> ^bb2769, ^bb1632
  ^bb2769:  // pred: ^bb2768
    pdl_interp.check_result_count of %2 is 1 -> ^bb2770, ^bb1632
  ^bb2770:  // pred: ^bb2769
    %1487 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1487 : !pdl.value -> ^bb2771, ^bb1632
  ^bb2771:  // pred: ^bb2770
    pdl_interp.are_equal %1487, %1 : !pdl.value -> ^bb2772, ^bb1632
  ^bb2772:  // pred: ^bb2771
    %1488 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1488 : !pdl.value -> ^bb2773, ^bb1632
  ^bb2773:  // pred: ^bb2772
    %1489 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %1489 : !pdl.value -> ^bb2774, ^bb1632
  ^bb2774:  // pred: ^bb2773
    %1490 = pdl_interp.get_value_type of %1488 : !pdl.type
    pdl_interp.check_type %1490 is f32 -> ^bb2775, ^bb1632
  ^bb2775:  // pred: ^bb2774
    %1491 = pdl_interp.get_value_type of %1487 : !pdl.type
    pdl_interp.are_equal %1490, %1491 : !pdl.type -> ^bb2776, ^bb1632
  ^bb2776:  // pred: ^bb2775
    %1492 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1490, %1492 : !pdl.type -> ^bb2777, ^bb1632
  ^bb2777:  // pred: ^bb2776
    %1493 = pdl_interp.get_value_type of %1489 : !pdl.type
    pdl_interp.are_equal %1490, %1493 : !pdl.type -> ^bb2778, ^bb1632
  ^bb2778:  // pred: ^bb2777
    pdl_interp.record_match @rewriters::@distribute_lft_neg_out(%1488, %1489, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.negf"]), loc([%arg0, %2]), root("arith.mulf") -> ^bb1632
  ^bb2779:  // pred: ^bb1631
    pdl_interp.check_operand_count of %2 is 2 -> ^bb2780, ^bb1632
  ^bb2780:  // pred: ^bb2779
    pdl_interp.check_result_count of %2 is 1 -> ^bb2781, ^bb1632
  ^bb2781:  // pred: ^bb2780
    %1494 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1494 : !pdl.value -> ^bb2782, ^bb1632
  ^bb2782:  // pred: ^bb2781
    pdl_interp.are_equal %1494, %1 : !pdl.value -> ^bb2783, ^bb1632
  ^bb2783:  // pred: ^bb2782
    %1495 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1495 : !pdl.value -> ^bb2784, ^bb1632
  ^bb2784:  // pred: ^bb2783
    %1496 = pdl_interp.get_operand 1 of %2
    %1497 = pdl_interp.get_defining_op of %1496 : !pdl.value
    pdl_interp.is_not_null %1497 : !pdl.operation -> ^bb2785, ^bb1632
  ^bb2785:  // pred: ^bb2784
    %1498 = pdl_interp.get_defining_op of %1495 : !pdl.value
    pdl_interp.is_not_null %1498 : !pdl.operation -> ^bb2786, ^bb1632
  ^bb2786:  // pred: ^bb2785
    pdl_interp.is_not_null %1496 : !pdl.value -> ^bb2787, ^bb1632
  ^bb2787:  // pred: ^bb2786
    pdl_interp.check_operation_name of %1497 is "arith.divf" -> ^bb2788, ^bb1632
  ^bb2788:  // pred: ^bb2787
    pdl_interp.check_operand_count of %1497 is 2 -> ^bb2789, ^bb1632
  ^bb2789:  // pred: ^bb2788
    pdl_interp.check_result_count of %1497 is 1 -> ^bb2790, ^bb1632
  ^bb2790:  // pred: ^bb2789
    %1499 = pdl_interp.get_result 0 of %1497
    pdl_interp.is_not_null %1499 : !pdl.value -> ^bb2791, ^bb1632
  ^bb2791:  // pred: ^bb2790
    pdl_interp.are_equal %1499, %1496 : !pdl.value -> ^bb2792, ^bb1632
  ^bb2792:  // pred: ^bb2791
    pdl_interp.check_operation_name of %1498 is "arith.constant" -> ^bb2793, ^bb1632
  ^bb2793:  // pred: ^bb2792
    pdl_interp.check_operand_count of %1498 is 0 -> ^bb2794, ^bb1632
  ^bb2794:  // pred: ^bb2793
    pdl_interp.check_result_count of %1498 is 1 -> ^bb2795, ^bb1632
  ^bb2795:  // pred: ^bb2794
    %1500 = pdl_interp.get_result 0 of %1498
    pdl_interp.is_not_null %1500 : !pdl.value -> ^bb2796, ^bb1632
  ^bb2796:  // pred: ^bb2795
    pdl_interp.are_equal %1500, %1495 : !pdl.value -> ^bb2797, ^bb1632
  ^bb2797:  // pred: ^bb2796
    %1501 = pdl_interp.get_operand 0 of %1497
    pdl_interp.is_not_null %1501 : !pdl.value -> ^bb2798, ^bb1632
  ^bb2798:  // pred: ^bb2797
    %1502 = pdl_interp.get_attribute "value" of %1498
    pdl_interp.is_not_null %1502 : !pdl.attribute -> ^bb2799, ^bb1632
  ^bb2799:  // pred: ^bb2798
    pdl_interp.check_attribute %1502 is 1.000000e+00 : f32 -> ^bb2800, ^bb1632
  ^bb2800:  // pred: ^bb2799
    %1503 = pdl_interp.get_value_type of %1500 : !pdl.type
    pdl_interp.check_type %1503 is f32 -> ^bb2801, ^bb1632
  ^bb2801:  // pred: ^bb2800
    %1504 = pdl_interp.get_value_type of %1494 : !pdl.type
    pdl_interp.are_equal %1503, %1504 : !pdl.type -> ^bb2802, ^bb1632
  ^bb2802:  // pred: ^bb2801
    %1505 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1503, %1505 : !pdl.type -> ^bb2803, ^bb1632
  ^bb2803:  // pred: ^bb2802
    %1506 = pdl_interp.get_value_type of %1499 : !pdl.type
    pdl_interp.are_equal %1503, %1506 : !pdl.type -> ^bb2804, ^bb1632
  ^bb2804:  // pred: ^bb2803
    %1507 = pdl_interp.get_operand 1 of %1497
    pdl_interp.is_not_null %1507 : !pdl.value -> ^bb2805, ^bb1632
  ^bb2805:  // pred: ^bb2804
    %1508 = pdl_interp.get_value_type of %1501 : !pdl.type
    pdl_interp.are_equal %1503, %1508 : !pdl.type -> ^bb2806, ^bb1632
  ^bb2806:  // pred: ^bb2805
    %1509 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %1507, %1509 : !pdl.value -> ^bb2807, ^bb1632
  ^bb2807:  // pred: ^bb2806
    %1510 = pdl_interp.get_value_type of %1507 : !pdl.type
    pdl_interp.are_equal %1503, %1510 : !pdl.type -> ^bb2808, ^bb1632
  ^bb2808:  // pred: ^bb2807
    pdl_interp.record_match @rewriters::@sum_to_mult_rev(%1507, %1501, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf"]), loc([%arg0, %2, %1497, %1498]), root("arith.mulf") -> ^bb1632
  ^bb2809:  // pred: ^bb1631
    pdl_interp.check_operand_count of %2 is 2 -> ^bb2810, ^bb1632
  ^bb2810:  // pred: ^bb2809
    pdl_interp.check_result_count of %2 is 1 -> ^bb2811, ^bb1632
  ^bb2811:  // pred: ^bb2810
    %1511 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1511 : !pdl.value -> ^bb2812, ^bb1632
  ^bb2812:  // pred: ^bb2811
    pdl_interp.are_equal %1511, %1 : !pdl.value -> ^bb2813, ^bb1632
  ^bb2813:  // pred: ^bb2812
    %1512 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1512 : !pdl.value -> ^bb2814, ^bb1632
  ^bb2814:  // pred: ^bb2813
    %1513 = pdl_interp.get_operand 1 of %2
    %1514 = pdl_interp.get_defining_op of %1513 : !pdl.value
    pdl_interp.is_not_null %1514 : !pdl.operation -> ^bb2815, ^bb1632
  ^bb2815:  // pred: ^bb2814
    %1515 = pdl_interp.get_defining_op of %1512 : !pdl.value
    pdl_interp.is_not_null %1515 : !pdl.operation -> ^bb2816, ^bb1632
  ^bb2816:  // pred: ^bb2815
    pdl_interp.is_not_null %1513 : !pdl.value -> ^bb2817, ^bb1632
  ^bb2817:  // pred: ^bb2816
    pdl_interp.check_operation_name of %1514 is "arith.divf" -> ^bb2818, ^bb1632
  ^bb2818:  // pred: ^bb2817
    pdl_interp.check_operand_count of %1514 is 2 -> ^bb2819, ^bb1632
  ^bb2819:  // pred: ^bb2818
    pdl_interp.check_result_count of %1514 is 1 -> ^bb2820, ^bb1632
  ^bb2820:  // pred: ^bb2819
    %1516 = pdl_interp.get_result 0 of %1514
    pdl_interp.is_not_null %1516 : !pdl.value -> ^bb2821, ^bb1632
  ^bb2821:  // pred: ^bb2820
    pdl_interp.are_equal %1516, %1513 : !pdl.value -> ^bb2822, ^bb1632
  ^bb2822:  // pred: ^bb2821
    pdl_interp.check_operation_name of %1515 is "arith.constant" -> ^bb2823, ^bb1632
  ^bb2823:  // pred: ^bb2822
    pdl_interp.check_operand_count of %1515 is 0 -> ^bb2824, ^bb1632
  ^bb2824:  // pred: ^bb2823
    pdl_interp.check_result_count of %1515 is 1 -> ^bb2825, ^bb1632
  ^bb2825:  // pred: ^bb2824
    %1517 = pdl_interp.get_result 0 of %1515
    pdl_interp.is_not_null %1517 : !pdl.value -> ^bb2826, ^bb1632
  ^bb2826:  // pred: ^bb2825
    pdl_interp.are_equal %1517, %1512 : !pdl.value -> ^bb2827, ^bb1632
  ^bb2827:  // pred: ^bb2826
    %1518 = pdl_interp.get_operand 0 of %1514
    pdl_interp.is_not_null %1518 : !pdl.value -> ^bb2828, ^bb1632
  ^bb2828:  // pred: ^bb2827
    %1519 = pdl_interp.get_attribute "value" of %1515
    pdl_interp.is_not_null %1519 : !pdl.attribute -> ^bb2829, ^bb1632
  ^bb2829:  // pred: ^bb2828
    pdl_interp.check_attribute %1519 is 1.000000e+00 : f32 -> ^bb2830, ^bb1632
  ^bb2830:  // pred: ^bb2829
    %1520 = pdl_interp.get_value_type of %1517 : !pdl.type
    pdl_interp.check_type %1520 is f32 -> ^bb2831, ^bb1632
  ^bb2831:  // pred: ^bb2830
    %1521 = pdl_interp.get_value_type of %1511 : !pdl.type
    pdl_interp.are_equal %1520, %1521 : !pdl.type -> ^bb2832, ^bb1632
  ^bb2832:  // pred: ^bb2831
    %1522 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1520, %1522 : !pdl.type -> ^bb2833, ^bb1632
  ^bb2833:  // pred: ^bb2832
    %1523 = pdl_interp.get_value_type of %1516 : !pdl.type
    pdl_interp.are_equal %1520, %1523 : !pdl.type -> ^bb2834, ^bb1632
  ^bb2834:  // pred: ^bb2833
    %1524 = pdl_interp.get_operand 1 of %1514
    pdl_interp.is_not_null %1524 : !pdl.value -> ^bb2835, ^bb1632
  ^bb2835:  // pred: ^bb2834
    %1525 = pdl_interp.get_value_type of %1518 : !pdl.type
    pdl_interp.are_equal %1520, %1525 : !pdl.type -> ^bb2836, ^bb1632
  ^bb2836:  // pred: ^bb2835
    %1526 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %1524, %1526 : !pdl.value -> ^bb2837, ^bb1632
  ^bb2837:  // pred: ^bb2836
    %1527 = pdl_interp.get_value_type of %1524 : !pdl.type
    pdl_interp.are_equal %1520, %1527 : !pdl.type -> ^bb2838, ^bb1632
  ^bb2838:  // pred: ^bb2837
    pdl_interp.record_match @rewriters::@sub_to_mult_rev(%1524, %1518, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf"]), loc([%arg0, %2, %1514, %1515]), root("arith.mulf") -> ^bb1632
  ^bb2839:  // pred: ^bb1631
    pdl_interp.check_operand_count of %2 is 2 -> ^bb2840, ^bb1632
  ^bb2840:  // pred: ^bb2839
    pdl_interp.check_result_count of %2 is 1 -> ^bb2841, ^bb1632
  ^bb2841:  // pred: ^bb2840
    %1528 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1528 : !pdl.value -> ^bb2842, ^bb1632
  ^bb2842:  // pred: ^bb2841
    pdl_interp.are_equal %1528, %1 : !pdl.value -> ^bb2843, ^bb1632
  ^bb2843:  // pred: ^bb2842
    %1529 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1529 : !pdl.value -> ^bb2844, ^bb1632
  ^bb2844:  // pred: ^bb2843
    %1530 = pdl_interp.get_value_type of %1529 : !pdl.type
    pdl_interp.check_type %1530 is f32 -> ^bb2845, ^bb1632
  ^bb2845:  // pred: ^bb2844
    %1531 = pdl_interp.get_value_type of %1528 : !pdl.type
    pdl_interp.are_equal %1530, %1531 : !pdl.type -> ^bb2846, ^bb1632
  ^bb2846:  // pred: ^bb2845
    %1532 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1530, %1532 : !pdl.type -> ^bb2847, ^bb1632
  ^bb2847:  // pred: ^bb2846
    %1533 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %1533 : !pdl.value -> ^bb2848, ^bb1632
  ^bb2848:  // pred: ^bb2847
    %1534 = pdl_interp.get_value_type of %1533 : !pdl.type
    pdl_interp.are_equal %1530, %1534 : !pdl.type -> ^bb2849, ^bb1632
  ^bb2849:  // pred: ^bb2848
    %1535 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %1529, %1535 : !pdl.value -> ^bb2850, ^bb1632
  ^bb2850:  // pred: ^bb2849
    pdl_interp.record_match @rewriters::@pow_plus(%1533, %1529, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "math.powf"]), loc([%arg0, %2]), root("arith.mulf") -> ^bb1632
  ^bb2851:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb2852, ^bb1
  ^bb2852:  // pred: ^bb2851
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb2853, ^bb1
  ^bb2853:  // pred: ^bb2852
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb2854, ^bb1
  ^bb2854:  // pred: ^bb2853
    pdl_interp.switch_operation_name of %2 to ["arith.divf", "arith.mulf", "arith.constant", "arith.negf", "arith.addf", "arith.subf", "math.absf", "math.cbrt", "math.sqrt"](^bb4240, ^bb4253, ^bb4266, ^bb4281, ^bb4292, ^bb4322, ^bb4352, ^bb4362, ^bb4372) -> ^bb2855
  ^bb2855:  // 157 preds: ^bb2854, ^bb4240, ^bb4241, ^bb4242, ^bb4243, ^bb4244, ^bb4245, ^bb4246, ^bb4247, ^bb4248, ^bb4249, ^bb4250, ^bb4251, ^bb4252, ^bb4253, ^bb4254, ^bb4255, ^bb4256, ^bb4257, ^bb4258, ^bb4259, ^bb4260, ^bb4261, ^bb4262, ^bb4263, ^bb4264, ^bb4265, ^bb4266, ^bb4267, ^bb4268, ^bb4269, ^bb4270, ^bb4271, ^bb4272, ^bb4273, ^bb4274, ^bb4275, ^bb4276, ^bb4277, ^bb4278, ^bb4279, ^bb4280, ^bb4281, ^bb4282, ^bb4283, ^bb4284, ^bb4285, ^bb4286, ^bb4287, ^bb4288, ^bb4289, ^bb4290, ^bb4291, ^bb4292, ^bb4293, ^bb4294, ^bb4295, ^bb4296, ^bb4298, ^bb4299, ^bb4300, ^bb4301, ^bb4302, ^bb4303, ^bb4304, ^bb4305, ^bb4322, ^bb4323, ^bb4324, ^bb4325, ^bb4326, ^bb4328, ^bb4329, ^bb4330, ^bb4331, ^bb4332, ^bb4333, ^bb4334, ^bb4335, ^bb4352, ^bb4353, ^bb4354, ^bb4355, ^bb4356, ^bb4357, ^bb4358, ^bb4359, ^bb4360, ^bb4361, ^bb4362, ^bb4363, ^bb4364, ^bb4365, ^bb4366, ^bb4367, ^bb4368, ^bb4369, ^bb4370, ^bb4371, ^bb4372, ^bb4373, ^bb4374, ^bb4375, ^bb4376, ^bb4377, ^bb4378, ^bb4379, ^bb4380, ^bb4381, ^bb4382, ^bb4383, ^bb4384, ^bb4385, ^bb4386, ^bb4387, ^bb4388, ^bb4389, ^bb4390, ^bb4391, ^bb4392, ^bb4393, ^bb4394, ^bb4395, ^bb4396, ^bb4397, ^bb4398, ^bb4399, ^bb4400, ^bb4401, ^bb4402, ^bb4403, ^bb4404, ^bb4405, ^bb4406, ^bb4407, ^bb4408, ^bb4409, ^bb4410, ^bb4411, ^bb4412, ^bb4413, ^bb4414, ^bb4415, ^bb4416, ^bb4417, ^bb4418, ^bb4419, ^bb4420, ^bb4421, ^bb4422, ^bb4423, ^bb4424, ^bb4425, ^bb4426, ^bb4427, ^bb4428, ^bb4429
    %1536 = pdl_interp.get_operand 1 of %arg0
    %1537 = pdl_interp.get_defining_op of %1536 : !pdl.value
    pdl_interp.is_not_null %1537 : !pdl.operation -> ^bb2856, ^bb1
  ^bb2856:  // pred: ^bb2855
    pdl_interp.switch_operation_name of %2 to ["arith.constant", "arith.mulf", "arith.negf", "math.absf", "math.sqrt", "math.powf", "math.cbrt", "math.exp", "math.sin", "arith.subf", "arith.addf", "math.sinh", "math.log"](^bb2857, ^bb3008, ^bb3157, ^bb3212, ^bb3249, ^bb3267, ^bb3312, ^bb3345, ^bb3363, ^bb3405, ^bb3810, ^bb4091, ^bb4177) -> ^bb1
  ^bb2857:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 0 -> ^bb2858, ^bb1
  ^bb2858:  // pred: ^bb2857
    pdl_interp.check_result_count of %2 is 1 -> ^bb2859, ^bb1
  ^bb2859:  // pred: ^bb2858
    %1538 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1538 : !pdl.value -> ^bb2860, ^bb1
  ^bb2860:  // pred: ^bb2859
    pdl_interp.are_equal %1538, %1 : !pdl.value -> ^bb2861, ^bb1
  ^bb2861:  // pred: ^bb2860
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb2862, ^bb1
  ^bb2862:  // pred: ^bb2861
    pdl_interp.switch_operation_name of %1537 to ["arith.divf", "math.exp", "math.powf", "math.tan", "math.sqrt"](^bb2863, ^bb2894, ^bb2906, ^bb2920, ^bb2937) -> ^bb1
  ^bb2863:  // pred: ^bb2862
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb2864, ^bb1
  ^bb2864:  // pred: ^bb2863
    pdl_interp.check_result_count of %1537 is 1 -> ^bb2865, ^bb1
  ^bb2865:  // pred: ^bb2864
    %1539 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1539 : !pdl.value -> ^bb2866, ^bb1
  ^bb2866:  // pred: ^bb2865
    pdl_interp.are_equal %1539, %1536 : !pdl.value -> ^bb2867, ^bb1
  ^bb2867:  // pred: ^bb2866
    %1540 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1540 : !pdl.value -> ^bb2868, ^bb1
  ^bb2868:  // pred: ^bb2867
    %1541 = pdl_interp.get_defining_op of %1540 : !pdl.value
    pdl_interp.is_not_null %1541 : !pdl.operation -> ^bb2878, ^bb2869
  ^bb2869:  // 17 preds: ^bb2868, ^bb2878, ^bb2879, ^bb2880, ^bb2881, ^bb2882, ^bb2883, ^bb2884, ^bb2885, ^bb2886, ^bb2887, ^bb2888, ^bb2889, ^bb2890, ^bb2891, ^bb2892, ^bb2893
    %1542 = pdl_interp.get_operand 1 of %1537
    pdl_interp.is_not_null %1542 : !pdl.value -> ^bb2870, ^bb1
  ^bb2870:  // pred: ^bb2869
    %1543 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1543 : !pdl.attribute -> ^bb2871, ^bb1
  ^bb2871:  // pred: ^bb2870
    pdl_interp.check_attribute %1543 is 1.000000e+00 : f32 -> ^bb2872, ^bb1
  ^bb2872:  // pred: ^bb2871
    %1544 = pdl_interp.get_value_type of %1538 : !pdl.type
    pdl_interp.check_type %1544 is f32 -> ^bb2873, ^bb1
  ^bb2873:  // pred: ^bb2872
    %1545 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1544, %1545 : !pdl.type -> ^bb2874, ^bb1
  ^bb2874:  // pred: ^bb2873
    %1546 = pdl_interp.get_value_type of %1539 : !pdl.type
    pdl_interp.are_equal %1544, %1546 : !pdl.type -> ^bb2875, ^bb1
  ^bb2875:  // pred: ^bb2874
    %1547 = pdl_interp.get_value_type of %1540 : !pdl.type
    pdl_interp.are_equal %1544, %1547 : !pdl.type -> ^bb2876, ^bb1
  ^bb2876:  // pred: ^bb2875
    %1548 = pdl_interp.get_value_type of %1542 : !pdl.type
    pdl_interp.are_equal %1544, %1548 : !pdl.type -> ^bb2877, ^bb1
  ^bb2877:  // pred: ^bb2876
    pdl_interp.record_match @rewriters::@div_flip_rev(%1542, %1540, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf"]), loc([%arg0, %1537, %2]), root("arith.divf") -> ^bb1
  ^bb2878:  // pred: ^bb2868
    %1549 = pdl_interp.get_operand 1 of %1537
    pdl_interp.is_not_null %1549 : !pdl.value -> ^bb2879, ^bb2869
  ^bb2879:  // pred: ^bb2878
    pdl_interp.check_operation_name of %1541 is "arith.constant" -> ^bb2880, ^bb2869
  ^bb2880:  // pred: ^bb2879
    pdl_interp.check_operand_count of %1541 is 0 -> ^bb2881, ^bb2869
  ^bb2881:  // pred: ^bb2880
    pdl_interp.check_result_count of %1541 is 1 -> ^bb2882, ^bb2869
  ^bb2882:  // pred: ^bb2881
    %1550 = pdl_interp.get_result 0 of %1541
    pdl_interp.is_not_null %1550 : !pdl.value -> ^bb2883, ^bb2869
  ^bb2883:  // pred: ^bb2882
    pdl_interp.are_equal %1550, %1540 : !pdl.value -> ^bb2884, ^bb2869
  ^bb2884:  // pred: ^bb2883
    %1551 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1551 : !pdl.attribute -> ^bb2885, ^bb2869
  ^bb2885:  // pred: ^bb2884
    pdl_interp.check_attribute %1551 is 1.000000e+00 : f32 -> ^bb2886, ^bb2869
  ^bb2886:  // pred: ^bb2885
    %1552 = pdl_interp.get_value_type of %1538 : !pdl.type
    pdl_interp.check_type %1552 is f32 -> ^bb2887, ^bb2869
  ^bb2887:  // pred: ^bb2886
    %1553 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1552, %1553 : !pdl.type -> ^bb2888, ^bb2869
  ^bb2888:  // pred: ^bb2887
    %1554 = pdl_interp.get_value_type of %1539 : !pdl.type
    pdl_interp.are_equal %1552, %1554 : !pdl.type -> ^bb2889, ^bb2869
  ^bb2889:  // pred: ^bb2888
    %1555 = pdl_interp.get_value_type of %1550 : !pdl.type
    pdl_interp.are_equal %1555, %1552 : !pdl.type -> ^bb2890, ^bb2869
  ^bb2890:  // pred: ^bb2889
    %1556 = pdl_interp.get_attribute "value" of %1541
    pdl_interp.is_not_null %1556 : !pdl.attribute -> ^bb2891, ^bb2869
  ^bb2891:  // pred: ^bb2890
    pdl_interp.check_attribute %1556 is 1.000000e+00 : f32 -> ^bb2892, ^bb2869
  ^bb2892:  // pred: ^bb2891
    %1557 = pdl_interp.get_value_type of %1549 : !pdl.type
    pdl_interp.are_equal %1552, %1557 : !pdl.type -> ^bb2893, ^bb2869
  ^bb2893:  // pred: ^bb2892
    pdl_interp.record_match @rewriters::@remove_double_div(%1549, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %1537, %2, %1541]), root("arith.divf") -> ^bb2869
  ^bb2894:  // pred: ^bb2862
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb2895, ^bb1
  ^bb2895:  // pred: ^bb2894
    pdl_interp.check_result_count of %1537 is 1 -> ^bb2896, ^bb1
  ^bb2896:  // pred: ^bb2895
    %1558 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1558 : !pdl.value -> ^bb2897, ^bb1
  ^bb2897:  // pred: ^bb2896
    pdl_interp.are_equal %1558, %1536 : !pdl.value -> ^bb2898, ^bb1
  ^bb2898:  // pred: ^bb2897
    %1559 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1559 : !pdl.value -> ^bb2899, ^bb1
  ^bb2899:  // pred: ^bb2898
    %1560 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1560 : !pdl.attribute -> ^bb2900, ^bb1
  ^bb2900:  // pred: ^bb2899
    pdl_interp.check_attribute %1560 is 1.000000e+00 : f32 -> ^bb2901, ^bb1
  ^bb2901:  // pred: ^bb2900
    %1561 = pdl_interp.get_value_type of %1538 : !pdl.type
    pdl_interp.check_type %1561 is f32 -> ^bb2902, ^bb1
  ^bb2902:  // pred: ^bb2901
    %1562 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1561, %1562 : !pdl.type -> ^bb2903, ^bb1
  ^bb2903:  // pred: ^bb2902
    %1563 = pdl_interp.get_value_type of %1558 : !pdl.type
    pdl_interp.are_equal %1561, %1563 : !pdl.type -> ^bb2904, ^bb1
  ^bb2904:  // pred: ^bb2903
    %1564 = pdl_interp.get_value_type of %1559 : !pdl.type
    pdl_interp.are_equal %1561, %1564 : !pdl.type -> ^bb2905, ^bb1
  ^bb2905:  // pred: ^bb2904
    pdl_interp.record_match @rewriters::@rec_exp(%1559, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.exp"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb1
  ^bb2906:  // pred: ^bb2862
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb2907, ^bb1
  ^bb2907:  // pred: ^bb2906
    pdl_interp.check_result_count of %1537 is 1 -> ^bb2908, ^bb1
  ^bb2908:  // pred: ^bb2907
    %1565 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1565 : !pdl.value -> ^bb2909, ^bb1
  ^bb2909:  // pred: ^bb2908
    pdl_interp.are_equal %1565, %1536 : !pdl.value -> ^bb2910, ^bb1
  ^bb2910:  // pred: ^bb2909
    %1566 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1566 : !pdl.value -> ^bb2911, ^bb1
  ^bb2911:  // pred: ^bb2910
    %1567 = pdl_interp.get_operand 1 of %1537
    pdl_interp.is_not_null %1567 : !pdl.value -> ^bb2912, ^bb1
  ^bb2912:  // pred: ^bb2911
    %1568 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1568 : !pdl.attribute -> ^bb2913, ^bb1
  ^bb2913:  // pred: ^bb2912
    pdl_interp.check_attribute %1568 is 1.000000e+00 : f32 -> ^bb2914, ^bb1
  ^bb2914:  // pred: ^bb2913
    %1569 = pdl_interp.get_value_type of %1538 : !pdl.type
    pdl_interp.check_type %1569 is f32 -> ^bb2915, ^bb1
  ^bb2915:  // pred: ^bb2914
    %1570 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1569, %1570 : !pdl.type -> ^bb2916, ^bb1
  ^bb2916:  // pred: ^bb2915
    %1571 = pdl_interp.get_value_type of %1565 : !pdl.type
    pdl_interp.are_equal %1569, %1571 : !pdl.type -> ^bb2917, ^bb1
  ^bb2917:  // pred: ^bb2916
    %1572 = pdl_interp.get_value_type of %1566 : !pdl.type
    pdl_interp.are_equal %1569, %1572 : !pdl.type -> ^bb2918, ^bb1
  ^bb2918:  // pred: ^bb2917
    %1573 = pdl_interp.get_value_type of %1567 : !pdl.type
    pdl_interp.are_equal %1569, %1573 : !pdl.type -> ^bb2919, ^bb1
  ^bb2919:  // pred: ^bb2918
    pdl_interp.record_match @rewriters::@pow_flip(%1567, %1566, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.powf"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb1
  ^bb2920:  // pred: ^bb2862
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb2921, ^bb1
  ^bb2921:  // pred: ^bb2920
    pdl_interp.check_result_count of %1537 is 1 -> ^bb2922, ^bb1
  ^bb2922:  // pred: ^bb2921
    %1574 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1574 : !pdl.value -> ^bb2923, ^bb1
  ^bb2923:  // pred: ^bb2922
    pdl_interp.are_equal %1574, %1536 : !pdl.value -> ^bb2924, ^bb1
  ^bb2924:  // pred: ^bb2923
    %1575 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1575 : !pdl.value -> ^bb2925, ^bb1
  ^bb2925:  // pred: ^bb2924
    %1576 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1576 : !pdl.attribute -> ^bb2926, ^bb1
  ^bb2926:  // pred: ^bb2925
    pdl_interp.switch_attribute %1576 to [-1.000000e+00 : f32, 1.000000e+00 : f32](^bb2927, ^bb2932) -> ^bb1
  ^bb2927:  // pred: ^bb2926
    %1577 = pdl_interp.get_value_type of %1538 : !pdl.type
    pdl_interp.check_type %1577 is f32 -> ^bb2928, ^bb1
  ^bb2928:  // pred: ^bb2927
    %1578 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1577, %1578 : !pdl.type -> ^bb2929, ^bb1
  ^bb2929:  // pred: ^bb2928
    %1579 = pdl_interp.get_value_type of %1574 : !pdl.type
    pdl_interp.are_equal %1577, %1579 : !pdl.type -> ^bb2930, ^bb1
  ^bb2930:  // pred: ^bb2929
    %1580 = pdl_interp.get_value_type of %1575 : !pdl.type
    pdl_interp.are_equal %1577, %1580 : !pdl.type -> ^bb2931, ^bb1
  ^bb2931:  // pred: ^bb2930
    pdl_interp.record_match @rewriters::@neg_tan_addPIdiv2_rev(%1575, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.constant", "arith.divf", "arith.addf", "math.tan"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb1
  ^bb2932:  // pred: ^bb2926
    %1581 = pdl_interp.get_value_type of %1538 : !pdl.type
    pdl_interp.check_type %1581 is f32 -> ^bb2933, ^bb1
  ^bb2933:  // pred: ^bb2932
    %1582 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1581, %1582 : !pdl.type -> ^bb2934, ^bb1
  ^bb2934:  // pred: ^bb2933
    %1583 = pdl_interp.get_value_type of %1574 : !pdl.type
    pdl_interp.are_equal %1581, %1583 : !pdl.type -> ^bb2935, ^bb1
  ^bb2935:  // pred: ^bb2934
    %1584 = pdl_interp.get_value_type of %1575 : !pdl.type
    pdl_interp.are_equal %1581, %1584 : !pdl.type -> ^bb2936, ^bb1
  ^bb2936:  // pred: ^bb2935
    pdl_interp.record_match @rewriters::@tan_addPIdiv2_rev(%1575, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math_xdsl.constant", "arith.constant", "arith.divf", "arith.addf", "math.tan"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb1
  ^bb2937:  // pred: ^bb2862
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb2938, ^bb1
  ^bb2938:  // pred: ^bb2937
    pdl_interp.check_result_count of %1537 is 1 -> ^bb2939, ^bb1
  ^bb2939:  // pred: ^bb2938
    %1585 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1585 : !pdl.value -> ^bb2940, ^bb1
  ^bb2940:  // pred: ^bb2939
    pdl_interp.are_equal %1585, %1536 : !pdl.value -> ^bb2941, ^bb1
  ^bb2941:  // pred: ^bb2940
    %1586 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1586 : !pdl.value -> ^bb2942, ^bb1
  ^bb2942:  // pred: ^bb2941
    %1587 = pdl_interp.get_defining_op of %1586 : !pdl.value
    pdl_interp.is_not_null %1587 : !pdl.operation -> ^bb2943, ^bb1
  ^bb2943:  // pred: ^bb2942
    pdl_interp.switch_operation_name of %1587 to ["arith.addf", "arith.subf"](^bb2944, ^bb2976) -> ^bb1
  ^bb2944:  // pred: ^bb2943
    pdl_interp.check_operand_count of %1587 is 2 -> ^bb2945, ^bb1
  ^bb2945:  // pred: ^bb2944
    pdl_interp.check_result_count of %1587 is 1 -> ^bb2946, ^bb1
  ^bb2946:  // pred: ^bb2945
    %1588 = pdl_interp.get_result 0 of %1587
    pdl_interp.is_not_null %1588 : !pdl.value -> ^bb2947, ^bb1
  ^bb2947:  // pred: ^bb2946
    pdl_interp.are_equal %1588, %1586 : !pdl.value -> ^bb2948, ^bb1
  ^bb2948:  // pred: ^bb2947
    %1589 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1589 : !pdl.attribute -> ^bb2949, ^bb1
  ^bb2949:  // pred: ^bb2948
    pdl_interp.check_attribute %1589 is 1.000000e+00 : f32 -> ^bb2950, ^bb1
  ^bb2950:  // pred: ^bb2949
    %1590 = pdl_interp.get_value_type of %1538 : !pdl.type
    pdl_interp.check_type %1590 is f32 -> ^bb2951, ^bb1
  ^bb2951:  // pred: ^bb2950
    %1591 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1590, %1591 : !pdl.type -> ^bb2952, ^bb1
  ^bb2952:  // pred: ^bb2951
    %1592 = pdl_interp.get_operand 0 of %1587
    %1593 = pdl_interp.get_defining_op of %1592 : !pdl.value
    pdl_interp.is_not_null %1593 : !pdl.operation -> ^bb2953, ^bb1
  ^bb2953:  // pred: ^bb2952
    %1594 = pdl_interp.get_value_type of %1585 : !pdl.type
    pdl_interp.are_equal %1590, %1594 : !pdl.type -> ^bb2954, ^bb1
  ^bb2954:  // pred: ^bb2953
    pdl_interp.is_not_null %1592 : !pdl.value -> ^bb2955, ^bb1
  ^bb2955:  // pred: ^bb2954
    %1595 = pdl_interp.get_value_type of %1588 : !pdl.type
    pdl_interp.are_equal %1595, %1590 : !pdl.type -> ^bb2956, ^bb1
  ^bb2956:  // pred: ^bb2955
    pdl_interp.check_operation_name of %1593 is "arith.constant" -> ^bb2957, ^bb1
  ^bb2957:  // pred: ^bb2956
    pdl_interp.check_operand_count of %1593 is 0 -> ^bb2958, ^bb1
  ^bb2958:  // pred: ^bb2957
    pdl_interp.check_result_count of %1593 is 1 -> ^bb2959, ^bb1
  ^bb2959:  // pred: ^bb2958
    %1596 = pdl_interp.get_result 0 of %1593
    pdl_interp.is_not_null %1596 : !pdl.value -> ^bb2960, ^bb1
  ^bb2960:  // pred: ^bb2959
    pdl_interp.are_equal %1596, %1592 : !pdl.value -> ^bb2961, ^bb1
  ^bb2961:  // pred: ^bb2960
    %1597 = pdl_interp.get_operand 1 of %1587
    %1598 = pdl_interp.get_defining_op of %1597 : !pdl.value
    pdl_interp.is_not_null %1598 : !pdl.operation -> ^bb2962, ^bb1
  ^bb2962:  // pred: ^bb2961
    %1599 = pdl_interp.get_value_type of %1596 : !pdl.type
    pdl_interp.are_equal %1599, %1590 : !pdl.type -> ^bb2963, ^bb1
  ^bb2963:  // pred: ^bb2962
    pdl_interp.is_not_null %1597 : !pdl.value -> ^bb2964, ^bb1
  ^bb2964:  // pred: ^bb2963
    pdl_interp.check_operation_name of %1598 is "arith.mulf" -> ^bb2965, ^bb1
  ^bb2965:  // pred: ^bb2964
    pdl_interp.check_operand_count of %1598 is 2 -> ^bb2966, ^bb1
  ^bb2966:  // pred: ^bb2965
    pdl_interp.check_result_count of %1598 is 1 -> ^bb2967, ^bb1
  ^bb2967:  // pred: ^bb2966
    %1600 = pdl_interp.get_attribute "value" of %1593
    pdl_interp.is_not_null %1600 : !pdl.attribute -> ^bb2968, ^bb1
  ^bb2968:  // pred: ^bb2967
    pdl_interp.check_attribute %1600 is 1.000000e+00 : f32 -> ^bb2969, ^bb1
  ^bb2969:  // pred: ^bb2968
    %1601 = pdl_interp.get_result 0 of %1598
    pdl_interp.is_not_null %1601 : !pdl.value -> ^bb2970, ^bb1
  ^bb2970:  // pred: ^bb2969
    pdl_interp.are_equal %1601, %1597 : !pdl.value -> ^bb2971, ^bb1
  ^bb2971:  // pred: ^bb2970
    %1602 = pdl_interp.get_operand 0 of %1598
    pdl_interp.is_not_null %1602 : !pdl.value -> ^bb2972, ^bb1
  ^bb2972:  // pred: ^bb2971
    %1603 = pdl_interp.get_operand 1 of %1598
    pdl_interp.are_equal %1602, %1603 : !pdl.value -> ^bb2973, ^bb1
  ^bb2973:  // pred: ^bb2972
    %1604 = pdl_interp.get_value_type of %1602 : !pdl.type
    pdl_interp.are_equal %1604, %1590 : !pdl.type -> ^bb2974, ^bb1
  ^bb2974:  // pred: ^bb2973
    %1605 = pdl_interp.get_value_type of %1601 : !pdl.type
    pdl_interp.are_equal %1605, %1590 : !pdl.type -> ^bb2975, ^bb1
  ^bb2975:  // pred: ^bb2974
    pdl_interp.record_match @rewriters::@cos_atan_rev(%1602, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.atan", "math.cos"]), loc([%arg0, %2, %1537, %1587, %1593, %1598]), root("arith.divf") -> ^bb1
  ^bb2976:  // pred: ^bb2943
    pdl_interp.check_operand_count of %1587 is 2 -> ^bb2977, ^bb1
  ^bb2977:  // pred: ^bb2976
    pdl_interp.check_result_count of %1587 is 1 -> ^bb2978, ^bb1
  ^bb2978:  // pred: ^bb2977
    %1606 = pdl_interp.get_result 0 of %1587
    pdl_interp.is_not_null %1606 : !pdl.value -> ^bb2979, ^bb1
  ^bb2979:  // pred: ^bb2978
    pdl_interp.are_equal %1606, %1586 : !pdl.value -> ^bb2980, ^bb1
  ^bb2980:  // pred: ^bb2979
    %1607 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %1607 : !pdl.attribute -> ^bb2981, ^bb1
  ^bb2981:  // pred: ^bb2980
    pdl_interp.check_attribute %1607 is 1.000000e+00 : f32 -> ^bb2982, ^bb1
  ^bb2982:  // pred: ^bb2981
    %1608 = pdl_interp.get_value_type of %1538 : !pdl.type
    pdl_interp.check_type %1608 is f32 -> ^bb2983, ^bb1
  ^bb2983:  // pred: ^bb2982
    %1609 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1608, %1609 : !pdl.type -> ^bb2984, ^bb1
  ^bb2984:  // pred: ^bb2983
    %1610 = pdl_interp.get_operand 0 of %1587
    %1611 = pdl_interp.get_defining_op of %1610 : !pdl.value
    pdl_interp.is_not_null %1611 : !pdl.operation -> ^bb2985, ^bb1
  ^bb2985:  // pred: ^bb2984
    %1612 = pdl_interp.get_value_type of %1585 : !pdl.type
    pdl_interp.are_equal %1608, %1612 : !pdl.type -> ^bb2986, ^bb1
  ^bb2986:  // pred: ^bb2985
    pdl_interp.is_not_null %1610 : !pdl.value -> ^bb2987, ^bb1
  ^bb2987:  // pred: ^bb2986
    %1613 = pdl_interp.get_value_type of %1606 : !pdl.type
    pdl_interp.are_equal %1613, %1608 : !pdl.type -> ^bb2988, ^bb1
  ^bb2988:  // pred: ^bb2987
    pdl_interp.check_operation_name of %1611 is "arith.constant" -> ^bb2989, ^bb1
  ^bb2989:  // pred: ^bb2988
    pdl_interp.check_operand_count of %1611 is 0 -> ^bb2990, ^bb1
  ^bb2990:  // pred: ^bb2989
    pdl_interp.check_result_count of %1611 is 1 -> ^bb2991, ^bb1
  ^bb2991:  // pred: ^bb2990
    %1614 = pdl_interp.get_result 0 of %1611
    pdl_interp.is_not_null %1614 : !pdl.value -> ^bb2992, ^bb1
  ^bb2992:  // pred: ^bb2991
    pdl_interp.are_equal %1614, %1610 : !pdl.value -> ^bb2993, ^bb1
  ^bb2993:  // pred: ^bb2992
    %1615 = pdl_interp.get_operand 1 of %1587
    %1616 = pdl_interp.get_defining_op of %1615 : !pdl.value
    pdl_interp.is_not_null %1616 : !pdl.operation -> ^bb2994, ^bb1
  ^bb2994:  // pred: ^bb2993
    %1617 = pdl_interp.get_value_type of %1614 : !pdl.type
    pdl_interp.are_equal %1617, %1608 : !pdl.type -> ^bb2995, ^bb1
  ^bb2995:  // pred: ^bb2994
    pdl_interp.is_not_null %1615 : !pdl.value -> ^bb2996, ^bb1
  ^bb2996:  // pred: ^bb2995
    pdl_interp.check_operation_name of %1616 is "arith.mulf" -> ^bb2997, ^bb1
  ^bb2997:  // pred: ^bb2996
    pdl_interp.check_operand_count of %1616 is 2 -> ^bb2998, ^bb1
  ^bb2998:  // pred: ^bb2997
    pdl_interp.check_result_count of %1616 is 1 -> ^bb2999, ^bb1
  ^bb2999:  // pred: ^bb2998
    %1618 = pdl_interp.get_attribute "value" of %1611
    pdl_interp.is_not_null %1618 : !pdl.attribute -> ^bb3000, ^bb1
  ^bb3000:  // pred: ^bb2999
    pdl_interp.check_attribute %1618 is 1.000000e+00 : f32 -> ^bb3001, ^bb1
  ^bb3001:  // pred: ^bb3000
    %1619 = pdl_interp.get_result 0 of %1616
    pdl_interp.is_not_null %1619 : !pdl.value -> ^bb3002, ^bb1
  ^bb3002:  // pred: ^bb3001
    pdl_interp.are_equal %1619, %1615 : !pdl.value -> ^bb3003, ^bb1
  ^bb3003:  // pred: ^bb3002
    %1620 = pdl_interp.get_operand 0 of %1616
    pdl_interp.is_not_null %1620 : !pdl.value -> ^bb3004, ^bb1
  ^bb3004:  // pred: ^bb3003
    %1621 = pdl_interp.get_operand 1 of %1616
    pdl_interp.are_equal %1620, %1621 : !pdl.value -> ^bb3005, ^bb1
  ^bb3005:  // pred: ^bb3004
    %1622 = pdl_interp.get_value_type of %1620 : !pdl.type
    pdl_interp.are_equal %1622, %1608 : !pdl.type -> ^bb3006, ^bb1
  ^bb3006:  // pred: ^bb3005
    %1623 = pdl_interp.get_value_type of %1619 : !pdl.type
    pdl_interp.are_equal %1623, %1608 : !pdl.type -> ^bb3007, ^bb1
  ^bb3007:  // pred: ^bb3006
    pdl_interp.record_match @rewriters::@cosh_atanh_rev(%1620, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.atanh", "math.cosh"]), loc([%arg0, %2, %1537, %1587, %1611, %1616]), root("arith.divf") -> ^bb1
  ^bb3008:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 2 -> ^bb3009, ^bb1
  ^bb3009:  // pred: ^bb3008
    pdl_interp.check_result_count of %2 is 1 -> ^bb3010, ^bb1
  ^bb3010:  // pred: ^bb3009
    %1624 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1624 : !pdl.value -> ^bb3011, ^bb1
  ^bb3011:  // pred: ^bb3010
    pdl_interp.are_equal %1624, %1 : !pdl.value -> ^bb3012, ^bb1
  ^bb3012:  // pred: ^bb3011
    %1625 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1625 : !pdl.value -> ^bb3013, ^bb1
  ^bb3013:  // pred: ^bb3012
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3014, ^bb1
  ^bb3014:  // pred: ^bb3013
    %1626 = pdl_interp.get_value_type of %1625 : !pdl.type
    pdl_interp.check_type %1626 is f32 -> ^bb3142, ^bb3015
  ^bb3015:  // 16 preds: ^bb3014, ^bb3142, ^bb3143, ^bb3144, ^bb3145, ^bb3146, ^bb3147, ^bb3148, ^bb3149, ^bb3150, ^bb3151, ^bb3152, ^bb3153, ^bb3154, ^bb3155, ^bb3156
    pdl_interp.switch_operation_name of %1537 to ["arith.subf", "arith.addf"](^bb3016, ^bb3079) -> ^bb1
  ^bb3016:  // pred: ^bb3015
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb3017, ^bb1
  ^bb3017:  // pred: ^bb3016
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3018, ^bb1
  ^bb3018:  // pred: ^bb3017
    %1627 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1627 : !pdl.value -> ^bb3019, ^bb1
  ^bb3019:  // pred: ^bb3018
    pdl_interp.are_equal %1627, %1536 : !pdl.value -> ^bb3020, ^bb1
  ^bb3020:  // pred: ^bb3019
    %1628 = pdl_interp.get_operand 1 of %2
    %1629 = pdl_interp.get_defining_op of %1628 : !pdl.value
    pdl_interp.is_not_null %1629 : !pdl.operation -> ^bb3021, ^bb1
  ^bb3021:  // pred: ^bb3020
    %1630 = pdl_interp.get_defining_op of %1625 : !pdl.value
    pdl_interp.is_not_null %1630 : !pdl.operation -> ^bb3022, ^bb1
  ^bb3022:  // pred: ^bb3021
    pdl_interp.is_not_null %1628 : !pdl.value -> ^bb3023, ^bb1
  ^bb3023:  // pred: ^bb3022
    %1631 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1631 : !pdl.value -> ^bb3024, ^bb1
  ^bb3024:  // pred: ^bb3023
    %1632 = pdl_interp.get_defining_op of %1631 : !pdl.value
    pdl_interp.is_not_null %1632 : !pdl.operation -> ^bb3025, ^bb1
  ^bb3025:  // pred: ^bb3024
    %1633 = pdl_interp.get_operand 1 of %1537
    %1634 = pdl_interp.get_defining_op of %1633 : !pdl.value
    pdl_interp.is_not_null %1634 : !pdl.operation -> ^bb3026, ^bb1
  ^bb3026:  // pred: ^bb3025
    pdl_interp.check_operation_name of %1629 is "math.tan" -> ^bb3027, ^bb1
  ^bb3027:  // pred: ^bb3026
    pdl_interp.check_operand_count of %1629 is 1 -> ^bb3028, ^bb1
  ^bb3028:  // pred: ^bb3027
    pdl_interp.check_result_count of %1629 is 1 -> ^bb3029, ^bb1
  ^bb3029:  // pred: ^bb3028
    %1635 = pdl_interp.get_result 0 of %1629
    pdl_interp.is_not_null %1635 : !pdl.value -> ^bb3030, ^bb1
  ^bb3030:  // pred: ^bb3029
    pdl_interp.are_equal %1635, %1628 : !pdl.value -> ^bb3031, ^bb1
  ^bb3031:  // pred: ^bb3030
    pdl_interp.check_operation_name of %1630 is "arith.constant" -> ^bb3032, ^bb1
  ^bb3032:  // pred: ^bb3031
    pdl_interp.check_operand_count of %1630 is 0 -> ^bb3033, ^bb1
  ^bb3033:  // pred: ^bb3032
    pdl_interp.check_result_count of %1630 is 1 -> ^bb3034, ^bb1
  ^bb3034:  // pred: ^bb3033
    %1636 = pdl_interp.get_result 0 of %1630
    pdl_interp.is_not_null %1636 : !pdl.value -> ^bb3035, ^bb1
  ^bb3035:  // pred: ^bb3034
    pdl_interp.are_equal %1636, %1625 : !pdl.value -> ^bb3036, ^bb1
  ^bb3036:  // pred: ^bb3035
    pdl_interp.is_not_null %1633 : !pdl.value -> ^bb3037, ^bb1
  ^bb3037:  // pred: ^bb3036
    pdl_interp.check_operation_name of %1632 is "arith.constant" -> ^bb3038, ^bb1
  ^bb3038:  // pred: ^bb3037
    pdl_interp.check_operand_count of %1632 is 0 -> ^bb3039, ^bb1
  ^bb3039:  // pred: ^bb3038
    pdl_interp.check_result_count of %1632 is 1 -> ^bb3040, ^bb1
  ^bb3040:  // pred: ^bb3039
    %1637 = pdl_interp.get_result 0 of %1632
    pdl_interp.is_not_null %1637 : !pdl.value -> ^bb3041, ^bb1
  ^bb3041:  // pred: ^bb3040
    pdl_interp.are_equal %1637, %1631 : !pdl.value -> ^bb3042, ^bb1
  ^bb3042:  // pred: ^bb3041
    pdl_interp.check_operation_name of %1634 is "arith.mulf" -> ^bb3043, ^bb1
  ^bb3043:  // pred: ^bb3042
    pdl_interp.check_operand_count of %1634 is 2 -> ^bb3044, ^bb1
  ^bb3044:  // pred: ^bb3043
    pdl_interp.check_result_count of %1634 is 1 -> ^bb3045, ^bb1
  ^bb3045:  // pred: ^bb3044
    %1638 = pdl_interp.get_result 0 of %1634
    pdl_interp.is_not_null %1638 : !pdl.value -> ^bb3046, ^bb1
  ^bb3046:  // pred: ^bb3045
    pdl_interp.are_equal %1638, %1633 : !pdl.value -> ^bb3047, ^bb1
  ^bb3047:  // pred: ^bb3046
    %1639 = pdl_interp.get_operand 0 of %1629
    pdl_interp.is_not_null %1639 : !pdl.value -> ^bb3048, ^bb1
  ^bb3048:  // pred: ^bb3047
    %1640 = pdl_interp.get_attribute "value" of %1630
    pdl_interp.is_not_null %1640 : !pdl.attribute -> ^bb3049, ^bb1
  ^bb3049:  // pred: ^bb3048
    pdl_interp.check_attribute %1640 is 2.000000e+00 : f32 -> ^bb3050, ^bb1
  ^bb3050:  // pred: ^bb3049
    %1641 = pdl_interp.get_value_type of %1636 : !pdl.type
    pdl_interp.check_type %1641 is f32 -> ^bb3051, ^bb1
  ^bb3051:  // pred: ^bb3050
    %1642 = pdl_interp.get_value_type of %1624 : !pdl.type
    pdl_interp.are_equal %1641, %1642 : !pdl.type -> ^bb3052, ^bb1
  ^bb3052:  // pred: ^bb3051
    %1643 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1641, %1643 : !pdl.type -> ^bb3053, ^bb1
  ^bb3053:  // pred: ^bb3052
    %1644 = pdl_interp.get_operand 0 of %1634
    %1645 = pdl_interp.get_defining_op of %1644 : !pdl.value
    pdl_interp.is_not_null %1645 : !pdl.operation -> ^bb3054, ^bb1
  ^bb3054:  // pred: ^bb3053
    %1646 = pdl_interp.get_value_type of %1635 : !pdl.type
    pdl_interp.are_equal %1641, %1646 : !pdl.type -> ^bb3055, ^bb1
  ^bb3055:  // pred: ^bb3054
    pdl_interp.is_not_null %1644 : !pdl.value -> ^bb3056, ^bb1
  ^bb3056:  // pred: ^bb3055
    pdl_interp.check_operation_name of %1645 is "math.tan" -> ^bb3057, ^bb1
  ^bb3057:  // pred: ^bb3056
    pdl_interp.check_operand_count of %1645 is 1 -> ^bb3058, ^bb1
  ^bb3058:  // pred: ^bb3057
    pdl_interp.check_result_count of %1645 is 1 -> ^bb3059, ^bb1
  ^bb3059:  // pred: ^bb3058
    %1647 = pdl_interp.get_result 0 of %1645
    pdl_interp.is_not_null %1647 : !pdl.value -> ^bb3060, ^bb1
  ^bb3060:  // pred: ^bb3059
    pdl_interp.are_equal %1647, %1644 : !pdl.value -> ^bb3061, ^bb1
  ^bb3061:  // pred: ^bb3060
    %1648 = pdl_interp.get_attribute "value" of %1632
    pdl_interp.is_not_null %1648 : !pdl.attribute -> ^bb3062, ^bb1
  ^bb3062:  // pred: ^bb3061
    pdl_interp.check_attribute %1648 is 1.000000e+00 : f32 -> ^bb3063, ^bb1
  ^bb3063:  // pred: ^bb3062
    %1649 = pdl_interp.get_operand 1 of %1634
    %1650 = pdl_interp.get_defining_op of %1649 : !pdl.value
    pdl_interp.is_not_null %1650 : !pdl.operation -> ^bb3064, ^bb1
  ^bb3064:  // pred: ^bb3063
    %1651 = pdl_interp.get_value_type of %1627 : !pdl.type
    pdl_interp.are_equal %1641, %1651 : !pdl.type -> ^bb3065, ^bb1
  ^bb3065:  // pred: ^bb3064
    %1652 = pdl_interp.get_value_type of %1639 : !pdl.type
    pdl_interp.are_equal %1641, %1652 : !pdl.type -> ^bb3066, ^bb1
  ^bb3066:  // pred: ^bb3065
    %1653 = pdl_interp.get_value_type of %1637 : !pdl.type
    pdl_interp.are_equal %1641, %1653 : !pdl.type -> ^bb3067, ^bb1
  ^bb3067:  // pred: ^bb3066
    pdl_interp.is_not_null %1649 : !pdl.value -> ^bb3068, ^bb1
  ^bb3068:  // pred: ^bb3067
    pdl_interp.check_operation_name of %1650 is "math.tan" -> ^bb3069, ^bb1
  ^bb3069:  // pred: ^bb3068
    pdl_interp.check_operand_count of %1650 is 1 -> ^bb3070, ^bb1
  ^bb3070:  // pred: ^bb3069
    pdl_interp.check_result_count of %1650 is 1 -> ^bb3071, ^bb1
  ^bb3071:  // pred: ^bb3070
    %1654 = pdl_interp.get_result 0 of %1650
    pdl_interp.is_not_null %1654 : !pdl.value -> ^bb3072, ^bb1
  ^bb3072:  // pred: ^bb3071
    pdl_interp.are_equal %1654, %1649 : !pdl.value -> ^bb3073, ^bb1
  ^bb3073:  // pred: ^bb3072
    %1655 = pdl_interp.get_value_type of %1638 : !pdl.type
    pdl_interp.are_equal %1641, %1655 : !pdl.type -> ^bb3074, ^bb1
  ^bb3074:  // pred: ^bb3073
    %1656 = pdl_interp.get_operand 0 of %1650
    pdl_interp.are_equal %1656, %1639 : !pdl.value -> ^bb3075, ^bb1
  ^bb3075:  // pred: ^bb3074
    %1657 = pdl_interp.get_value_type of %1647 : !pdl.type
    pdl_interp.are_equal %1657, %1641 : !pdl.type -> ^bb3076, ^bb1
  ^bb3076:  // pred: ^bb3075
    %1658 = pdl_interp.get_operand 0 of %1645
    pdl_interp.are_equal %1658, %1639 : !pdl.value -> ^bb3077, ^bb1
  ^bb3077:  // pred: ^bb3076
    %1659 = pdl_interp.get_value_type of %1654 : !pdl.type
    pdl_interp.are_equal %1659, %1641 : !pdl.type -> ^bb3078, ^bb1
  ^bb3078:  // pred: ^bb3077
    pdl_interp.record_match @rewriters::@_2_tan(%1639, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.tan"]), loc([%arg0, %2, %1537, %1629, %1630, %1632, %1634, %1645, %1650]), root("arith.divf") -> ^bb1
  ^bb3079:  // pred: ^bb3015
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb3080, ^bb1
  ^bb3080:  // pred: ^bb3079
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3081, ^bb1
  ^bb3081:  // pred: ^bb3080
    %1660 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1660 : !pdl.value -> ^bb3082, ^bb1
  ^bb3082:  // pred: ^bb3081
    pdl_interp.are_equal %1660, %1536 : !pdl.value -> ^bb3083, ^bb1
  ^bb3083:  // pred: ^bb3082
    %1661 = pdl_interp.get_operand 1 of %2
    %1662 = pdl_interp.get_defining_op of %1661 : !pdl.value
    pdl_interp.is_not_null %1662 : !pdl.operation -> ^bb3084, ^bb1
  ^bb3084:  // pred: ^bb3083
    %1663 = pdl_interp.get_defining_op of %1625 : !pdl.value
    pdl_interp.is_not_null %1663 : !pdl.operation -> ^bb3085, ^bb1
  ^bb3085:  // pred: ^bb3084
    pdl_interp.is_not_null %1661 : !pdl.value -> ^bb3086, ^bb1
  ^bb3086:  // pred: ^bb3085
    %1664 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1664 : !pdl.value -> ^bb3087, ^bb1
  ^bb3087:  // pred: ^bb3086
    %1665 = pdl_interp.get_defining_op of %1664 : !pdl.value
    pdl_interp.is_not_null %1665 : !pdl.operation -> ^bb3088, ^bb1
  ^bb3088:  // pred: ^bb3087
    %1666 = pdl_interp.get_operand 1 of %1537
    %1667 = pdl_interp.get_defining_op of %1666 : !pdl.value
    pdl_interp.is_not_null %1667 : !pdl.operation -> ^bb3089, ^bb1
  ^bb3089:  // pred: ^bb3088
    pdl_interp.check_operation_name of %1662 is "math.tanh" -> ^bb3090, ^bb1
  ^bb3090:  // pred: ^bb3089
    pdl_interp.check_operand_count of %1662 is 1 -> ^bb3091, ^bb1
  ^bb3091:  // pred: ^bb3090
    pdl_interp.check_result_count of %1662 is 1 -> ^bb3092, ^bb1
  ^bb3092:  // pred: ^bb3091
    %1668 = pdl_interp.get_result 0 of %1662
    pdl_interp.is_not_null %1668 : !pdl.value -> ^bb3093, ^bb1
  ^bb3093:  // pred: ^bb3092
    pdl_interp.are_equal %1668, %1661 : !pdl.value -> ^bb3094, ^bb1
  ^bb3094:  // pred: ^bb3093
    pdl_interp.check_operation_name of %1663 is "arith.constant" -> ^bb3095, ^bb1
  ^bb3095:  // pred: ^bb3094
    pdl_interp.check_operand_count of %1663 is 0 -> ^bb3096, ^bb1
  ^bb3096:  // pred: ^bb3095
    pdl_interp.check_result_count of %1663 is 1 -> ^bb3097, ^bb1
  ^bb3097:  // pred: ^bb3096
    %1669 = pdl_interp.get_result 0 of %1663
    pdl_interp.is_not_null %1669 : !pdl.value -> ^bb3098, ^bb1
  ^bb3098:  // pred: ^bb3097
    pdl_interp.are_equal %1669, %1625 : !pdl.value -> ^bb3099, ^bb1
  ^bb3099:  // pred: ^bb3098
    pdl_interp.is_not_null %1666 : !pdl.value -> ^bb3100, ^bb1
  ^bb3100:  // pred: ^bb3099
    pdl_interp.check_operation_name of %1665 is "arith.constant" -> ^bb3101, ^bb1
  ^bb3101:  // pred: ^bb3100
    pdl_interp.check_operand_count of %1665 is 0 -> ^bb3102, ^bb1
  ^bb3102:  // pred: ^bb3101
    pdl_interp.check_result_count of %1665 is 1 -> ^bb3103, ^bb1
  ^bb3103:  // pred: ^bb3102
    %1670 = pdl_interp.get_result 0 of %1665
    pdl_interp.is_not_null %1670 : !pdl.value -> ^bb3104, ^bb1
  ^bb3104:  // pred: ^bb3103
    pdl_interp.are_equal %1670, %1664 : !pdl.value -> ^bb3105, ^bb1
  ^bb3105:  // pred: ^bb3104
    pdl_interp.check_operation_name of %1667 is "arith.mulf" -> ^bb3106, ^bb1
  ^bb3106:  // pred: ^bb3105
    pdl_interp.check_operand_count of %1667 is 2 -> ^bb3107, ^bb1
  ^bb3107:  // pred: ^bb3106
    pdl_interp.check_result_count of %1667 is 1 -> ^bb3108, ^bb1
  ^bb3108:  // pred: ^bb3107
    %1671 = pdl_interp.get_result 0 of %1667
    pdl_interp.is_not_null %1671 : !pdl.value -> ^bb3109, ^bb1
  ^bb3109:  // pred: ^bb3108
    pdl_interp.are_equal %1671, %1666 : !pdl.value -> ^bb3110, ^bb1
  ^bb3110:  // pred: ^bb3109
    %1672 = pdl_interp.get_operand 0 of %1662
    pdl_interp.is_not_null %1672 : !pdl.value -> ^bb3111, ^bb1
  ^bb3111:  // pred: ^bb3110
    %1673 = pdl_interp.get_attribute "value" of %1663
    pdl_interp.is_not_null %1673 : !pdl.attribute -> ^bb3112, ^bb1
  ^bb3112:  // pred: ^bb3111
    pdl_interp.check_attribute %1673 is 2.000000e+00 : f32 -> ^bb3113, ^bb1
  ^bb3113:  // pred: ^bb3112
    %1674 = pdl_interp.get_value_type of %1669 : !pdl.type
    pdl_interp.check_type %1674 is f32 -> ^bb3114, ^bb1
  ^bb3114:  // pred: ^bb3113
    %1675 = pdl_interp.get_value_type of %1624 : !pdl.type
    pdl_interp.are_equal %1674, %1675 : !pdl.type -> ^bb3115, ^bb1
  ^bb3115:  // pred: ^bb3114
    %1676 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1674, %1676 : !pdl.type -> ^bb3116, ^bb1
  ^bb3116:  // pred: ^bb3115
    %1677 = pdl_interp.get_operand 0 of %1667
    %1678 = pdl_interp.get_defining_op of %1677 : !pdl.value
    pdl_interp.is_not_null %1678 : !pdl.operation -> ^bb3117, ^bb1
  ^bb3117:  // pred: ^bb3116
    %1679 = pdl_interp.get_value_type of %1668 : !pdl.type
    pdl_interp.are_equal %1674, %1679 : !pdl.type -> ^bb3118, ^bb1
  ^bb3118:  // pred: ^bb3117
    pdl_interp.is_not_null %1677 : !pdl.value -> ^bb3119, ^bb1
  ^bb3119:  // pred: ^bb3118
    pdl_interp.check_operation_name of %1678 is "math.tanh" -> ^bb3120, ^bb1
  ^bb3120:  // pred: ^bb3119
    pdl_interp.check_operand_count of %1678 is 1 -> ^bb3121, ^bb1
  ^bb3121:  // pred: ^bb3120
    pdl_interp.check_result_count of %1678 is 1 -> ^bb3122, ^bb1
  ^bb3122:  // pred: ^bb3121
    %1680 = pdl_interp.get_result 0 of %1678
    pdl_interp.is_not_null %1680 : !pdl.value -> ^bb3123, ^bb1
  ^bb3123:  // pred: ^bb3122
    pdl_interp.are_equal %1680, %1677 : !pdl.value -> ^bb3124, ^bb1
  ^bb3124:  // pred: ^bb3123
    %1681 = pdl_interp.get_attribute "value" of %1665
    pdl_interp.is_not_null %1681 : !pdl.attribute -> ^bb3125, ^bb1
  ^bb3125:  // pred: ^bb3124
    pdl_interp.check_attribute %1681 is 1.000000e+00 : f32 -> ^bb3126, ^bb1
  ^bb3126:  // pred: ^bb3125
    %1682 = pdl_interp.get_operand 1 of %1667
    %1683 = pdl_interp.get_defining_op of %1682 : !pdl.value
    pdl_interp.is_not_null %1683 : !pdl.operation -> ^bb3127, ^bb1
  ^bb3127:  // pred: ^bb3126
    %1684 = pdl_interp.get_value_type of %1660 : !pdl.type
    pdl_interp.are_equal %1674, %1684 : !pdl.type -> ^bb3128, ^bb1
  ^bb3128:  // pred: ^bb3127
    %1685 = pdl_interp.get_value_type of %1672 : !pdl.type
    pdl_interp.are_equal %1674, %1685 : !pdl.type -> ^bb3129, ^bb1
  ^bb3129:  // pred: ^bb3128
    %1686 = pdl_interp.get_value_type of %1670 : !pdl.type
    pdl_interp.are_equal %1674, %1686 : !pdl.type -> ^bb3130, ^bb1
  ^bb3130:  // pred: ^bb3129
    pdl_interp.is_not_null %1682 : !pdl.value -> ^bb3131, ^bb1
  ^bb3131:  // pred: ^bb3130
    pdl_interp.check_operation_name of %1683 is "math.tanh" -> ^bb3132, ^bb1
  ^bb3132:  // pred: ^bb3131
    pdl_interp.check_operand_count of %1683 is 1 -> ^bb3133, ^bb1
  ^bb3133:  // pred: ^bb3132
    pdl_interp.check_result_count of %1683 is 1 -> ^bb3134, ^bb1
  ^bb3134:  // pred: ^bb3133
    %1687 = pdl_interp.get_result 0 of %1683
    pdl_interp.is_not_null %1687 : !pdl.value -> ^bb3135, ^bb1
  ^bb3135:  // pred: ^bb3134
    pdl_interp.are_equal %1687, %1682 : !pdl.value -> ^bb3136, ^bb1
  ^bb3136:  // pred: ^bb3135
    %1688 = pdl_interp.get_value_type of %1671 : !pdl.type
    pdl_interp.are_equal %1674, %1688 : !pdl.type -> ^bb3137, ^bb1
  ^bb3137:  // pred: ^bb3136
    %1689 = pdl_interp.get_operand 0 of %1683
    pdl_interp.are_equal %1689, %1672 : !pdl.value -> ^bb3138, ^bb1
  ^bb3138:  // pred: ^bb3137
    %1690 = pdl_interp.get_value_type of %1680 : !pdl.type
    pdl_interp.are_equal %1690, %1674 : !pdl.type -> ^bb3139, ^bb1
  ^bb3139:  // pred: ^bb3138
    %1691 = pdl_interp.get_operand 0 of %1678
    pdl_interp.are_equal %1691, %1672 : !pdl.value -> ^bb3140, ^bb1
  ^bb3140:  // pred: ^bb3139
    %1692 = pdl_interp.get_value_type of %1687 : !pdl.type
    pdl_interp.are_equal %1692, %1674 : !pdl.type -> ^bb3141, ^bb1
  ^bb3141:  // pred: ^bb3140
    pdl_interp.record_match @rewriters::@tanh_2_rev(%1672, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.tanh"]), loc([%arg0, %2, %1537, %1662, %1663, %1665, %1667, %1678, %1683]), root("arith.divf") -> ^bb1
  ^bb3142:  // pred: ^bb3014
    %1693 = pdl_interp.get_value_type of %1624 : !pdl.type
    pdl_interp.are_equal %1626, %1693 : !pdl.type -> ^bb3143, ^bb3015
  ^bb3143:  // pred: ^bb3142
    %1694 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1626, %1694 : !pdl.type -> ^bb3144, ^bb3015
  ^bb3144:  // pred: ^bb3143
    pdl_interp.check_operation_name of %1537 is "arith.mulf" -> ^bb3145, ^bb3015
  ^bb3145:  // pred: ^bb3144
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb3146, ^bb3015
  ^bb3146:  // pred: ^bb3145
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3147, ^bb3015
  ^bb3147:  // pred: ^bb3146
    %1695 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1695 : !pdl.value -> ^bb3148, ^bb3015
  ^bb3148:  // pred: ^bb3147
    pdl_interp.are_equal %1695, %1536 : !pdl.value -> ^bb3149, ^bb3015
  ^bb3149:  // pred: ^bb3148
    %1696 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %1696 : !pdl.value -> ^bb3150, ^bb3015
  ^bb3150:  // pred: ^bb3149
    %1697 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1697 : !pdl.value -> ^bb3151, ^bb3015
  ^bb3151:  // pred: ^bb3150
    %1698 = pdl_interp.get_operand 1 of %1537
    pdl_interp.is_not_null %1698 : !pdl.value -> ^bb3152, ^bb3015
  ^bb3152:  // pred: ^bb3151
    %1699 = pdl_interp.get_value_type of %1695 : !pdl.type
    pdl_interp.are_equal %1626, %1699 : !pdl.type -> ^bb3153, ^bb3015
  ^bb3153:  // pred: ^bb3152
    %1700 = pdl_interp.get_value_type of %1696 : !pdl.type
    pdl_interp.are_equal %1626, %1700 : !pdl.type -> ^bb3154, ^bb3015
  ^bb3154:  // pred: ^bb3153
    %1701 = pdl_interp.get_value_type of %1697 : !pdl.type
    pdl_interp.are_equal %1626, %1701 : !pdl.type -> ^bb3155, ^bb3015
  ^bb3155:  // pred: ^bb3154
    %1702 = pdl_interp.get_value_type of %1698 : !pdl.type
    pdl_interp.are_equal %1626, %1702 : !pdl.type -> ^bb3156, ^bb3015
  ^bb3156:  // pred: ^bb3155
    pdl_interp.record_match @rewriters::@times_frac(%1625, %1697, %1696, %1698, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.divf", "arith.mulf"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb3015
  ^bb3157:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 1 -> ^bb3158, ^bb1
  ^bb3158:  // pred: ^bb3157
    pdl_interp.check_result_count of %2 is 1 -> ^bb3159, ^bb1
  ^bb3159:  // pred: ^bb3158
    %1703 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1703 : !pdl.value -> ^bb3160, ^bb1
  ^bb3160:  // pred: ^bb3159
    pdl_interp.are_equal %1703, %1 : !pdl.value -> ^bb3161, ^bb1
  ^bb3161:  // pred: ^bb3160
    %1704 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1704 : !pdl.value -> ^bb3162, ^bb1
  ^bb3162:  // pred: ^bb3161
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3163, ^bb1
  ^bb3163:  // pred: ^bb3162
    %1705 = pdl_interp.get_value_type of %1704 : !pdl.type
    pdl_interp.check_type %1705 is f32 -> ^bb3201, ^bb3164
  ^bb3164:  // 12 preds: ^bb3163, ^bb3201, ^bb3202, ^bb3203, ^bb3204, ^bb3205, ^bb3206, ^bb3207, ^bb3208, ^bb3209, ^bb3210, ^bb3211
    pdl_interp.check_operation_name of %1537 is "arith.addf" -> ^bb3165, ^bb1
  ^bb3165:  // pred: ^bb3164
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb3166, ^bb1
  ^bb3166:  // pred: ^bb3165
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3167, ^bb1
  ^bb3167:  // pred: ^bb3166
    %1706 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1706 : !pdl.value -> ^bb3168, ^bb1
  ^bb3168:  // pred: ^bb3167
    pdl_interp.are_equal %1706, %1536 : !pdl.value -> ^bb3169, ^bb1
  ^bb3169:  // pred: ^bb3168
    %1707 = pdl_interp.get_defining_op of %1704 : !pdl.value
    pdl_interp.is_not_null %1707 : !pdl.operation -> ^bb3170, ^bb1
  ^bb3170:  // pred: ^bb3169
    %1708 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1708 : !pdl.value -> ^bb3171, ^bb1
  ^bb3171:  // pred: ^bb3170
    %1709 = pdl_interp.get_defining_op of %1708 : !pdl.value
    pdl_interp.is_not_null %1709 : !pdl.operation -> ^bb3172, ^bb1
  ^bb3172:  // pred: ^bb3171
    %1710 = pdl_interp.get_operand 1 of %1537
    %1711 = pdl_interp.get_defining_op of %1710 : !pdl.value
    pdl_interp.is_not_null %1711 : !pdl.operation -> ^bb3173, ^bb1
  ^bb3173:  // pred: ^bb3172
    pdl_interp.check_operation_name of %1707 is "math.sin" -> ^bb3174, ^bb1
  ^bb3174:  // pred: ^bb3173
    pdl_interp.check_operand_count of %1707 is 1 -> ^bb3175, ^bb1
  ^bb3175:  // pred: ^bb3174
    pdl_interp.check_result_count of %1707 is 1 -> ^bb3176, ^bb1
  ^bb3176:  // pred: ^bb3175
    %1712 = pdl_interp.get_result 0 of %1707
    pdl_interp.is_not_null %1712 : !pdl.value -> ^bb3177, ^bb1
  ^bb3177:  // pred: ^bb3176
    pdl_interp.are_equal %1712, %1704 : !pdl.value -> ^bb3178, ^bb1
  ^bb3178:  // pred: ^bb3177
    pdl_interp.is_not_null %1710 : !pdl.value -> ^bb3179, ^bb1
  ^bb3179:  // pred: ^bb3178
    pdl_interp.check_operation_name of %1709 is "arith.constant" -> ^bb3180, ^bb1
  ^bb3180:  // pred: ^bb3179
    pdl_interp.check_operand_count of %1709 is 0 -> ^bb3181, ^bb1
  ^bb3181:  // pred: ^bb3180
    pdl_interp.check_result_count of %1709 is 1 -> ^bb3182, ^bb1
  ^bb3182:  // pred: ^bb3181
    %1713 = pdl_interp.get_result 0 of %1709
    pdl_interp.is_not_null %1713 : !pdl.value -> ^bb3183, ^bb1
  ^bb3183:  // pred: ^bb3182
    pdl_interp.are_equal %1713, %1708 : !pdl.value -> ^bb3184, ^bb1
  ^bb3184:  // pred: ^bb3183
    pdl_interp.check_operation_name of %1711 is "math.cos" -> ^bb3185, ^bb1
  ^bb3185:  // pred: ^bb3184
    pdl_interp.check_operand_count of %1711 is 1 -> ^bb3186, ^bb1
  ^bb3186:  // pred: ^bb3185
    pdl_interp.check_result_count of %1711 is 1 -> ^bb3187, ^bb1
  ^bb3187:  // pred: ^bb3186
    %1714 = pdl_interp.get_result 0 of %1711
    pdl_interp.is_not_null %1714 : !pdl.value -> ^bb3188, ^bb1
  ^bb3188:  // pred: ^bb3187
    pdl_interp.are_equal %1714, %1710 : !pdl.value -> ^bb3189, ^bb1
  ^bb3189:  // pred: ^bb3188
    %1715 = pdl_interp.get_operand 0 of %1707
    pdl_interp.is_not_null %1715 : !pdl.value -> ^bb3190, ^bb1
  ^bb3190:  // pred: ^bb3189
    %1716 = pdl_interp.get_value_type of %1715 : !pdl.type
    pdl_interp.check_type %1716 is f32 -> ^bb3191, ^bb1
  ^bb3191:  // pred: ^bb3190
    %1717 = pdl_interp.get_value_type of %1712 : !pdl.type
    pdl_interp.are_equal %1716, %1717 : !pdl.type -> ^bb3192, ^bb1
  ^bb3192:  // pred: ^bb3191
    %1718 = pdl_interp.get_value_type of %1703 : !pdl.type
    pdl_interp.are_equal %1716, %1718 : !pdl.type -> ^bb3193, ^bb1
  ^bb3193:  // pred: ^bb3192
    %1719 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1716, %1719 : !pdl.type -> ^bb3194, ^bb1
  ^bb3194:  // pred: ^bb3193
    %1720 = pdl_interp.get_value_type of %1706 : !pdl.type
    pdl_interp.are_equal %1716, %1720 : !pdl.type -> ^bb3195, ^bb1
  ^bb3195:  // pred: ^bb3194
    %1721 = pdl_interp.get_value_type of %1714 : !pdl.type
    pdl_interp.are_equal %1716, %1721 : !pdl.type -> ^bb3196, ^bb1
  ^bb3196:  // pred: ^bb3195
    %1722 = pdl_interp.get_value_type of %1713 : !pdl.type
    pdl_interp.are_equal %1716, %1722 : !pdl.type -> ^bb3197, ^bb1
  ^bb3197:  // pred: ^bb3196
    %1723 = pdl_interp.get_attribute "value" of %1709
    pdl_interp.is_not_null %1723 : !pdl.attribute -> ^bb3198, ^bb1
  ^bb3198:  // pred: ^bb3197
    pdl_interp.check_attribute %1723 is 1.000000e+00 : f32 -> ^bb3199, ^bb1
  ^bb3199:  // pred: ^bb3198
    %1724 = pdl_interp.get_operand 0 of %1711
    pdl_interp.are_equal %1715, %1724 : !pdl.value -> ^bb3200, ^bb1
  ^bb3200:  // pred: ^bb3199
    pdl_interp.record_match @rewriters::@hang_0m_tan(%1715, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.constant", "arith.divf", "math.tan"]), loc([%arg0, %2, %1537, %1707, %1709, %1711]), root("arith.divf") -> ^bb1
  ^bb3201:  // pred: ^bb3163
    %1725 = pdl_interp.get_value_type of %1703 : !pdl.type
    pdl_interp.are_equal %1705, %1725 : !pdl.type -> ^bb3202, ^bb3164
  ^bb3202:  // pred: ^bb3201
    %1726 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1705, %1726 : !pdl.type -> ^bb3203, ^bb3164
  ^bb3203:  // pred: ^bb3202
    pdl_interp.check_operation_name of %1537 is "arith.negf" -> ^bb3204, ^bb3164
  ^bb3204:  // pred: ^bb3203
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3205, ^bb3164
  ^bb3205:  // pred: ^bb3204
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3206, ^bb3164
  ^bb3206:  // pred: ^bb3205
    %1727 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1727 : !pdl.value -> ^bb3207, ^bb3164
  ^bb3207:  // pred: ^bb3206
    pdl_interp.are_equal %1727, %1536 : !pdl.value -> ^bb3208, ^bb3164
  ^bb3208:  // pred: ^bb3207
    %1728 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1728 : !pdl.value -> ^bb3209, ^bb3164
  ^bb3209:  // pred: ^bb3208
    %1729 = pdl_interp.get_value_type of %1727 : !pdl.type
    pdl_interp.are_equal %1705, %1729 : !pdl.type -> ^bb3210, ^bb3164
  ^bb3210:  // pred: ^bb3209
    %1730 = pdl_interp.get_value_type of %1728 : !pdl.type
    pdl_interp.are_equal %1705, %1730 : !pdl.type -> ^bb3211, ^bb3164
  ^bb3211:  // pred: ^bb3210
    pdl_interp.record_match @rewriters::@frac_2neg_rev(%1704, %1728, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb3164
  ^bb3212:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 1 -> ^bb3213, ^bb1
  ^bb3213:  // pred: ^bb3212
    pdl_interp.check_result_count of %2 is 1 -> ^bb3214, ^bb1
  ^bb3214:  // pred: ^bb3213
    %1731 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1731 : !pdl.value -> ^bb3215, ^bb1
  ^bb3215:  // pred: ^bb3214
    pdl_interp.are_equal %1731, %1 : !pdl.value -> ^bb3216, ^bb1
  ^bb3216:  // pred: ^bb3215
    %1732 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1732 : !pdl.value -> ^bb3217, ^bb1
  ^bb3217:  // pred: ^bb3216
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3218, ^bb1
  ^bb3218:  // pred: ^bb3217
    %1733 = pdl_interp.get_value_type of %1732 : !pdl.type
    pdl_interp.check_type %1733 is f32 -> ^bb3238, ^bb3219
  ^bb3219:  // 12 preds: ^bb3218, ^bb3238, ^bb3239, ^bb3240, ^bb3241, ^bb3242, ^bb3243, ^bb3244, ^bb3245, ^bb3246, ^bb3247, ^bb3248
    pdl_interp.check_operation_name of %1537 is "math.cbrt" -> ^bb3220, ^bb1
  ^bb3220:  // pred: ^bb3219
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3221, ^bb1
  ^bb3221:  // pred: ^bb3220
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3222, ^bb1
  ^bb3222:  // pred: ^bb3221
    %1734 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1734 : !pdl.value -> ^bb3223, ^bb1
  ^bb3223:  // pred: ^bb3222
    pdl_interp.are_equal %1734, %1536 : !pdl.value -> ^bb3224, ^bb1
  ^bb3224:  // pred: ^bb3223
    %1735 = pdl_interp.get_defining_op of %1732 : !pdl.value
    pdl_interp.is_not_null %1735 : !pdl.operation -> ^bb3225, ^bb1
  ^bb3225:  // pred: ^bb3224
    pdl_interp.check_operation_name of %1735 is "math.cbrt" -> ^bb3226, ^bb1
  ^bb3226:  // pred: ^bb3225
    pdl_interp.check_operand_count of %1735 is 1 -> ^bb3227, ^bb1
  ^bb3227:  // pred: ^bb3226
    pdl_interp.check_result_count of %1735 is 1 -> ^bb3228, ^bb1
  ^bb3228:  // pred: ^bb3227
    %1736 = pdl_interp.get_result 0 of %1735
    pdl_interp.is_not_null %1736 : !pdl.value -> ^bb3229, ^bb1
  ^bb3229:  // pred: ^bb3228
    pdl_interp.are_equal %1736, %1732 : !pdl.value -> ^bb3230, ^bb1
  ^bb3230:  // pred: ^bb3229
    %1737 = pdl_interp.get_operand 0 of %1735
    pdl_interp.is_not_null %1737 : !pdl.value -> ^bb3231, ^bb1
  ^bb3231:  // pred: ^bb3230
    %1738 = pdl_interp.get_value_type of %1737 : !pdl.type
    pdl_interp.check_type %1738 is f32 -> ^bb3232, ^bb1
  ^bb3232:  // pred: ^bb3231
    %1739 = pdl_interp.get_value_type of %1736 : !pdl.type
    pdl_interp.are_equal %1738, %1739 : !pdl.type -> ^bb3233, ^bb1
  ^bb3233:  // pred: ^bb3232
    %1740 = pdl_interp.get_value_type of %1731 : !pdl.type
    pdl_interp.are_equal %1738, %1740 : !pdl.type -> ^bb3234, ^bb1
  ^bb3234:  // pred: ^bb3233
    %1741 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1738, %1741 : !pdl.type -> ^bb3235, ^bb1
  ^bb3235:  // pred: ^bb3234
    %1742 = pdl_interp.get_value_type of %1734 : !pdl.type
    pdl_interp.are_equal %1738, %1742 : !pdl.type -> ^bb3236, ^bb1
  ^bb3236:  // pred: ^bb3235
    %1743 = pdl_interp.get_operand 0 of %1537
    pdl_interp.are_equal %1737, %1743 : !pdl.value -> ^bb3237, ^bb1
  ^bb3237:  // pred: ^bb3236
    pdl_interp.record_match @rewriters::@cbrt_div_cbrt2(%1737, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.copysign"]), loc([%arg0, %2, %1537, %1735]), root("arith.divf") -> ^bb1
  ^bb3238:  // pred: ^bb3218
    %1744 = pdl_interp.get_value_type of %1731 : !pdl.type
    pdl_interp.are_equal %1733, %1744 : !pdl.type -> ^bb3239, ^bb3219
  ^bb3239:  // pred: ^bb3238
    %1745 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1733, %1745 : !pdl.type -> ^bb3240, ^bb3219
  ^bb3240:  // pred: ^bb3239
    pdl_interp.check_operation_name of %1537 is "math.absf" -> ^bb3241, ^bb3219
  ^bb3241:  // pred: ^bb3240
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3242, ^bb3219
  ^bb3242:  // pred: ^bb3241
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3243, ^bb3219
  ^bb3243:  // pred: ^bb3242
    %1746 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1746 : !pdl.value -> ^bb3244, ^bb3219
  ^bb3244:  // pred: ^bb3243
    pdl_interp.are_equal %1746, %1536 : !pdl.value -> ^bb3245, ^bb3219
  ^bb3245:  // pred: ^bb3244
    %1747 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1747 : !pdl.value -> ^bb3246, ^bb3219
  ^bb3246:  // pred: ^bb3245
    %1748 = pdl_interp.get_value_type of %1746 : !pdl.type
    pdl_interp.are_equal %1733, %1748 : !pdl.type -> ^bb3247, ^bb3219
  ^bb3247:  // pred: ^bb3246
    %1749 = pdl_interp.get_value_type of %1747 : !pdl.type
    pdl_interp.are_equal %1733, %1749 : !pdl.type -> ^bb3248, ^bb3219
  ^bb3248:  // pred: ^bb3247
    pdl_interp.record_match @rewriters::@div_fabs(%1732, %1747, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "math.absf"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb3219
  ^bb3249:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 1 -> ^bb3250, ^bb1
  ^bb3250:  // pred: ^bb3249
    pdl_interp.check_result_count of %2 is 1 -> ^bb3251, ^bb1
  ^bb3251:  // pred: ^bb3250
    %1750 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1750 : !pdl.value -> ^bb3252, ^bb1
  ^bb3252:  // pred: ^bb3251
    pdl_interp.are_equal %1750, %1 : !pdl.value -> ^bb3253, ^bb1
  ^bb3253:  // pred: ^bb3252
    %1751 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1751 : !pdl.value -> ^bb3254, ^bb1
  ^bb3254:  // pred: ^bb3253
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3255, ^bb1
  ^bb3255:  // pred: ^bb3254
    %1752 = pdl_interp.get_value_type of %1751 : !pdl.type
    pdl_interp.check_type %1752 is f32 -> ^bb3256, ^bb1
  ^bb3256:  // pred: ^bb3255
    %1753 = pdl_interp.get_value_type of %1750 : !pdl.type
    pdl_interp.are_equal %1752, %1753 : !pdl.type -> ^bb3257, ^bb1
  ^bb3257:  // pred: ^bb3256
    %1754 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1752, %1754 : !pdl.type -> ^bb3258, ^bb1
  ^bb3258:  // pred: ^bb3257
    pdl_interp.check_operation_name of %1537 is "math.sqrt" -> ^bb3259, ^bb1
  ^bb3259:  // pred: ^bb3258
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3260, ^bb1
  ^bb3260:  // pred: ^bb3259
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3261, ^bb1
  ^bb3261:  // pred: ^bb3260
    %1755 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1755 : !pdl.value -> ^bb3262, ^bb1
  ^bb3262:  // pred: ^bb3261
    pdl_interp.are_equal %1755, %1536 : !pdl.value -> ^bb3263, ^bb1
  ^bb3263:  // pred: ^bb3262
    %1756 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1756 : !pdl.value -> ^bb3264, ^bb1
  ^bb3264:  // pred: ^bb3263
    %1757 = pdl_interp.get_value_type of %1755 : !pdl.type
    pdl_interp.are_equal %1752, %1757 : !pdl.type -> ^bb3265, ^bb1
  ^bb3265:  // pred: ^bb3264
    %1758 = pdl_interp.get_value_type of %1756 : !pdl.type
    pdl_interp.are_equal %1752, %1758 : !pdl.type -> ^bb3266, ^bb1
  ^bb3266:  // pred: ^bb3265
    pdl_interp.record_match @rewriters::@sqrt_undiv(%1751, %1756, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "math.sqrt"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb1
  ^bb3267:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 2 -> ^bb3268, ^bb1
  ^bb3268:  // pred: ^bb3267
    pdl_interp.check_result_count of %2 is 1 -> ^bb3269, ^bb1
  ^bb3269:  // pred: ^bb3268
    %1759 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1759 : !pdl.value -> ^bb3270, ^bb1
  ^bb3270:  // pred: ^bb3269
    pdl_interp.are_equal %1759, %1 : !pdl.value -> ^bb3271, ^bb1
  ^bb3271:  // pred: ^bb3270
    %1760 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1760 : !pdl.value -> ^bb3272, ^bb1
  ^bb3272:  // pred: ^bb3271
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3273, ^bb1
  ^bb3273:  // pred: ^bb3272
    %1761 = pdl_interp.get_value_type of %1760 : !pdl.type
    pdl_interp.check_type %1761 is f32 -> ^bb3274, ^bb1
  ^bb3274:  // pred: ^bb3273
    %1762 = pdl_interp.get_value_type of %1759 : !pdl.type
    pdl_interp.are_equal %1761, %1762 : !pdl.type -> ^bb3275, ^bb1
  ^bb3275:  // pred: ^bb3274
    %1763 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1761, %1763 : !pdl.type -> ^bb3276, ^bb1
  ^bb3276:  // pred: ^bb3275
    pdl_interp.check_operation_name of %1537 is "math.powf" -> ^bb3277, ^bb1
  ^bb3277:  // pred: ^bb3276
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb3278, ^bb1
  ^bb3278:  // pred: ^bb3277
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3279, ^bb1
  ^bb3279:  // pred: ^bb3278
    %1764 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1764 : !pdl.value -> ^bb3280, ^bb1
  ^bb3280:  // pred: ^bb3279
    pdl_interp.are_equal %1764, %1536 : !pdl.value -> ^bb3281, ^bb1
  ^bb3281:  // pred: ^bb3280
    %1765 = pdl_interp.get_operand 1 of %2
    %1766 = pdl_interp.get_defining_op of %1765 : !pdl.value
    pdl_interp.is_not_null %1766 : !pdl.operation -> ^bb3289, ^bb3282
  ^bb3282:  // 24 preds: ^bb3281, ^bb3289, ^bb3290, ^bb3291, ^bb3292, ^bb3293, ^bb3294, ^bb3295, ^bb3296, ^bb3297, ^bb3298, ^bb3299, ^bb3300, ^bb3301, ^bb3302, ^bb3303, ^bb3304, ^bb3305, ^bb3306, ^bb3307, ^bb3308, ^bb3309, ^bb3310, ^bb3311
    %1767 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %1767 : !pdl.value -> ^bb3283, ^bb1
  ^bb3283:  // pred: ^bb3282
    %1768 = pdl_interp.get_operand 1 of %1537
    pdl_interp.is_not_null %1768 : !pdl.value -> ^bb3284, ^bb1
  ^bb3284:  // pred: ^bb3283
    %1769 = pdl_interp.get_value_type of %1764 : !pdl.type
    pdl_interp.are_equal %1761, %1769 : !pdl.type -> ^bb3285, ^bb1
  ^bb3285:  // pred: ^bb3284
    %1770 = pdl_interp.get_value_type of %1767 : !pdl.type
    pdl_interp.are_equal %1761, %1770 : !pdl.type -> ^bb3286, ^bb1
  ^bb3286:  // pred: ^bb3285
    %1771 = pdl_interp.get_operand 0 of %1537
    pdl_interp.are_equal %1760, %1771 : !pdl.value -> ^bb3287, ^bb1
  ^bb3287:  // pred: ^bb3286
    %1772 = pdl_interp.get_value_type of %1768 : !pdl.type
    pdl_interp.are_equal %1761, %1772 : !pdl.type -> ^bb3288, ^bb1
  ^bb3288:  // pred: ^bb3287
    pdl_interp.record_match @rewriters::@pow_div(%1767, %1768, %1760, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "math.powf"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb1
  ^bb3289:  // pred: ^bb3281
    pdl_interp.is_not_null %1765 : !pdl.value -> ^bb3290, ^bb3282
  ^bb3290:  // pred: ^bb3289
    %1773 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1773 : !pdl.value -> ^bb3291, ^bb3282
  ^bb3291:  // pred: ^bb3290
    %1774 = pdl_interp.get_operand 1 of %1537
    %1775 = pdl_interp.get_defining_op of %1774 : !pdl.value
    pdl_interp.is_not_null %1775 : !pdl.operation -> ^bb3292, ^bb3282
  ^bb3292:  // pred: ^bb3291
    pdl_interp.check_operation_name of %1766 is "arith.constant" -> ^bb3293, ^bb3282
  ^bb3293:  // pred: ^bb3292
    pdl_interp.check_operand_count of %1766 is 0 -> ^bb3294, ^bb3282
  ^bb3294:  // pred: ^bb3293
    pdl_interp.check_result_count of %1766 is 1 -> ^bb3295, ^bb3282
  ^bb3295:  // pred: ^bb3294
    %1776 = pdl_interp.get_result 0 of %1766
    pdl_interp.is_not_null %1776 : !pdl.value -> ^bb3296, ^bb3282
  ^bb3296:  // pred: ^bb3295
    pdl_interp.are_equal %1776, %1765 : !pdl.value -> ^bb3297, ^bb3282
  ^bb3297:  // pred: ^bb3296
    pdl_interp.is_not_null %1774 : !pdl.value -> ^bb3298, ^bb3282
  ^bb3298:  // pred: ^bb3297
    %1777 = pdl_interp.get_value_type of %1764 : !pdl.type
    pdl_interp.are_equal %1761, %1777 : !pdl.type -> ^bb3299, ^bb3282
  ^bb3299:  // pred: ^bb3298
    pdl_interp.check_operation_name of %1775 is "arith.constant" -> ^bb3300, ^bb3282
  ^bb3300:  // pred: ^bb3299
    pdl_interp.check_operand_count of %1775 is 0 -> ^bb3301, ^bb3282
  ^bb3301:  // pred: ^bb3300
    pdl_interp.check_result_count of %1775 is 1 -> ^bb3302, ^bb3282
  ^bb3302:  // pred: ^bb3301
    %1778 = pdl_interp.get_result 0 of %1775
    pdl_interp.is_not_null %1778 : !pdl.value -> ^bb3303, ^bb3282
  ^bb3303:  // pred: ^bb3302
    pdl_interp.are_equal %1778, %1774 : !pdl.value -> ^bb3304, ^bb3282
  ^bb3304:  // pred: ^bb3303
    %1779 = pdl_interp.get_attribute "value" of %1766
    pdl_interp.is_not_null %1779 : !pdl.attribute -> ^bb3305, ^bb3282
  ^bb3305:  // pred: ^bb3304
    pdl_interp.check_attribute %1779 is 3.000000e+00 : f32 -> ^bb3306, ^bb3282
  ^bb3306:  // pred: ^bb3305
    %1780 = pdl_interp.get_value_type of %1773 : !pdl.type
    pdl_interp.are_equal %1761, %1780 : !pdl.type -> ^bb3307, ^bb3282
  ^bb3307:  // pred: ^bb3306
    %1781 = pdl_interp.get_value_type of %1776 : !pdl.type
    pdl_interp.are_equal %1781, %1761 : !pdl.type -> ^bb3308, ^bb3282
  ^bb3308:  // pred: ^bb3307
    %1782 = pdl_interp.get_attribute "value" of %1775
    pdl_interp.is_not_null %1782 : !pdl.attribute -> ^bb3309, ^bb3282
  ^bb3309:  // pred: ^bb3308
    pdl_interp.check_attribute %1782 is 3.000000e+00 : f32 -> ^bb3310, ^bb3282
  ^bb3310:  // pred: ^bb3309
    %1783 = pdl_interp.get_value_type of %1778 : !pdl.type
    pdl_interp.are_equal %1783, %1761 : !pdl.type -> ^bb3311, ^bb3282
  ^bb3311:  // pred: ^bb3310
    pdl_interp.record_match @rewriters::@cube_div_rev(%1760, %1773, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.constant", "math.powf"]), loc([%arg0, %2, %1537, %1766, %1775]), root("arith.divf") -> ^bb3282
  ^bb3312:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 1 -> ^bb3313, ^bb1
  ^bb3313:  // pred: ^bb3312
    pdl_interp.check_result_count of %2 is 1 -> ^bb3314, ^bb1
  ^bb3314:  // pred: ^bb3313
    %1784 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1784 : !pdl.value -> ^bb3315, ^bb1
  ^bb3315:  // pred: ^bb3314
    pdl_interp.are_equal %1784, %1 : !pdl.value -> ^bb3316, ^bb1
  ^bb3316:  // pred: ^bb3315
    %1785 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1785 : !pdl.value -> ^bb3317, ^bb1
  ^bb3317:  // pred: ^bb3316
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3318, ^bb1
  ^bb3318:  // pred: ^bb3317
    %1786 = pdl_interp.get_value_type of %1785 : !pdl.type
    pdl_interp.check_type %1786 is f32 -> ^bb3319, ^bb1
  ^bb3319:  // pred: ^bb3318
    %1787 = pdl_interp.get_value_type of %1784 : !pdl.type
    pdl_interp.are_equal %1786, %1787 : !pdl.type -> ^bb3320, ^bb1
  ^bb3320:  // pred: ^bb3319
    %1788 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1786, %1788 : !pdl.type -> ^bb3321, ^bb1
  ^bb3321:  // pred: ^bb3320
    pdl_interp.switch_operation_name of %1537 to ["math.cbrt", "math.absf"](^bb3322, ^bb3330) -> ^bb1
  ^bb3322:  // pred: ^bb3321
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3323, ^bb1
  ^bb3323:  // pred: ^bb3322
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3324, ^bb1
  ^bb3324:  // pred: ^bb3323
    %1789 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1789 : !pdl.value -> ^bb3325, ^bb1
  ^bb3325:  // pred: ^bb3324
    pdl_interp.are_equal %1789, %1536 : !pdl.value -> ^bb3326, ^bb1
  ^bb3326:  // pred: ^bb3325
    %1790 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1790 : !pdl.value -> ^bb3327, ^bb1
  ^bb3327:  // pred: ^bb3326
    %1791 = pdl_interp.get_value_type of %1789 : !pdl.type
    pdl_interp.are_equal %1786, %1791 : !pdl.type -> ^bb3328, ^bb1
  ^bb3328:  // pred: ^bb3327
    %1792 = pdl_interp.get_value_type of %1790 : !pdl.type
    pdl_interp.are_equal %1786, %1792 : !pdl.type -> ^bb3329, ^bb1
  ^bb3329:  // pred: ^bb3328
    pdl_interp.record_match @rewriters::@cbrt_undiv(%1785, %1790, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "math.cbrt"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb1
  ^bb3330:  // pred: ^bb3321
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3331, ^bb1
  ^bb3331:  // pred: ^bb3330
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3332, ^bb1
  ^bb3332:  // pred: ^bb3331
    %1793 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1793 : !pdl.value -> ^bb3333, ^bb1
  ^bb3333:  // pred: ^bb3332
    pdl_interp.are_equal %1793, %1536 : !pdl.value -> ^bb3334, ^bb1
  ^bb3334:  // pred: ^bb3333
    %1794 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1794 : !pdl.value -> ^bb3335, ^bb1
  ^bb3335:  // pred: ^bb3334
    %1795 = pdl_interp.get_defining_op of %1794 : !pdl.value
    pdl_interp.is_not_null %1795 : !pdl.operation -> ^bb3336, ^bb1
  ^bb3336:  // pred: ^bb3335
    %1796 = pdl_interp.get_value_type of %1793 : !pdl.type
    pdl_interp.are_equal %1786, %1796 : !pdl.type -> ^bb3337, ^bb1
  ^bb3337:  // pred: ^bb3336
    pdl_interp.check_operation_name of %1795 is "math.cbrt" -> ^bb3338, ^bb1
  ^bb3338:  // pred: ^bb3337
    pdl_interp.check_operand_count of %1795 is 1 -> ^bb3339, ^bb1
  ^bb3339:  // pred: ^bb3338
    pdl_interp.check_result_count of %1795 is 1 -> ^bb3340, ^bb1
  ^bb3340:  // pred: ^bb3339
    %1797 = pdl_interp.get_result 0 of %1795
    pdl_interp.is_not_null %1797 : !pdl.value -> ^bb3341, ^bb1
  ^bb3341:  // pred: ^bb3340
    pdl_interp.are_equal %1797, %1794 : !pdl.value -> ^bb3342, ^bb1
  ^bb3342:  // pred: ^bb3341
    %1798 = pdl_interp.get_value_type of %1797 : !pdl.type
    pdl_interp.are_equal %1798, %1786 : !pdl.type -> ^bb3343, ^bb1
  ^bb3343:  // pred: ^bb3342
    %1799 = pdl_interp.get_operand 0 of %1795
    pdl_interp.are_equal %1799, %1785 : !pdl.value -> ^bb3344, ^bb1
  ^bb3344:  // pred: ^bb3343
    pdl_interp.record_match @rewriters::@cbrt_div_cbrt(%1785, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.copysign"]), loc([%arg0, %2, %1537, %1795]), root("arith.divf") -> ^bb1
  ^bb3345:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 1 -> ^bb3346, ^bb1
  ^bb3346:  // pred: ^bb3345
    pdl_interp.check_result_count of %2 is 1 -> ^bb3347, ^bb1
  ^bb3347:  // pred: ^bb3346
    %1800 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1800 : !pdl.value -> ^bb3348, ^bb1
  ^bb3348:  // pred: ^bb3347
    pdl_interp.are_equal %1800, %1 : !pdl.value -> ^bb3349, ^bb1
  ^bb3349:  // pred: ^bb3348
    %1801 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1801 : !pdl.value -> ^bb3350, ^bb1
  ^bb3350:  // pred: ^bb3349
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3351, ^bb1
  ^bb3351:  // pred: ^bb3350
    %1802 = pdl_interp.get_value_type of %1801 : !pdl.type
    pdl_interp.check_type %1802 is f32 -> ^bb3352, ^bb1
  ^bb3352:  // pred: ^bb3351
    %1803 = pdl_interp.get_value_type of %1800 : !pdl.type
    pdl_interp.are_equal %1802, %1803 : !pdl.type -> ^bb3353, ^bb1
  ^bb3353:  // pred: ^bb3352
    %1804 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1802, %1804 : !pdl.type -> ^bb3354, ^bb1
  ^bb3354:  // pred: ^bb3353
    pdl_interp.check_operation_name of %1537 is "math.exp" -> ^bb3355, ^bb1
  ^bb3355:  // pred: ^bb3354
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3356, ^bb1
  ^bb3356:  // pred: ^bb3355
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3357, ^bb1
  ^bb3357:  // pred: ^bb3356
    %1805 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1805 : !pdl.value -> ^bb3358, ^bb1
  ^bb3358:  // pred: ^bb3357
    pdl_interp.are_equal %1805, %1536 : !pdl.value -> ^bb3359, ^bb1
  ^bb3359:  // pred: ^bb3358
    %1806 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1806 : !pdl.value -> ^bb3360, ^bb1
  ^bb3360:  // pred: ^bb3359
    %1807 = pdl_interp.get_value_type of %1805 : !pdl.type
    pdl_interp.are_equal %1802, %1807 : !pdl.type -> ^bb3361, ^bb1
  ^bb3361:  // pred: ^bb3360
    %1808 = pdl_interp.get_value_type of %1806 : !pdl.type
    pdl_interp.are_equal %1802, %1808 : !pdl.type -> ^bb3362, ^bb1
  ^bb3362:  // pred: ^bb3361
    pdl_interp.record_match @rewriters::@div_exp(%1801, %1806, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "math.exp"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb1
  ^bb3363:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 1 -> ^bb3364, ^bb1
  ^bb3364:  // pred: ^bb3363
    pdl_interp.check_result_count of %2 is 1 -> ^bb3365, ^bb1
  ^bb3365:  // pred: ^bb3364
    %1809 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1809 : !pdl.value -> ^bb3366, ^bb1
  ^bb3366:  // pred: ^bb3365
    pdl_interp.are_equal %1809, %1 : !pdl.value -> ^bb3367, ^bb1
  ^bb3367:  // pred: ^bb3366
    %1810 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1810 : !pdl.value -> ^bb3368, ^bb1
  ^bb3368:  // pred: ^bb3367
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3369, ^bb1
  ^bb3369:  // pred: ^bb3368
    %1811 = pdl_interp.get_value_type of %1810 : !pdl.type
    pdl_interp.check_type %1811 is f32 -> ^bb3370, ^bb1
  ^bb3370:  // pred: ^bb3369
    %1812 = pdl_interp.get_value_type of %1809 : !pdl.type
    pdl_interp.are_equal %1811, %1812 : !pdl.type -> ^bb3371, ^bb1
  ^bb3371:  // pred: ^bb3370
    %1813 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1811, %1813 : !pdl.type -> ^bb3372, ^bb1
  ^bb3372:  // pred: ^bb3371
    pdl_interp.switch_operation_name of %1537 to ["arith.addf", "math.cos"](^bb3373, ^bb3398) -> ^bb1
  ^bb3373:  // pred: ^bb3372
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb3374, ^bb1
  ^bb3374:  // pred: ^bb3373
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3375, ^bb1
  ^bb3375:  // pred: ^bb3374
    %1814 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1814 : !pdl.value -> ^bb3376, ^bb1
  ^bb3376:  // pred: ^bb3375
    pdl_interp.are_equal %1814, %1536 : !pdl.value -> ^bb3377, ^bb1
  ^bb3377:  // pred: ^bb3376
    %1815 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1815 : !pdl.value -> ^bb3378, ^bb1
  ^bb3378:  // pred: ^bb3377
    %1816 = pdl_interp.get_defining_op of %1815 : !pdl.value
    pdl_interp.is_not_null %1816 : !pdl.operation -> ^bb3379, ^bb1
  ^bb3379:  // pred: ^bb3378
    %1817 = pdl_interp.get_operand 1 of %1537
    %1818 = pdl_interp.get_defining_op of %1817 : !pdl.value
    pdl_interp.is_not_null %1818 : !pdl.operation -> ^bb3380, ^bb1
  ^bb3380:  // pred: ^bb3379
    pdl_interp.is_not_null %1817 : !pdl.value -> ^bb3381, ^bb1
  ^bb3381:  // pred: ^bb3380
    %1819 = pdl_interp.get_value_type of %1814 : !pdl.type
    pdl_interp.are_equal %1811, %1819 : !pdl.type -> ^bb3382, ^bb1
  ^bb3382:  // pred: ^bb3381
    pdl_interp.check_operation_name of %1816 is "arith.constant" -> ^bb3383, ^bb1
  ^bb3383:  // pred: ^bb3382
    pdl_interp.check_operand_count of %1816 is 0 -> ^bb3384, ^bb1
  ^bb3384:  // pred: ^bb3383
    pdl_interp.check_result_count of %1816 is 1 -> ^bb3385, ^bb1
  ^bb3385:  // pred: ^bb3384
    %1820 = pdl_interp.get_result 0 of %1816
    pdl_interp.is_not_null %1820 : !pdl.value -> ^bb3386, ^bb1
  ^bb3386:  // pred: ^bb3385
    pdl_interp.are_equal %1820, %1815 : !pdl.value -> ^bb3387, ^bb1
  ^bb3387:  // pred: ^bb3386
    pdl_interp.check_operation_name of %1818 is "math.cos" -> ^bb3388, ^bb1
  ^bb3388:  // pred: ^bb3387
    pdl_interp.check_operand_count of %1818 is 1 -> ^bb3389, ^bb1
  ^bb3389:  // pred: ^bb3388
    pdl_interp.check_result_count of %1818 is 1 -> ^bb3390, ^bb1
  ^bb3390:  // pred: ^bb3389
    %1821 = pdl_interp.get_result 0 of %1818
    pdl_interp.is_not_null %1821 : !pdl.value -> ^bb3391, ^bb1
  ^bb3391:  // pred: ^bb3390
    pdl_interp.are_equal %1821, %1817 : !pdl.value -> ^bb3392, ^bb1
  ^bb3392:  // pred: ^bb3391
    %1822 = pdl_interp.get_attribute "value" of %1816
    pdl_interp.is_not_null %1822 : !pdl.attribute -> ^bb3393, ^bb1
  ^bb3393:  // pred: ^bb3392
    pdl_interp.check_attribute %1822 is 1.000000e+00 : f32 -> ^bb3394, ^bb1
  ^bb3394:  // pred: ^bb3393
    %1823 = pdl_interp.get_value_type of %1821 : !pdl.type
    pdl_interp.are_equal %1823, %1811 : !pdl.type -> ^bb3395, ^bb1
  ^bb3395:  // pred: ^bb3394
    %1824 = pdl_interp.get_value_type of %1820 : !pdl.type
    pdl_interp.are_equal %1824, %1811 : !pdl.type -> ^bb3396, ^bb1
  ^bb3396:  // pred: ^bb3395
    %1825 = pdl_interp.get_operand 0 of %1818
    pdl_interp.are_equal %1825, %1810 : !pdl.value -> ^bb3397, ^bb1
  ^bb3397:  // pred: ^bb3396
    pdl_interp.record_match @rewriters::@hang_0p_tan(%1810, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.tan"]), loc([%arg0, %2, %1537, %1816, %1818]), root("arith.divf") -> ^bb1
  ^bb3398:  // pred: ^bb3372
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3399, ^bb1
  ^bb3399:  // pred: ^bb3398
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3400, ^bb1
  ^bb3400:  // pred: ^bb3399
    %1826 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1826 : !pdl.value -> ^bb3401, ^bb1
  ^bb3401:  // pred: ^bb3400
    pdl_interp.are_equal %1826, %1536 : !pdl.value -> ^bb3402, ^bb1
  ^bb3402:  // pred: ^bb3401
    %1827 = pdl_interp.get_value_type of %1826 : !pdl.type
    pdl_interp.are_equal %1811, %1827 : !pdl.type -> ^bb3403, ^bb1
  ^bb3403:  // pred: ^bb3402
    %1828 = pdl_interp.get_operand 0 of %1537
    pdl_interp.are_equal %1810, %1828 : !pdl.value -> ^bb3404, ^bb1
  ^bb3404:  // pred: ^bb3403
    pdl_interp.record_match @rewriters::@quot_tan(%1810, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.tan"]), loc([%arg0, %2, %1537]), root("arith.divf") -> ^bb1
  ^bb3405:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 2 -> ^bb3406, ^bb1
  ^bb3406:  // pred: ^bb3405
    pdl_interp.check_result_count of %2 is 1 -> ^bb3407, ^bb1
  ^bb3407:  // pred: ^bb3406
    %1829 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %1829 : !pdl.value -> ^bb3408, ^bb1
  ^bb3408:  // pred: ^bb3407
    pdl_interp.are_equal %1829, %1 : !pdl.value -> ^bb3409, ^bb1
  ^bb3409:  // pred: ^bb3408
    %1830 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %1830 : !pdl.value -> ^bb3410, ^bb1
  ^bb3410:  // pred: ^bb3409
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3411, ^bb1
  ^bb3411:  // pred: ^bb3410
    pdl_interp.switch_operation_name of %1537 to ["math.sin", "arith.negf", "arith.addf", "arith.constant", "math.sinh"](^bb3412, ^bb3440, ^bb3476, ^bb3707, ^bb3782) -> ^bb1
  ^bb3412:  // pred: ^bb3411
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3413, ^bb1
  ^bb3413:  // pred: ^bb3412
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3414, ^bb1
  ^bb3414:  // pred: ^bb3413
    %1831 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1831 : !pdl.value -> ^bb3415, ^bb1
  ^bb3415:  // pred: ^bb3414
    pdl_interp.are_equal %1831, %1536 : !pdl.value -> ^bb3416, ^bb1
  ^bb3416:  // pred: ^bb3415
    %1832 = pdl_interp.get_operand 1 of %2
    %1833 = pdl_interp.get_defining_op of %1832 : !pdl.value
    pdl_interp.is_not_null %1833 : !pdl.operation -> ^bb3417, ^bb1
  ^bb3417:  // pred: ^bb3416
    %1834 = pdl_interp.get_defining_op of %1830 : !pdl.value
    pdl_interp.is_not_null %1834 : !pdl.operation -> ^bb3418, ^bb1
  ^bb3418:  // pred: ^bb3417
    pdl_interp.is_not_null %1832 : !pdl.value -> ^bb3419, ^bb1
  ^bb3419:  // pred: ^bb3418
    pdl_interp.check_operation_name of %1833 is "math.cos" -> ^bb3420, ^bb1
  ^bb3420:  // pred: ^bb3419
    pdl_interp.check_operand_count of %1833 is 1 -> ^bb3421, ^bb1
  ^bb3421:  // pred: ^bb3420
    pdl_interp.check_result_count of %1833 is 1 -> ^bb3422, ^bb1
  ^bb3422:  // pred: ^bb3421
    %1835 = pdl_interp.get_result 0 of %1833
    pdl_interp.is_not_null %1835 : !pdl.value -> ^bb3423, ^bb1
  ^bb3423:  // pred: ^bb3422
    pdl_interp.are_equal %1835, %1832 : !pdl.value -> ^bb3424, ^bb1
  ^bb3424:  // pred: ^bb3423
    pdl_interp.check_operation_name of %1834 is "arith.constant" -> ^bb3425, ^bb1
  ^bb3425:  // pred: ^bb3424
    pdl_interp.check_operand_count of %1834 is 0 -> ^bb3426, ^bb1
  ^bb3426:  // pred: ^bb3425
    pdl_interp.check_result_count of %1834 is 1 -> ^bb3427, ^bb1
  ^bb3427:  // pred: ^bb3426
    %1836 = pdl_interp.get_result 0 of %1834
    pdl_interp.is_not_null %1836 : !pdl.value -> ^bb3428, ^bb1
  ^bb3428:  // pred: ^bb3427
    pdl_interp.are_equal %1836, %1830 : !pdl.value -> ^bb3429, ^bb1
  ^bb3429:  // pred: ^bb3428
    %1837 = pdl_interp.get_operand 0 of %1833
    pdl_interp.is_not_null %1837 : !pdl.value -> ^bb3430, ^bb1
  ^bb3430:  // pred: ^bb3429
    %1838 = pdl_interp.get_attribute "value" of %1834
    pdl_interp.is_not_null %1838 : !pdl.attribute -> ^bb3431, ^bb1
  ^bb3431:  // pred: ^bb3430
    pdl_interp.check_attribute %1838 is 1.000000e+00 : f32 -> ^bb3432, ^bb1
  ^bb3432:  // pred: ^bb3431
    %1839 = pdl_interp.get_value_type of %1836 : !pdl.type
    pdl_interp.check_type %1839 is f32 -> ^bb3433, ^bb1
  ^bb3433:  // pred: ^bb3432
    %1840 = pdl_interp.get_value_type of %1829 : !pdl.type
    pdl_interp.are_equal %1839, %1840 : !pdl.type -> ^bb3434, ^bb1
  ^bb3434:  // pred: ^bb3433
    %1841 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1839, %1841 : !pdl.type -> ^bb3435, ^bb1
  ^bb3435:  // pred: ^bb3434
    %1842 = pdl_interp.get_value_type of %1835 : !pdl.type
    pdl_interp.are_equal %1839, %1842 : !pdl.type -> ^bb3436, ^bb1
  ^bb3436:  // pred: ^bb3435
    %1843 = pdl_interp.get_value_type of %1831 : !pdl.type
    pdl_interp.are_equal %1839, %1843 : !pdl.type -> ^bb3437, ^bb1
  ^bb3437:  // pred: ^bb3436
    %1844 = pdl_interp.get_value_type of %1837 : !pdl.type
    pdl_interp.are_equal %1839, %1844 : !pdl.type -> ^bb3438, ^bb1
  ^bb3438:  // pred: ^bb3437
    %1845 = pdl_interp.get_operand 0 of %1537
    pdl_interp.are_equal %1837, %1845 : !pdl.value -> ^bb3439, ^bb1
  ^bb3439:  // pred: ^bb3438
    pdl_interp.record_match @rewriters::@hang_p0_tan(%1837, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.tan"]), loc([%arg0, %2, %1537, %1833, %1834]), root("arith.divf") -> ^bb1
  ^bb3440:  // pred: ^bb3411
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3441, ^bb1
  ^bb3441:  // pred: ^bb3440
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3442, ^bb1
  ^bb3442:  // pred: ^bb3441
    %1846 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1846 : !pdl.value -> ^bb3443, ^bb1
  ^bb3443:  // pred: ^bb3442
    pdl_interp.are_equal %1846, %1536 : !pdl.value -> ^bb3444, ^bb1
  ^bb3444:  // pred: ^bb3443
    %1847 = pdl_interp.get_operand 1 of %2
    %1848 = pdl_interp.get_defining_op of %1847 : !pdl.value
    pdl_interp.is_not_null %1848 : !pdl.operation -> ^bb3445, ^bb1
  ^bb3445:  // pred: ^bb3444
    %1849 = pdl_interp.get_defining_op of %1830 : !pdl.value
    pdl_interp.is_not_null %1849 : !pdl.operation -> ^bb3446, ^bb1
  ^bb3446:  // pred: ^bb3445
    pdl_interp.is_not_null %1847 : !pdl.value -> ^bb3447, ^bb1
  ^bb3447:  // pred: ^bb3446
    %1850 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1850 : !pdl.value -> ^bb3448, ^bb1
  ^bb3448:  // pred: ^bb3447
    %1851 = pdl_interp.get_defining_op of %1850 : !pdl.value
    pdl_interp.is_not_null %1851 : !pdl.operation -> ^bb3449, ^bb1
  ^bb3449:  // pred: ^bb3448
    pdl_interp.check_operation_name of %1848 is "math.cos" -> ^bb3450, ^bb1
  ^bb3450:  // pred: ^bb3449
    pdl_interp.check_operand_count of %1848 is 1 -> ^bb3451, ^bb1
  ^bb3451:  // pred: ^bb3450
    pdl_interp.check_result_count of %1848 is 1 -> ^bb3452, ^bb1
  ^bb3452:  // pred: ^bb3451
    %1852 = pdl_interp.get_result 0 of %1848
    pdl_interp.is_not_null %1852 : !pdl.value -> ^bb3453, ^bb1
  ^bb3453:  // pred: ^bb3452
    pdl_interp.are_equal %1852, %1847 : !pdl.value -> ^bb3454, ^bb1
  ^bb3454:  // pred: ^bb3453
    pdl_interp.check_operation_name of %1849 is "arith.constant" -> ^bb3455, ^bb1
  ^bb3455:  // pred: ^bb3454
    pdl_interp.check_operand_count of %1849 is 0 -> ^bb3456, ^bb1
  ^bb3456:  // pred: ^bb3455
    pdl_interp.check_result_count of %1849 is 1 -> ^bb3457, ^bb1
  ^bb3457:  // pred: ^bb3456
    %1853 = pdl_interp.get_result 0 of %1849
    pdl_interp.is_not_null %1853 : !pdl.value -> ^bb3458, ^bb1
  ^bb3458:  // pred: ^bb3457
    pdl_interp.are_equal %1853, %1830 : !pdl.value -> ^bb3459, ^bb1
  ^bb3459:  // pred: ^bb3458
    pdl_interp.check_operation_name of %1851 is "math.sin" -> ^bb3460, ^bb1
  ^bb3460:  // pred: ^bb3459
    pdl_interp.check_operand_count of %1851 is 1 -> ^bb3461, ^bb1
  ^bb3461:  // pred: ^bb3460
    pdl_interp.check_result_count of %1851 is 1 -> ^bb3462, ^bb1
  ^bb3462:  // pred: ^bb3461
    %1854 = pdl_interp.get_result 0 of %1851
    pdl_interp.is_not_null %1854 : !pdl.value -> ^bb3463, ^bb1
  ^bb3463:  // pred: ^bb3462
    pdl_interp.are_equal %1854, %1850 : !pdl.value -> ^bb3464, ^bb1
  ^bb3464:  // pred: ^bb3463
    %1855 = pdl_interp.get_operand 0 of %1848
    pdl_interp.is_not_null %1855 : !pdl.value -> ^bb3465, ^bb1
  ^bb3465:  // pred: ^bb3464
    %1856 = pdl_interp.get_attribute "value" of %1849
    pdl_interp.is_not_null %1856 : !pdl.attribute -> ^bb3466, ^bb1
  ^bb3466:  // pred: ^bb3465
    pdl_interp.check_attribute %1856 is 1.000000e+00 : f32 -> ^bb3467, ^bb1
  ^bb3467:  // pred: ^bb3466
    %1857 = pdl_interp.get_value_type of %1853 : !pdl.type
    pdl_interp.check_type %1857 is f32 -> ^bb3468, ^bb1
  ^bb3468:  // pred: ^bb3467
    %1858 = pdl_interp.get_value_type of %1829 : !pdl.type
    pdl_interp.are_equal %1857, %1858 : !pdl.type -> ^bb3469, ^bb1
  ^bb3469:  // pred: ^bb3468
    %1859 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1857, %1859 : !pdl.type -> ^bb3470, ^bb1
  ^bb3470:  // pred: ^bb3469
    %1860 = pdl_interp.get_value_type of %1852 : !pdl.type
    pdl_interp.are_equal %1857, %1860 : !pdl.type -> ^bb3471, ^bb1
  ^bb3471:  // pred: ^bb3470
    %1861 = pdl_interp.get_value_type of %1846 : !pdl.type
    pdl_interp.are_equal %1857, %1861 : !pdl.type -> ^bb3472, ^bb1
  ^bb3472:  // pred: ^bb3471
    %1862 = pdl_interp.get_value_type of %1855 : !pdl.type
    pdl_interp.are_equal %1857, %1862 : !pdl.type -> ^bb3473, ^bb1
  ^bb3473:  // pred: ^bb3472
    %1863 = pdl_interp.get_value_type of %1854 : !pdl.type
    pdl_interp.are_equal %1857, %1863 : !pdl.type -> ^bb3474, ^bb1
  ^bb3474:  // pred: ^bb3473
    %1864 = pdl_interp.get_operand 0 of %1851
    pdl_interp.are_equal %1855, %1864 : !pdl.value -> ^bb3475, ^bb1
  ^bb3475:  // pred: ^bb3474
    pdl_interp.record_match @rewriters::@hang_m0_tan(%1855, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.constant", "arith.divf", "math.tan"]), loc([%arg0, %2, %1537, %1848, %1849, %1851]), root("arith.divf") -> ^bb1
  ^bb3476:  // pred: ^bb3411
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb3477, ^bb1
  ^bb3477:  // pred: ^bb3476
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3478, ^bb1
  ^bb3478:  // pred: ^bb3477
    %1865 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1865 : !pdl.value -> ^bb3479, ^bb1
  ^bb3479:  // pred: ^bb3478
    pdl_interp.are_equal %1865, %1536 : !pdl.value -> ^bb3480, ^bb1
  ^bb3480:  // pred: ^bb3479
    %1866 = pdl_interp.get_operand 1 of %2
    %1867 = pdl_interp.get_defining_op of %1866 : !pdl.value
    pdl_interp.is_not_null %1867 : !pdl.operation -> ^bb3481, ^bb1
  ^bb3481:  // pred: ^bb3480
    %1868 = pdl_interp.get_defining_op of %1830 : !pdl.value
    pdl_interp.is_not_null %1868 : !pdl.operation -> ^bb3482, ^bb1
  ^bb3482:  // pred: ^bb3481
    pdl_interp.is_not_null %1866 : !pdl.value -> ^bb3483, ^bb1
  ^bb3483:  // pred: ^bb3482
    %1869 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %1869 : !pdl.value -> ^bb3484, ^bb1
  ^bb3484:  // pred: ^bb3483
    %1870 = pdl_interp.get_defining_op of %1869 : !pdl.value
    pdl_interp.is_not_null %1870 : !pdl.operation -> ^bb3485, ^bb1
  ^bb3485:  // pred: ^bb3484
    %1871 = pdl_interp.get_operand 1 of %1537
    %1872 = pdl_interp.get_defining_op of %1871 : !pdl.value
    pdl_interp.is_not_null %1872 : !pdl.operation -> ^bb3486, ^bb1
  ^bb3486:  // pred: ^bb3485
    pdl_interp.switch_operation_name of %1867 to ["math.sin", "arith.constant", "math.exp"](^bb3487, ^bb3521, ^bb3592) -> ^bb1
  ^bb3487:  // pred: ^bb3486
    pdl_interp.check_operand_count of %1867 is 1 -> ^bb3488, ^bb1
  ^bb3488:  // pred: ^bb3487
    pdl_interp.check_result_count of %1867 is 1 -> ^bb3489, ^bb1
  ^bb3489:  // pred: ^bb3488
    %1873 = pdl_interp.get_result 0 of %1867
    pdl_interp.is_not_null %1873 : !pdl.value -> ^bb3490, ^bb1
  ^bb3490:  // pred: ^bb3489
    pdl_interp.are_equal %1873, %1866 : !pdl.value -> ^bb3491, ^bb1
  ^bb3491:  // pred: ^bb3490
    pdl_interp.check_operation_name of %1868 is "math.sin" -> ^bb3492, ^bb1
  ^bb3492:  // pred: ^bb3491
    pdl_interp.check_operand_count of %1868 is 1 -> ^bb3493, ^bb1
  ^bb3493:  // pred: ^bb3492
    pdl_interp.check_result_count of %1868 is 1 -> ^bb3494, ^bb1
  ^bb3494:  // pred: ^bb3493
    %1874 = pdl_interp.get_result 0 of %1868
    pdl_interp.is_not_null %1874 : !pdl.value -> ^bb3495, ^bb1
  ^bb3495:  // pred: ^bb3494
    pdl_interp.are_equal %1874, %1830 : !pdl.value -> ^bb3496, ^bb1
  ^bb3496:  // pred: ^bb3495
    pdl_interp.is_not_null %1871 : !pdl.value -> ^bb3497, ^bb1
  ^bb3497:  // pred: ^bb3496
    pdl_interp.check_operation_name of %1870 is "math.cos" -> ^bb3498, ^bb1
  ^bb3498:  // pred: ^bb3497
    pdl_interp.check_operand_count of %1870 is 1 -> ^bb3499, ^bb1
  ^bb3499:  // pred: ^bb3498
    pdl_interp.check_result_count of %1870 is 1 -> ^bb3500, ^bb1
  ^bb3500:  // pred: ^bb3499
    %1875 = pdl_interp.get_result 0 of %1870
    pdl_interp.is_not_null %1875 : !pdl.value -> ^bb3501, ^bb1
  ^bb3501:  // pred: ^bb3500
    pdl_interp.are_equal %1875, %1869 : !pdl.value -> ^bb3502, ^bb1
  ^bb3502:  // pred: ^bb3501
    pdl_interp.check_operation_name of %1872 is "math.cos" -> ^bb3503, ^bb1
  ^bb3503:  // pred: ^bb3502
    pdl_interp.check_operand_count of %1872 is 1 -> ^bb3504, ^bb1
  ^bb3504:  // pred: ^bb3503
    pdl_interp.check_result_count of %1872 is 1 -> ^bb3505, ^bb1
  ^bb3505:  // pred: ^bb3504
    %1876 = pdl_interp.get_result 0 of %1872
    pdl_interp.is_not_null %1876 : !pdl.value -> ^bb3506, ^bb1
  ^bb3506:  // pred: ^bb3505
    pdl_interp.are_equal %1876, %1871 : !pdl.value -> ^bb3507, ^bb1
  ^bb3507:  // pred: ^bb3506
    %1877 = pdl_interp.get_operand 0 of %1868
    pdl_interp.is_not_null %1877 : !pdl.value -> ^bb3508, ^bb1
  ^bb3508:  // pred: ^bb3507
    %1878 = pdl_interp.get_value_type of %1877 : !pdl.type
    pdl_interp.check_type %1878 is f32 -> ^bb3509, ^bb1
  ^bb3509:  // pred: ^bb3508
    %1879 = pdl_interp.get_value_type of %1874 : !pdl.type
    pdl_interp.are_equal %1878, %1879 : !pdl.type -> ^bb3510, ^bb1
  ^bb3510:  // pred: ^bb3509
    %1880 = pdl_interp.get_value_type of %1829 : !pdl.type
    pdl_interp.are_equal %1878, %1880 : !pdl.type -> ^bb3511, ^bb1
  ^bb3511:  // pred: ^bb3510
    %1881 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1878, %1881 : !pdl.type -> ^bb3512, ^bb1
  ^bb3512:  // pred: ^bb3511
    %1882 = pdl_interp.get_operand 0 of %1867
    pdl_interp.is_not_null %1882 : !pdl.value -> ^bb3513, ^bb1
  ^bb3513:  // pred: ^bb3512
    %1883 = pdl_interp.get_value_type of %1873 : !pdl.type
    pdl_interp.are_equal %1878, %1883 : !pdl.type -> ^bb3514, ^bb1
  ^bb3514:  // pred: ^bb3513
    %1884 = pdl_interp.get_value_type of %1865 : !pdl.type
    pdl_interp.are_equal %1878, %1884 : !pdl.type -> ^bb3515, ^bb1
  ^bb3515:  // pred: ^bb3514
    %1885 = pdl_interp.get_value_type of %1876 : !pdl.type
    pdl_interp.are_equal %1878, %1885 : !pdl.type -> ^bb3516, ^bb1
  ^bb3516:  // pred: ^bb3515
    %1886 = pdl_interp.get_value_type of %1875 : !pdl.type
    pdl_interp.are_equal %1878, %1886 : !pdl.type -> ^bb3517, ^bb1
  ^bb3517:  // pred: ^bb3516
    %1887 = pdl_interp.get_operand 0 of %1870
    pdl_interp.are_equal %1877, %1887 : !pdl.value -> ^bb3518, ^bb1
  ^bb3518:  // pred: ^bb3517
    %1888 = pdl_interp.get_value_type of %1882 : !pdl.type
    pdl_interp.are_equal %1878, %1888 : !pdl.type -> ^bb3519, ^bb1
  ^bb3519:  // pred: ^bb3518
    %1889 = pdl_interp.get_operand 0 of %1872
    pdl_interp.are_equal %1882, %1889 : !pdl.value -> ^bb3520, ^bb1
  ^bb3520:  // pred: ^bb3519
    pdl_interp.record_match @rewriters::@hang_m_tan(%1877, %1882, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.constant", "arith.divf", "math.tan"]), loc([%arg0, %2, %1537, %1867, %1868, %1870, %1872]), root("arith.divf") -> ^bb1
  ^bb3521:  // pred: ^bb3486
    pdl_interp.check_operand_count of %1867 is 0 -> ^bb3522, ^bb1
  ^bb3522:  // pred: ^bb3521
    pdl_interp.check_result_count of %1867 is 1 -> ^bb3523, ^bb1
  ^bb3523:  // pred: ^bb3522
    %1890 = pdl_interp.get_result 0 of %1867
    pdl_interp.is_not_null %1890 : !pdl.value -> ^bb3524, ^bb1
  ^bb3524:  // pred: ^bb3523
    pdl_interp.are_equal %1890, %1866 : !pdl.value -> ^bb3525, ^bb1
  ^bb3525:  // pred: ^bb3524
    pdl_interp.check_operation_name of %1868 is "math.exp" -> ^bb3526, ^bb1
  ^bb3526:  // pred: ^bb3525
    pdl_interp.check_operand_count of %1868 is 1 -> ^bb3527, ^bb1
  ^bb3527:  // pred: ^bb3526
    pdl_interp.check_result_count of %1868 is 1 -> ^bb3528, ^bb1
  ^bb3528:  // pred: ^bb3527
    %1891 = pdl_interp.get_result 0 of %1868
    pdl_interp.is_not_null %1891 : !pdl.value -> ^bb3529, ^bb1
  ^bb3529:  // pred: ^bb3528
    pdl_interp.are_equal %1891, %1830 : !pdl.value -> ^bb3530, ^bb1
  ^bb3530:  // pred: ^bb3529
    pdl_interp.is_not_null %1871 : !pdl.value -> ^bb3531, ^bb1
  ^bb3531:  // pred: ^bb3530
    pdl_interp.check_operation_name of %1870 is "math.exp" -> ^bb3532, ^bb1
  ^bb3532:  // pred: ^bb3531
    pdl_interp.check_operand_count of %1870 is 1 -> ^bb3533, ^bb1
  ^bb3533:  // pred: ^bb3532
    pdl_interp.check_result_count of %1870 is 1 -> ^bb3534, ^bb1
  ^bb3534:  // pred: ^bb3533
    %1892 = pdl_interp.get_result 0 of %1870
    pdl_interp.is_not_null %1892 : !pdl.value -> ^bb3535, ^bb1
  ^bb3535:  // pred: ^bb3534
    pdl_interp.are_equal %1892, %1869 : !pdl.value -> ^bb3536, ^bb1
  ^bb3536:  // pred: ^bb3535
    pdl_interp.check_operation_name of %1872 is "arith.constant" -> ^bb3537, ^bb1
  ^bb3537:  // pred: ^bb3536
    pdl_interp.check_operand_count of %1872 is 0 -> ^bb3538, ^bb1
  ^bb3538:  // pred: ^bb3537
    pdl_interp.check_result_count of %1872 is 1 -> ^bb3539, ^bb1
  ^bb3539:  // pred: ^bb3538
    %1893 = pdl_interp.get_result 0 of %1872
    pdl_interp.is_not_null %1893 : !pdl.value -> ^bb3540, ^bb1
  ^bb3540:  // pred: ^bb3539
    pdl_interp.are_equal %1893, %1871 : !pdl.value -> ^bb3541, ^bb1
  ^bb3541:  // pred: ^bb3540
    %1894 = pdl_interp.get_operand 0 of %1868
    pdl_interp.is_not_null %1894 : !pdl.value -> ^bb3542, ^bb1
  ^bb3542:  // pred: ^bb3541
    %1895 = pdl_interp.get_attribute "value" of %1867
    pdl_interp.is_not_null %1895 : !pdl.attribute -> ^bb3543, ^bb1
  ^bb3543:  // pred: ^bb3542
    pdl_interp.check_attribute %1895 is 1.000000e+00 : f32 -> ^bb3544, ^bb1
  ^bb3544:  // pred: ^bb3543
    %1896 = pdl_interp.get_operand 0 of %1870
    %1897 = pdl_interp.get_defining_op of %1896 : !pdl.value
    pdl_interp.is_not_null %1897 : !pdl.operation -> ^bb3545, ^bb1
  ^bb3545:  // pred: ^bb3544
    pdl_interp.is_not_null %1896 : !pdl.value -> ^bb3546, ^bb1
  ^bb3546:  // pred: ^bb3545
    %1898 = pdl_interp.get_defining_op of %1894 : !pdl.value
    pdl_interp.is_not_null %1898 : !pdl.operation -> ^bb3547, ^bb1
  ^bb3547:  // pred: ^bb3546
    %1899 = pdl_interp.get_operand 0 of %1897
    %1900 = pdl_interp.get_defining_op of %1899 : !pdl.value
    pdl_interp.is_not_null %1900 : !pdl.operation -> ^bb3548, ^bb1
  ^bb3548:  // pred: ^bb3547
    pdl_interp.check_operation_name of %1897 is "arith.mulf" -> ^bb3549, ^bb1
  ^bb3549:  // pred: ^bb3548
    pdl_interp.check_operand_count of %1897 is 2 -> ^bb3550, ^bb1
  ^bb3550:  // pred: ^bb3549
    pdl_interp.check_result_count of %1897 is 1 -> ^bb3551, ^bb1
  ^bb3551:  // pred: ^bb3550
    %1901 = pdl_interp.get_result 0 of %1897
    pdl_interp.is_not_null %1901 : !pdl.value -> ^bb3552, ^bb1
  ^bb3552:  // pred: ^bb3551
    pdl_interp.are_equal %1901, %1896 : !pdl.value -> ^bb3553, ^bb1
  ^bb3553:  // pred: ^bb3552
    %1902 = pdl_interp.get_attribute "value" of %1872
    pdl_interp.is_not_null %1902 : !pdl.attribute -> ^bb3554, ^bb1
  ^bb3554:  // pred: ^bb3553
    pdl_interp.check_attribute %1902 is 1.000000e+00 : f32 -> ^bb3555, ^bb1
  ^bb3555:  // pred: ^bb3554
    pdl_interp.check_operation_name of %1898 is "arith.mulf" -> ^bb3556, ^bb1
  ^bb3556:  // pred: ^bb3555
    pdl_interp.check_operand_count of %1898 is 2 -> ^bb3557, ^bb1
  ^bb3557:  // pred: ^bb3556
    pdl_interp.check_result_count of %1898 is 1 -> ^bb3558, ^bb1
  ^bb3558:  // pred: ^bb3557
    %1903 = pdl_interp.get_result 0 of %1898
    pdl_interp.is_not_null %1903 : !pdl.value -> ^bb3559, ^bb1
  ^bb3559:  // pred: ^bb3558
    pdl_interp.are_equal %1903, %1894 : !pdl.value -> ^bb3560, ^bb1
  ^bb3560:  // pred: ^bb3559
    pdl_interp.is_not_null %1899 : !pdl.value -> ^bb3561, ^bb1
  ^bb3561:  // pred: ^bb3560
    pdl_interp.check_operation_name of %1900 is "arith.constant" -> ^bb3562, ^bb1
  ^bb3562:  // pred: ^bb3561
    pdl_interp.check_operand_count of %1900 is 0 -> ^bb3563, ^bb1
  ^bb3563:  // pred: ^bb3562
    pdl_interp.check_result_count of %1900 is 1 -> ^bb3564, ^bb1
  ^bb3564:  // pred: ^bb3563
    %1904 = pdl_interp.get_result 0 of %1900
    pdl_interp.is_not_null %1904 : !pdl.value -> ^bb3565, ^bb1
  ^bb3565:  // pred: ^bb3564
    pdl_interp.are_equal %1904, %1899 : !pdl.value -> ^bb3566, ^bb1
  ^bb3566:  // pred: ^bb3565
    %1905 = pdl_interp.get_operand 0 of %1898
    pdl_interp.is_not_null %1905 : !pdl.value -> ^bb3567, ^bb1
  ^bb3567:  // pred: ^bb3566
    %1906 = pdl_interp.get_operand 1 of %1898
    pdl_interp.is_not_null %1906 : !pdl.value -> ^bb3568, ^bb1
  ^bb3568:  // pred: ^bb3567
    %1907 = pdl_interp.get_defining_op of %1905 : !pdl.value
    pdl_interp.is_not_null %1907 : !pdl.operation -> ^bb3569, ^bb1
  ^bb3569:  // pred: ^bb3568
    pdl_interp.check_operation_name of %1907 is "arith.constant" -> ^bb3570, ^bb1
  ^bb3570:  // pred: ^bb3569
    pdl_interp.check_operand_count of %1907 is 0 -> ^bb3571, ^bb1
  ^bb3571:  // pred: ^bb3570
    pdl_interp.check_result_count of %1907 is 1 -> ^bb3572, ^bb1
  ^bb3572:  // pred: ^bb3571
    %1908 = pdl_interp.get_attribute "value" of %1907
    pdl_interp.is_not_null %1908 : !pdl.attribute -> ^bb3573, ^bb1
  ^bb3573:  // pred: ^bb3572
    pdl_interp.check_attribute %1908 is 2.000000e+00 : f32 -> ^bb3574, ^bb1
  ^bb3574:  // pred: ^bb3573
    %1909 = pdl_interp.get_result 0 of %1907
    pdl_interp.is_not_null %1909 : !pdl.value -> ^bb3575, ^bb1
  ^bb3575:  // pred: ^bb3574
    pdl_interp.are_equal %1909, %1905 : !pdl.value -> ^bb3576, ^bb1
  ^bb3576:  // pred: ^bb3575
    %1910 = pdl_interp.get_value_type of %1909 : !pdl.type
    pdl_interp.check_type %1910 is f32 -> ^bb3577, ^bb1
  ^bb3577:  // pred: ^bb3576
    %1911 = pdl_interp.get_value_type of %1906 : !pdl.type
    pdl_interp.are_equal %1910, %1911 : !pdl.type -> ^bb3578, ^bb1
  ^bb3578:  // pred: ^bb3577
    %1912 = pdl_interp.get_value_type of %1903 : !pdl.type
    pdl_interp.are_equal %1910, %1912 : !pdl.type -> ^bb3579, ^bb1
  ^bb3579:  // pred: ^bb3578
    %1913 = pdl_interp.get_value_type of %1891 : !pdl.type
    pdl_interp.are_equal %1910, %1913 : !pdl.type -> ^bb3580, ^bb1
  ^bb3580:  // pred: ^bb3579
    %1914 = pdl_interp.get_value_type of %1829 : !pdl.type
    pdl_interp.are_equal %1910, %1914 : !pdl.type -> ^bb3581, ^bb1
  ^bb3581:  // pred: ^bb3580
    %1915 = pdl_interp.get_value_type of %1865 : !pdl.type
    pdl_interp.are_equal %1910, %1915 : !pdl.type -> ^bb3582, ^bb1
  ^bb3582:  // pred: ^bb3581
    %1916 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1910, %1916 : !pdl.type -> ^bb3583, ^bb1
  ^bb3583:  // pred: ^bb3582
    %1917 = pdl_interp.get_operand 1 of %1897
    pdl_interp.are_equal %1906, %1917 : !pdl.value -> ^bb3584, ^bb1
  ^bb3584:  // pred: ^bb3583
    %1918 = pdl_interp.get_attribute "value" of %1900
    pdl_interp.is_not_null %1918 : !pdl.attribute -> ^bb3585, ^bb1
  ^bb3585:  // pred: ^bb3584
    pdl_interp.check_attribute %1918 is 2.000000e+00 : f32 -> ^bb3586, ^bb1
  ^bb3586:  // pred: ^bb3585
    %1919 = pdl_interp.get_value_type of %1890 : !pdl.type
    pdl_interp.are_equal %1910, %1919 : !pdl.type -> ^bb3587, ^bb1
  ^bb3587:  // pred: ^bb3586
    %1920 = pdl_interp.get_value_type of %1904 : !pdl.type
    pdl_interp.are_equal %1910, %1920 : !pdl.type -> ^bb3588, ^bb1
  ^bb3588:  // pred: ^bb3587
    %1921 = pdl_interp.get_value_type of %1901 : !pdl.type
    pdl_interp.are_equal %1910, %1921 : !pdl.type -> ^bb3589, ^bb1
  ^bb3589:  // pred: ^bb3588
    %1922 = pdl_interp.get_value_type of %1892 : !pdl.type
    pdl_interp.are_equal %1910, %1922 : !pdl.type -> ^bb3590, ^bb1
  ^bb3590:  // pred: ^bb3589
    %1923 = pdl_interp.get_value_type of %1893 : !pdl.type
    pdl_interp.are_equal %1910, %1923 : !pdl.type -> ^bb3591, ^bb1
  ^bb3591:  // pred: ^bb3590
    pdl_interp.record_match @rewriters::@tanh_def_b_rev(%1906, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.tanh"]), loc([%arg0, %2, %1537, %1867, %1868, %1870, %1872, %1897, %1898, %1900, %1907]), root("arith.divf") -> ^bb1
  ^bb3592:  // pred: ^bb3486
    pdl_interp.check_operand_count of %1867 is 1 -> ^bb3593, ^bb1
  ^bb3593:  // pred: ^bb3592
    pdl_interp.check_result_count of %1867 is 1 -> ^bb3594, ^bb1
  ^bb3594:  // pred: ^bb3593
    %1924 = pdl_interp.get_result 0 of %1867
    pdl_interp.is_not_null %1924 : !pdl.value -> ^bb3595, ^bb1
  ^bb3595:  // pred: ^bb3594
    pdl_interp.are_equal %1924, %1866 : !pdl.value -> ^bb3596, ^bb1
  ^bb3596:  // pred: ^bb3595
    pdl_interp.switch_operation_name of %1868 to ["arith.constant", "math.exp"](^bb3597, ^bb3663) -> ^bb1
  ^bb3597:  // pred: ^bb3596
    pdl_interp.check_operand_count of %1868 is 0 -> ^bb3598, ^bb1
  ^bb3598:  // pred: ^bb3597
    pdl_interp.check_result_count of %1868 is 1 -> ^bb3599, ^bb1
  ^bb3599:  // pred: ^bb3598
    %1925 = pdl_interp.get_result 0 of %1868
    pdl_interp.is_not_null %1925 : !pdl.value -> ^bb3600, ^bb1
  ^bb3600:  // pred: ^bb3599
    pdl_interp.are_equal %1925, %1830 : !pdl.value -> ^bb3601, ^bb1
  ^bb3601:  // pred: ^bb3600
    pdl_interp.is_not_null %1871 : !pdl.value -> ^bb3602, ^bb1
  ^bb3602:  // pred: ^bb3601
    pdl_interp.check_operation_name of %1870 is "arith.constant" -> ^bb3603, ^bb1
  ^bb3603:  // pred: ^bb3602
    pdl_interp.check_operand_count of %1870 is 0 -> ^bb3604, ^bb1
  ^bb3604:  // pred: ^bb3603
    pdl_interp.check_result_count of %1870 is 1 -> ^bb3605, ^bb1
  ^bb3605:  // pred: ^bb3604
    %1926 = pdl_interp.get_result 0 of %1870
    pdl_interp.is_not_null %1926 : !pdl.value -> ^bb3606, ^bb1
  ^bb3606:  // pred: ^bb3605
    pdl_interp.are_equal %1926, %1869 : !pdl.value -> ^bb3607, ^bb1
  ^bb3607:  // pred: ^bb3606
    pdl_interp.check_operation_name of %1872 is "math.exp" -> ^bb3608, ^bb1
  ^bb3608:  // pred: ^bb3607
    pdl_interp.check_operand_count of %1872 is 1 -> ^bb3609, ^bb1
  ^bb3609:  // pred: ^bb3608
    pdl_interp.check_result_count of %1872 is 1 -> ^bb3610, ^bb1
  ^bb3610:  // pred: ^bb3609
    %1927 = pdl_interp.get_result 0 of %1872
    pdl_interp.is_not_null %1927 : !pdl.value -> ^bb3611, ^bb1
  ^bb3611:  // pred: ^bb3610
    pdl_interp.are_equal %1927, %1871 : !pdl.value -> ^bb3612, ^bb1
  ^bb3612:  // pred: ^bb3611
    %1928 = pdl_interp.get_operand 0 of %1867
    pdl_interp.is_not_null %1928 : !pdl.value -> ^bb3613, ^bb1
  ^bb3613:  // pred: ^bb3612
    %1929 = pdl_interp.get_defining_op of %1928 : !pdl.value
    pdl_interp.is_not_null %1929 : !pdl.operation -> ^bb3614, ^bb1
  ^bb3614:  // pred: ^bb3613
    %1930 = pdl_interp.get_attribute "value" of %1868
    pdl_interp.is_not_null %1930 : !pdl.attribute -> ^bb3615, ^bb1
  ^bb3615:  // pred: ^bb3614
    pdl_interp.check_attribute %1930 is 1.000000e+00 : f32 -> ^bb3616, ^bb1
  ^bb3616:  // pred: ^bb3615
    %1931 = pdl_interp.get_value_type of %1925 : !pdl.type
    pdl_interp.check_type %1931 is f32 -> ^bb3617, ^bb1
  ^bb3617:  // pred: ^bb3616
    %1932 = pdl_interp.get_value_type of %1829 : !pdl.type
    pdl_interp.are_equal %1931, %1932 : !pdl.type -> ^bb3618, ^bb1
  ^bb3618:  // pred: ^bb3617
    %1933 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1931, %1933 : !pdl.type -> ^bb3619, ^bb1
  ^bb3619:  // pred: ^bb3618
    %1934 = pdl_interp.get_operand 0 of %1872
    %1935 = pdl_interp.get_defining_op of %1934 : !pdl.value
    pdl_interp.is_not_null %1935 : !pdl.operation -> ^bb3620, ^bb1
  ^bb3620:  // pred: ^bb3619
    %1936 = pdl_interp.get_value_type of %1924 : !pdl.type
    pdl_interp.are_equal %1931, %1936 : !pdl.type -> ^bb3621, ^bb1
  ^bb3621:  // pred: ^bb3620
    %1937 = pdl_interp.get_operand 0 of %1935
    %1938 = pdl_interp.get_defining_op of %1937 : !pdl.value
    pdl_interp.is_not_null %1938 : !pdl.operation -> ^bb3622, ^bb1
  ^bb3622:  // pred: ^bb3621
    pdl_interp.check_operation_name of %1929 is "arith.mulf" -> ^bb3623, ^bb1
  ^bb3623:  // pred: ^bb3622
    pdl_interp.check_operand_count of %1929 is 2 -> ^bb3624, ^bb1
  ^bb3624:  // pred: ^bb3623
    pdl_interp.check_result_count of %1929 is 1 -> ^bb3625, ^bb1
  ^bb3625:  // pred: ^bb3624
    %1939 = pdl_interp.get_result 0 of %1929
    pdl_interp.is_not_null %1939 : !pdl.value -> ^bb3626, ^bb1
  ^bb3626:  // pred: ^bb3625
    pdl_interp.are_equal %1939, %1928 : !pdl.value -> ^bb3627, ^bb1
  ^bb3627:  // pred: ^bb3626
    pdl_interp.is_not_null %1934 : !pdl.value -> ^bb3628, ^bb1
  ^bb3628:  // pred: ^bb3627
    pdl_interp.check_operation_name of %1935 is "arith.mulf" -> ^bb3629, ^bb1
  ^bb3629:  // pred: ^bb3628
    pdl_interp.check_operand_count of %1935 is 2 -> ^bb3630, ^bb1
  ^bb3630:  // pred: ^bb3629
    pdl_interp.check_result_count of %1935 is 1 -> ^bb3631, ^bb1
  ^bb3631:  // pred: ^bb3630
    %1940 = pdl_interp.get_result 0 of %1935
    pdl_interp.is_not_null %1940 : !pdl.value -> ^bb3632, ^bb1
  ^bb3632:  // pred: ^bb3631
    pdl_interp.are_equal %1940, %1934 : !pdl.value -> ^bb3633, ^bb1
  ^bb3633:  // pred: ^bb3632
    %1941 = pdl_interp.get_attribute "value" of %1870
    pdl_interp.is_not_null %1941 : !pdl.attribute -> ^bb3634, ^bb1
  ^bb3634:  // pred: ^bb3633
    pdl_interp.check_attribute %1941 is 1.000000e+00 : f32 -> ^bb3635, ^bb1
  ^bb3635:  // pred: ^bb3634
    pdl_interp.is_not_null %1937 : !pdl.value -> ^bb3636, ^bb1
  ^bb3636:  // pred: ^bb3635
    pdl_interp.check_operation_name of %1938 is "arith.constant" -> ^bb3637, ^bb1
  ^bb3637:  // pred: ^bb3636
    pdl_interp.check_operand_count of %1938 is 0 -> ^bb3638, ^bb1
  ^bb3638:  // pred: ^bb3637
    pdl_interp.check_result_count of %1938 is 1 -> ^bb3639, ^bb1
  ^bb3639:  // pred: ^bb3638
    %1942 = pdl_interp.get_result 0 of %1938
    pdl_interp.is_not_null %1942 : !pdl.value -> ^bb3640, ^bb1
  ^bb3640:  // pred: ^bb3639
    pdl_interp.are_equal %1942, %1937 : !pdl.value -> ^bb3641, ^bb1
  ^bb3641:  // pred: ^bb3640
    %1943 = pdl_interp.get_value_type of %1865 : !pdl.type
    pdl_interp.are_equal %1931, %1943 : !pdl.type -> ^bb3642, ^bb1
  ^bb3642:  // pred: ^bb3641
    %1944 = pdl_interp.get_value_type of %1926 : !pdl.type
    pdl_interp.are_equal %1931, %1944 : !pdl.type -> ^bb3643, ^bb1
  ^bb3643:  // pred: ^bb3642
    %1945 = pdl_interp.get_operand 0 of %1929
    pdl_interp.is_not_null %1945 : !pdl.value -> ^bb3644, ^bb1
  ^bb3644:  // pred: ^bb3643
    %1946 = pdl_interp.get_defining_op of %1945 : !pdl.value
    pdl_interp.is_not_null %1946 : !pdl.operation -> ^bb3645, ^bb1
  ^bb3645:  // pred: ^bb3644
    %1947 = pdl_interp.get_value_type of %1927 : !pdl.type
    pdl_interp.are_equal %1931, %1947 : !pdl.type -> ^bb3646, ^bb1
  ^bb3646:  // pred: ^bb3645
    %1948 = pdl_interp.get_value_type of %1940 : !pdl.type
    pdl_interp.are_equal %1948, %1931 : !pdl.type -> ^bb3647, ^bb1
  ^bb3647:  // pred: ^bb3646
    %1949 = pdl_interp.get_attribute "value" of %1938
    pdl_interp.is_not_null %1949 : !pdl.attribute -> ^bb3648, ^bb1
  ^bb3648:  // pred: ^bb3647
    pdl_interp.check_attribute %1949 is -2.000000e+00 : f32 -> ^bb3649, ^bb1
  ^bb3649:  // pred: ^bb3648
    %1950 = pdl_interp.get_operand 1 of %1929
    pdl_interp.is_not_null %1950 : !pdl.value -> ^bb3650, ^bb1
  ^bb3650:  // pred: ^bb3649
    pdl_interp.check_operation_name of %1946 is "arith.constant" -> ^bb3651, ^bb1
  ^bb3651:  // pred: ^bb3650
    pdl_interp.check_operand_count of %1946 is 0 -> ^bb3652, ^bb1
  ^bb3652:  // pred: ^bb3651
    pdl_interp.check_result_count of %1946 is 1 -> ^bb3653, ^bb1
  ^bb3653:  // pred: ^bb3652
    %1951 = pdl_interp.get_result 0 of %1946
    pdl_interp.is_not_null %1951 : !pdl.value -> ^bb3654, ^bb1
  ^bb3654:  // pred: ^bb3653
    pdl_interp.are_equal %1951, %1945 : !pdl.value -> ^bb3655, ^bb1
  ^bb3655:  // pred: ^bb3654
    %1952 = pdl_interp.get_value_type of %1939 : !pdl.type
    pdl_interp.are_equal %1952, %1931 : !pdl.type -> ^bb3656, ^bb1
  ^bb3656:  // pred: ^bb3655
    %1953 = pdl_interp.get_operand 1 of %1935
    pdl_interp.are_equal %1950, %1953 : !pdl.value -> ^bb3657, ^bb1
  ^bb3657:  // pred: ^bb3656
    %1954 = pdl_interp.get_value_type of %1950 : !pdl.type
    pdl_interp.are_equal %1954, %1931 : !pdl.type -> ^bb3658, ^bb1
  ^bb3658:  // pred: ^bb3657
    %1955 = pdl_interp.get_attribute "value" of %1946
    pdl_interp.is_not_null %1955 : !pdl.attribute -> ^bb3659, ^bb1
  ^bb3659:  // pred: ^bb3658
    pdl_interp.check_attribute %1955 is -2.000000e+00 : f32 -> ^bb3660, ^bb1
  ^bb3660:  // pred: ^bb3659
    %1956 = pdl_interp.get_value_type of %1951 : !pdl.type
    pdl_interp.are_equal %1956, %1931 : !pdl.type -> ^bb3661, ^bb1
  ^bb3661:  // pred: ^bb3660
    %1957 = pdl_interp.get_value_type of %1942 : !pdl.type
    pdl_interp.are_equal %1957, %1931 : !pdl.type -> ^bb3662, ^bb1
  ^bb3662:  // pred: ^bb3661
    pdl_interp.record_match @rewriters::@tanh_def_c_rev(%1950, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.tanh"]), loc([%arg0, %2, %1537, %1867, %1868, %1870, %1872, %1929, %1935, %1938, %1946]), root("arith.divf") -> ^bb1
  ^bb3663:  // pred: ^bb3596
    pdl_interp.check_operand_count of %1868 is 1 -> ^bb3664, ^bb1
  ^bb3664:  // pred: ^bb3663
    pdl_interp.check_result_count of %1868 is 1 -> ^bb3665, ^bb1
  ^bb3665:  // pred: ^bb3664
    %1958 = pdl_interp.get_result 0 of %1868
    pdl_interp.is_not_null %1958 : !pdl.value -> ^bb3666, ^bb1
  ^bb3666:  // pred: ^bb3665
    pdl_interp.are_equal %1958, %1830 : !pdl.value -> ^bb3667, ^bb1
  ^bb3667:  // pred: ^bb3666
    pdl_interp.is_not_null %1871 : !pdl.value -> ^bb3668, ^bb1
  ^bb3668:  // pred: ^bb3667
    pdl_interp.check_operation_name of %1870 is "math.exp" -> ^bb3669, ^bb1
  ^bb3669:  // pred: ^bb3668
    pdl_interp.check_operand_count of %1870 is 1 -> ^bb3670, ^bb1
  ^bb3670:  // pred: ^bb3669
    pdl_interp.check_result_count of %1870 is 1 -> ^bb3671, ^bb1
  ^bb3671:  // pred: ^bb3670
    %1959 = pdl_interp.get_result 0 of %1870
    pdl_interp.is_not_null %1959 : !pdl.value -> ^bb3672, ^bb1
  ^bb3672:  // pred: ^bb3671
    pdl_interp.are_equal %1959, %1869 : !pdl.value -> ^bb3673, ^bb1
  ^bb3673:  // pred: ^bb3672
    pdl_interp.check_operation_name of %1872 is "math.exp" -> ^bb3674, ^bb1
  ^bb3674:  // pred: ^bb3673
    pdl_interp.check_operand_count of %1872 is 1 -> ^bb3675, ^bb1
  ^bb3675:  // pred: ^bb3674
    pdl_interp.check_result_count of %1872 is 1 -> ^bb3676, ^bb1
  ^bb3676:  // pred: ^bb3675
    %1960 = pdl_interp.get_result 0 of %1872
    pdl_interp.is_not_null %1960 : !pdl.value -> ^bb3677, ^bb1
  ^bb3677:  // pred: ^bb3676
    pdl_interp.are_equal %1960, %1871 : !pdl.value -> ^bb3678, ^bb1
  ^bb3678:  // pred: ^bb3677
    %1961 = pdl_interp.get_operand 0 of %1868
    pdl_interp.is_not_null %1961 : !pdl.value -> ^bb3679, ^bb1
  ^bb3679:  // pred: ^bb3678
    %1962 = pdl_interp.get_value_type of %1961 : !pdl.type
    pdl_interp.check_type %1962 is f32 -> ^bb3680, ^bb1
  ^bb3680:  // pred: ^bb3679
    %1963 = pdl_interp.get_value_type of %1958 : !pdl.type
    pdl_interp.are_equal %1962, %1963 : !pdl.type -> ^bb3681, ^bb1
  ^bb3681:  // pred: ^bb3680
    %1964 = pdl_interp.get_value_type of %1829 : !pdl.type
    pdl_interp.are_equal %1962, %1964 : !pdl.type -> ^bb3682, ^bb1
  ^bb3682:  // pred: ^bb3681
    %1965 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1962, %1965 : !pdl.type -> ^bb3683, ^bb1
  ^bb3683:  // pred: ^bb3682
    %1966 = pdl_interp.get_operand 0 of %1867
    pdl_interp.is_not_null %1966 : !pdl.value -> ^bb3684, ^bb1
  ^bb3684:  // pred: ^bb3683
    %1967 = pdl_interp.get_defining_op of %1966 : !pdl.value
    pdl_interp.is_not_null %1967 : !pdl.operation -> ^bb3685, ^bb1
  ^bb3685:  // pred: ^bb3684
    %1968 = pdl_interp.get_value_type of %1924 : !pdl.type
    pdl_interp.are_equal %1962, %1968 : !pdl.type -> ^bb3686, ^bb1
  ^bb3686:  // pred: ^bb3685
    %1969 = pdl_interp.get_operand 0 of %1872
    %1970 = pdl_interp.get_defining_op of %1969 : !pdl.value
    pdl_interp.is_not_null %1970 : !pdl.operation -> ^bb3687, ^bb1
  ^bb3687:  // pred: ^bb3686
    %1971 = pdl_interp.get_value_type of %1865 : !pdl.type
    pdl_interp.are_equal %1962, %1971 : !pdl.type -> ^bb3688, ^bb1
  ^bb3688:  // pred: ^bb3687
    %1972 = pdl_interp.get_value_type of %1960 : !pdl.type
    pdl_interp.are_equal %1962, %1972 : !pdl.type -> ^bb3689, ^bb1
  ^bb3689:  // pred: ^bb3688
    pdl_interp.check_operation_name of %1967 is "arith.negf" -> ^bb3690, ^bb1
  ^bb3690:  // pred: ^bb3689
    pdl_interp.check_operand_count of %1967 is 1 -> ^bb3691, ^bb1
  ^bb3691:  // pred: ^bb3690
    pdl_interp.check_result_count of %1967 is 1 -> ^bb3692, ^bb1
  ^bb3692:  // pred: ^bb3691
    %1973 = pdl_interp.get_result 0 of %1967
    pdl_interp.is_not_null %1973 : !pdl.value -> ^bb3693, ^bb1
  ^bb3693:  // pred: ^bb3692
    pdl_interp.are_equal %1973, %1966 : !pdl.value -> ^bb3694, ^bb1
  ^bb3694:  // pred: ^bb3693
    %1974 = pdl_interp.get_value_type of %1959 : !pdl.type
    pdl_interp.are_equal %1962, %1974 : !pdl.type -> ^bb3695, ^bb1
  ^bb3695:  // pred: ^bb3694
    pdl_interp.is_not_null %1969 : !pdl.value -> ^bb3696, ^bb1
  ^bb3696:  // pred: ^bb3695
    pdl_interp.check_operation_name of %1970 is "arith.negf" -> ^bb3697, ^bb1
  ^bb3697:  // pred: ^bb3696
    pdl_interp.check_operand_count of %1970 is 1 -> ^bb3698, ^bb1
  ^bb3698:  // pred: ^bb3697
    pdl_interp.check_result_count of %1970 is 1 -> ^bb3699, ^bb1
  ^bb3699:  // pred: ^bb3698
    %1975 = pdl_interp.get_result 0 of %1970
    pdl_interp.is_not_null %1975 : !pdl.value -> ^bb3700, ^bb1
  ^bb3700:  // pred: ^bb3699
    pdl_interp.are_equal %1975, %1969 : !pdl.value -> ^bb3701, ^bb1
  ^bb3701:  // pred: ^bb3700
    %1976 = pdl_interp.get_operand 0 of %1870
    pdl_interp.are_equal %1961, %1976 : !pdl.value -> ^bb3702, ^bb1
  ^bb3702:  // pred: ^bb3701
    %1977 = pdl_interp.get_value_type of %1973 : !pdl.type
    pdl_interp.are_equal %1977, %1962 : !pdl.type -> ^bb3703, ^bb1
  ^bb3703:  // pred: ^bb3702
    %1978 = pdl_interp.get_operand 0 of %1970
    pdl_interp.are_equal %1978, %1961 : !pdl.value -> ^bb3704, ^bb1
  ^bb3704:  // pred: ^bb3703
    %1979 = pdl_interp.get_value_type of %1975 : !pdl.type
    pdl_interp.are_equal %1979, %1962 : !pdl.type -> ^bb3705, ^bb1
  ^bb3705:  // pred: ^bb3704
    %1980 = pdl_interp.get_operand 0 of %1967
    pdl_interp.are_equal %1980, %1961 : !pdl.value -> ^bb3706, ^bb1
  ^bb3706:  // pred: ^bb3705
    pdl_interp.record_match @rewriters::@tanh_undef(%1961, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.tanh"]), loc([%arg0, %2, %1537, %1867, %1868, %1870, %1872, %1967, %1970]), root("arith.divf") -> ^bb1
  ^bb3707:  // pred: ^bb3411
    pdl_interp.check_operand_count of %1537 is 0 -> ^bb3708, ^bb1
  ^bb3708:  // pred: ^bb3707
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3709, ^bb1
  ^bb3709:  // pred: ^bb3708
    %1981 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %1981 : !pdl.value -> ^bb3710, ^bb1
  ^bb3710:  // pred: ^bb3709
    pdl_interp.are_equal %1981, %1536 : !pdl.value -> ^bb3711, ^bb1
  ^bb3711:  // pred: ^bb3710
    %1982 = pdl_interp.get_operand 1 of %2
    %1983 = pdl_interp.get_defining_op of %1982 : !pdl.value
    pdl_interp.is_not_null %1983 : !pdl.operation -> ^bb3712, ^bb1
  ^bb3712:  // pred: ^bb3711
    %1984 = pdl_interp.get_defining_op of %1830 : !pdl.value
    pdl_interp.is_not_null %1984 : !pdl.operation -> ^bb3713, ^bb1
  ^bb3713:  // pred: ^bb3712
    pdl_interp.is_not_null %1982 : !pdl.value -> ^bb3714, ^bb1
  ^bb3714:  // pred: ^bb3713
    pdl_interp.switch_operation_name of %1983 to ["math.cos", "math.exp"](^bb3715, ^bb3754) -> ^bb1
  ^bb3715:  // pred: ^bb3714
    pdl_interp.check_operand_count of %1983 is 1 -> ^bb3716, ^bb1
  ^bb3716:  // pred: ^bb3715
    pdl_interp.check_result_count of %1983 is 1 -> ^bb3717, ^bb1
  ^bb3717:  // pred: ^bb3716
    %1985 = pdl_interp.get_result 0 of %1983
    pdl_interp.is_not_null %1985 : !pdl.value -> ^bb3718, ^bb1
  ^bb3718:  // pred: ^bb3717
    pdl_interp.are_equal %1985, %1982 : !pdl.value -> ^bb3719, ^bb1
  ^bb3719:  // pred: ^bb3718
    pdl_interp.check_operation_name of %1984 is "math.cos" -> ^bb3720, ^bb1
  ^bb3720:  // pred: ^bb3719
    pdl_interp.check_operand_count of %1984 is 1 -> ^bb3721, ^bb1
  ^bb3721:  // pred: ^bb3720
    pdl_interp.check_result_count of %1984 is 1 -> ^bb3722, ^bb1
  ^bb3722:  // pred: ^bb3721
    %1986 = pdl_interp.get_result 0 of %1984
    pdl_interp.is_not_null %1986 : !pdl.value -> ^bb3723, ^bb1
  ^bb3723:  // pred: ^bb3722
    pdl_interp.are_equal %1986, %1830 : !pdl.value -> ^bb3724, ^bb1
  ^bb3724:  // pred: ^bb3723
    %1987 = pdl_interp.get_operand 0 of %1984
    pdl_interp.is_not_null %1987 : !pdl.value -> ^bb3725, ^bb1
  ^bb3725:  // pred: ^bb3724
    %1988 = pdl_interp.get_operand 0 of %1983
    pdl_interp.is_not_null %1988 : !pdl.value -> ^bb3726, ^bb1
  ^bb3726:  // pred: ^bb3725
    %1989 = pdl_interp.get_defining_op of %1988 : !pdl.value
    pdl_interp.is_not_null %1989 : !pdl.operation -> ^bb3727, ^bb1
  ^bb3727:  // pred: ^bb3726
    %1990 = pdl_interp.get_attribute "value" of %1537
    pdl_interp.is_not_null %1990 : !pdl.attribute -> ^bb3728, ^bb1
  ^bb3728:  // pred: ^bb3727
    pdl_interp.check_attribute %1990 is 2.000000e+00 : f32 -> ^bb3729, ^bb1
  ^bb3729:  // pred: ^bb3728
    %1991 = pdl_interp.get_defining_op of %1987 : !pdl.value
    pdl_interp.is_not_null %1991 : !pdl.operation -> ^bb3730, ^bb1
  ^bb3730:  // pred: ^bb3729
    pdl_interp.check_operation_name of %1989 is "arith.addf" -> ^bb3731, ^bb1
  ^bb3731:  // pred: ^bb3730
    pdl_interp.check_operand_count of %1989 is 2 -> ^bb3732, ^bb1
  ^bb3732:  // pred: ^bb3731
    pdl_interp.check_result_count of %1989 is 1 -> ^bb3733, ^bb1
  ^bb3733:  // pred: ^bb3732
    %1992 = pdl_interp.get_result 0 of %1989
    pdl_interp.is_not_null %1992 : !pdl.value -> ^bb3734, ^bb1
  ^bb3734:  // pred: ^bb3733
    pdl_interp.are_equal %1992, %1988 : !pdl.value -> ^bb3735, ^bb1
  ^bb3735:  // pred: ^bb3734
    pdl_interp.check_operation_name of %1991 is "arith.subf" -> ^bb3736, ^bb1
  ^bb3736:  // pred: ^bb3735
    pdl_interp.check_operand_count of %1991 is 2 -> ^bb3737, ^bb1
  ^bb3737:  // pred: ^bb3736
    pdl_interp.check_result_count of %1991 is 1 -> ^bb3738, ^bb1
  ^bb3738:  // pred: ^bb3737
    %1993 = pdl_interp.get_result 0 of %1991
    pdl_interp.is_not_null %1993 : !pdl.value -> ^bb3739, ^bb1
  ^bb3739:  // pred: ^bb3738
    pdl_interp.are_equal %1993, %1987 : !pdl.value -> ^bb3740, ^bb1
  ^bb3740:  // pred: ^bb3739
    %1994 = pdl_interp.get_operand 0 of %1991
    pdl_interp.is_not_null %1994 : !pdl.value -> ^bb3741, ^bb1
  ^bb3741:  // pred: ^bb3740
    %1995 = pdl_interp.get_operand 1 of %1991
    pdl_interp.is_not_null %1995 : !pdl.value -> ^bb3742, ^bb1
  ^bb3742:  // pred: ^bb3741
    %1996 = pdl_interp.get_value_type of %1994 : !pdl.type
    pdl_interp.check_type %1996 is f32 -> ^bb3743, ^bb1
  ^bb3743:  // pred: ^bb3742
    %1997 = pdl_interp.get_value_type of %1993 : !pdl.type
    pdl_interp.are_equal %1996, %1997 : !pdl.type -> ^bb3744, ^bb1
  ^bb3744:  // pred: ^bb3743
    %1998 = pdl_interp.get_value_type of %1986 : !pdl.type
    pdl_interp.are_equal %1996, %1998 : !pdl.type -> ^bb3745, ^bb1
  ^bb3745:  // pred: ^bb3744
    %1999 = pdl_interp.get_value_type of %1829 : !pdl.type
    pdl_interp.are_equal %1996, %1999 : !pdl.type -> ^bb3746, ^bb1
  ^bb3746:  // pred: ^bb3745
    %2000 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %1996, %2000 : !pdl.type -> ^bb3747, ^bb1
  ^bb3747:  // pred: ^bb3746
    %2001 = pdl_interp.get_value_type of %1981 : !pdl.type
    pdl_interp.are_equal %1996, %2001 : !pdl.type -> ^bb3748, ^bb1
  ^bb3748:  // pred: ^bb3747
    %2002 = pdl_interp.get_value_type of %1985 : !pdl.type
    pdl_interp.are_equal %1996, %2002 : !pdl.type -> ^bb3749, ^bb1
  ^bb3749:  // pred: ^bb3748
    %2003 = pdl_interp.get_operand 0 of %1989
    pdl_interp.are_equal %1994, %2003 : !pdl.value -> ^bb3750, ^bb1
  ^bb3750:  // pred: ^bb3749
    %2004 = pdl_interp.get_operand 1 of %1989
    pdl_interp.are_equal %1995, %2004 : !pdl.value -> ^bb3751, ^bb1
  ^bb3751:  // pred: ^bb3750
    %2005 = pdl_interp.get_value_type of %1995 : !pdl.type
    pdl_interp.are_equal %1996, %2005 : !pdl.type -> ^bb3752, ^bb1
  ^bb3752:  // pred: ^bb3751
    %2006 = pdl_interp.get_value_type of %1992 : !pdl.type
    pdl_interp.are_equal %1996, %2006 : !pdl.type -> ^bb3753, ^bb1
  ^bb3753:  // pred: ^bb3752
    pdl_interp.record_match @rewriters::@sin_mult_rev(%1994, %1995, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.mulf"]), loc([%arg0, %2, %1537, %1983, %1984, %1989, %1991]), root("arith.divf") -> ^bb1
  ^bb3754:  // pred: ^bb3714
    pdl_interp.check_operand_count of %1983 is 1 -> ^bb3755, ^bb1
  ^bb3755:  // pred: ^bb3754
    pdl_interp.check_result_count of %1983 is 1 -> ^bb3756, ^bb1
  ^bb3756:  // pred: ^bb3755
    %2007 = pdl_interp.get_result 0 of %1983
    pdl_interp.is_not_null %2007 : !pdl.value -> ^bb3757, ^bb1
  ^bb3757:  // pred: ^bb3756
    pdl_interp.are_equal %2007, %1982 : !pdl.value -> ^bb3758, ^bb1
  ^bb3758:  // pred: ^bb3757
    pdl_interp.check_operation_name of %1984 is "math.exp" -> ^bb3759, ^bb1
  ^bb3759:  // pred: ^bb3758
    pdl_interp.check_operand_count of %1984 is 1 -> ^bb3760, ^bb1
  ^bb3760:  // pred: ^bb3759
    pdl_interp.check_result_count of %1984 is 1 -> ^bb3761, ^bb1
  ^bb3761:  // pred: ^bb3760
    %2008 = pdl_interp.get_result 0 of %1984
    pdl_interp.is_not_null %2008 : !pdl.value -> ^bb3762, ^bb1
  ^bb3762:  // pred: ^bb3761
    pdl_interp.are_equal %2008, %1830 : !pdl.value -> ^bb3763, ^bb1
  ^bb3763:  // pred: ^bb3762
    %2009 = pdl_interp.get_operand 0 of %1984
    pdl_interp.is_not_null %2009 : !pdl.value -> ^bb3764, ^bb1
  ^bb3764:  // pred: ^bb3763
    %2010 = pdl_interp.get_value_type of %2009 : !pdl.type
    pdl_interp.check_type %2010 is f32 -> ^bb3765, ^bb1
  ^bb3765:  // pred: ^bb3764
    %2011 = pdl_interp.get_value_type of %2008 : !pdl.type
    pdl_interp.are_equal %2010, %2011 : !pdl.type -> ^bb3766, ^bb1
  ^bb3766:  // pred: ^bb3765
    %2012 = pdl_interp.get_value_type of %1829 : !pdl.type
    pdl_interp.are_equal %2010, %2012 : !pdl.type -> ^bb3767, ^bb1
  ^bb3767:  // pred: ^bb3766
    %2013 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2010, %2013 : !pdl.type -> ^bb3768, ^bb1
  ^bb3768:  // pred: ^bb3767
    %2014 = pdl_interp.get_operand 0 of %1983
    pdl_interp.is_not_null %2014 : !pdl.value -> ^bb3769, ^bb1
  ^bb3769:  // pred: ^bb3768
    %2015 = pdl_interp.get_defining_op of %2014 : !pdl.value
    pdl_interp.is_not_null %2015 : !pdl.operation -> ^bb3770, ^bb1
  ^bb3770:  // pred: ^bb3769
    %2016 = pdl_interp.get_value_type of %2007 : !pdl.type
    pdl_interp.are_equal %2010, %2016 : !pdl.type -> ^bb3771, ^bb1
  ^bb3771:  // pred: ^bb3770
    %2017 = pdl_interp.get_attribute "value" of %1537
    pdl_interp.is_not_null %2017 : !pdl.attribute -> ^bb3772, ^bb1
  ^bb3772:  // pred: ^bb3771
    pdl_interp.check_attribute %2017 is 2.000000e+00 : f32 -> ^bb3773, ^bb1
  ^bb3773:  // pred: ^bb3772
    %2018 = pdl_interp.get_value_type of %1981 : !pdl.type
    pdl_interp.are_equal %2010, %2018 : !pdl.type -> ^bb3774, ^bb1
  ^bb3774:  // pred: ^bb3773
    pdl_interp.check_operation_name of %2015 is "arith.negf" -> ^bb3775, ^bb1
  ^bb3775:  // pred: ^bb3774
    pdl_interp.check_operand_count of %2015 is 1 -> ^bb3776, ^bb1
  ^bb3776:  // pred: ^bb3775
    pdl_interp.check_result_count of %2015 is 1 -> ^bb3777, ^bb1
  ^bb3777:  // pred: ^bb3776
    %2019 = pdl_interp.get_result 0 of %2015
    pdl_interp.is_not_null %2019 : !pdl.value -> ^bb3778, ^bb1
  ^bb3778:  // pred: ^bb3777
    pdl_interp.are_equal %2019, %2014 : !pdl.value -> ^bb3779, ^bb1
  ^bb3779:  // pred: ^bb3778
    %2020 = pdl_interp.get_value_type of %2019 : !pdl.type
    pdl_interp.are_equal %2020, %2010 : !pdl.type -> ^bb3780, ^bb1
  ^bb3780:  // pred: ^bb3779
    %2021 = pdl_interp.get_operand 0 of %2015
    pdl_interp.are_equal %2021, %2009 : !pdl.value -> ^bb3781, ^bb1
  ^bb3781:  // pred: ^bb3780
    pdl_interp.record_match @rewriters::@sinh_def_rev(%2009, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sinh"]), loc([%arg0, %2, %1537, %1983, %1984, %2015]), root("arith.divf") -> ^bb1
  ^bb3782:  // pred: ^bb3411
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb3783, ^bb1
  ^bb3783:  // pred: ^bb3782
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3784, ^bb1
  ^bb3784:  // pred: ^bb3783
    %2022 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %2022 : !pdl.value -> ^bb3785, ^bb1
  ^bb3785:  // pred: ^bb3784
    pdl_interp.are_equal %2022, %1536 : !pdl.value -> ^bb3786, ^bb1
  ^bb3786:  // pred: ^bb3785
    %2023 = pdl_interp.get_operand 1 of %2
    %2024 = pdl_interp.get_defining_op of %2023 : !pdl.value
    pdl_interp.is_not_null %2024 : !pdl.operation -> ^bb3787, ^bb1
  ^bb3787:  // pred: ^bb3786
    %2025 = pdl_interp.get_defining_op of %1830 : !pdl.value
    pdl_interp.is_not_null %2025 : !pdl.operation -> ^bb3788, ^bb1
  ^bb3788:  // pred: ^bb3787
    pdl_interp.is_not_null %2023 : !pdl.value -> ^bb3789, ^bb1
  ^bb3789:  // pred: ^bb3788
    pdl_interp.check_operation_name of %2024 is "arith.constant" -> ^bb3790, ^bb1
  ^bb3790:  // pred: ^bb3789
    pdl_interp.check_operand_count of %2024 is 0 -> ^bb3791, ^bb1
  ^bb3791:  // pred: ^bb3790
    pdl_interp.check_result_count of %2024 is 1 -> ^bb3792, ^bb1
  ^bb3792:  // pred: ^bb3791
    %2026 = pdl_interp.get_result 0 of %2024
    pdl_interp.is_not_null %2026 : !pdl.value -> ^bb3793, ^bb1
  ^bb3793:  // pred: ^bb3792
    pdl_interp.are_equal %2026, %2023 : !pdl.value -> ^bb3794, ^bb1
  ^bb3794:  // pred: ^bb3793
    pdl_interp.check_operation_name of %2025 is "math.cosh" -> ^bb3795, ^bb1
  ^bb3795:  // pred: ^bb3794
    pdl_interp.check_operand_count of %2025 is 1 -> ^bb3796, ^bb1
  ^bb3796:  // pred: ^bb3795
    pdl_interp.check_result_count of %2025 is 1 -> ^bb3797, ^bb1
  ^bb3797:  // pred: ^bb3796
    %2027 = pdl_interp.get_result 0 of %2025
    pdl_interp.is_not_null %2027 : !pdl.value -> ^bb3798, ^bb1
  ^bb3798:  // pred: ^bb3797
    pdl_interp.are_equal %2027, %1830 : !pdl.value -> ^bb3799, ^bb1
  ^bb3799:  // pred: ^bb3798
    %2028 = pdl_interp.get_operand 0 of %2025
    pdl_interp.is_not_null %2028 : !pdl.value -> ^bb3800, ^bb1
  ^bb3800:  // pred: ^bb3799
    %2029 = pdl_interp.get_attribute "value" of %2024
    pdl_interp.is_not_null %2029 : !pdl.attribute -> ^bb3801, ^bb1
  ^bb3801:  // pred: ^bb3800
    pdl_interp.check_attribute %2029 is 1.000000e+00 : f32 -> ^bb3802, ^bb1
  ^bb3802:  // pred: ^bb3801
    %2030 = pdl_interp.get_value_type of %2028 : !pdl.type
    pdl_interp.check_type %2030 is f32 -> ^bb3803, ^bb1
  ^bb3803:  // pred: ^bb3802
    %2031 = pdl_interp.get_value_type of %2027 : !pdl.type
    pdl_interp.are_equal %2030, %2031 : !pdl.type -> ^bb3804, ^bb1
  ^bb3804:  // pred: ^bb3803
    %2032 = pdl_interp.get_value_type of %1829 : !pdl.type
    pdl_interp.are_equal %2030, %2032 : !pdl.type -> ^bb3805, ^bb1
  ^bb3805:  // pred: ^bb3804
    %2033 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2030, %2033 : !pdl.type -> ^bb3806, ^bb1
  ^bb3806:  // pred: ^bb3805
    %2034 = pdl_interp.get_value_type of %2026 : !pdl.type
    pdl_interp.are_equal %2030, %2034 : !pdl.type -> ^bb3807, ^bb1
  ^bb3807:  // pred: ^bb3806
    %2035 = pdl_interp.get_value_type of %2022 : !pdl.type
    pdl_interp.are_equal %2030, %2035 : !pdl.type -> ^bb3808, ^bb1
  ^bb3808:  // pred: ^bb3807
    %2036 = pdl_interp.get_operand 0 of %1537
    pdl_interp.are_equal %2028, %2036 : !pdl.value -> ^bb3809, ^bb1
  ^bb3809:  // pred: ^bb3808
    pdl_interp.record_match @rewriters::@tanh_1div2mul_rev(%2028, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.tanh"]), loc([%arg0, %2, %1537, %2024, %2025]), root("arith.divf") -> ^bb1
  ^bb3810:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 2 -> ^bb3811, ^bb1
  ^bb3811:  // pred: ^bb3810
    pdl_interp.check_result_count of %2 is 1 -> ^bb3812, ^bb1
  ^bb3812:  // pred: ^bb3811
    %2037 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2037 : !pdl.value -> ^bb3813, ^bb1
  ^bb3813:  // pred: ^bb3812
    pdl_interp.are_equal %2037, %1 : !pdl.value -> ^bb3814, ^bb1
  ^bb3814:  // pred: ^bb3813
    %2038 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2038 : !pdl.value -> ^bb3815, ^bb1
  ^bb3815:  // pred: ^bb3814
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb3816, ^bb1
  ^bb3816:  // pred: ^bb3815
    pdl_interp.switch_operation_name of %1537 to ["arith.addf", "arith.subf", "arith.constant"](^bb3817, ^bb3914, ^bb3977) -> ^bb1
  ^bb3817:  // pred: ^bb3816
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb3818, ^bb1
  ^bb3818:  // pred: ^bb3817
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3819, ^bb1
  ^bb3819:  // pred: ^bb3818
    %2039 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %2039 : !pdl.value -> ^bb3820, ^bb1
  ^bb3820:  // pred: ^bb3819
    pdl_interp.are_equal %2039, %1536 : !pdl.value -> ^bb3821, ^bb1
  ^bb3821:  // pred: ^bb3820
    %2040 = pdl_interp.get_operand 1 of %2
    %2041 = pdl_interp.get_defining_op of %2040 : !pdl.value
    pdl_interp.is_not_null %2041 : !pdl.operation -> ^bb3822, ^bb1
  ^bb3822:  // pred: ^bb3821
    %2042 = pdl_interp.get_defining_op of %2038 : !pdl.value
    pdl_interp.is_not_null %2042 : !pdl.operation -> ^bb3823, ^bb1
  ^bb3823:  // pred: ^bb3822
    pdl_interp.is_not_null %2040 : !pdl.value -> ^bb3824, ^bb1
  ^bb3824:  // pred: ^bb3823
    %2043 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %2043 : !pdl.value -> ^bb3825, ^bb1
  ^bb3825:  // pred: ^bb3824
    %2044 = pdl_interp.get_defining_op of %2043 : !pdl.value
    pdl_interp.is_not_null %2044 : !pdl.operation -> ^bb3826, ^bb1
  ^bb3826:  // pred: ^bb3825
    %2045 = pdl_interp.get_operand 1 of %1537
    %2046 = pdl_interp.get_defining_op of %2045 : !pdl.value
    pdl_interp.is_not_null %2046 : !pdl.operation -> ^bb3827, ^bb1
  ^bb3827:  // pred: ^bb3826
    pdl_interp.switch_operation_name of %2041 to ["math.sin", "math.tanh"](^bb3828, ^bb3862) -> ^bb1
  ^bb3828:  // pred: ^bb3827
    pdl_interp.check_operand_count of %2041 is 1 -> ^bb3829, ^bb1
  ^bb3829:  // pred: ^bb3828
    pdl_interp.check_result_count of %2041 is 1 -> ^bb3830, ^bb1
  ^bb3830:  // pred: ^bb3829
    %2047 = pdl_interp.get_result 0 of %2041
    pdl_interp.is_not_null %2047 : !pdl.value -> ^bb3831, ^bb1
  ^bb3831:  // pred: ^bb3830
    pdl_interp.are_equal %2047, %2040 : !pdl.value -> ^bb3832, ^bb1
  ^bb3832:  // pred: ^bb3831
    pdl_interp.check_operation_name of %2042 is "math.sin" -> ^bb3833, ^bb1
  ^bb3833:  // pred: ^bb3832
    pdl_interp.check_operand_count of %2042 is 1 -> ^bb3834, ^bb1
  ^bb3834:  // pred: ^bb3833
    pdl_interp.check_result_count of %2042 is 1 -> ^bb3835, ^bb1
  ^bb3835:  // pred: ^bb3834
    %2048 = pdl_interp.get_result 0 of %2042
    pdl_interp.is_not_null %2048 : !pdl.value -> ^bb3836, ^bb1
  ^bb3836:  // pred: ^bb3835
    pdl_interp.are_equal %2048, %2038 : !pdl.value -> ^bb3837, ^bb1
  ^bb3837:  // pred: ^bb3836
    pdl_interp.is_not_null %2045 : !pdl.value -> ^bb3838, ^bb1
  ^bb3838:  // pred: ^bb3837
    pdl_interp.check_operation_name of %2044 is "math.cos" -> ^bb3839, ^bb1
  ^bb3839:  // pred: ^bb3838
    pdl_interp.check_operand_count of %2044 is 1 -> ^bb3840, ^bb1
  ^bb3840:  // pred: ^bb3839
    pdl_interp.check_result_count of %2044 is 1 -> ^bb3841, ^bb1
  ^bb3841:  // pred: ^bb3840
    %2049 = pdl_interp.get_result 0 of %2044
    pdl_interp.is_not_null %2049 : !pdl.value -> ^bb3842, ^bb1
  ^bb3842:  // pred: ^bb3841
    pdl_interp.are_equal %2049, %2043 : !pdl.value -> ^bb3843, ^bb1
  ^bb3843:  // pred: ^bb3842
    pdl_interp.check_operation_name of %2046 is "math.cos" -> ^bb3844, ^bb1
  ^bb3844:  // pred: ^bb3843
    pdl_interp.check_operand_count of %2046 is 1 -> ^bb3845, ^bb1
  ^bb3845:  // pred: ^bb3844
    pdl_interp.check_result_count of %2046 is 1 -> ^bb3846, ^bb1
  ^bb3846:  // pred: ^bb3845
    %2050 = pdl_interp.get_result 0 of %2046
    pdl_interp.is_not_null %2050 : !pdl.value -> ^bb3847, ^bb1
  ^bb3847:  // pred: ^bb3846
    pdl_interp.are_equal %2050, %2045 : !pdl.value -> ^bb3848, ^bb1
  ^bb3848:  // pred: ^bb3847
    %2051 = pdl_interp.get_operand 0 of %2042
    pdl_interp.is_not_null %2051 : !pdl.value -> ^bb3849, ^bb1
  ^bb3849:  // pred: ^bb3848
    %2052 = pdl_interp.get_value_type of %2051 : !pdl.type
    pdl_interp.check_type %2052 is f32 -> ^bb3850, ^bb1
  ^bb3850:  // pred: ^bb3849
    %2053 = pdl_interp.get_value_type of %2048 : !pdl.type
    pdl_interp.are_equal %2052, %2053 : !pdl.type -> ^bb3851, ^bb1
  ^bb3851:  // pred: ^bb3850
    %2054 = pdl_interp.get_value_type of %2037 : !pdl.type
    pdl_interp.are_equal %2052, %2054 : !pdl.type -> ^bb3852, ^bb1
  ^bb3852:  // pred: ^bb3851
    %2055 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2052, %2055 : !pdl.type -> ^bb3853, ^bb1
  ^bb3853:  // pred: ^bb3852
    %2056 = pdl_interp.get_operand 0 of %2041
    pdl_interp.is_not_null %2056 : !pdl.value -> ^bb3854, ^bb1
  ^bb3854:  // pred: ^bb3853
    %2057 = pdl_interp.get_value_type of %2047 : !pdl.type
    pdl_interp.are_equal %2052, %2057 : !pdl.type -> ^bb3855, ^bb1
  ^bb3855:  // pred: ^bb3854
    %2058 = pdl_interp.get_value_type of %2039 : !pdl.type
    pdl_interp.are_equal %2052, %2058 : !pdl.type -> ^bb3856, ^bb1
  ^bb3856:  // pred: ^bb3855
    %2059 = pdl_interp.get_value_type of %2050 : !pdl.type
    pdl_interp.are_equal %2052, %2059 : !pdl.type -> ^bb3857, ^bb1
  ^bb3857:  // pred: ^bb3856
    %2060 = pdl_interp.get_value_type of %2049 : !pdl.type
    pdl_interp.are_equal %2052, %2060 : !pdl.type -> ^bb3858, ^bb1
  ^bb3858:  // pred: ^bb3857
    %2061 = pdl_interp.get_operand 0 of %2044
    pdl_interp.are_equal %2051, %2061 : !pdl.value -> ^bb3859, ^bb1
  ^bb3859:  // pred: ^bb3858
    %2062 = pdl_interp.get_value_type of %2056 : !pdl.type
    pdl_interp.are_equal %2052, %2062 : !pdl.type -> ^bb3860, ^bb1
  ^bb3860:  // pred: ^bb3859
    %2063 = pdl_interp.get_operand 0 of %2046
    pdl_interp.are_equal %2056, %2063 : !pdl.value -> ^bb3861, ^bb1
  ^bb3861:  // pred: ^bb3860
    pdl_interp.record_match @rewriters::@hang_p_tan(%2051, %2056, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.constant", "arith.divf", "math.tan"]), loc([%arg0, %2, %1537, %2041, %2042, %2044, %2046]), root("arith.divf") -> ^bb1
  ^bb3862:  // pred: ^bb3827
    pdl_interp.check_operand_count of %2041 is 1 -> ^bb3863, ^bb1
  ^bb3863:  // pred: ^bb3862
    pdl_interp.check_result_count of %2041 is 1 -> ^bb3864, ^bb1
  ^bb3864:  // pred: ^bb3863
    %2064 = pdl_interp.get_result 0 of %2041
    pdl_interp.is_not_null %2064 : !pdl.value -> ^bb3865, ^bb1
  ^bb3865:  // pred: ^bb3864
    pdl_interp.are_equal %2064, %2040 : !pdl.value -> ^bb3866, ^bb1
  ^bb3866:  // pred: ^bb3865
    pdl_interp.check_operation_name of %2042 is "math.tanh" -> ^bb3867, ^bb1
  ^bb3867:  // pred: ^bb3866
    pdl_interp.check_operand_count of %2042 is 1 -> ^bb3868, ^bb1
  ^bb3868:  // pred: ^bb3867
    pdl_interp.check_result_count of %2042 is 1 -> ^bb3869, ^bb1
  ^bb3869:  // pred: ^bb3868
    %2065 = pdl_interp.get_result 0 of %2042
    pdl_interp.is_not_null %2065 : !pdl.value -> ^bb3870, ^bb1
  ^bb3870:  // pred: ^bb3869
    pdl_interp.are_equal %2065, %2038 : !pdl.value -> ^bb3871, ^bb1
  ^bb3871:  // pred: ^bb3870
    pdl_interp.is_not_null %2045 : !pdl.value -> ^bb3872, ^bb1
  ^bb3872:  // pred: ^bb3871
    pdl_interp.check_operation_name of %2044 is "arith.constant" -> ^bb3873, ^bb1
  ^bb3873:  // pred: ^bb3872
    pdl_interp.check_operand_count of %2044 is 0 -> ^bb3874, ^bb1
  ^bb3874:  // pred: ^bb3873
    pdl_interp.check_result_count of %2044 is 1 -> ^bb3875, ^bb1
  ^bb3875:  // pred: ^bb3874
    %2066 = pdl_interp.get_result 0 of %2044
    pdl_interp.is_not_null %2066 : !pdl.value -> ^bb3876, ^bb1
  ^bb3876:  // pred: ^bb3875
    pdl_interp.are_equal %2066, %2043 : !pdl.value -> ^bb3877, ^bb1
  ^bb3877:  // pred: ^bb3876
    pdl_interp.check_operation_name of %2046 is "arith.mulf" -> ^bb3878, ^bb1
  ^bb3878:  // pred: ^bb3877
    pdl_interp.check_operand_count of %2046 is 2 -> ^bb3879, ^bb1
  ^bb3879:  // pred: ^bb3878
    pdl_interp.check_result_count of %2046 is 1 -> ^bb3880, ^bb1
  ^bb3880:  // pred: ^bb3879
    %2067 = pdl_interp.get_result 0 of %2046
    pdl_interp.is_not_null %2067 : !pdl.value -> ^bb3881, ^bb1
  ^bb3881:  // pred: ^bb3880
    pdl_interp.are_equal %2067, %2045 : !pdl.value -> ^bb3882, ^bb1
  ^bb3882:  // pred: ^bb3881
    %2068 = pdl_interp.get_operand 0 of %2042
    pdl_interp.is_not_null %2068 : !pdl.value -> ^bb3883, ^bb1
  ^bb3883:  // pred: ^bb3882
    %2069 = pdl_interp.get_value_type of %2068 : !pdl.type
    pdl_interp.check_type %2069 is f32 -> ^bb3884, ^bb1
  ^bb3884:  // pred: ^bb3883
    %2070 = pdl_interp.get_value_type of %2065 : !pdl.type
    pdl_interp.are_equal %2069, %2070 : !pdl.type -> ^bb3885, ^bb1
  ^bb3885:  // pred: ^bb3884
    %2071 = pdl_interp.get_value_type of %2037 : !pdl.type
    pdl_interp.are_equal %2069, %2071 : !pdl.type -> ^bb3886, ^bb1
  ^bb3886:  // pred: ^bb3885
    %2072 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2069, %2072 : !pdl.type -> ^bb3887, ^bb1
  ^bb3887:  // pred: ^bb3886
    %2073 = pdl_interp.get_operand 0 of %2041
    pdl_interp.is_not_null %2073 : !pdl.value -> ^bb3888, ^bb1
  ^bb3888:  // pred: ^bb3887
    %2074 = pdl_interp.get_value_type of %2064 : !pdl.type
    pdl_interp.are_equal %2069, %2074 : !pdl.type -> ^bb3889, ^bb1
  ^bb3889:  // pred: ^bb3888
    %2075 = pdl_interp.get_operand 0 of %2046
    %2076 = pdl_interp.get_defining_op of %2075 : !pdl.value
    pdl_interp.is_not_null %2076 : !pdl.operation -> ^bb3890, ^bb1
  ^bb3890:  // pred: ^bb3889
    %2077 = pdl_interp.get_value_type of %2039 : !pdl.type
    pdl_interp.are_equal %2069, %2077 : !pdl.type -> ^bb3891, ^bb1
  ^bb3891:  // pred: ^bb3890
    %2078 = pdl_interp.get_value_type of %2067 : !pdl.type
    pdl_interp.are_equal %2069, %2078 : !pdl.type -> ^bb3892, ^bb1
  ^bb3892:  // pred: ^bb3891
    %2079 = pdl_interp.get_value_type of %2066 : !pdl.type
    pdl_interp.are_equal %2069, %2079 : !pdl.type -> ^bb3893, ^bb1
  ^bb3893:  // pred: ^bb3892
    pdl_interp.is_not_null %2075 : !pdl.value -> ^bb3894, ^bb1
  ^bb3894:  // pred: ^bb3893
    pdl_interp.check_operation_name of %2076 is "math.tanh" -> ^bb3895, ^bb1
  ^bb3895:  // pred: ^bb3894
    pdl_interp.check_operand_count of %2076 is 1 -> ^bb3896, ^bb1
  ^bb3896:  // pred: ^bb3895
    pdl_interp.check_result_count of %2076 is 1 -> ^bb3897, ^bb1
  ^bb3897:  // pred: ^bb3896
    %2080 = pdl_interp.get_result 0 of %2076
    pdl_interp.is_not_null %2080 : !pdl.value -> ^bb3898, ^bb1
  ^bb3898:  // pred: ^bb3897
    pdl_interp.are_equal %2080, %2075 : !pdl.value -> ^bb3899, ^bb1
  ^bb3899:  // pred: ^bb3898
    %2081 = pdl_interp.get_attribute "value" of %2044
    pdl_interp.is_not_null %2081 : !pdl.attribute -> ^bb3900, ^bb1
  ^bb3900:  // pred: ^bb3899
    pdl_interp.check_attribute %2081 is 1.000000e+00 : f32 -> ^bb3901, ^bb1
  ^bb3901:  // pred: ^bb3900
    %2082 = pdl_interp.get_value_type of %2073 : !pdl.type
    pdl_interp.are_equal %2069, %2082 : !pdl.type -> ^bb3902, ^bb1
  ^bb3902:  // pred: ^bb3901
    %2083 = pdl_interp.get_operand 1 of %2046
    %2084 = pdl_interp.get_defining_op of %2083 : !pdl.value
    pdl_interp.is_not_null %2084 : !pdl.operation -> ^bb3903, ^bb1
  ^bb3903:  // pred: ^bb3902
    pdl_interp.is_not_null %2083 : !pdl.value -> ^bb3904, ^bb1
  ^bb3904:  // pred: ^bb3903
    pdl_interp.check_operation_name of %2084 is "math.tanh" -> ^bb3905, ^bb1
  ^bb3905:  // pred: ^bb3904
    pdl_interp.check_operand_count of %2084 is 1 -> ^bb3906, ^bb1
  ^bb3906:  // pred: ^bb3905
    pdl_interp.check_result_count of %2084 is 1 -> ^bb3907, ^bb1
  ^bb3907:  // pred: ^bb3906
    %2085 = pdl_interp.get_result 0 of %2084
    pdl_interp.is_not_null %2085 : !pdl.value -> ^bb3908, ^bb1
  ^bb3908:  // pred: ^bb3907
    pdl_interp.are_equal %2085, %2083 : !pdl.value -> ^bb3909, ^bb1
  ^bb3909:  // pred: ^bb3908
    %2086 = pdl_interp.get_operand 0 of %2084
    pdl_interp.are_equal %2086, %2073 : !pdl.value -> ^bb3910, ^bb1
  ^bb3910:  // pred: ^bb3909
    %2087 = pdl_interp.get_operand 0 of %2076
    pdl_interp.are_equal %2087, %2068 : !pdl.value -> ^bb3911, ^bb1
  ^bb3911:  // pred: ^bb3910
    %2088 = pdl_interp.get_value_type of %2080 : !pdl.type
    pdl_interp.are_equal %2088, %2069 : !pdl.type -> ^bb3912, ^bb1
  ^bb3912:  // pred: ^bb3911
    %2089 = pdl_interp.get_value_type of %2085 : !pdl.type
    pdl_interp.are_equal %2089, %2069 : !pdl.type -> ^bb3913, ^bb1
  ^bb3913:  // pred: ^bb3912
    pdl_interp.record_match @rewriters::@tanh_sum_rev(%2068, %2073, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "math.tanh"]), loc([%arg0, %2, %1537, %2041, %2042, %2044, %2046, %2076, %2084]), root("arith.divf") -> ^bb1
  ^bb3914:  // pred: ^bb3816
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb3915, ^bb1
  ^bb3915:  // pred: ^bb3914
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3916, ^bb1
  ^bb3916:  // pred: ^bb3915
    %2090 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %2090 : !pdl.value -> ^bb3917, ^bb1
  ^bb3917:  // pred: ^bb3916
    pdl_interp.are_equal %2090, %1536 : !pdl.value -> ^bb3918, ^bb1
  ^bb3918:  // pred: ^bb3917
    %2091 = pdl_interp.get_operand 1 of %2
    %2092 = pdl_interp.get_defining_op of %2091 : !pdl.value
    pdl_interp.is_not_null %2092 : !pdl.operation -> ^bb3919, ^bb1
  ^bb3919:  // pred: ^bb3918
    %2093 = pdl_interp.get_defining_op of %2038 : !pdl.value
    pdl_interp.is_not_null %2093 : !pdl.operation -> ^bb3920, ^bb1
  ^bb3920:  // pred: ^bb3919
    pdl_interp.is_not_null %2091 : !pdl.value -> ^bb3921, ^bb1
  ^bb3921:  // pred: ^bb3920
    %2094 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %2094 : !pdl.value -> ^bb3922, ^bb1
  ^bb3922:  // pred: ^bb3921
    %2095 = pdl_interp.get_defining_op of %2094 : !pdl.value
    pdl_interp.is_not_null %2095 : !pdl.operation -> ^bb3923, ^bb1
  ^bb3923:  // pred: ^bb3922
    %2096 = pdl_interp.get_operand 1 of %1537
    %2097 = pdl_interp.get_defining_op of %2096 : !pdl.value
    pdl_interp.is_not_null %2097 : !pdl.operation -> ^bb3924, ^bb1
  ^bb3924:  // pred: ^bb3923
    pdl_interp.check_operation_name of %2092 is "math.tan" -> ^bb3925, ^bb1
  ^bb3925:  // pred: ^bb3924
    pdl_interp.check_operand_count of %2092 is 1 -> ^bb3926, ^bb1
  ^bb3926:  // pred: ^bb3925
    pdl_interp.check_result_count of %2092 is 1 -> ^bb3927, ^bb1
  ^bb3927:  // pred: ^bb3926
    %2098 = pdl_interp.get_result 0 of %2092
    pdl_interp.is_not_null %2098 : !pdl.value -> ^bb3928, ^bb1
  ^bb3928:  // pred: ^bb3927
    pdl_interp.are_equal %2098, %2091 : !pdl.value -> ^bb3929, ^bb1
  ^bb3929:  // pred: ^bb3928
    pdl_interp.check_operation_name of %2093 is "math.tan" -> ^bb3930, ^bb1
  ^bb3930:  // pred: ^bb3929
    pdl_interp.check_operand_count of %2093 is 1 -> ^bb3931, ^bb1
  ^bb3931:  // pred: ^bb3930
    pdl_interp.check_result_count of %2093 is 1 -> ^bb3932, ^bb1
  ^bb3932:  // pred: ^bb3931
    %2099 = pdl_interp.get_result 0 of %2093
    pdl_interp.is_not_null %2099 : !pdl.value -> ^bb3933, ^bb1
  ^bb3933:  // pred: ^bb3932
    pdl_interp.are_equal %2099, %2038 : !pdl.value -> ^bb3934, ^bb1
  ^bb3934:  // pred: ^bb3933
    pdl_interp.is_not_null %2096 : !pdl.value -> ^bb3935, ^bb1
  ^bb3935:  // pred: ^bb3934
    pdl_interp.check_operation_name of %2095 is "arith.constant" -> ^bb3936, ^bb1
  ^bb3936:  // pred: ^bb3935
    pdl_interp.check_operand_count of %2095 is 0 -> ^bb3937, ^bb1
  ^bb3937:  // pred: ^bb3936
    pdl_interp.check_result_count of %2095 is 1 -> ^bb3938, ^bb1
  ^bb3938:  // pred: ^bb3937
    %2100 = pdl_interp.get_result 0 of %2095
    pdl_interp.is_not_null %2100 : !pdl.value -> ^bb3939, ^bb1
  ^bb3939:  // pred: ^bb3938
    pdl_interp.are_equal %2100, %2094 : !pdl.value -> ^bb3940, ^bb1
  ^bb3940:  // pred: ^bb3939
    pdl_interp.check_operation_name of %2097 is "arith.mulf" -> ^bb3941, ^bb1
  ^bb3941:  // pred: ^bb3940
    pdl_interp.check_operand_count of %2097 is 2 -> ^bb3942, ^bb1
  ^bb3942:  // pred: ^bb3941
    pdl_interp.check_result_count of %2097 is 1 -> ^bb3943, ^bb1
  ^bb3943:  // pred: ^bb3942
    %2101 = pdl_interp.get_result 0 of %2097
    pdl_interp.is_not_null %2101 : !pdl.value -> ^bb3944, ^bb1
  ^bb3944:  // pred: ^bb3943
    pdl_interp.are_equal %2101, %2096 : !pdl.value -> ^bb3945, ^bb1
  ^bb3945:  // pred: ^bb3944
    %2102 = pdl_interp.get_operand 0 of %2093
    pdl_interp.is_not_null %2102 : !pdl.value -> ^bb3946, ^bb1
  ^bb3946:  // pred: ^bb3945
    %2103 = pdl_interp.get_value_type of %2102 : !pdl.type
    pdl_interp.check_type %2103 is f32 -> ^bb3947, ^bb1
  ^bb3947:  // pred: ^bb3946
    %2104 = pdl_interp.get_value_type of %2099 : !pdl.type
    pdl_interp.are_equal %2103, %2104 : !pdl.type -> ^bb3948, ^bb1
  ^bb3948:  // pred: ^bb3947
    %2105 = pdl_interp.get_value_type of %2037 : !pdl.type
    pdl_interp.are_equal %2103, %2105 : !pdl.type -> ^bb3949, ^bb1
  ^bb3949:  // pred: ^bb3948
    %2106 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2103, %2106 : !pdl.type -> ^bb3950, ^bb1
  ^bb3950:  // pred: ^bb3949
    %2107 = pdl_interp.get_operand 0 of %2092
    pdl_interp.is_not_null %2107 : !pdl.value -> ^bb3951, ^bb1
  ^bb3951:  // pred: ^bb3950
    %2108 = pdl_interp.get_value_type of %2098 : !pdl.type
    pdl_interp.are_equal %2103, %2108 : !pdl.type -> ^bb3952, ^bb1
  ^bb3952:  // pred: ^bb3951
    %2109 = pdl_interp.get_operand 0 of %2097
    %2110 = pdl_interp.get_defining_op of %2109 : !pdl.value
    pdl_interp.is_not_null %2110 : !pdl.operation -> ^bb3953, ^bb1
  ^bb3953:  // pred: ^bb3952
    %2111 = pdl_interp.get_value_type of %2090 : !pdl.type
    pdl_interp.are_equal %2103, %2111 : !pdl.type -> ^bb3954, ^bb1
  ^bb3954:  // pred: ^bb3953
    %2112 = pdl_interp.get_value_type of %2101 : !pdl.type
    pdl_interp.are_equal %2103, %2112 : !pdl.type -> ^bb3955, ^bb1
  ^bb3955:  // pred: ^bb3954
    %2113 = pdl_interp.get_value_type of %2100 : !pdl.type
    pdl_interp.are_equal %2103, %2113 : !pdl.type -> ^bb3956, ^bb1
  ^bb3956:  // pred: ^bb3955
    pdl_interp.is_not_null %2109 : !pdl.value -> ^bb3957, ^bb1
  ^bb3957:  // pred: ^bb3956
    pdl_interp.check_operation_name of %2110 is "math.tan" -> ^bb3958, ^bb1
  ^bb3958:  // pred: ^bb3957
    pdl_interp.check_operand_count of %2110 is 1 -> ^bb3959, ^bb1
  ^bb3959:  // pred: ^bb3958
    pdl_interp.check_result_count of %2110 is 1 -> ^bb3960, ^bb1
  ^bb3960:  // pred: ^bb3959
    %2114 = pdl_interp.get_result 0 of %2110
    pdl_interp.is_not_null %2114 : !pdl.value -> ^bb3961, ^bb1
  ^bb3961:  // pred: ^bb3960
    pdl_interp.are_equal %2114, %2109 : !pdl.value -> ^bb3962, ^bb1
  ^bb3962:  // pred: ^bb3961
    %2115 = pdl_interp.get_attribute "value" of %2095
    pdl_interp.is_not_null %2115 : !pdl.attribute -> ^bb3963, ^bb1
  ^bb3963:  // pred: ^bb3962
    pdl_interp.check_attribute %2115 is 1.000000e+00 : f32 -> ^bb3964, ^bb1
  ^bb3964:  // pred: ^bb3963
    %2116 = pdl_interp.get_value_type of %2107 : !pdl.type
    pdl_interp.are_equal %2103, %2116 : !pdl.type -> ^bb3965, ^bb1
  ^bb3965:  // pred: ^bb3964
    %2117 = pdl_interp.get_operand 1 of %2097
    %2118 = pdl_interp.get_defining_op of %2117 : !pdl.value
    pdl_interp.is_not_null %2118 : !pdl.operation -> ^bb3966, ^bb1
  ^bb3966:  // pred: ^bb3965
    pdl_interp.is_not_null %2117 : !pdl.value -> ^bb3967, ^bb1
  ^bb3967:  // pred: ^bb3966
    pdl_interp.check_operation_name of %2118 is "math.tan" -> ^bb3968, ^bb1
  ^bb3968:  // pred: ^bb3967
    pdl_interp.check_operand_count of %2118 is 1 -> ^bb3969, ^bb1
  ^bb3969:  // pred: ^bb3968
    pdl_interp.check_result_count of %2118 is 1 -> ^bb3970, ^bb1
  ^bb3970:  // pred: ^bb3969
    %2119 = pdl_interp.get_result 0 of %2118
    pdl_interp.is_not_null %2119 : !pdl.value -> ^bb3971, ^bb1
  ^bb3971:  // pred: ^bb3970
    pdl_interp.are_equal %2119, %2117 : !pdl.value -> ^bb3972, ^bb1
  ^bb3972:  // pred: ^bb3971
    %2120 = pdl_interp.get_operand 0 of %2118
    pdl_interp.are_equal %2120, %2107 : !pdl.value -> ^bb3973, ^bb1
  ^bb3973:  // pred: ^bb3972
    %2121 = pdl_interp.get_operand 0 of %2110
    pdl_interp.are_equal %2121, %2102 : !pdl.value -> ^bb3974, ^bb1
  ^bb3974:  // pred: ^bb3973
    %2122 = pdl_interp.get_value_type of %2114 : !pdl.type
    pdl_interp.are_equal %2122, %2103 : !pdl.type -> ^bb3975, ^bb1
  ^bb3975:  // pred: ^bb3974
    %2123 = pdl_interp.get_value_type of %2119 : !pdl.type
    pdl_interp.are_equal %2123, %2103 : !pdl.type -> ^bb3976, ^bb1
  ^bb3976:  // pred: ^bb3975
    pdl_interp.record_match @rewriters::@tan_sum_rev(%2102, %2107, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "math.tan"]), loc([%arg0, %2, %1537, %2092, %2093, %2095, %2097, %2110, %2118]), root("arith.divf") -> ^bb1
  ^bb3977:  // pred: ^bb3816
    pdl_interp.check_operand_count of %1537 is 0 -> ^bb3978, ^bb1
  ^bb3978:  // pred: ^bb3977
    pdl_interp.check_result_count of %1537 is 1 -> ^bb3979, ^bb1
  ^bb3979:  // pred: ^bb3978
    %2124 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %2124 : !pdl.value -> ^bb3980, ^bb1
  ^bb3980:  // pred: ^bb3979
    pdl_interp.are_equal %2124, %1536 : !pdl.value -> ^bb3981, ^bb1
  ^bb3981:  // pred: ^bb3980
    %2125 = pdl_interp.get_operand 1 of %2
    %2126 = pdl_interp.get_defining_op of %2125 : !pdl.value
    pdl_interp.is_not_null %2126 : !pdl.operation -> ^bb3982, ^bb1
  ^bb3982:  // pred: ^bb3981
    %2127 = pdl_interp.get_defining_op of %2038 : !pdl.value
    pdl_interp.is_not_null %2127 : !pdl.operation -> ^bb3983, ^bb1
  ^bb3983:  // pred: ^bb3982
    pdl_interp.is_not_null %2125 : !pdl.value -> ^bb3984, ^bb1
  ^bb3984:  // pred: ^bb3983
    pdl_interp.switch_operation_name of %2126 to ["math.cos", "math.sin", "math.exp"](^bb3985, ^bb4024, ^bb4063) -> ^bb1
  ^bb3985:  // pred: ^bb3984
    pdl_interp.check_operand_count of %2126 is 1 -> ^bb3986, ^bb1
  ^bb3986:  // pred: ^bb3985
    pdl_interp.check_result_count of %2126 is 1 -> ^bb3987, ^bb1
  ^bb3987:  // pred: ^bb3986
    %2128 = pdl_interp.get_result 0 of %2126
    pdl_interp.is_not_null %2128 : !pdl.value -> ^bb3988, ^bb1
  ^bb3988:  // pred: ^bb3987
    pdl_interp.are_equal %2128, %2125 : !pdl.value -> ^bb3989, ^bb1
  ^bb3989:  // pred: ^bb3988
    pdl_interp.check_operation_name of %2127 is "math.cos" -> ^bb3990, ^bb1
  ^bb3990:  // pred: ^bb3989
    pdl_interp.check_operand_count of %2127 is 1 -> ^bb3991, ^bb1
  ^bb3991:  // pred: ^bb3990
    pdl_interp.check_result_count of %2127 is 1 -> ^bb3992, ^bb1
  ^bb3992:  // pred: ^bb3991
    %2129 = pdl_interp.get_result 0 of %2127
    pdl_interp.is_not_null %2129 : !pdl.value -> ^bb3993, ^bb1
  ^bb3993:  // pred: ^bb3992
    pdl_interp.are_equal %2129, %2038 : !pdl.value -> ^bb3994, ^bb1
  ^bb3994:  // pred: ^bb3993
    %2130 = pdl_interp.get_operand 0 of %2127
    pdl_interp.is_not_null %2130 : !pdl.value -> ^bb3995, ^bb1
  ^bb3995:  // pred: ^bb3994
    %2131 = pdl_interp.get_operand 0 of %2126
    pdl_interp.is_not_null %2131 : !pdl.value -> ^bb3996, ^bb1
  ^bb3996:  // pred: ^bb3995
    %2132 = pdl_interp.get_defining_op of %2131 : !pdl.value
    pdl_interp.is_not_null %2132 : !pdl.operation -> ^bb3997, ^bb1
  ^bb3997:  // pred: ^bb3996
    %2133 = pdl_interp.get_attribute "value" of %1537
    pdl_interp.is_not_null %2133 : !pdl.attribute -> ^bb3998, ^bb1
  ^bb3998:  // pred: ^bb3997
    pdl_interp.check_attribute %2133 is 2.000000e+00 : f32 -> ^bb3999, ^bb1
  ^bb3999:  // pred: ^bb3998
    %2134 = pdl_interp.get_defining_op of %2130 : !pdl.value
    pdl_interp.is_not_null %2134 : !pdl.operation -> ^bb4000, ^bb1
  ^bb4000:  // pred: ^bb3999
    pdl_interp.check_operation_name of %2132 is "arith.subf" -> ^bb4001, ^bb1
  ^bb4001:  // pred: ^bb4000
    pdl_interp.check_operand_count of %2132 is 2 -> ^bb4002, ^bb1
  ^bb4002:  // pred: ^bb4001
    pdl_interp.check_result_count of %2132 is 1 -> ^bb4003, ^bb1
  ^bb4003:  // pred: ^bb4002
    %2135 = pdl_interp.get_result 0 of %2132
    pdl_interp.is_not_null %2135 : !pdl.value -> ^bb4004, ^bb1
  ^bb4004:  // pred: ^bb4003
    pdl_interp.are_equal %2135, %2131 : !pdl.value -> ^bb4005, ^bb1
  ^bb4005:  // pred: ^bb4004
    pdl_interp.check_operation_name of %2134 is "arith.addf" -> ^bb4006, ^bb1
  ^bb4006:  // pred: ^bb4005
    pdl_interp.check_operand_count of %2134 is 2 -> ^bb4007, ^bb1
  ^bb4007:  // pred: ^bb4006
    pdl_interp.check_result_count of %2134 is 1 -> ^bb4008, ^bb1
  ^bb4008:  // pred: ^bb4007
    %2136 = pdl_interp.get_result 0 of %2134
    pdl_interp.is_not_null %2136 : !pdl.value -> ^bb4009, ^bb1
  ^bb4009:  // pred: ^bb4008
    pdl_interp.are_equal %2136, %2130 : !pdl.value -> ^bb4010, ^bb1
  ^bb4010:  // pred: ^bb4009
    %2137 = pdl_interp.get_operand 0 of %2134
    pdl_interp.is_not_null %2137 : !pdl.value -> ^bb4011, ^bb1
  ^bb4011:  // pred: ^bb4010
    %2138 = pdl_interp.get_operand 1 of %2134
    pdl_interp.is_not_null %2138 : !pdl.value -> ^bb4012, ^bb1
  ^bb4012:  // pred: ^bb4011
    %2139 = pdl_interp.get_value_type of %2137 : !pdl.type
    pdl_interp.check_type %2139 is f32 -> ^bb4013, ^bb1
  ^bb4013:  // pred: ^bb4012
    %2140 = pdl_interp.get_value_type of %2136 : !pdl.type
    pdl_interp.are_equal %2139, %2140 : !pdl.type -> ^bb4014, ^bb1
  ^bb4014:  // pred: ^bb4013
    %2141 = pdl_interp.get_value_type of %2129 : !pdl.type
    pdl_interp.are_equal %2139, %2141 : !pdl.type -> ^bb4015, ^bb1
  ^bb4015:  // pred: ^bb4014
    %2142 = pdl_interp.get_value_type of %2037 : !pdl.type
    pdl_interp.are_equal %2139, %2142 : !pdl.type -> ^bb4016, ^bb1
  ^bb4016:  // pred: ^bb4015
    %2143 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2139, %2143 : !pdl.type -> ^bb4017, ^bb1
  ^bb4017:  // pred: ^bb4016
    %2144 = pdl_interp.get_value_type of %2124 : !pdl.type
    pdl_interp.are_equal %2139, %2144 : !pdl.type -> ^bb4018, ^bb1
  ^bb4018:  // pred: ^bb4017
    %2145 = pdl_interp.get_value_type of %2128 : !pdl.type
    pdl_interp.are_equal %2139, %2145 : !pdl.type -> ^bb4019, ^bb1
  ^bb4019:  // pred: ^bb4018
    %2146 = pdl_interp.get_operand 0 of %2132
    pdl_interp.are_equal %2137, %2146 : !pdl.value -> ^bb4020, ^bb1
  ^bb4020:  // pred: ^bb4019
    %2147 = pdl_interp.get_operand 1 of %2132
    pdl_interp.are_equal %2138, %2147 : !pdl.value -> ^bb4021, ^bb1
  ^bb4021:  // pred: ^bb4020
    %2148 = pdl_interp.get_value_type of %2138 : !pdl.type
    pdl_interp.are_equal %2139, %2148 : !pdl.type -> ^bb4022, ^bb1
  ^bb4022:  // pred: ^bb4021
    %2149 = pdl_interp.get_value_type of %2135 : !pdl.type
    pdl_interp.are_equal %2139, %2149 : !pdl.type -> ^bb4023, ^bb1
  ^bb4023:  // pred: ^bb4022
    pdl_interp.record_match @rewriters::@cos_mult_rev(%2137, %2138, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.mulf"]), loc([%arg0, %2, %1537, %2126, %2127, %2132, %2134]), root("arith.divf") -> ^bb1
  ^bb4024:  // pred: ^bb3984
    pdl_interp.check_operand_count of %2126 is 1 -> ^bb4025, ^bb1
  ^bb4025:  // pred: ^bb4024
    pdl_interp.check_result_count of %2126 is 1 -> ^bb4026, ^bb1
  ^bb4026:  // pred: ^bb4025
    %2150 = pdl_interp.get_result 0 of %2126
    pdl_interp.is_not_null %2150 : !pdl.value -> ^bb4027, ^bb1
  ^bb4027:  // pred: ^bb4026
    pdl_interp.are_equal %2150, %2125 : !pdl.value -> ^bb4028, ^bb1
  ^bb4028:  // pred: ^bb4027
    pdl_interp.check_operation_name of %2127 is "math.sin" -> ^bb4029, ^bb1
  ^bb4029:  // pred: ^bb4028
    pdl_interp.check_operand_count of %2127 is 1 -> ^bb4030, ^bb1
  ^bb4030:  // pred: ^bb4029
    pdl_interp.check_result_count of %2127 is 1 -> ^bb4031, ^bb1
  ^bb4031:  // pred: ^bb4030
    %2151 = pdl_interp.get_result 0 of %2127
    pdl_interp.is_not_null %2151 : !pdl.value -> ^bb4032, ^bb1
  ^bb4032:  // pred: ^bb4031
    pdl_interp.are_equal %2151, %2038 : !pdl.value -> ^bb4033, ^bb1
  ^bb4033:  // pred: ^bb4032
    %2152 = pdl_interp.get_operand 0 of %2127
    pdl_interp.is_not_null %2152 : !pdl.value -> ^bb4034, ^bb1
  ^bb4034:  // pred: ^bb4033
    %2153 = pdl_interp.get_operand 0 of %2126
    pdl_interp.is_not_null %2153 : !pdl.value -> ^bb4035, ^bb1
  ^bb4035:  // pred: ^bb4034
    %2154 = pdl_interp.get_defining_op of %2153 : !pdl.value
    pdl_interp.is_not_null %2154 : !pdl.operation -> ^bb4036, ^bb1
  ^bb4036:  // pred: ^bb4035
    %2155 = pdl_interp.get_attribute "value" of %1537
    pdl_interp.is_not_null %2155 : !pdl.attribute -> ^bb4037, ^bb1
  ^bb4037:  // pred: ^bb4036
    pdl_interp.check_attribute %2155 is 2.000000e+00 : f32 -> ^bb4038, ^bb1
  ^bb4038:  // pred: ^bb4037
    %2156 = pdl_interp.get_defining_op of %2152 : !pdl.value
    pdl_interp.is_not_null %2156 : !pdl.operation -> ^bb4039, ^bb1
  ^bb4039:  // pred: ^bb4038
    pdl_interp.check_operation_name of %2154 is "arith.addf" -> ^bb4040, ^bb1
  ^bb4040:  // pred: ^bb4039
    pdl_interp.check_operand_count of %2154 is 2 -> ^bb4041, ^bb1
  ^bb4041:  // pred: ^bb4040
    pdl_interp.check_result_count of %2154 is 1 -> ^bb4042, ^bb1
  ^bb4042:  // pred: ^bb4041
    %2157 = pdl_interp.get_result 0 of %2154
    pdl_interp.is_not_null %2157 : !pdl.value -> ^bb4043, ^bb1
  ^bb4043:  // pred: ^bb4042
    pdl_interp.are_equal %2157, %2153 : !pdl.value -> ^bb4044, ^bb1
  ^bb4044:  // pred: ^bb4043
    pdl_interp.check_operation_name of %2156 is "arith.subf" -> ^bb4045, ^bb1
  ^bb4045:  // pred: ^bb4044
    pdl_interp.check_operand_count of %2156 is 2 -> ^bb4046, ^bb1
  ^bb4046:  // pred: ^bb4045
    pdl_interp.check_result_count of %2156 is 1 -> ^bb4047, ^bb1
  ^bb4047:  // pred: ^bb4046
    %2158 = pdl_interp.get_result 0 of %2156
    pdl_interp.is_not_null %2158 : !pdl.value -> ^bb4048, ^bb1
  ^bb4048:  // pred: ^bb4047
    pdl_interp.are_equal %2158, %2152 : !pdl.value -> ^bb4049, ^bb1
  ^bb4049:  // pred: ^bb4048
    %2159 = pdl_interp.get_operand 0 of %2156
    pdl_interp.is_not_null %2159 : !pdl.value -> ^bb4050, ^bb1
  ^bb4050:  // pred: ^bb4049
    %2160 = pdl_interp.get_operand 1 of %2156
    pdl_interp.is_not_null %2160 : !pdl.value -> ^bb4051, ^bb1
  ^bb4051:  // pred: ^bb4050
    %2161 = pdl_interp.get_value_type of %2159 : !pdl.type
    pdl_interp.check_type %2161 is f32 -> ^bb4052, ^bb1
  ^bb4052:  // pred: ^bb4051
    %2162 = pdl_interp.get_value_type of %2158 : !pdl.type
    pdl_interp.are_equal %2161, %2162 : !pdl.type -> ^bb4053, ^bb1
  ^bb4053:  // pred: ^bb4052
    %2163 = pdl_interp.get_value_type of %2151 : !pdl.type
    pdl_interp.are_equal %2161, %2163 : !pdl.type -> ^bb4054, ^bb1
  ^bb4054:  // pred: ^bb4053
    %2164 = pdl_interp.get_value_type of %2037 : !pdl.type
    pdl_interp.are_equal %2161, %2164 : !pdl.type -> ^bb4055, ^bb1
  ^bb4055:  // pred: ^bb4054
    %2165 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2161, %2165 : !pdl.type -> ^bb4056, ^bb1
  ^bb4056:  // pred: ^bb4055
    %2166 = pdl_interp.get_value_type of %2124 : !pdl.type
    pdl_interp.are_equal %2161, %2166 : !pdl.type -> ^bb4057, ^bb1
  ^bb4057:  // pred: ^bb4056
    %2167 = pdl_interp.get_value_type of %2150 : !pdl.type
    pdl_interp.are_equal %2161, %2167 : !pdl.type -> ^bb4058, ^bb1
  ^bb4058:  // pred: ^bb4057
    %2168 = pdl_interp.get_operand 0 of %2154
    pdl_interp.are_equal %2159, %2168 : !pdl.value -> ^bb4059, ^bb1
  ^bb4059:  // pred: ^bb4058
    %2169 = pdl_interp.get_operand 1 of %2154
    pdl_interp.are_equal %2160, %2169 : !pdl.value -> ^bb4060, ^bb1
  ^bb4060:  // pred: ^bb4059
    %2170 = pdl_interp.get_value_type of %2160 : !pdl.type
    pdl_interp.are_equal %2161, %2170 : !pdl.type -> ^bb4061, ^bb1
  ^bb4061:  // pred: ^bb4060
    %2171 = pdl_interp.get_value_type of %2157 : !pdl.type
    pdl_interp.are_equal %2161, %2171 : !pdl.type -> ^bb4062, ^bb1
  ^bb4062:  // pred: ^bb4061
    pdl_interp.record_match @rewriters::@sin_cos_mult_rev(%2159, %2160, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.cos", "arith.mulf"]), loc([%arg0, %2, %1537, %2126, %2127, %2154, %2156]), root("arith.divf") -> ^bb1
  ^bb4063:  // pred: ^bb3984
    pdl_interp.check_operand_count of %2126 is 1 -> ^bb4064, ^bb1
  ^bb4064:  // pred: ^bb4063
    pdl_interp.check_result_count of %2126 is 1 -> ^bb4065, ^bb1
  ^bb4065:  // pred: ^bb4064
    %2172 = pdl_interp.get_result 0 of %2126
    pdl_interp.is_not_null %2172 : !pdl.value -> ^bb4066, ^bb1
  ^bb4066:  // pred: ^bb4065
    pdl_interp.are_equal %2172, %2125 : !pdl.value -> ^bb4067, ^bb1
  ^bb4067:  // pred: ^bb4066
    pdl_interp.check_operation_name of %2127 is "math.exp" -> ^bb4068, ^bb1
  ^bb4068:  // pred: ^bb4067
    pdl_interp.check_operand_count of %2127 is 1 -> ^bb4069, ^bb1
  ^bb4069:  // pred: ^bb4068
    pdl_interp.check_result_count of %2127 is 1 -> ^bb4070, ^bb1
  ^bb4070:  // pred: ^bb4069
    %2173 = pdl_interp.get_result 0 of %2127
    pdl_interp.is_not_null %2173 : !pdl.value -> ^bb4071, ^bb1
  ^bb4071:  // pred: ^bb4070
    pdl_interp.are_equal %2173, %2038 : !pdl.value -> ^bb4072, ^bb1
  ^bb4072:  // pred: ^bb4071
    %2174 = pdl_interp.get_operand 0 of %2127
    pdl_interp.is_not_null %2174 : !pdl.value -> ^bb4073, ^bb1
  ^bb4073:  // pred: ^bb4072
    %2175 = pdl_interp.get_value_type of %2174 : !pdl.type
    pdl_interp.check_type %2175 is f32 -> ^bb4074, ^bb1
  ^bb4074:  // pred: ^bb4073
    %2176 = pdl_interp.get_value_type of %2173 : !pdl.type
    pdl_interp.are_equal %2175, %2176 : !pdl.type -> ^bb4075, ^bb1
  ^bb4075:  // pred: ^bb4074
    %2177 = pdl_interp.get_value_type of %2037 : !pdl.type
    pdl_interp.are_equal %2175, %2177 : !pdl.type -> ^bb4076, ^bb1
  ^bb4076:  // pred: ^bb4075
    %2178 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2175, %2178 : !pdl.type -> ^bb4077, ^bb1
  ^bb4077:  // pred: ^bb4076
    %2179 = pdl_interp.get_operand 0 of %2126
    pdl_interp.is_not_null %2179 : !pdl.value -> ^bb4078, ^bb1
  ^bb4078:  // pred: ^bb4077
    %2180 = pdl_interp.get_defining_op of %2179 : !pdl.value
    pdl_interp.is_not_null %2180 : !pdl.operation -> ^bb4079, ^bb1
  ^bb4079:  // pred: ^bb4078
    %2181 = pdl_interp.get_value_type of %2172 : !pdl.type
    pdl_interp.are_equal %2175, %2181 : !pdl.type -> ^bb4080, ^bb1
  ^bb4080:  // pred: ^bb4079
    %2182 = pdl_interp.get_attribute "value" of %1537
    pdl_interp.is_not_null %2182 : !pdl.attribute -> ^bb4081, ^bb1
  ^bb4081:  // pred: ^bb4080
    pdl_interp.check_attribute %2182 is 2.000000e+00 : f32 -> ^bb4082, ^bb1
  ^bb4082:  // pred: ^bb4081
    %2183 = pdl_interp.get_value_type of %2124 : !pdl.type
    pdl_interp.are_equal %2175, %2183 : !pdl.type -> ^bb4083, ^bb1
  ^bb4083:  // pred: ^bb4082
    pdl_interp.check_operation_name of %2180 is "arith.negf" -> ^bb4084, ^bb1
  ^bb4084:  // pred: ^bb4083
    pdl_interp.check_operand_count of %2180 is 1 -> ^bb4085, ^bb1
  ^bb4085:  // pred: ^bb4084
    pdl_interp.check_result_count of %2180 is 1 -> ^bb4086, ^bb1
  ^bb4086:  // pred: ^bb4085
    %2184 = pdl_interp.get_result 0 of %2180
    pdl_interp.is_not_null %2184 : !pdl.value -> ^bb4087, ^bb1
  ^bb4087:  // pred: ^bb4086
    pdl_interp.are_equal %2184, %2179 : !pdl.value -> ^bb4088, ^bb1
  ^bb4088:  // pred: ^bb4087
    %2185 = pdl_interp.get_value_type of %2184 : !pdl.type
    pdl_interp.are_equal %2185, %2175 : !pdl.type -> ^bb4089, ^bb1
  ^bb4089:  // pred: ^bb4088
    %2186 = pdl_interp.get_operand 0 of %2180
    pdl_interp.are_equal %2186, %2174 : !pdl.value -> ^bb4090, ^bb1
  ^bb4090:  // pred: ^bb4089
    pdl_interp.record_match @rewriters::@cosh_def_rev(%2174, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh"]), loc([%arg0, %2, %1537, %2126, %2127, %2180]), root("arith.divf") -> ^bb1
  ^bb4091:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4092, ^bb1
  ^bb4092:  // pred: ^bb4091
    pdl_interp.check_result_count of %2 is 1 -> ^bb4093, ^bb1
  ^bb4093:  // pred: ^bb4092
    %2187 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2187 : !pdl.value -> ^bb4094, ^bb1
  ^bb4094:  // pred: ^bb4093
    pdl_interp.are_equal %2187, %1 : !pdl.value -> ^bb4095, ^bb1
  ^bb4095:  // pred: ^bb4094
    %2188 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2188 : !pdl.value -> ^bb4096, ^bb1
  ^bb4096:  // pred: ^bb4095
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb4097, ^bb1
  ^bb4097:  // pred: ^bb4096
    %2189 = pdl_interp.get_value_type of %2188 : !pdl.type
    pdl_interp.check_type %2189 is f32 -> ^bb4098, ^bb1
  ^bb4098:  // pred: ^bb4097
    %2190 = pdl_interp.get_value_type of %2187 : !pdl.type
    pdl_interp.are_equal %2189, %2190 : !pdl.type -> ^bb4099, ^bb1
  ^bb4099:  // pred: ^bb4098
    %2191 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2189, %2191 : !pdl.type -> ^bb4100, ^bb1
  ^bb4100:  // pred: ^bb4099
    pdl_interp.switch_operation_name of %1537 to ["arith.addf", "math.sqrt"](^bb4101, ^bb4126) -> ^bb1
  ^bb4101:  // pred: ^bb4100
    pdl_interp.check_operand_count of %1537 is 2 -> ^bb4102, ^bb1
  ^bb4102:  // pred: ^bb4101
    pdl_interp.check_result_count of %1537 is 1 -> ^bb4103, ^bb1
  ^bb4103:  // pred: ^bb4102
    %2192 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %2192 : !pdl.value -> ^bb4104, ^bb1
  ^bb4104:  // pred: ^bb4103
    pdl_interp.are_equal %2192, %1536 : !pdl.value -> ^bb4105, ^bb1
  ^bb4105:  // pred: ^bb4104
    %2193 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %2193 : !pdl.value -> ^bb4106, ^bb1
  ^bb4106:  // pred: ^bb4105
    %2194 = pdl_interp.get_defining_op of %2193 : !pdl.value
    pdl_interp.is_not_null %2194 : !pdl.operation -> ^bb4107, ^bb1
  ^bb4107:  // pred: ^bb4106
    %2195 = pdl_interp.get_operand 1 of %1537
    %2196 = pdl_interp.get_defining_op of %2195 : !pdl.value
    pdl_interp.is_not_null %2196 : !pdl.operation -> ^bb4108, ^bb1
  ^bb4108:  // pred: ^bb4107
    pdl_interp.is_not_null %2195 : !pdl.value -> ^bb4109, ^bb1
  ^bb4109:  // pred: ^bb4108
    %2197 = pdl_interp.get_value_type of %2192 : !pdl.type
    pdl_interp.are_equal %2189, %2197 : !pdl.type -> ^bb4110, ^bb1
  ^bb4110:  // pred: ^bb4109
    pdl_interp.check_operation_name of %2194 is "math.cosh" -> ^bb4111, ^bb1
  ^bb4111:  // pred: ^bb4110
    pdl_interp.check_operand_count of %2194 is 1 -> ^bb4112, ^bb1
  ^bb4112:  // pred: ^bb4111
    pdl_interp.check_result_count of %2194 is 1 -> ^bb4113, ^bb1
  ^bb4113:  // pred: ^bb4112
    %2198 = pdl_interp.get_result 0 of %2194
    pdl_interp.is_not_null %2198 : !pdl.value -> ^bb4114, ^bb1
  ^bb4114:  // pred: ^bb4113
    pdl_interp.are_equal %2198, %2193 : !pdl.value -> ^bb4115, ^bb1
  ^bb4115:  // pred: ^bb4114
    pdl_interp.check_operation_name of %2196 is "arith.constant" -> ^bb4116, ^bb1
  ^bb4116:  // pred: ^bb4115
    pdl_interp.check_operand_count of %2196 is 0 -> ^bb4117, ^bb1
  ^bb4117:  // pred: ^bb4116
    pdl_interp.check_result_count of %2196 is 1 -> ^bb4118, ^bb1
  ^bb4118:  // pred: ^bb4117
    %2199 = pdl_interp.get_result 0 of %2196
    pdl_interp.is_not_null %2199 : !pdl.value -> ^bb4119, ^bb1
  ^bb4119:  // pred: ^bb4118
    pdl_interp.are_equal %2199, %2195 : !pdl.value -> ^bb4120, ^bb1
  ^bb4120:  // pred: ^bb4119
    %2200 = pdl_interp.get_attribute "value" of %2196
    pdl_interp.is_not_null %2200 : !pdl.attribute -> ^bb4121, ^bb1
  ^bb4121:  // pred: ^bb4120
    pdl_interp.check_attribute %2200 is 1.000000e+00 : f32 -> ^bb4122, ^bb1
  ^bb4122:  // pred: ^bb4121
    %2201 = pdl_interp.get_value_type of %2199 : !pdl.type
    pdl_interp.are_equal %2201, %2189 : !pdl.type -> ^bb4123, ^bb1
  ^bb4123:  // pred: ^bb4122
    %2202 = pdl_interp.get_value_type of %2198 : !pdl.type
    pdl_interp.are_equal %2202, %2189 : !pdl.type -> ^bb4124, ^bb1
  ^bb4124:  // pred: ^bb4123
    %2203 = pdl_interp.get_operand 0 of %2194
    pdl_interp.are_equal %2203, %2188 : !pdl.value -> ^bb4125, ^bb1
  ^bb4125:  // pred: ^bb4124
    pdl_interp.record_match @rewriters::@tanh_1div2_rev(%2188, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.tanh"]), loc([%arg0, %2, %1537, %2194, %2196]), root("arith.divf") -> ^bb1
  ^bb4126:  // pred: ^bb4100
    pdl_interp.check_operand_count of %1537 is 1 -> ^bb4127, ^bb1
  ^bb4127:  // pred: ^bb4126
    pdl_interp.check_result_count of %1537 is 1 -> ^bb4128, ^bb1
  ^bb4128:  // pred: ^bb4127
    %2204 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %2204 : !pdl.value -> ^bb4129, ^bb1
  ^bb4129:  // pred: ^bb4128
    pdl_interp.are_equal %2204, %1536 : !pdl.value -> ^bb4130, ^bb1
  ^bb4130:  // pred: ^bb4129
    %2205 = pdl_interp.get_operand 0 of %1537
    pdl_interp.is_not_null %2205 : !pdl.value -> ^bb4131, ^bb1
  ^bb4131:  // pred: ^bb4130
    %2206 = pdl_interp.get_defining_op of %2205 : !pdl.value
    pdl_interp.is_not_null %2206 : !pdl.operation -> ^bb4132, ^bb1
  ^bb4132:  // pred: ^bb4131
    %2207 = pdl_interp.get_value_type of %2204 : !pdl.type
    pdl_interp.are_equal %2189, %2207 : !pdl.type -> ^bb4133, ^bb1
  ^bb4133:  // pred: ^bb4132
    pdl_interp.check_operation_name of %2206 is "arith.mulf" -> ^bb4134, ^bb1
  ^bb4134:  // pred: ^bb4133
    pdl_interp.check_operand_count of %2206 is 2 -> ^bb4135, ^bb1
  ^bb4135:  // pred: ^bb4134
    pdl_interp.check_result_count of %2206 is 1 -> ^bb4136, ^bb1
  ^bb4136:  // pred: ^bb4135
    %2208 = pdl_interp.get_result 0 of %2206
    pdl_interp.is_not_null %2208 : !pdl.value -> ^bb4137, ^bb1
  ^bb4137:  // pred: ^bb4136
    pdl_interp.are_equal %2208, %2205 : !pdl.value -> ^bb4138, ^bb1
  ^bb4138:  // pred: ^bb4137
    %2209 = pdl_interp.get_operand 0 of %2206
    %2210 = pdl_interp.get_defining_op of %2209 : !pdl.value
    pdl_interp.is_not_null %2210 : !pdl.operation -> ^bb4139, ^bb1
  ^bb4139:  // pred: ^bb4138
    pdl_interp.is_not_null %2209 : !pdl.value -> ^bb4140, ^bb1
  ^bb4140:  // pred: ^bb4139
    pdl_interp.check_operation_name of %2210 is "arith.constant" -> ^bb4141, ^bb1
  ^bb4141:  // pred: ^bb4140
    pdl_interp.check_operand_count of %2210 is 0 -> ^bb4142, ^bb1
  ^bb4142:  // pred: ^bb4141
    pdl_interp.check_result_count of %2210 is 1 -> ^bb4143, ^bb1
  ^bb4143:  // pred: ^bb4142
    %2211 = pdl_interp.get_result 0 of %2210
    pdl_interp.is_not_null %2211 : !pdl.value -> ^bb4144, ^bb1
  ^bb4144:  // pred: ^bb4143
    pdl_interp.are_equal %2211, %2209 : !pdl.value -> ^bb4145, ^bb1
  ^bb4145:  // pred: ^bb4144
    %2212 = pdl_interp.get_operand 1 of %2206
    %2213 = pdl_interp.get_defining_op of %2212 : !pdl.value
    pdl_interp.is_not_null %2213 : !pdl.operation -> ^bb4146, ^bb1
  ^bb4146:  // pred: ^bb4145
    %2214 = pdl_interp.get_value_type of %2208 : !pdl.type
    pdl_interp.are_equal %2214, %2189 : !pdl.type -> ^bb4147, ^bb1
  ^bb4147:  // pred: ^bb4146
    pdl_interp.is_not_null %2212 : !pdl.value -> ^bb4148, ^bb1
  ^bb4148:  // pred: ^bb4147
    pdl_interp.check_operation_name of %2213 is "arith.addf" -> ^bb4149, ^bb1
  ^bb4149:  // pred: ^bb4148
    pdl_interp.check_operand_count of %2213 is 2 -> ^bb4150, ^bb1
  ^bb4150:  // pred: ^bb4149
    pdl_interp.check_result_count of %2213 is 1 -> ^bb4151, ^bb1
  ^bb4151:  // pred: ^bb4150
    %2215 = pdl_interp.get_attribute "value" of %2210
    pdl_interp.is_not_null %2215 : !pdl.attribute -> ^bb4152, ^bb1
  ^bb4152:  // pred: ^bb4151
    pdl_interp.check_attribute %2215 is 2.000000e+00 : f32 -> ^bb4153, ^bb1
  ^bb4153:  // pred: ^bb4152
    %2216 = pdl_interp.get_result 0 of %2213
    pdl_interp.is_not_null %2216 : !pdl.value -> ^bb4154, ^bb1
  ^bb4154:  // pred: ^bb4153
    pdl_interp.are_equal %2216, %2212 : !pdl.value -> ^bb4155, ^bb1
  ^bb4155:  // pred: ^bb4154
    %2217 = pdl_interp.get_operand 0 of %2213
    pdl_interp.is_not_null %2217 : !pdl.value -> ^bb4156, ^bb1
  ^bb4156:  // pred: ^bb4155
    %2218 = pdl_interp.get_defining_op of %2217 : !pdl.value
    pdl_interp.is_not_null %2218 : !pdl.operation -> ^bb4157, ^bb1
  ^bb4157:  // pred: ^bb4156
    %2219 = pdl_interp.get_operand 1 of %2213
    %2220 = pdl_interp.get_defining_op of %2219 : !pdl.value
    pdl_interp.is_not_null %2220 : !pdl.operation -> ^bb4158, ^bb1
  ^bb4158:  // pred: ^bb4157
    pdl_interp.is_not_null %2219 : !pdl.value -> ^bb4159, ^bb1
  ^bb4159:  // pred: ^bb4158
    %2221 = pdl_interp.get_value_type of %2211 : !pdl.type
    pdl_interp.are_equal %2221, %2189 : !pdl.type -> ^bb4160, ^bb1
  ^bb4160:  // pred: ^bb4159
    %2222 = pdl_interp.get_value_type of %2216 : !pdl.type
    pdl_interp.are_equal %2222, %2189 : !pdl.type -> ^bb4161, ^bb1
  ^bb4161:  // pred: ^bb4160
    pdl_interp.check_operation_name of %2218 is "math.cosh" -> ^bb4162, ^bb1
  ^bb4162:  // pred: ^bb4161
    pdl_interp.check_operation_name of %2220 is "arith.constant" -> ^bb4163, ^bb1
  ^bb4163:  // pred: ^bb4162
    pdl_interp.check_operand_count of %2218 is 1 -> ^bb4164, ^bb1
  ^bb4164:  // pred: ^bb4163
    pdl_interp.check_operand_count of %2220 is 0 -> ^bb4165, ^bb1
  ^bb4165:  // pred: ^bb4164
    pdl_interp.check_result_count of %2218 is 1 -> ^bb4166, ^bb1
  ^bb4166:  // pred: ^bb4165
    pdl_interp.check_result_count of %2220 is 1 -> ^bb4167, ^bb1
  ^bb4167:  // pred: ^bb4166
    %2223 = pdl_interp.get_operand 0 of %2218
    pdl_interp.are_equal %2223, %2188 : !pdl.value -> ^bb4168, ^bb1
  ^bb4168:  // pred: ^bb4167
    %2224 = pdl_interp.get_attribute "value" of %2220
    pdl_interp.is_not_null %2224 : !pdl.attribute -> ^bb4169, ^bb1
  ^bb4169:  // pred: ^bb4168
    pdl_interp.check_attribute %2224 is 1.000000e+00 : f32 -> ^bb4170, ^bb1
  ^bb4170:  // pred: ^bb4169
    %2225 = pdl_interp.get_result 0 of %2218
    pdl_interp.is_not_null %2225 : !pdl.value -> ^bb4171, ^bb1
  ^bb4171:  // pred: ^bb4170
    %2226 = pdl_interp.get_result 0 of %2220
    pdl_interp.is_not_null %2226 : !pdl.value -> ^bb4172, ^bb1
  ^bb4172:  // pred: ^bb4171
    pdl_interp.are_equal %2225, %2217 : !pdl.value -> ^bb4173, ^bb1
  ^bb4173:  // pred: ^bb4172
    pdl_interp.are_equal %2226, %2219 : !pdl.value -> ^bb4174, ^bb1
  ^bb4174:  // pred: ^bb4173
    %2227 = pdl_interp.get_value_type of %2225 : !pdl.type
    pdl_interp.are_equal %2227, %2189 : !pdl.type -> ^bb4175, ^bb1
  ^bb4175:  // pred: ^bb4174
    %2228 = pdl_interp.get_value_type of %2226 : !pdl.type
    pdl_interp.are_equal %2228, %2189 : !pdl.type -> ^bb4176, ^bb1
  ^bb4176:  // pred: ^bb4175
    pdl_interp.record_match @rewriters::@sinh_1div2_rev(%2188, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.sinh"]), loc([%arg0, %2, %1537, %2206, %2210, %2213, %2218, %2220]), root("arith.divf") -> ^bb1
  ^bb4177:  // pred: ^bb2856
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4178, ^bb1
  ^bb4178:  // pred: ^bb4177
    pdl_interp.check_result_count of %2 is 1 -> ^bb4179, ^bb1
  ^bb4179:  // pred: ^bb4178
    %2229 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2229 : !pdl.value -> ^bb4180, ^bb1
  ^bb4180:  // pred: ^bb4179
    pdl_interp.are_equal %2229, %1 : !pdl.value -> ^bb4181, ^bb1
  ^bb4181:  // pred: ^bb4180
    %2230 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2230 : !pdl.value -> ^bb4182, ^bb1
  ^bb4182:  // pred: ^bb4181
    pdl_interp.is_not_null %1536 : !pdl.value -> ^bb4183, ^bb1
  ^bb4183:  // pred: ^bb4182
    pdl_interp.check_operation_name of %1537 is "arith.constant" -> ^bb4184, ^bb1
  ^bb4184:  // pred: ^bb4183
    pdl_interp.check_operand_count of %1537 is 0 -> ^bb4185, ^bb1
  ^bb4185:  // pred: ^bb4184
    pdl_interp.check_result_count of %1537 is 1 -> ^bb4186, ^bb1
  ^bb4186:  // pred: ^bb4185
    %2231 = pdl_interp.get_result 0 of %1537
    pdl_interp.is_not_null %2231 : !pdl.value -> ^bb4187, ^bb1
  ^bb4187:  // pred: ^bb4186
    pdl_interp.are_equal %2231, %1536 : !pdl.value -> ^bb4188, ^bb1
  ^bb4188:  // pred: ^bb4187
    %2232 = pdl_interp.get_defining_op of %2230 : !pdl.value
    pdl_interp.is_not_null %2232 : !pdl.operation -> ^bb4189, ^bb1
  ^bb4189:  // pred: ^bb4188
    pdl_interp.check_operation_name of %2232 is "arith.divf" -> ^bb4190, ^bb1
  ^bb4190:  // pred: ^bb4189
    pdl_interp.check_operand_count of %2232 is 2 -> ^bb4191, ^bb1
  ^bb4191:  // pred: ^bb4190
    pdl_interp.check_result_count of %2232 is 1 -> ^bb4192, ^bb1
  ^bb4192:  // pred: ^bb4191
    %2233 = pdl_interp.get_result 0 of %2232
    pdl_interp.is_not_null %2233 : !pdl.value -> ^bb4193, ^bb1
  ^bb4193:  // pred: ^bb4192
    pdl_interp.are_equal %2233, %2230 : !pdl.value -> ^bb4194, ^bb1
  ^bb4194:  // pred: ^bb4193
    %2234 = pdl_interp.get_operand 0 of %2232
    pdl_interp.is_not_null %2234 : !pdl.value -> ^bb4195, ^bb1
  ^bb4195:  // pred: ^bb4194
    %2235 = pdl_interp.get_attribute "value" of %1537
    pdl_interp.is_not_null %2235 : !pdl.attribute -> ^bb4196, ^bb1
  ^bb4196:  // pred: ^bb4195
    pdl_interp.check_attribute %2235 is 2.000000e+00 : f32 -> ^bb4197, ^bb1
  ^bb4197:  // pred: ^bb4196
    %2236 = pdl_interp.get_defining_op of %2234 : !pdl.value
    pdl_interp.is_not_null %2236 : !pdl.operation -> ^bb4198, ^bb1
  ^bb4198:  // pred: ^bb4197
    %2237 = pdl_interp.get_operand 1 of %2232
    %2238 = pdl_interp.get_defining_op of %2237 : !pdl.value
    pdl_interp.is_not_null %2238 : !pdl.operation -> ^bb4199, ^bb1
  ^bb4199:  // pred: ^bb4198
    pdl_interp.is_not_null %2237 : !pdl.value -> ^bb4200, ^bb1
  ^bb4200:  // pred: ^bb4199
    pdl_interp.check_operation_name of %2236 is "arith.addf" -> ^bb4201, ^bb1
  ^bb4201:  // pred: ^bb4200
    pdl_interp.check_operand_count of %2236 is 2 -> ^bb4202, ^bb1
  ^bb4202:  // pred: ^bb4201
    pdl_interp.check_result_count of %2236 is 1 -> ^bb4203, ^bb1
  ^bb4203:  // pred: ^bb4202
    %2239 = pdl_interp.get_result 0 of %2236
    pdl_interp.is_not_null %2239 : !pdl.value -> ^bb4204, ^bb1
  ^bb4204:  // pred: ^bb4203
    pdl_interp.are_equal %2239, %2234 : !pdl.value -> ^bb4205, ^bb1
  ^bb4205:  // pred: ^bb4204
    pdl_interp.check_operation_name of %2238 is "arith.subf" -> ^bb4206, ^bb1
  ^bb4206:  // pred: ^bb4205
    pdl_interp.check_operand_count of %2238 is 2 -> ^bb4207, ^bb1
  ^bb4207:  // pred: ^bb4206
    pdl_interp.check_result_count of %2238 is 1 -> ^bb4208, ^bb1
  ^bb4208:  // pred: ^bb4207
    %2240 = pdl_interp.get_result 0 of %2238
    pdl_interp.is_not_null %2240 : !pdl.value -> ^bb4209, ^bb1
  ^bb4209:  // pred: ^bb4208
    pdl_interp.are_equal %2240, %2237 : !pdl.value -> ^bb4210, ^bb1
  ^bb4210:  // pred: ^bb4209
    %2241 = pdl_interp.get_operand 0 of %2236
    pdl_interp.is_not_null %2241 : !pdl.value -> ^bb4211, ^bb1
  ^bb4211:  // pred: ^bb4210
    %2242 = pdl_interp.get_operand 1 of %2236
    pdl_interp.is_not_null %2242 : !pdl.value -> ^bb4212, ^bb1
  ^bb4212:  // pred: ^bb4211
    %2243 = pdl_interp.get_operand 0 of %2238
    pdl_interp.is_not_null %2243 : !pdl.value -> ^bb4213, ^bb1
  ^bb4213:  // pred: ^bb4212
    %2244 = pdl_interp.get_defining_op of %2241 : !pdl.value
    pdl_interp.is_not_null %2244 : !pdl.operation -> ^bb4214, ^bb1
  ^bb4214:  // pred: ^bb4213
    %2245 = pdl_interp.get_defining_op of %2243 : !pdl.value
    pdl_interp.is_not_null %2245 : !pdl.operation -> ^bb4215, ^bb1
  ^bb4215:  // pred: ^bb4214
    pdl_interp.check_operation_name of %2244 is "arith.constant" -> ^bb4216, ^bb1
  ^bb4216:  // pred: ^bb4215
    pdl_interp.check_operand_count of %2244 is 0 -> ^bb4217, ^bb1
  ^bb4217:  // pred: ^bb4216
    pdl_interp.check_result_count of %2244 is 1 -> ^bb4218, ^bb1
  ^bb4218:  // pred: ^bb4217
    %2246 = pdl_interp.get_attribute "value" of %2244
    pdl_interp.is_not_null %2246 : !pdl.attribute -> ^bb4219, ^bb1
  ^bb4219:  // pred: ^bb4218
    pdl_interp.check_attribute %2246 is 1.000000e+00 : f32 -> ^bb4220, ^bb1
  ^bb4220:  // pred: ^bb4219
    %2247 = pdl_interp.get_result 0 of %2244
    pdl_interp.is_not_null %2247 : !pdl.value -> ^bb4221, ^bb1
  ^bb4221:  // pred: ^bb4220
    pdl_interp.are_equal %2247, %2241 : !pdl.value -> ^bb4222, ^bb1
  ^bb4222:  // pred: ^bb4221
    %2248 = pdl_interp.get_value_type of %2247 : !pdl.type
    pdl_interp.check_type %2248 is f32 -> ^bb4223, ^bb1
  ^bb4223:  // pred: ^bb4222
    %2249 = pdl_interp.get_value_type of %2242 : !pdl.type
    pdl_interp.are_equal %2248, %2249 : !pdl.type -> ^bb4224, ^bb1
  ^bb4224:  // pred: ^bb4223
    %2250 = pdl_interp.get_value_type of %2239 : !pdl.type
    pdl_interp.are_equal %2248, %2250 : !pdl.type -> ^bb4225, ^bb1
  ^bb4225:  // pred: ^bb4224
    %2251 = pdl_interp.get_value_type of %2233 : !pdl.type
    pdl_interp.are_equal %2248, %2251 : !pdl.type -> ^bb4226, ^bb1
  ^bb4226:  // pred: ^bb4225
    %2252 = pdl_interp.get_value_type of %2229 : !pdl.type
    pdl_interp.are_equal %2248, %2252 : !pdl.type -> ^bb4227, ^bb1
  ^bb4227:  // pred: ^bb4226
    %2253 = pdl_interp.get_value_type of %2231 : !pdl.type
    pdl_interp.are_equal %2248, %2253 : !pdl.type -> ^bb4228, ^bb1
  ^bb4228:  // pred: ^bb4227
    %2254 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2248, %2254 : !pdl.type -> ^bb4229, ^bb1
  ^bb4229:  // pred: ^bb4228
    pdl_interp.check_operation_name of %2245 is "arith.constant" -> ^bb4230, ^bb1
  ^bb4230:  // pred: ^bb4229
    pdl_interp.check_operand_count of %2245 is 0 -> ^bb4231, ^bb1
  ^bb4231:  // pred: ^bb4230
    pdl_interp.check_result_count of %2245 is 1 -> ^bb4232, ^bb1
  ^bb4232:  // pred: ^bb4231
    %2255 = pdl_interp.get_attribute "value" of %2245
    pdl_interp.is_not_null %2255 : !pdl.attribute -> ^bb4233, ^bb1
  ^bb4233:  // pred: ^bb4232
    pdl_interp.check_attribute %2255 is 1.000000e+00 : f32 -> ^bb4234, ^bb1
  ^bb4234:  // pred: ^bb4233
    %2256 = pdl_interp.get_result 0 of %2245
    pdl_interp.is_not_null %2256 : !pdl.value -> ^bb4235, ^bb1
  ^bb4235:  // pred: ^bb4234
    pdl_interp.are_equal %2256, %2243 : !pdl.value -> ^bb4236, ^bb1
  ^bb4236:  // pred: ^bb4235
    %2257 = pdl_interp.get_operand 1 of %2238
    pdl_interp.are_equal %2242, %2257 : !pdl.value -> ^bb4237, ^bb1
  ^bb4237:  // pred: ^bb4236
    %2258 = pdl_interp.get_value_type of %2256 : !pdl.type
    pdl_interp.are_equal %2248, %2258 : !pdl.type -> ^bb4238, ^bb1
  ^bb4238:  // pred: ^bb4237
    %2259 = pdl_interp.get_value_type of %2240 : !pdl.type
    pdl_interp.are_equal %2248, %2259 : !pdl.type -> ^bb4239, ^bb1
  ^bb4239:  // pred: ^bb4238
    pdl_interp.record_match @rewriters::@atanh_def_rev(%2242, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.atanh"]), loc([%arg0, %2, %1537, %2232, %2236, %2238, %2244, %2245]), root("arith.divf") -> ^bb1
  ^bb4240:  // pred: ^bb2854
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4241, ^bb2855
  ^bb4241:  // pred: ^bb4240
    pdl_interp.check_result_count of %2 is 1 -> ^bb4242, ^bb2855
  ^bb4242:  // pred: ^bb4241
    %2260 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2260 : !pdl.value -> ^bb4243, ^bb2855
  ^bb4243:  // pred: ^bb4242
    pdl_interp.are_equal %2260, %1 : !pdl.value -> ^bb4244, ^bb2855
  ^bb4244:  // pred: ^bb4243
    %2261 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2261 : !pdl.value -> ^bb4245, ^bb2855
  ^bb4245:  // pred: ^bb4244
    %2262 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2262 : !pdl.value -> ^bb4246, ^bb2855
  ^bb4246:  // pred: ^bb4245
    %2263 = pdl_interp.get_value_type of %2261 : !pdl.type
    pdl_interp.check_type %2263 is f32 -> ^bb4247, ^bb2855
  ^bb4247:  // pred: ^bb4246
    %2264 = pdl_interp.get_value_type of %2260 : !pdl.type
    pdl_interp.are_equal %2263, %2264 : !pdl.type -> ^bb4248, ^bb2855
  ^bb4248:  // pred: ^bb4247
    %2265 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2263, %2265 : !pdl.type -> ^bb4249, ^bb2855
  ^bb4249:  // pred: ^bb4248
    %2266 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2266 : !pdl.value -> ^bb4250, ^bb2855
  ^bb4250:  // pred: ^bb4249
    %2267 = pdl_interp.get_value_type of %2266 : !pdl.type
    pdl_interp.are_equal %2263, %2267 : !pdl.type -> ^bb4251, ^bb2855
  ^bb4251:  // pred: ^bb4250
    %2268 = pdl_interp.get_value_type of %2262 : !pdl.type
    pdl_interp.are_equal %2263, %2268 : !pdl.type -> ^bb4252, ^bb2855
  ^bb4252:  // pred: ^bb4251
    pdl_interp.record_match @rewriters::@associate_divldiv(%2266, %2262, %2261, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.divf"]), loc([%arg0, %2]), root("arith.divf") -> ^bb2855
  ^bb4253:  // pred: ^bb2854
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4254, ^bb2855
  ^bb4254:  // pred: ^bb4253
    pdl_interp.check_result_count of %2 is 1 -> ^bb4255, ^bb2855
  ^bb4255:  // pred: ^bb4254
    %2269 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2269 : !pdl.value -> ^bb4256, ^bb2855
  ^bb4256:  // pred: ^bb4255
    pdl_interp.are_equal %2269, %1 : !pdl.value -> ^bb4257, ^bb2855
  ^bb4257:  // pred: ^bb4256
    %2270 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2270 : !pdl.value -> ^bb4258, ^bb2855
  ^bb4258:  // pred: ^bb4257
    %2271 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2271 : !pdl.value -> ^bb4259, ^bb2855
  ^bb4259:  // pred: ^bb4258
    %2272 = pdl_interp.get_value_type of %2270 : !pdl.type
    pdl_interp.check_type %2272 is f32 -> ^bb4260, ^bb2855
  ^bb4260:  // pred: ^bb4259
    %2273 = pdl_interp.get_value_type of %2269 : !pdl.type
    pdl_interp.are_equal %2272, %2273 : !pdl.type -> ^bb4261, ^bb2855
  ^bb4261:  // pred: ^bb4260
    %2274 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2272, %2274 : !pdl.type -> ^bb4262, ^bb2855
  ^bb4262:  // pred: ^bb4261
    %2275 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2275 : !pdl.value -> ^bb4263, ^bb2855
  ^bb4263:  // pred: ^bb4262
    %2276 = pdl_interp.get_value_type of %2275 : !pdl.type
    pdl_interp.are_equal %2272, %2276 : !pdl.type -> ^bb4264, ^bb2855
  ^bb4264:  // pred: ^bb4263
    %2277 = pdl_interp.get_value_type of %2271 : !pdl.type
    pdl_interp.are_equal %2272, %2277 : !pdl.type -> ^bb4265, ^bb2855
  ^bb4265:  // pred: ^bb4264
    pdl_interp.record_match @rewriters::@associate_divlmul(%2275, %2271, %2270, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.mulf"]), loc([%arg0, %2]), root("arith.divf") -> ^bb2855
  ^bb4266:  // pred: ^bb2854
    pdl_interp.check_operand_count of %2 is 0 -> ^bb4267, ^bb2855
  ^bb4267:  // pred: ^bb4266
    pdl_interp.check_result_count of %2 is 1 -> ^bb4268, ^bb2855
  ^bb4268:  // pred: ^bb4267
    %2278 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2278 : !pdl.value -> ^bb4269, ^bb2855
  ^bb4269:  // pred: ^bb4268
    pdl_interp.are_equal %2278, %1 : !pdl.value -> ^bb4270, ^bb2855
  ^bb4270:  // pred: ^bb4269
    %2279 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2279 : !pdl.value -> ^bb4271, ^bb2855
  ^bb4271:  // pred: ^bb4270
    %2280 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %2280 : !pdl.attribute -> ^bb4272, ^bb2855
  ^bb4272:  // pred: ^bb4271
    pdl_interp.switch_attribute %2280 to [0.000000e+00 : f32, 1.000000e+00 : f32](^bb4273, ^bb4277) -> ^bb2855
  ^bb4273:  // pred: ^bb4272
    %2281 = pdl_interp.get_value_type of %2278 : !pdl.type
    pdl_interp.check_type %2281 is f32 -> ^bb4274, ^bb2855
  ^bb4274:  // pred: ^bb4273
    %2282 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2281, %2282 : !pdl.type -> ^bb4275, ^bb2855
  ^bb4275:  // pred: ^bb4274
    %2283 = pdl_interp.get_value_type of %2279 : !pdl.type
    pdl_interp.are_equal %2281, %2283 : !pdl.type -> ^bb4276, ^bb2855
  ^bb4276:  // pred: ^bb4275
    pdl_interp.record_match @rewriters::@div0(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("arith.divf") -> ^bb2855
  ^bb4277:  // pred: ^bb4272
    %2284 = pdl_interp.get_value_type of %2278 : !pdl.type
    pdl_interp.check_type %2284 is f32 -> ^bb4278, ^bb2855
  ^bb4278:  // pred: ^bb4277
    %2285 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2284, %2285 : !pdl.type -> ^bb4279, ^bb2855
  ^bb4279:  // pred: ^bb4278
    %2286 = pdl_interp.get_value_type of %2279 : !pdl.type
    pdl_interp.are_equal %2284, %2286 : !pdl.type -> ^bb4280, ^bb2855
  ^bb4280:  // pred: ^bb4279
    pdl_interp.record_match @rewriters::@inv_pow(%2279, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf"]), loc([%arg0, %2]), root("arith.divf") -> ^bb2855
  ^bb4281:  // pred: ^bb2854
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4282, ^bb2855
  ^bb4282:  // pred: ^bb4281
    pdl_interp.check_result_count of %2 is 1 -> ^bb4283, ^bb2855
  ^bb4283:  // pred: ^bb4282
    %2287 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2287 : !pdl.value -> ^bb4284, ^bb2855
  ^bb4284:  // pred: ^bb4283
    pdl_interp.are_equal %2287, %1 : !pdl.value -> ^bb4285, ^bb2855
  ^bb4285:  // pred: ^bb4284
    %2288 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2288 : !pdl.value -> ^bb4286, ^bb2855
  ^bb4286:  // pred: ^bb4285
    %2289 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2289 : !pdl.value -> ^bb4287, ^bb2855
  ^bb4287:  // pred: ^bb4286
    %2290 = pdl_interp.get_value_type of %2288 : !pdl.type
    pdl_interp.check_type %2290 is f32 -> ^bb4288, ^bb2855
  ^bb4288:  // pred: ^bb4287
    %2291 = pdl_interp.get_value_type of %2287 : !pdl.type
    pdl_interp.are_equal %2290, %2291 : !pdl.type -> ^bb4289, ^bb2855
  ^bb4289:  // pred: ^bb4288
    %2292 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2290, %2292 : !pdl.type -> ^bb4290, ^bb2855
  ^bb4290:  // pred: ^bb4289
    %2293 = pdl_interp.get_value_type of %2289 : !pdl.type
    pdl_interp.are_equal %2290, %2293 : !pdl.type -> ^bb4291, ^bb2855
  ^bb4291:  // pred: ^bb4290
    pdl_interp.record_match @rewriters::@distribute_frac_neg(%2288, %2289, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.negf"]), loc([%arg0, %2]), root("arith.divf") -> ^bb2855
  ^bb4292:  // pred: ^bb2854
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4293, ^bb2855
  ^bb4293:  // pred: ^bb4292
    pdl_interp.check_result_count of %2 is 1 -> ^bb4294, ^bb2855
  ^bb4294:  // pred: ^bb4293
    %2294 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2294 : !pdl.value -> ^bb4295, ^bb2855
  ^bb4295:  // pred: ^bb4294
    pdl_interp.are_equal %2294, %1 : !pdl.value -> ^bb4296, ^bb2855
  ^bb4296:  // pred: ^bb4295
    %2295 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2295 : !pdl.value -> ^bb4297, ^bb2855
  ^bb4297:  // pred: ^bb4296
    %2296 = pdl_interp.get_defining_op of %2295 : !pdl.value
    pdl_interp.is_not_null %2296 : !pdl.operation -> ^bb4306, ^bb4298
  ^bb4298:  // 17 preds: ^bb4297, ^bb4306, ^bb4307, ^bb4308, ^bb4309, ^bb4310, ^bb4311, ^bb4312, ^bb4313, ^bb4314, ^bb4315, ^bb4316, ^bb4317, ^bb4318, ^bb4319, ^bb4320, ^bb4321
    %2297 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2297 : !pdl.value -> ^bb4299, ^bb2855
  ^bb4299:  // pred: ^bb4298
    %2298 = pdl_interp.get_value_type of %2295 : !pdl.type
    pdl_interp.check_type %2298 is f32 -> ^bb4300, ^bb2855
  ^bb4300:  // pred: ^bb4299
    %2299 = pdl_interp.get_value_type of %2294 : !pdl.type
    pdl_interp.are_equal %2298, %2299 : !pdl.type -> ^bb4301, ^bb2855
  ^bb4301:  // pred: ^bb4300
    %2300 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2298, %2300 : !pdl.type -> ^bb4302, ^bb2855
  ^bb4302:  // pred: ^bb4301
    %2301 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2301 : !pdl.value -> ^bb4303, ^bb2855
  ^bb4303:  // pred: ^bb4302
    %2302 = pdl_interp.get_value_type of %2301 : !pdl.type
    pdl_interp.are_equal %2298, %2302 : !pdl.type -> ^bb4304, ^bb2855
  ^bb4304:  // pred: ^bb4303
    %2303 = pdl_interp.get_value_type of %2297 : !pdl.type
    pdl_interp.are_equal %2298, %2303 : !pdl.type -> ^bb4305, ^bb2855
  ^bb4305:  // pred: ^bb4304
    pdl_interp.record_match @rewriters::@div_add(%2295, %2297, %2301, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.divf", "arith.addf"]), loc([%arg0, %2]), root("arith.divf") -> ^bb2855
  ^bb4306:  // pred: ^bb4297
    %2304 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2304 : !pdl.value -> ^bb4307, ^bb4298
  ^bb4307:  // pred: ^bb4306
    pdl_interp.check_operation_name of %2296 is "arith.mulf" -> ^bb4308, ^bb4298
  ^bb4308:  // pred: ^bb4307
    pdl_interp.check_operand_count of %2296 is 2 -> ^bb4309, ^bb4298
  ^bb4309:  // pred: ^bb4308
    pdl_interp.check_result_count of %2296 is 1 -> ^bb4310, ^bb4298
  ^bb4310:  // pred: ^bb4309
    %2305 = pdl_interp.get_result 0 of %2296
    pdl_interp.is_not_null %2305 : !pdl.value -> ^bb4311, ^bb4298
  ^bb4311:  // pred: ^bb4310
    pdl_interp.are_equal %2305, %2295 : !pdl.value -> ^bb4312, ^bb4298
  ^bb4312:  // pred: ^bb4311
    %2306 = pdl_interp.get_operand 0 of %2296
    pdl_interp.is_not_null %2306 : !pdl.value -> ^bb4313, ^bb4298
  ^bb4313:  // pred: ^bb4312
    %2307 = pdl_interp.get_value_type of %2306 : !pdl.type
    pdl_interp.check_type %2307 is f32 -> ^bb4314, ^bb4298
  ^bb4314:  // pred: ^bb4313
    %2308 = pdl_interp.get_value_type of %2305 : !pdl.type
    pdl_interp.are_equal %2307, %2308 : !pdl.type -> ^bb4315, ^bb4298
  ^bb4315:  // pred: ^bb4314
    %2309 = pdl_interp.get_value_type of %2294 : !pdl.type
    pdl_interp.are_equal %2307, %2309 : !pdl.type -> ^bb4316, ^bb4298
  ^bb4316:  // pred: ^bb4315
    %2310 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2307, %2310 : !pdl.type -> ^bb4317, ^bb4298
  ^bb4317:  // pred: ^bb4316
    %2311 = pdl_interp.get_operand 1 of %2296
    pdl_interp.is_not_null %2311 : !pdl.value -> ^bb4318, ^bb4298
  ^bb4318:  // pred: ^bb4317
    %2312 = pdl_interp.get_value_type of %2311 : !pdl.type
    pdl_interp.are_equal %2307, %2312 : !pdl.type -> ^bb4319, ^bb4298
  ^bb4319:  // pred: ^bb4318
    %2313 = pdl_interp.get_value_type of %2304 : !pdl.type
    pdl_interp.are_equal %2307, %2313 : !pdl.type -> ^bb4320, ^bb4298
  ^bb4320:  // pred: ^bb4319
    %2314 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %2311, %2314 : !pdl.value -> ^bb4321, ^bb4298
  ^bb4321:  // pred: ^bb4320
    pdl_interp.record_match @rewriters::@add_to_fraction_rev(%2304, %2311, %2306, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.addf"]), loc([%arg0, %2, %2296]), root("arith.divf") -> ^bb4298
  ^bb4322:  // pred: ^bb2854
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4323, ^bb2855
  ^bb4323:  // pred: ^bb4322
    pdl_interp.check_result_count of %2 is 1 -> ^bb4324, ^bb2855
  ^bb4324:  // pred: ^bb4323
    %2315 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2315 : !pdl.value -> ^bb4325, ^bb2855
  ^bb4325:  // pred: ^bb4324
    pdl_interp.are_equal %2315, %1 : !pdl.value -> ^bb4326, ^bb2855
  ^bb4326:  // pred: ^bb4325
    %2316 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2316 : !pdl.value -> ^bb4327, ^bb2855
  ^bb4327:  // pred: ^bb4326
    %2317 = pdl_interp.get_defining_op of %2316 : !pdl.value
    pdl_interp.is_not_null %2317 : !pdl.operation -> ^bb4336, ^bb4328
  ^bb4328:  // 17 preds: ^bb4327, ^bb4336, ^bb4337, ^bb4338, ^bb4339, ^bb4340, ^bb4341, ^bb4342, ^bb4343, ^bb4344, ^bb4345, ^bb4346, ^bb4347, ^bb4348, ^bb4349, ^bb4350, ^bb4351
    %2318 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2318 : !pdl.value -> ^bb4329, ^bb2855
  ^bb4329:  // pred: ^bb4328
    %2319 = pdl_interp.get_value_type of %2316 : !pdl.type
    pdl_interp.check_type %2319 is f32 -> ^bb4330, ^bb2855
  ^bb4330:  // pred: ^bb4329
    %2320 = pdl_interp.get_value_type of %2315 : !pdl.type
    pdl_interp.are_equal %2319, %2320 : !pdl.type -> ^bb4331, ^bb2855
  ^bb4331:  // pred: ^bb4330
    %2321 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2319, %2321 : !pdl.type -> ^bb4332, ^bb2855
  ^bb4332:  // pred: ^bb4331
    %2322 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2322 : !pdl.value -> ^bb4333, ^bb2855
  ^bb4333:  // pred: ^bb4332
    %2323 = pdl_interp.get_value_type of %2322 : !pdl.type
    pdl_interp.are_equal %2319, %2323 : !pdl.type -> ^bb4334, ^bb2855
  ^bb4334:  // pred: ^bb4333
    %2324 = pdl_interp.get_value_type of %2318 : !pdl.type
    pdl_interp.are_equal %2319, %2324 : !pdl.type -> ^bb4335, ^bb2855
  ^bb4335:  // pred: ^bb4334
    pdl_interp.record_match @rewriters::@div_sub(%2316, %2318, %2322, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.divf", "arith.subf"]), loc([%arg0, %2]), root("arith.divf") -> ^bb2855
  ^bb4336:  // pred: ^bb4327
    %2325 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2325 : !pdl.value -> ^bb4337, ^bb4328
  ^bb4337:  // pred: ^bb4336
    pdl_interp.check_operation_name of %2317 is "arith.mulf" -> ^bb4338, ^bb4328
  ^bb4338:  // pred: ^bb4337
    pdl_interp.check_operand_count of %2317 is 2 -> ^bb4339, ^bb4328
  ^bb4339:  // pred: ^bb4338
    pdl_interp.check_result_count of %2317 is 1 -> ^bb4340, ^bb4328
  ^bb4340:  // pred: ^bb4339
    %2326 = pdl_interp.get_result 0 of %2317
    pdl_interp.is_not_null %2326 : !pdl.value -> ^bb4341, ^bb4328
  ^bb4341:  // pred: ^bb4340
    pdl_interp.are_equal %2326, %2316 : !pdl.value -> ^bb4342, ^bb4328
  ^bb4342:  // pred: ^bb4341
    %2327 = pdl_interp.get_operand 0 of %2317
    pdl_interp.is_not_null %2327 : !pdl.value -> ^bb4343, ^bb4328
  ^bb4343:  // pred: ^bb4342
    %2328 = pdl_interp.get_value_type of %2327 : !pdl.type
    pdl_interp.check_type %2328 is f32 -> ^bb4344, ^bb4328
  ^bb4344:  // pred: ^bb4343
    %2329 = pdl_interp.get_value_type of %2326 : !pdl.type
    pdl_interp.are_equal %2328, %2329 : !pdl.type -> ^bb4345, ^bb4328
  ^bb4345:  // pred: ^bb4344
    %2330 = pdl_interp.get_value_type of %2315 : !pdl.type
    pdl_interp.are_equal %2328, %2330 : !pdl.type -> ^bb4346, ^bb4328
  ^bb4346:  // pred: ^bb4345
    %2331 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2328, %2331 : !pdl.type -> ^bb4347, ^bb4328
  ^bb4347:  // pred: ^bb4346
    %2332 = pdl_interp.get_operand 1 of %2317
    pdl_interp.is_not_null %2332 : !pdl.value -> ^bb4348, ^bb4328
  ^bb4348:  // pred: ^bb4347
    %2333 = pdl_interp.get_value_type of %2332 : !pdl.type
    pdl_interp.are_equal %2328, %2333 : !pdl.type -> ^bb4349, ^bb4328
  ^bb4349:  // pred: ^bb4348
    %2334 = pdl_interp.get_value_type of %2325 : !pdl.type
    pdl_interp.are_equal %2328, %2334 : !pdl.type -> ^bb4350, ^bb4328
  ^bb4350:  // pred: ^bb4349
    %2335 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %2332, %2335 : !pdl.value -> ^bb4351, ^bb4328
  ^bb4351:  // pred: ^bb4350
    pdl_interp.record_match @rewriters::@sub_to_fraction_rev(%2325, %2332, %2327, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.subf"]), loc([%arg0, %2, %2317]), root("arith.divf") -> ^bb4328
  ^bb4352:  // pred: ^bb2854
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4353, ^bb2855
  ^bb4353:  // pred: ^bb4352
    pdl_interp.check_result_count of %2 is 1 -> ^bb4354, ^bb2855
  ^bb4354:  // pred: ^bb4353
    %2336 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2336 : !pdl.value -> ^bb4355, ^bb2855
  ^bb4355:  // pred: ^bb4354
    pdl_interp.are_equal %2336, %1 : !pdl.value -> ^bb4356, ^bb2855
  ^bb4356:  // pred: ^bb4355
    %2337 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2337 : !pdl.value -> ^bb4357, ^bb2855
  ^bb4357:  // pred: ^bb4356
    %2338 = pdl_interp.get_value_type of %2337 : !pdl.type
    pdl_interp.check_type %2338 is f32 -> ^bb4358, ^bb2855
  ^bb4358:  // pred: ^bb4357
    %2339 = pdl_interp.get_value_type of %2336 : !pdl.type
    pdl_interp.are_equal %2338, %2339 : !pdl.type -> ^bb4359, ^bb2855
  ^bb4359:  // pred: ^bb4358
    %2340 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2338, %2340 : !pdl.type -> ^bb4360, ^bb2855
  ^bb4360:  // pred: ^bb4359
    %2341 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %2337, %2341 : !pdl.value -> ^bb4361, ^bb2855
  ^bb4361:  // pred: ^bb4360
    pdl_interp.record_match @rewriters::@fabs_lhs_div(%2337, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.copysign"]), loc([%arg0, %2]), root("arith.divf") -> ^bb2855
  ^bb4362:  // pred: ^bb2854
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4363, ^bb2855
  ^bb4363:  // pred: ^bb4362
    pdl_interp.check_result_count of %2 is 1 -> ^bb4364, ^bb2855
  ^bb4364:  // pred: ^bb4363
    %2342 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2342 : !pdl.value -> ^bb4365, ^bb2855
  ^bb4365:  // pred: ^bb4364
    pdl_interp.are_equal %2342, %1 : !pdl.value -> ^bb4366, ^bb2855
  ^bb4366:  // pred: ^bb4365
    %2343 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2343 : !pdl.value -> ^bb4367, ^bb2855
  ^bb4367:  // pred: ^bb4366
    %2344 = pdl_interp.get_value_type of %2343 : !pdl.type
    pdl_interp.check_type %2344 is f32 -> ^bb4368, ^bb2855
  ^bb4368:  // pred: ^bb4367
    %2345 = pdl_interp.get_value_type of %2342 : !pdl.type
    pdl_interp.are_equal %2344, %2345 : !pdl.type -> ^bb4369, ^bb2855
  ^bb4369:  // pred: ^bb4368
    %2346 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2344, %2346 : !pdl.type -> ^bb4370, ^bb2855
  ^bb4370:  // pred: ^bb4369
    %2347 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %2343, %2347 : !pdl.value -> ^bb4371, ^bb2855
  ^bb4371:  // pred: ^bb4370
    pdl_interp.record_match @rewriters::@fabs_cbrt_rev(%2343, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cbrt", "arith.divf", "math.absf"]), loc([%arg0, %2]), root("arith.divf") -> ^bb2855
  ^bb4372:  // pred: ^bb2854
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4373, ^bb2855
  ^bb4373:  // pred: ^bb4372
    pdl_interp.check_result_count of %2 is 1 -> ^bb4374, ^bb2855
  ^bb4374:  // pred: ^bb4373
    %2348 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2348 : !pdl.value -> ^bb4375, ^bb2855
  ^bb4375:  // pred: ^bb4374
    pdl_interp.are_equal %2348, %1 : !pdl.value -> ^bb4376, ^bb2855
  ^bb4376:  // pred: ^bb4375
    %2349 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2349 : !pdl.value -> ^bb4377, ^bb2855
  ^bb4377:  // pred: ^bb4376
    %2350 = pdl_interp.get_defining_op of %2349 : !pdl.value
    pdl_interp.is_not_null %2350 : !pdl.operation -> ^bb4378, ^bb2855
  ^bb4378:  // pred: ^bb4377
    pdl_interp.check_operation_name of %2350 is "arith.subf" -> ^bb4379, ^bb2855
  ^bb4379:  // pred: ^bb4378
    pdl_interp.check_operand_count of %2350 is 2 -> ^bb4380, ^bb2855
  ^bb4380:  // pred: ^bb4379
    pdl_interp.check_result_count of %2350 is 1 -> ^bb4381, ^bb2855
  ^bb4381:  // pred: ^bb4380
    %2351 = pdl_interp.get_result 0 of %2350
    pdl_interp.is_not_null %2351 : !pdl.value -> ^bb4382, ^bb2855
  ^bb4382:  // pred: ^bb4381
    pdl_interp.are_equal %2351, %2349 : !pdl.value -> ^bb4383, ^bb2855
  ^bb4383:  // pred: ^bb4382
    %2352 = pdl_interp.get_operand 0 of %2350
    pdl_interp.is_not_null %2352 : !pdl.value -> ^bb4384, ^bb2855
  ^bb4384:  // pred: ^bb4383
    %2353 = pdl_interp.get_defining_op of %2352 : !pdl.value
    pdl_interp.is_not_null %2353 : !pdl.operation -> ^bb4385, ^bb2855
  ^bb4385:  // pred: ^bb4384
    %2354 = pdl_interp.get_operand 1 of %2350
    %2355 = pdl_interp.get_defining_op of %2354 : !pdl.value
    pdl_interp.is_not_null %2355 : !pdl.operation -> ^bb4386, ^bb2855
  ^bb4386:  // pred: ^bb4385
    pdl_interp.is_not_null %2354 : !pdl.value -> ^bb4387, ^bb2855
  ^bb4387:  // pred: ^bb4386
    pdl_interp.switch_operation_name of %2353 to ["arith.constant", "arith.mulf"](^bb4388, ^bb4409) -> ^bb2855
  ^bb4388:  // pred: ^bb4387
    pdl_interp.check_operand_count of %2353 is 0 -> ^bb4389, ^bb2855
  ^bb4389:  // pred: ^bb4388
    pdl_interp.check_result_count of %2353 is 1 -> ^bb4390, ^bb2855
  ^bb4390:  // pred: ^bb4389
    %2356 = pdl_interp.get_result 0 of %2353
    pdl_interp.is_not_null %2356 : !pdl.value -> ^bb4391, ^bb2855
  ^bb4391:  // pred: ^bb4390
    pdl_interp.are_equal %2356, %2352 : !pdl.value -> ^bb4392, ^bb2855
  ^bb4392:  // pred: ^bb4391
    pdl_interp.check_operation_name of %2355 is "arith.mulf" -> ^bb4393, ^bb2855
  ^bb4393:  // pred: ^bb4392
    pdl_interp.check_operand_count of %2355 is 2 -> ^bb4394, ^bb2855
  ^bb4394:  // pred: ^bb4393
    pdl_interp.check_result_count of %2355 is 1 -> ^bb4395, ^bb2855
  ^bb4395:  // pred: ^bb4394
    %2357 = pdl_interp.get_result 0 of %2355
    pdl_interp.is_not_null %2357 : !pdl.value -> ^bb4396, ^bb2855
  ^bb4396:  // pred: ^bb4395
    pdl_interp.are_equal %2357, %2354 : !pdl.value -> ^bb4397, ^bb2855
  ^bb4397:  // pred: ^bb4396
    %2358 = pdl_interp.get_operand 0 of %2355
    pdl_interp.is_not_null %2358 : !pdl.value -> ^bb4398, ^bb2855
  ^bb4398:  // pred: ^bb4397
    %2359 = pdl_interp.get_operand 1 of %2355
    pdl_interp.are_equal %2358, %2359 : !pdl.value -> ^bb4399, ^bb2855
  ^bb4399:  // pred: ^bb4398
    %2360 = pdl_interp.get_attribute "value" of %2353
    pdl_interp.is_not_null %2360 : !pdl.attribute -> ^bb4400, ^bb2855
  ^bb4400:  // pred: ^bb4399
    pdl_interp.check_attribute %2360 is 1.000000e+00 : f32 -> ^bb4401, ^bb2855
  ^bb4401:  // pred: ^bb4400
    %2361 = pdl_interp.get_value_type of %2356 : !pdl.type
    pdl_interp.check_type %2361 is f32 -> ^bb4402, ^bb2855
  ^bb4402:  // pred: ^bb4401
    %2362 = pdl_interp.get_value_type of %2358 : !pdl.type
    pdl_interp.are_equal %2361, %2362 : !pdl.type -> ^bb4403, ^bb2855
  ^bb4403:  // pred: ^bb4402
    %2363 = pdl_interp.get_value_type of %2357 : !pdl.type
    pdl_interp.are_equal %2361, %2363 : !pdl.type -> ^bb4404, ^bb2855
  ^bb4404:  // pred: ^bb4403
    %2364 = pdl_interp.get_value_type of %2351 : !pdl.type
    pdl_interp.are_equal %2361, %2364 : !pdl.type -> ^bb4405, ^bb2855
  ^bb4405:  // pred: ^bb4404
    %2365 = pdl_interp.get_value_type of %2348 : !pdl.type
    pdl_interp.are_equal %2361, %2365 : !pdl.type -> ^bb4406, ^bb2855
  ^bb4406:  // pred: ^bb4405
    %2366 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2361, %2366 : !pdl.type -> ^bb4407, ^bb2855
  ^bb4407:  // pred: ^bb4406
    %2367 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %2358, %2367 : !pdl.value -> ^bb4408, ^bb2855
  ^bb4408:  // pred: ^bb4407
    pdl_interp.record_match @rewriters::@tan_acos_rev(%2358, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.acos", "math.tan"]), loc([%arg0, %2, %2350, %2353, %2355]), root("arith.divf") -> ^bb2855
  ^bb4409:  // pred: ^bb4387
    pdl_interp.check_operand_count of %2353 is 2 -> ^bb4410, ^bb2855
  ^bb4410:  // pred: ^bb4409
    pdl_interp.check_result_count of %2353 is 1 -> ^bb4411, ^bb2855
  ^bb4411:  // pred: ^bb4410
    %2368 = pdl_interp.get_result 0 of %2353
    pdl_interp.is_not_null %2368 : !pdl.value -> ^bb4412, ^bb2855
  ^bb4412:  // pred: ^bb4411
    pdl_interp.are_equal %2368, %2352 : !pdl.value -> ^bb4413, ^bb2855
  ^bb4413:  // pred: ^bb4412
    pdl_interp.check_operation_name of %2355 is "arith.constant" -> ^bb4414, ^bb2855
  ^bb4414:  // pred: ^bb4413
    pdl_interp.check_operand_count of %2355 is 0 -> ^bb4415, ^bb2855
  ^bb4415:  // pred: ^bb4414
    pdl_interp.check_result_count of %2355 is 1 -> ^bb4416, ^bb2855
  ^bb4416:  // pred: ^bb4415
    %2369 = pdl_interp.get_result 0 of %2355
    pdl_interp.is_not_null %2369 : !pdl.value -> ^bb4417, ^bb2855
  ^bb4417:  // pred: ^bb4416
    pdl_interp.are_equal %2369, %2354 : !pdl.value -> ^bb4418, ^bb2855
  ^bb4418:  // pred: ^bb4417
    %2370 = pdl_interp.get_operand 0 of %2353
    pdl_interp.is_not_null %2370 : !pdl.value -> ^bb4419, ^bb2855
  ^bb4419:  // pred: ^bb4418
    %2371 = pdl_interp.get_value_type of %2370 : !pdl.type
    pdl_interp.check_type %2371 is f32 -> ^bb4420, ^bb2855
  ^bb4420:  // pred: ^bb4419
    %2372 = pdl_interp.get_value_type of %2368 : !pdl.type
    pdl_interp.are_equal %2371, %2372 : !pdl.type -> ^bb4421, ^bb2855
  ^bb4421:  // pred: ^bb4420
    %2373 = pdl_interp.get_value_type of %2351 : !pdl.type
    pdl_interp.are_equal %2371, %2373 : !pdl.type -> ^bb4422, ^bb2855
  ^bb4422:  // pred: ^bb4421
    %2374 = pdl_interp.get_value_type of %2348 : !pdl.type
    pdl_interp.are_equal %2371, %2374 : !pdl.type -> ^bb4423, ^bb2855
  ^bb4423:  // pred: ^bb4422
    %2375 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2371, %2375 : !pdl.type -> ^bb4424, ^bb2855
  ^bb4424:  // pred: ^bb4423
    %2376 = pdl_interp.get_attribute "value" of %2355
    pdl_interp.is_not_null %2376 : !pdl.attribute -> ^bb4425, ^bb2855
  ^bb4425:  // pred: ^bb4424
    pdl_interp.check_attribute %2376 is 1.000000e+00 : f32 -> ^bb4426, ^bb2855
  ^bb4426:  // pred: ^bb4425
    %2377 = pdl_interp.get_value_type of %2369 : !pdl.type
    pdl_interp.are_equal %2371, %2377 : !pdl.type -> ^bb4427, ^bb2855
  ^bb4427:  // pred: ^bb4426
    %2378 = pdl_interp.get_operand 1 of %2353
    pdl_interp.are_equal %2370, %2378 : !pdl.value -> ^bb4428, ^bb2855
  ^bb4428:  // pred: ^bb4427
    %2379 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %2370, %2379 : !pdl.value -> ^bb4429, ^bb2855
  ^bb4429:  // pred: ^bb4428
    pdl_interp.record_match @rewriters::@tanh_acosh_rev(%2370, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.acosh", "math.tanh"]), loc([%arg0, %2, %2350, %2353, %2355]), root("arith.divf") -> ^bb2855
  ^bb4430:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb4431, ^bb1
  ^bb4431:  // pred: ^bb4430
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb4432, ^bb1
  ^bb4432:  // pred: ^bb4431
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb4433, ^bb1
  ^bb4433:  // pred: ^bb4432
    pdl_interp.switch_operation_name of %2 to ["arith.negf", "arith.mulf", "arith.addf", "arith.divf", "arith.subf", "math.powf", "math.cbrt", "math.log", "math.sin", "math.tan", "math.cos", "math.asin", "math.atan", "math.sinh"](^bb4434, ^bb4443, ^bb4455, ^bb4466, ^bb4478, ^bb4489, ^bb4508, ^bb4517, ^bb4526, ^bb4537, ^bb4546, ^bb4555, ^bb4564, ^bb4573) -> ^bb1
  ^bb4434:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4435, ^bb1
  ^bb4435:  // pred: ^bb4434
    pdl_interp.check_result_count of %2 is 1 -> ^bb4436, ^bb1
  ^bb4436:  // pred: ^bb4435
    %2380 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2380 : !pdl.value -> ^bb4437, ^bb1
  ^bb4437:  // pred: ^bb4436
    pdl_interp.are_equal %2380, %1 : !pdl.value -> ^bb4438, ^bb1
  ^bb4438:  // pred: ^bb4437
    %2381 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2381 : !pdl.value -> ^bb4439, ^bb1
  ^bb4439:  // pred: ^bb4438
    %2382 = pdl_interp.get_value_type of %2381 : !pdl.type
    pdl_interp.check_type %2382 is f32 -> ^bb4440, ^bb1
  ^bb4440:  // pred: ^bb4439
    %2383 = pdl_interp.get_value_type of %2380 : !pdl.type
    pdl_interp.are_equal %2382, %2383 : !pdl.type -> ^bb4441, ^bb1
  ^bb4441:  // pred: ^bb4440
    %2384 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2382, %2384 : !pdl.type -> ^bb4442, ^bb1
  ^bb4442:  // pred: ^bb4441
    pdl_interp.record_match @rewriters::@remove_double_neg(%2381, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4443:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4444, ^bb1
  ^bb4444:  // pred: ^bb4443
    pdl_interp.check_result_count of %2 is 1 -> ^bb4445, ^bb1
  ^bb4445:  // pred: ^bb4444
    %2385 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2385 : !pdl.value -> ^bb4446, ^bb1
  ^bb4446:  // pred: ^bb4445
    pdl_interp.are_equal %2385, %1 : !pdl.value -> ^bb4447, ^bb1
  ^bb4447:  // pred: ^bb4446
    %2386 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2386 : !pdl.value -> ^bb4448, ^bb1
  ^bb4448:  // pred: ^bb4447
    %2387 = pdl_interp.get_value_type of %2386 : !pdl.type
    pdl_interp.check_type %2387 is f32 -> ^bb4449, ^bb1
  ^bb4449:  // pred: ^bb4448
    %2388 = pdl_interp.get_value_type of %2385 : !pdl.type
    pdl_interp.are_equal %2387, %2388 : !pdl.type -> ^bb4450, ^bb1
  ^bb4450:  // pred: ^bb4449
    %2389 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2387, %2389 : !pdl.type -> ^bb4451, ^bb1
  ^bb4451:  // pred: ^bb4450
    %2390 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2390 : !pdl.value -> ^bb4452, ^bb1
  ^bb4452:  // pred: ^bb4451
    %2391 = pdl_interp.get_value_type of %2390 : !pdl.type
    pdl_interp.are_equal %2387, %2391 : !pdl.type -> ^bb4453, ^bb1
  ^bb4453:  // pred: ^bb4452
    pdl_interp.record_match @rewriters::@distribute_rgt_neg_in(%2390, %2386, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.mulf"]), loc([%arg0, %2]), root("arith.negf") -> ^bb4454
  ^bb4454:  // pred: ^bb4453
    pdl_interp.record_match @rewriters::@distribute_lft_neg_in(%2386, %2390, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.mulf"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4455:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4456, ^bb1
  ^bb4456:  // pred: ^bb4455
    pdl_interp.check_result_count of %2 is 1 -> ^bb4457, ^bb1
  ^bb4457:  // pred: ^bb4456
    %2392 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2392 : !pdl.value -> ^bb4458, ^bb1
  ^bb4458:  // pred: ^bb4457
    pdl_interp.are_equal %2392, %1 : !pdl.value -> ^bb4459, ^bb1
  ^bb4459:  // pred: ^bb4458
    %2393 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2393 : !pdl.value -> ^bb4460, ^bb1
  ^bb4460:  // pred: ^bb4459
    %2394 = pdl_interp.get_value_type of %2393 : !pdl.type
    pdl_interp.check_type %2394 is f32 -> ^bb4461, ^bb1
  ^bb4461:  // pred: ^bb4460
    %2395 = pdl_interp.get_value_type of %2392 : !pdl.type
    pdl_interp.are_equal %2394, %2395 : !pdl.type -> ^bb4462, ^bb1
  ^bb4462:  // pred: ^bb4461
    %2396 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2394, %2396 : !pdl.type -> ^bb4463, ^bb1
  ^bb4463:  // pred: ^bb4462
    %2397 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2397 : !pdl.value -> ^bb4464, ^bb1
  ^bb4464:  // pred: ^bb4463
    %2398 = pdl_interp.get_value_type of %2397 : !pdl.type
    pdl_interp.are_equal %2394, %2398 : !pdl.type -> ^bb4465, ^bb1
  ^bb4465:  // pred: ^bb4464
    pdl_interp.record_match @rewriters::@distribute_neg_in(%2393, %2397, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.negf", "arith.addf"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4466:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4467, ^bb1
  ^bb4467:  // pred: ^bb4466
    pdl_interp.check_result_count of %2 is 1 -> ^bb4468, ^bb1
  ^bb4468:  // pred: ^bb4467
    %2399 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2399 : !pdl.value -> ^bb4469, ^bb1
  ^bb4469:  // pred: ^bb4468
    pdl_interp.are_equal %2399, %1 : !pdl.value -> ^bb4470, ^bb1
  ^bb4470:  // pred: ^bb4469
    %2400 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2400 : !pdl.value -> ^bb4471, ^bb1
  ^bb4471:  // pred: ^bb4470
    %2401 = pdl_interp.get_value_type of %2400 : !pdl.type
    pdl_interp.check_type %2401 is f32 -> ^bb4472, ^bb1
  ^bb4472:  // pred: ^bb4471
    %2402 = pdl_interp.get_value_type of %2399 : !pdl.type
    pdl_interp.are_equal %2401, %2402 : !pdl.type -> ^bb4473, ^bb1
  ^bb4473:  // pred: ^bb4472
    %2403 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2401, %2403 : !pdl.type -> ^bb4474, ^bb1
  ^bb4474:  // pred: ^bb4473
    %2404 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2404 : !pdl.value -> ^bb4475, ^bb1
  ^bb4475:  // pred: ^bb4474
    %2405 = pdl_interp.get_value_type of %2404 : !pdl.type
    pdl_interp.are_equal %2401, %2405 : !pdl.type -> ^bb4476, ^bb1
  ^bb4476:  // pred: ^bb4475
    pdl_interp.record_match @rewriters::@distribute_neg_frac2(%2404, %2400, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.divf"]), loc([%arg0, %2]), root("arith.negf") -> ^bb4477
  ^bb4477:  // pred: ^bb4476
    pdl_interp.record_match @rewriters::@distribute_neg_frac(%2400, %2404, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.divf"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4478:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4479, ^bb1
  ^bb4479:  // pred: ^bb4478
    pdl_interp.check_result_count of %2 is 1 -> ^bb4480, ^bb1
  ^bb4480:  // pred: ^bb4479
    %2406 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2406 : !pdl.value -> ^bb4481, ^bb1
  ^bb4481:  // pred: ^bb4480
    pdl_interp.are_equal %2406, %1 : !pdl.value -> ^bb4482, ^bb1
  ^bb4482:  // pred: ^bb4481
    %2407 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2407 : !pdl.value -> ^bb4483, ^bb1
  ^bb4483:  // pred: ^bb4482
    %2408 = pdl_interp.get_value_type of %2407 : !pdl.type
    pdl_interp.check_type %2408 is f32 -> ^bb4484, ^bb1
  ^bb4484:  // pred: ^bb4483
    %2409 = pdl_interp.get_value_type of %2406 : !pdl.type
    pdl_interp.are_equal %2408, %2409 : !pdl.type -> ^bb4485, ^bb1
  ^bb4485:  // pred: ^bb4484
    %2410 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2408, %2410 : !pdl.type -> ^bb4486, ^bb1
  ^bb4486:  // pred: ^bb4485
    %2411 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2411 : !pdl.value -> ^bb4487, ^bb1
  ^bb4487:  // pred: ^bb4486
    %2412 = pdl_interp.get_value_type of %2411 : !pdl.type
    pdl_interp.are_equal %2408, %2412 : !pdl.type -> ^bb4488, ^bb1
  ^bb4488:  // pred: ^bb4487
    pdl_interp.record_match @rewriters::@sub_negate(%2411, %2407, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4489:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4490, ^bb1
  ^bb4490:  // pred: ^bb4489
    pdl_interp.check_result_count of %2 is 1 -> ^bb4491, ^bb1
  ^bb4491:  // pred: ^bb4490
    %2413 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2413 : !pdl.value -> ^bb4492, ^bb1
  ^bb4492:  // pred: ^bb4491
    pdl_interp.are_equal %2413, %1 : !pdl.value -> ^bb4493, ^bb1
  ^bb4493:  // pred: ^bb4492
    %2414 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2414 : !pdl.value -> ^bb4494, ^bb1
  ^bb4494:  // pred: ^bb4493
    %2415 = pdl_interp.get_value_type of %2414 : !pdl.type
    pdl_interp.check_type %2415 is f32 -> ^bb4495, ^bb1
  ^bb4495:  // pred: ^bb4494
    %2416 = pdl_interp.get_value_type of %2413 : !pdl.type
    pdl_interp.are_equal %2415, %2416 : !pdl.type -> ^bb4496, ^bb1
  ^bb4496:  // pred: ^bb4495
    %2417 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2415, %2417 : !pdl.type -> ^bb4497, ^bb1
  ^bb4497:  // pred: ^bb4496
    %2418 = pdl_interp.get_operand 1 of %2
    %2419 = pdl_interp.get_defining_op of %2418 : !pdl.value
    pdl_interp.is_not_null %2419 : !pdl.operation -> ^bb4498, ^bb1
  ^bb4498:  // pred: ^bb4497
    pdl_interp.is_not_null %2418 : !pdl.value -> ^bb4499, ^bb1
  ^bb4499:  // pred: ^bb4498
    pdl_interp.check_operation_name of %2419 is "arith.constant" -> ^bb4500, ^bb1
  ^bb4500:  // pred: ^bb4499
    pdl_interp.check_operand_count of %2419 is 0 -> ^bb4501, ^bb1
  ^bb4501:  // pred: ^bb4500
    pdl_interp.check_result_count of %2419 is 1 -> ^bb4502, ^bb1
  ^bb4502:  // pred: ^bb4501
    %2420 = pdl_interp.get_result 0 of %2419
    pdl_interp.is_not_null %2420 : !pdl.value -> ^bb4503, ^bb1
  ^bb4503:  // pred: ^bb4502
    pdl_interp.are_equal %2420, %2418 : !pdl.value -> ^bb4504, ^bb1
  ^bb4504:  // pred: ^bb4503
    %2421 = pdl_interp.get_attribute "value" of %2419
    pdl_interp.is_not_null %2421 : !pdl.attribute -> ^bb4505, ^bb1
  ^bb4505:  // pred: ^bb4504
    pdl_interp.check_attribute %2421 is 3.000000e+00 : f32 -> ^bb4506, ^bb1
  ^bb4506:  // pred: ^bb4505
    %2422 = pdl_interp.get_value_type of %2420 : !pdl.type
    pdl_interp.are_equal %2422, %2415 : !pdl.type -> ^bb4507, ^bb1
  ^bb4507:  // pred: ^bb4506
    pdl_interp.record_match @rewriters::@cube_neg_rev(%2414, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.constant", "math.powf"]), loc([%arg0, %2, %2419]), root("arith.negf") -> ^bb1
  ^bb4508:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4509, ^bb1
  ^bb4509:  // pred: ^bb4508
    pdl_interp.check_result_count of %2 is 1 -> ^bb4510, ^bb1
  ^bb4510:  // pred: ^bb4509
    %2423 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2423 : !pdl.value -> ^bb4511, ^bb1
  ^bb4511:  // pred: ^bb4510
    pdl_interp.are_equal %2423, %1 : !pdl.value -> ^bb4512, ^bb1
  ^bb4512:  // pred: ^bb4511
    %2424 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2424 : !pdl.value -> ^bb4513, ^bb1
  ^bb4513:  // pred: ^bb4512
    %2425 = pdl_interp.get_value_type of %2424 : !pdl.type
    pdl_interp.check_type %2425 is f32 -> ^bb4514, ^bb1
  ^bb4514:  // pred: ^bb4513
    %2426 = pdl_interp.get_value_type of %2423 : !pdl.type
    pdl_interp.are_equal %2425, %2426 : !pdl.type -> ^bb4515, ^bb1
  ^bb4515:  // pred: ^bb4514
    %2427 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2425, %2427 : !pdl.type -> ^bb4516, ^bb1
  ^bb4516:  // pred: ^bb4515
    pdl_interp.record_match @rewriters::@cbrt_neg_rev(%2424, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.cbrt"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4517:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4518, ^bb1
  ^bb4518:  // pred: ^bb4517
    pdl_interp.check_result_count of %2 is 1 -> ^bb4519, ^bb1
  ^bb4519:  // pred: ^bb4518
    %2428 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2428 : !pdl.value -> ^bb4520, ^bb1
  ^bb4520:  // pred: ^bb4519
    pdl_interp.are_equal %2428, %1 : !pdl.value -> ^bb4521, ^bb1
  ^bb4521:  // pred: ^bb4520
    %2429 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2429 : !pdl.value -> ^bb4522, ^bb1
  ^bb4522:  // pred: ^bb4521
    %2430 = pdl_interp.get_value_type of %2429 : !pdl.type
    pdl_interp.check_type %2430 is f32 -> ^bb4523, ^bb1
  ^bb4523:  // pred: ^bb4522
    %2431 = pdl_interp.get_value_type of %2428 : !pdl.type
    pdl_interp.are_equal %2430, %2431 : !pdl.type -> ^bb4524, ^bb1
  ^bb4524:  // pred: ^bb4523
    %2432 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2430, %2432 : !pdl.type -> ^bb4525, ^bb1
  ^bb4525:  // pred: ^bb4524
    pdl_interp.record_match @rewriters::@neg_log(%2429, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.log"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4526:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4527, ^bb1
  ^bb4527:  // pred: ^bb4526
    pdl_interp.check_result_count of %2 is 1 -> ^bb4528, ^bb1
  ^bb4528:  // pred: ^bb4527
    %2433 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2433 : !pdl.value -> ^bb4529, ^bb1
  ^bb4529:  // pred: ^bb4528
    pdl_interp.are_equal %2433, %1 : !pdl.value -> ^bb4530, ^bb1
  ^bb4530:  // pred: ^bb4529
    %2434 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2434 : !pdl.value -> ^bb4531, ^bb1
  ^bb4531:  // pred: ^bb4530
    %2435 = pdl_interp.get_value_type of %2434 : !pdl.type
    pdl_interp.check_type %2435 is f32 -> ^bb4532, ^bb1
  ^bb4532:  // pred: ^bb4531
    %2436 = pdl_interp.get_value_type of %2433 : !pdl.type
    pdl_interp.are_equal %2435, %2436 : !pdl.type -> ^bb4533, ^bb1
  ^bb4533:  // pred: ^bb4532
    %2437 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2435, %2437 : !pdl.type -> ^bb4534, ^bb1
  ^bb4534:  // pred: ^bb4533
    pdl_interp.record_match @rewriters::@sin_addPI_rev(%2434, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.addf", "math.sin"]), loc([%arg0, %2]), root("arith.negf") -> ^bb4535
  ^bb4535:  // pred: ^bb4534
    pdl_interp.record_match @rewriters::@cos_addPIdiv2_rev(%2434, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.constant", "arith.divf", "arith.addf", "math.cos"]), loc([%arg0, %2]), root("arith.negf") -> ^bb4536
  ^bb4536:  // pred: ^bb4535
    pdl_interp.record_match @rewriters::@sin_neg_rev(%2434, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.sin"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4537:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4538, ^bb1
  ^bb4538:  // pred: ^bb4537
    pdl_interp.check_result_count of %2 is 1 -> ^bb4539, ^bb1
  ^bb4539:  // pred: ^bb4538
    %2438 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2438 : !pdl.value -> ^bb4540, ^bb1
  ^bb4540:  // pred: ^bb4539
    pdl_interp.are_equal %2438, %1 : !pdl.value -> ^bb4541, ^bb1
  ^bb4541:  // pred: ^bb4540
    %2439 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2439 : !pdl.value -> ^bb4542, ^bb1
  ^bb4542:  // pred: ^bb4541
    %2440 = pdl_interp.get_value_type of %2439 : !pdl.type
    pdl_interp.check_type %2440 is f32 -> ^bb4543, ^bb1
  ^bb4543:  // pred: ^bb4542
    %2441 = pdl_interp.get_value_type of %2438 : !pdl.type
    pdl_interp.are_equal %2440, %2441 : !pdl.type -> ^bb4544, ^bb1
  ^bb4544:  // pred: ^bb4543
    %2442 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2440, %2442 : !pdl.type -> ^bb4545, ^bb1
  ^bb4545:  // pred: ^bb4544
    pdl_interp.record_match @rewriters::@tan_neg_rev(%2439, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.tan"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4546:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4547, ^bb1
  ^bb4547:  // pred: ^bb4546
    pdl_interp.check_result_count of %2 is 1 -> ^bb4548, ^bb1
  ^bb4548:  // pred: ^bb4547
    %2443 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2443 : !pdl.value -> ^bb4549, ^bb1
  ^bb4549:  // pred: ^bb4548
    pdl_interp.are_equal %2443, %1 : !pdl.value -> ^bb4550, ^bb1
  ^bb4550:  // pred: ^bb4549
    %2444 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2444 : !pdl.value -> ^bb4551, ^bb1
  ^bb4551:  // pred: ^bb4550
    %2445 = pdl_interp.get_value_type of %2444 : !pdl.type
    pdl_interp.check_type %2445 is f32 -> ^bb4552, ^bb1
  ^bb4552:  // pred: ^bb4551
    %2446 = pdl_interp.get_value_type of %2443 : !pdl.type
    pdl_interp.are_equal %2445, %2446 : !pdl.type -> ^bb4553, ^bb1
  ^bb4553:  // pred: ^bb4552
    %2447 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2445, %2447 : !pdl.type -> ^bb4554, ^bb1
  ^bb4554:  // pred: ^bb4553
    pdl_interp.record_match @rewriters::@cos_addPI_rev(%2444, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.addf", "math.cos"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4555:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4556, ^bb1
  ^bb4556:  // pred: ^bb4555
    pdl_interp.check_result_count of %2 is 1 -> ^bb4557, ^bb1
  ^bb4557:  // pred: ^bb4556
    %2448 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2448 : !pdl.value -> ^bb4558, ^bb1
  ^bb4558:  // pred: ^bb4557
    pdl_interp.are_equal %2448, %1 : !pdl.value -> ^bb4559, ^bb1
  ^bb4559:  // pred: ^bb4558
    %2449 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2449 : !pdl.value -> ^bb4560, ^bb1
  ^bb4560:  // pred: ^bb4559
    %2450 = pdl_interp.get_value_type of %2449 : !pdl.type
    pdl_interp.check_type %2450 is f32 -> ^bb4561, ^bb1
  ^bb4561:  // pred: ^bb4560
    %2451 = pdl_interp.get_value_type of %2448 : !pdl.type
    pdl_interp.are_equal %2450, %2451 : !pdl.type -> ^bb4562, ^bb1
  ^bb4562:  // pred: ^bb4561
    %2452 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2450, %2452 : !pdl.type -> ^bb4563, ^bb1
  ^bb4563:  // pred: ^bb4562
    pdl_interp.record_match @rewriters::@asin_neg_rev(%2449, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.asin"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4564:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4565, ^bb1
  ^bb4565:  // pred: ^bb4564
    pdl_interp.check_result_count of %2 is 1 -> ^bb4566, ^bb1
  ^bb4566:  // pred: ^bb4565
    %2453 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2453 : !pdl.value -> ^bb4567, ^bb1
  ^bb4567:  // pred: ^bb4566
    pdl_interp.are_equal %2453, %1 : !pdl.value -> ^bb4568, ^bb1
  ^bb4568:  // pred: ^bb4567
    %2454 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2454 : !pdl.value -> ^bb4569, ^bb1
  ^bb4569:  // pred: ^bb4568
    %2455 = pdl_interp.get_value_type of %2454 : !pdl.type
    pdl_interp.check_type %2455 is f32 -> ^bb4570, ^bb1
  ^bb4570:  // pred: ^bb4569
    %2456 = pdl_interp.get_value_type of %2453 : !pdl.type
    pdl_interp.are_equal %2455, %2456 : !pdl.type -> ^bb4571, ^bb1
  ^bb4571:  // pred: ^bb4570
    %2457 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2455, %2457 : !pdl.type -> ^bb4572, ^bb1
  ^bb4572:  // pred: ^bb4571
    pdl_interp.record_match @rewriters::@atan_neg_rev(%2454, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.atan"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4573:  // pred: ^bb4433
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4574, ^bb1
  ^bb4574:  // pred: ^bb4573
    pdl_interp.check_result_count of %2 is 1 -> ^bb4575, ^bb1
  ^bb4575:  // pred: ^bb4574
    %2458 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2458 : !pdl.value -> ^bb4576, ^bb1
  ^bb4576:  // pred: ^bb4575
    pdl_interp.are_equal %2458, %1 : !pdl.value -> ^bb4577, ^bb1
  ^bb4577:  // pred: ^bb4576
    %2459 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2459 : !pdl.value -> ^bb4578, ^bb1
  ^bb4578:  // pred: ^bb4577
    %2460 = pdl_interp.get_value_type of %2459 : !pdl.type
    pdl_interp.check_type %2460 is f32 -> ^bb4579, ^bb1
  ^bb4579:  // pred: ^bb4578
    %2461 = pdl_interp.get_value_type of %2458 : !pdl.type
    pdl_interp.are_equal %2460, %2461 : !pdl.type -> ^bb4580, ^bb1
  ^bb4580:  // pred: ^bb4579
    %2462 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2460, %2462 : !pdl.type -> ^bb4581, ^bb1
  ^bb4581:  // pred: ^bb4580
    pdl_interp.record_match @rewriters::@sinh_neg_rev(%2459, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.sinh"]), loc([%arg0, %2]), root("arith.negf") -> ^bb1
  ^bb4582:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb4583, ^bb1
  ^bb4583:  // pred: ^bb4582
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb4584, ^bb1
  ^bb4584:  // pred: ^bb4583
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb4585, ^bb1
  ^bb4585:  // pred: ^bb4584
    %2463 = pdl_interp.get_operand 1 of %arg0
    %2464 = pdl_interp.get_defining_op of %2463 : !pdl.value
    pdl_interp.is_not_null %2464 : !pdl.operation -> ^bb4648, ^bb4586
  ^bb4586:  // 136 preds: ^bb4585, ^bb4648, ^bb4649, ^bb4650, ^bb4651, ^bb4652, ^bb4653, ^bb4654, ^bb4655, ^bb4656, ^bb4657, ^bb4658, ^bb4659, ^bb4660, ^bb4661, ^bb4662, ^bb4663, ^bb4664, ^bb4665, ^bb4666, ^bb4667, ^bb4668, ^bb4669, ^bb4670, ^bb4671, ^bb4672, ^bb4673, ^bb4674, ^bb4675, ^bb4676, ^bb4677, ^bb4678, ^bb4679, ^bb4680, ^bb4681, ^bb4682, ^bb4683, ^bb4684, ^bb4685, ^bb4686, ^bb4687, ^bb4688, ^bb4689, ^bb4690, ^bb4691, ^bb4692, ^bb4693, ^bb4694, ^bb4695, ^bb4696, ^bb4697, ^bb4698, ^bb4699, ^bb4700, ^bb4701, ^bb4702, ^bb4703, ^bb4704, ^bb4705, ^bb4706, ^bb4707, ^bb4708, ^bb4709, ^bb4710, ^bb4711, ^bb4712, ^bb4713, ^bb4714, ^bb4715, ^bb4716, ^bb4717, ^bb4718, ^bb4719, ^bb4720, ^bb4721, ^bb4722, ^bb4723, ^bb4724, ^bb4725, ^bb4726, ^bb4727, ^bb4728, ^bb4729, ^bb4730, ^bb4731, ^bb4732, ^bb4733, ^bb4734, ^bb4735, ^bb4736, ^bb4737, ^bb4738, ^bb4739, ^bb4740, ^bb4741, ^bb4742, ^bb4743, ^bb4744, ^bb4745, ^bb4746, ^bb4747, ^bb4748, ^bb4749, ^bb4750, ^bb4751, ^bb4752, ^bb4753, ^bb4754, ^bb4755, ^bb4756, ^bb4757, ^bb4758, ^bb4759, ^bb4760, ^bb4761, ^bb4762, ^bb4763, ^bb4764, ^bb4765, ^bb4766, ^bb4767, ^bb4768, ^bb4769, ^bb4770, ^bb4771, ^bb4772, ^bb4773, ^bb4774, ^bb4775, ^bb4776, ^bb4777, ^bb4778, ^bb4779, ^bb4780, ^bb4781, ^bb4782
    pdl_interp.switch_operation_name of %2 to ["math.sqrt", "math.cbrt", "arith.constant", "math.exp", "arith.mulf"](^bb4587, ^bb4598, ^bb4609, ^bb4624, ^bb4635) -> ^bb1
  ^bb4587:  // pred: ^bb4586
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4588, ^bb1
  ^bb4588:  // pred: ^bb4587
    pdl_interp.check_result_count of %2 is 1 -> ^bb4589, ^bb1
  ^bb4589:  // pred: ^bb4588
    %2465 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2465 : !pdl.value -> ^bb4590, ^bb1
  ^bb4590:  // pred: ^bb4589
    pdl_interp.are_equal %2465, %1 : !pdl.value -> ^bb4591, ^bb1
  ^bb4591:  // pred: ^bb4590
    %2466 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2466 : !pdl.value -> ^bb4592, ^bb1
  ^bb4592:  // pred: ^bb4591
    %2467 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2467 : !pdl.value -> ^bb4593, ^bb1
  ^bb4593:  // pred: ^bb4592
    %2468 = pdl_interp.get_value_type of %2466 : !pdl.type
    pdl_interp.check_type %2468 is f32 -> ^bb4594, ^bb1
  ^bb4594:  // pred: ^bb4593
    %2469 = pdl_interp.get_value_type of %2465 : !pdl.type
    pdl_interp.are_equal %2468, %2469 : !pdl.type -> ^bb4595, ^bb1
  ^bb4595:  // pred: ^bb4594
    %2470 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2468, %2470 : !pdl.type -> ^bb4596, ^bb1
  ^bb4596:  // pred: ^bb4595
    %2471 = pdl_interp.get_value_type of %2467 : !pdl.type
    pdl_interp.are_equal %2468, %2471 : !pdl.type -> ^bb4597, ^bb1
  ^bb4597:  // pred: ^bb4596
    pdl_interp.record_match @rewriters::@sqrt_pow2(%2467, %2466, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.powf"]), loc([%arg0, %2]), root("math.powf") -> ^bb1
  ^bb4598:  // pred: ^bb4586
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4599, ^bb1
  ^bb4599:  // pred: ^bb4598
    pdl_interp.check_result_count of %2 is 1 -> ^bb4600, ^bb1
  ^bb4600:  // pred: ^bb4599
    %2472 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2472 : !pdl.value -> ^bb4601, ^bb1
  ^bb4601:  // pred: ^bb4600
    pdl_interp.are_equal %2472, %1 : !pdl.value -> ^bb4602, ^bb1
  ^bb4602:  // pred: ^bb4601
    %2473 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2473 : !pdl.value -> ^bb4603, ^bb1
  ^bb4603:  // pred: ^bb4602
    %2474 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2474 : !pdl.value -> ^bb4604, ^bb1
  ^bb4604:  // pred: ^bb4603
    %2475 = pdl_interp.get_value_type of %2473 : !pdl.type
    pdl_interp.check_type %2475 is f32 -> ^bb4605, ^bb1
  ^bb4605:  // pred: ^bb4604
    %2476 = pdl_interp.get_value_type of %2472 : !pdl.type
    pdl_interp.are_equal %2475, %2476 : !pdl.type -> ^bb4606, ^bb1
  ^bb4606:  // pred: ^bb4605
    %2477 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2475, %2477 : !pdl.type -> ^bb4607, ^bb1
  ^bb4607:  // pred: ^bb4606
    %2478 = pdl_interp.get_value_type of %2474 : !pdl.type
    pdl_interp.are_equal %2475, %2478 : !pdl.type -> ^bb4608, ^bb1
  ^bb4608:  // pred: ^bb4607
    pdl_interp.record_match @rewriters::@pow_cbrt(%2474, %2473, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.powf"]), loc([%arg0, %2]), root("math.powf") -> ^bb1
  ^bb4609:  // pred: ^bb4586
    pdl_interp.check_operand_count of %2 is 0 -> ^bb4610, ^bb1
  ^bb4610:  // pred: ^bb4609
    pdl_interp.check_result_count of %2 is 1 -> ^bb4611, ^bb1
  ^bb4611:  // pred: ^bb4610
    %2479 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2479 : !pdl.value -> ^bb4612, ^bb1
  ^bb4612:  // pred: ^bb4611
    pdl_interp.are_equal %2479, %1 : !pdl.value -> ^bb4613, ^bb1
  ^bb4613:  // pred: ^bb4612
    %2480 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2480 : !pdl.value -> ^bb4614, ^bb1
  ^bb4614:  // pred: ^bb4613
    %2481 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %2481 : !pdl.attribute -> ^bb4615, ^bb1
  ^bb4615:  // pred: ^bb4614
    pdl_interp.switch_attribute %2481 to [1.000000e+00 : f32, 0.000000e+00 : f32](^bb4616, ^bb4620) -> ^bb1
  ^bb4616:  // pred: ^bb4615
    %2482 = pdl_interp.get_value_type of %2479 : !pdl.type
    pdl_interp.check_type %2482 is f32 -> ^bb4617, ^bb1
  ^bb4617:  // pred: ^bb4616
    %2483 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2482, %2483 : !pdl.type -> ^bb4618, ^bb1
  ^bb4618:  // pred: ^bb4617
    %2484 = pdl_interp.get_value_type of %2480 : !pdl.type
    pdl_interp.are_equal %2482, %2484 : !pdl.type -> ^bb4619, ^bb1
  ^bb4619:  // pred: ^bb4618
    pdl_interp.record_match @rewriters::@pow_base_1(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.powf") -> ^bb1
  ^bb4620:  // pred: ^bb4615
    %2485 = pdl_interp.get_value_type of %2479 : !pdl.type
    pdl_interp.check_type %2485 is f32 -> ^bb4621, ^bb1
  ^bb4621:  // pred: ^bb4620
    %2486 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2485, %2486 : !pdl.type -> ^bb4622, ^bb1
  ^bb4622:  // pred: ^bb4621
    %2487 = pdl_interp.get_value_type of %2480 : !pdl.type
    pdl_interp.are_equal %2485, %2487 : !pdl.type -> ^bb4623, ^bb1
  ^bb4623:  // pred: ^bb4622
    pdl_interp.record_match @rewriters::@pow_base_0(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.powf") -> ^bb1
  ^bb4624:  // pred: ^bb4586
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4625, ^bb1
  ^bb4625:  // pred: ^bb4624
    pdl_interp.check_result_count of %2 is 1 -> ^bb4626, ^bb1
  ^bb4626:  // pred: ^bb4625
    %2488 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2488 : !pdl.value -> ^bb4627, ^bb1
  ^bb4627:  // pred: ^bb4626
    pdl_interp.are_equal %2488, %1 : !pdl.value -> ^bb4628, ^bb1
  ^bb4628:  // pred: ^bb4627
    %2489 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2489 : !pdl.value -> ^bb4629, ^bb1
  ^bb4629:  // pred: ^bb4628
    %2490 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2490 : !pdl.value -> ^bb4630, ^bb1
  ^bb4630:  // pred: ^bb4629
    %2491 = pdl_interp.get_value_type of %2489 : !pdl.type
    pdl_interp.check_type %2491 is f32 -> ^bb4631, ^bb1
  ^bb4631:  // pred: ^bb4630
    %2492 = pdl_interp.get_value_type of %2488 : !pdl.type
    pdl_interp.are_equal %2491, %2492 : !pdl.type -> ^bb4632, ^bb1
  ^bb4632:  // pred: ^bb4631
    %2493 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2491, %2493 : !pdl.type -> ^bb4633, ^bb1
  ^bb4633:  // pred: ^bb4632
    %2494 = pdl_interp.get_value_type of %2490 : !pdl.type
    pdl_interp.are_equal %2491, %2494 : !pdl.type -> ^bb4634, ^bb1
  ^bb4634:  // pred: ^bb4633
    pdl_interp.record_match @rewriters::@pow_exp(%2489, %2490, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "math.exp"]), loc([%arg0, %2]), root("math.powf") -> ^bb1
  ^bb4635:  // pred: ^bb4586
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4636, ^bb1
  ^bb4636:  // pred: ^bb4635
    pdl_interp.check_result_count of %2 is 1 -> ^bb4637, ^bb1
  ^bb4637:  // pred: ^bb4636
    %2495 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2495 : !pdl.value -> ^bb4638, ^bb1
  ^bb4638:  // pred: ^bb4637
    pdl_interp.are_equal %2495, %1 : !pdl.value -> ^bb4639, ^bb1
  ^bb4639:  // pred: ^bb4638
    %2496 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2496 : !pdl.value -> ^bb4640, ^bb1
  ^bb4640:  // pred: ^bb4639
    %2497 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %2497 : !pdl.value -> ^bb4641, ^bb1
  ^bb4641:  // pred: ^bb4640
    %2498 = pdl_interp.get_value_type of %2496 : !pdl.type
    pdl_interp.check_type %2498 is f32 -> ^bb4642, ^bb1
  ^bb4642:  // pred: ^bb4641
    %2499 = pdl_interp.get_value_type of %2495 : !pdl.type
    pdl_interp.are_equal %2498, %2499 : !pdl.type -> ^bb4643, ^bb1
  ^bb4643:  // pred: ^bb4642
    %2500 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2498, %2500 : !pdl.type -> ^bb4644, ^bb1
  ^bb4644:  // pred: ^bb4643
    %2501 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2501 : !pdl.value -> ^bb4645, ^bb1
  ^bb4645:  // pred: ^bb4644
    %2502 = pdl_interp.get_value_type of %2501 : !pdl.type
    pdl_interp.are_equal %2498, %2502 : !pdl.type -> ^bb4646, ^bb1
  ^bb4646:  // pred: ^bb4645
    %2503 = pdl_interp.get_value_type of %2497 : !pdl.type
    pdl_interp.are_equal %2498, %2503 : !pdl.type -> ^bb4647, ^bb1
  ^bb4647:  // pred: ^bb4646
    pdl_interp.record_match @rewriters::@unpow_prod_down(%2496, %2497, %2501, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.powf", "math.powf", "arith.mulf"]), loc([%arg0, %2]), root("math.powf") -> ^bb1
  ^bb4648:  // pred: ^bb4585
    pdl_interp.switch_operation_name of %2 to ["arith.addf", "arith.subf", "math.cbrt", "arith.negf", "arith.mulf", "arith.divf", "math.exp"](^bb4649, ^bb4669, ^bb4689, ^bb4707, ^bb4725, ^bb4745, ^bb4765) -> ^bb4586
  ^bb4649:  // pred: ^bb4648
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4650, ^bb4586
  ^bb4650:  // pred: ^bb4649
    pdl_interp.check_result_count of %2 is 1 -> ^bb4651, ^bb4586
  ^bb4651:  // pred: ^bb4650
    %2504 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2504 : !pdl.value -> ^bb4652, ^bb4586
  ^bb4652:  // pred: ^bb4651
    pdl_interp.are_equal %2504, %1 : !pdl.value -> ^bb4653, ^bb4586
  ^bb4653:  // pred: ^bb4652
    %2505 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2505 : !pdl.value -> ^bb4654, ^bb4586
  ^bb4654:  // pred: ^bb4653
    pdl_interp.is_not_null %2463 : !pdl.value -> ^bb4655, ^bb4586
  ^bb4655:  // pred: ^bb4654
    %2506 = pdl_interp.get_value_type of %2505 : !pdl.type
    pdl_interp.check_type %2506 is f32 -> ^bb4656, ^bb4586
  ^bb4656:  // pred: ^bb4655
    %2507 = pdl_interp.get_value_type of %2504 : !pdl.type
    pdl_interp.are_equal %2506, %2507 : !pdl.type -> ^bb4657, ^bb4586
  ^bb4657:  // pred: ^bb4656
    %2508 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2506, %2508 : !pdl.type -> ^bb4658, ^bb4586
  ^bb4658:  // pred: ^bb4657
    pdl_interp.check_operation_name of %2464 is "arith.constant" -> ^bb4659, ^bb4586
  ^bb4659:  // pred: ^bb4658
    pdl_interp.check_operand_count of %2464 is 0 -> ^bb4660, ^bb4586
  ^bb4660:  // pred: ^bb4659
    pdl_interp.check_result_count of %2464 is 1 -> ^bb4661, ^bb4586
  ^bb4661:  // pred: ^bb4660
    %2509 = pdl_interp.get_result 0 of %2464
    pdl_interp.is_not_null %2509 : !pdl.value -> ^bb4662, ^bb4586
  ^bb4662:  // pred: ^bb4661
    pdl_interp.are_equal %2509, %2463 : !pdl.value -> ^bb4663, ^bb4586
  ^bb4663:  // pred: ^bb4662
    %2510 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2510 : !pdl.value -> ^bb4664, ^bb4586
  ^bb4664:  // pred: ^bb4663
    %2511 = pdl_interp.get_value_type of %2509 : !pdl.type
    pdl_interp.are_equal %2506, %2511 : !pdl.type -> ^bb4665, ^bb4586
  ^bb4665:  // pred: ^bb4664
    %2512 = pdl_interp.get_value_type of %2510 : !pdl.type
    pdl_interp.are_equal %2506, %2512 : !pdl.type -> ^bb4666, ^bb4586
  ^bb4666:  // pred: ^bb4665
    %2513 = pdl_interp.get_attribute "value" of %2464
    pdl_interp.is_not_null %2513 : !pdl.attribute -> ^bb4667, ^bb4586
  ^bb4667:  // pred: ^bb4666
    pdl_interp.check_attribute %2513 is 2.000000e+00 : f32 -> ^bb4668, ^bb4586
  ^bb4668:  // pred: ^bb4667
    pdl_interp.record_match @rewriters::@sum_square_pow(%2505, %2510, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.constant", "arith.mulf", "arith.mulf", "arith.addf", "arith.constant", "math.powf", "arith.addf"]), loc([%arg0, %2464, %2]), root("math.powf") -> ^bb4586
  ^bb4669:  // pred: ^bb4648
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4670, ^bb4586
  ^bb4670:  // pred: ^bb4669
    pdl_interp.check_result_count of %2 is 1 -> ^bb4671, ^bb4586
  ^bb4671:  // pred: ^bb4670
    %2514 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2514 : !pdl.value -> ^bb4672, ^bb4586
  ^bb4672:  // pred: ^bb4671
    pdl_interp.are_equal %2514, %1 : !pdl.value -> ^bb4673, ^bb4586
  ^bb4673:  // pred: ^bb4672
    %2515 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2515 : !pdl.value -> ^bb4674, ^bb4586
  ^bb4674:  // pred: ^bb4673
    pdl_interp.is_not_null %2463 : !pdl.value -> ^bb4675, ^bb4586
  ^bb4675:  // pred: ^bb4674
    %2516 = pdl_interp.get_value_type of %2515 : !pdl.type
    pdl_interp.check_type %2516 is f32 -> ^bb4676, ^bb4586
  ^bb4676:  // pred: ^bb4675
    %2517 = pdl_interp.get_value_type of %2514 : !pdl.type
    pdl_interp.are_equal %2516, %2517 : !pdl.type -> ^bb4677, ^bb4586
  ^bb4677:  // pred: ^bb4676
    %2518 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2516, %2518 : !pdl.type -> ^bb4678, ^bb4586
  ^bb4678:  // pred: ^bb4677
    pdl_interp.check_operation_name of %2464 is "arith.constant" -> ^bb4679, ^bb4586
  ^bb4679:  // pred: ^bb4678
    pdl_interp.check_operand_count of %2464 is 0 -> ^bb4680, ^bb4586
  ^bb4680:  // pred: ^bb4679
    pdl_interp.check_result_count of %2464 is 1 -> ^bb4681, ^bb4586
  ^bb4681:  // pred: ^bb4680
    %2519 = pdl_interp.get_result 0 of %2464
    pdl_interp.is_not_null %2519 : !pdl.value -> ^bb4682, ^bb4586
  ^bb4682:  // pred: ^bb4681
    pdl_interp.are_equal %2519, %2463 : !pdl.value -> ^bb4683, ^bb4586
  ^bb4683:  // pred: ^bb4682
    %2520 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2520 : !pdl.value -> ^bb4684, ^bb4586
  ^bb4684:  // pred: ^bb4683
    %2521 = pdl_interp.get_value_type of %2519 : !pdl.type
    pdl_interp.are_equal %2516, %2521 : !pdl.type -> ^bb4685, ^bb4586
  ^bb4685:  // pred: ^bb4684
    %2522 = pdl_interp.get_value_type of %2520 : !pdl.type
    pdl_interp.are_equal %2516, %2522 : !pdl.type -> ^bb4686, ^bb4586
  ^bb4686:  // pred: ^bb4685
    %2523 = pdl_interp.get_attribute "value" of %2464
    pdl_interp.is_not_null %2523 : !pdl.attribute -> ^bb4687, ^bb4586
  ^bb4687:  // pred: ^bb4686
    pdl_interp.check_attribute %2523 is 2.000000e+00 : f32 -> ^bb4688, ^bb4586
  ^bb4688:  // pred: ^bb4687
    pdl_interp.record_match @rewriters::@sub_square_pow(%2515, %2520, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.constant", "arith.mulf", "arith.mulf", "arith.subf", "arith.constant", "math.powf", "arith.addf"]), loc([%arg0, %2, %2464]), root("math.powf") -> ^bb4586
  ^bb4689:  // pred: ^bb4648
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4690, ^bb4586
  ^bb4690:  // pred: ^bb4689
    pdl_interp.check_result_count of %2 is 1 -> ^bb4691, ^bb4586
  ^bb4691:  // pred: ^bb4690
    %2524 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2524 : !pdl.value -> ^bb4692, ^bb4586
  ^bb4692:  // pred: ^bb4691
    pdl_interp.are_equal %2524, %1 : !pdl.value -> ^bb4693, ^bb4586
  ^bb4693:  // pred: ^bb4692
    %2525 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2525 : !pdl.value -> ^bb4694, ^bb4586
  ^bb4694:  // pred: ^bb4693
    pdl_interp.is_not_null %2463 : !pdl.value -> ^bb4695, ^bb4586
  ^bb4695:  // pred: ^bb4694
    %2526 = pdl_interp.get_value_type of %2525 : !pdl.type
    pdl_interp.check_type %2526 is f32 -> ^bb4696, ^bb4586
  ^bb4696:  // pred: ^bb4695
    %2527 = pdl_interp.get_value_type of %2524 : !pdl.type
    pdl_interp.are_equal %2526, %2527 : !pdl.type -> ^bb4697, ^bb4586
  ^bb4697:  // pred: ^bb4696
    %2528 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2526, %2528 : !pdl.type -> ^bb4698, ^bb4586
  ^bb4698:  // pred: ^bb4697
    pdl_interp.check_operation_name of %2464 is "arith.constant" -> ^bb4699, ^bb4586
  ^bb4699:  // pred: ^bb4698
    pdl_interp.check_operand_count of %2464 is 0 -> ^bb4700, ^bb4586
  ^bb4700:  // pred: ^bb4699
    pdl_interp.check_result_count of %2464 is 1 -> ^bb4701, ^bb4586
  ^bb4701:  // pred: ^bb4700
    %2529 = pdl_interp.get_result 0 of %2464
    pdl_interp.is_not_null %2529 : !pdl.value -> ^bb4702, ^bb4586
  ^bb4702:  // pred: ^bb4701
    pdl_interp.are_equal %2529, %2463 : !pdl.value -> ^bb4703, ^bb4586
  ^bb4703:  // pred: ^bb4702
    %2530 = pdl_interp.get_value_type of %2529 : !pdl.type
    pdl_interp.are_equal %2526, %2530 : !pdl.type -> ^bb4704, ^bb4586
  ^bb4704:  // pred: ^bb4703
    %2531 = pdl_interp.get_attribute "value" of %2464
    pdl_interp.is_not_null %2531 : !pdl.attribute -> ^bb4705, ^bb4586
  ^bb4705:  // pred: ^bb4704
    pdl_interp.check_attribute %2531 is 3.000000e+00 : f32 -> ^bb4706, ^bb4586
  ^bb4706:  // pred: ^bb4705
    pdl_interp.record_match @rewriters::@rem_cube_cbrt(%2525, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2, %2464]), root("math.powf") -> ^bb4586
  ^bb4707:  // pred: ^bb4648
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4708, ^bb4586
  ^bb4708:  // pred: ^bb4707
    pdl_interp.check_result_count of %2 is 1 -> ^bb4709, ^bb4586
  ^bb4709:  // pred: ^bb4708
    %2532 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2532 : !pdl.value -> ^bb4710, ^bb4586
  ^bb4710:  // pred: ^bb4709
    pdl_interp.are_equal %2532, %1 : !pdl.value -> ^bb4711, ^bb4586
  ^bb4711:  // pred: ^bb4710
    %2533 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2533 : !pdl.value -> ^bb4712, ^bb4586
  ^bb4712:  // pred: ^bb4711
    pdl_interp.is_not_null %2463 : !pdl.value -> ^bb4713, ^bb4586
  ^bb4713:  // pred: ^bb4712
    %2534 = pdl_interp.get_value_type of %2533 : !pdl.type
    pdl_interp.check_type %2534 is f32 -> ^bb4714, ^bb4586
  ^bb4714:  // pred: ^bb4713
    %2535 = pdl_interp.get_value_type of %2532 : !pdl.type
    pdl_interp.are_equal %2534, %2535 : !pdl.type -> ^bb4715, ^bb4586
  ^bb4715:  // pred: ^bb4714
    %2536 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2534, %2536 : !pdl.type -> ^bb4716, ^bb4586
  ^bb4716:  // pred: ^bb4715
    pdl_interp.check_operation_name of %2464 is "arith.constant" -> ^bb4717, ^bb4586
  ^bb4717:  // pred: ^bb4716
    pdl_interp.check_operand_count of %2464 is 0 -> ^bb4718, ^bb4586
  ^bb4718:  // pred: ^bb4717
    pdl_interp.check_result_count of %2464 is 1 -> ^bb4719, ^bb4586
  ^bb4719:  // pred: ^bb4718
    %2537 = pdl_interp.get_result 0 of %2464
    pdl_interp.is_not_null %2537 : !pdl.value -> ^bb4720, ^bb4586
  ^bb4720:  // pred: ^bb4719
    pdl_interp.are_equal %2537, %2463 : !pdl.value -> ^bb4721, ^bb4586
  ^bb4721:  // pred: ^bb4720
    %2538 = pdl_interp.get_value_type of %2537 : !pdl.type
    pdl_interp.are_equal %2534, %2538 : !pdl.type -> ^bb4722, ^bb4586
  ^bb4722:  // pred: ^bb4721
    %2539 = pdl_interp.get_attribute "value" of %2464
    pdl_interp.is_not_null %2539 : !pdl.attribute -> ^bb4723, ^bb4586
  ^bb4723:  // pred: ^bb4722
    pdl_interp.check_attribute %2539 is 3.000000e+00 : f32 -> ^bb4724, ^bb4586
  ^bb4724:  // pred: ^bb4723
    pdl_interp.record_match @rewriters::@cube_neg(%2533, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.negf"]), loc([%arg0, %2, %2464]), root("math.powf") -> ^bb4586
  ^bb4725:  // pred: ^bb4648
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4726, ^bb4586
  ^bb4726:  // pred: ^bb4725
    pdl_interp.check_result_count of %2 is 1 -> ^bb4727, ^bb4586
  ^bb4727:  // pred: ^bb4726
    %2540 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2540 : !pdl.value -> ^bb4728, ^bb4586
  ^bb4728:  // pred: ^bb4727
    pdl_interp.are_equal %2540, %1 : !pdl.value -> ^bb4729, ^bb4586
  ^bb4729:  // pred: ^bb4728
    %2541 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2541 : !pdl.value -> ^bb4730, ^bb4586
  ^bb4730:  // pred: ^bb4729
    pdl_interp.is_not_null %2463 : !pdl.value -> ^bb4731, ^bb4586
  ^bb4731:  // pred: ^bb4730
    %2542 = pdl_interp.get_value_type of %2541 : !pdl.type
    pdl_interp.check_type %2542 is f32 -> ^bb4732, ^bb4586
  ^bb4732:  // pred: ^bb4731
    %2543 = pdl_interp.get_value_type of %2540 : !pdl.type
    pdl_interp.are_equal %2542, %2543 : !pdl.type -> ^bb4733, ^bb4586
  ^bb4733:  // pred: ^bb4732
    %2544 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2542, %2544 : !pdl.type -> ^bb4734, ^bb4586
  ^bb4734:  // pred: ^bb4733
    pdl_interp.check_operation_name of %2464 is "arith.constant" -> ^bb4735, ^bb4586
  ^bb4735:  // pred: ^bb4734
    pdl_interp.check_operand_count of %2464 is 0 -> ^bb4736, ^bb4586
  ^bb4736:  // pred: ^bb4735
    pdl_interp.check_result_count of %2464 is 1 -> ^bb4737, ^bb4586
  ^bb4737:  // pred: ^bb4736
    %2545 = pdl_interp.get_result 0 of %2464
    pdl_interp.is_not_null %2545 : !pdl.value -> ^bb4738, ^bb4586
  ^bb4738:  // pred: ^bb4737
    pdl_interp.are_equal %2545, %2463 : !pdl.value -> ^bb4739, ^bb4586
  ^bb4739:  // pred: ^bb4738
    %2546 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2546 : !pdl.value -> ^bb4740, ^bb4586
  ^bb4740:  // pred: ^bb4739
    %2547 = pdl_interp.get_value_type of %2545 : !pdl.type
    pdl_interp.are_equal %2542, %2547 : !pdl.type -> ^bb4741, ^bb4586
  ^bb4741:  // pred: ^bb4740
    %2548 = pdl_interp.get_value_type of %2546 : !pdl.type
    pdl_interp.are_equal %2542, %2548 : !pdl.type -> ^bb4742, ^bb4586
  ^bb4742:  // pred: ^bb4741
    %2549 = pdl_interp.get_attribute "value" of %2464
    pdl_interp.is_not_null %2549 : !pdl.attribute -> ^bb4743, ^bb4586
  ^bb4743:  // pred: ^bb4742
    pdl_interp.check_attribute %2549 is 3.000000e+00 : f32 -> ^bb4744, ^bb4586
  ^bb4744:  // pred: ^bb4743
    pdl_interp.record_match @rewriters::@cube_prod(%2541, %2546, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.constant", "math.powf", "arith.mulf"]), loc([%arg0, %2, %2464]), root("math.powf") -> ^bb4586
  ^bb4745:  // pred: ^bb4648
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4746, ^bb4586
  ^bb4746:  // pred: ^bb4745
    pdl_interp.check_result_count of %2 is 1 -> ^bb4747, ^bb4586
  ^bb4747:  // pred: ^bb4746
    %2550 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2550 : !pdl.value -> ^bb4748, ^bb4586
  ^bb4748:  // pred: ^bb4747
    pdl_interp.are_equal %2550, %1 : !pdl.value -> ^bb4749, ^bb4586
  ^bb4749:  // pred: ^bb4748
    %2551 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2551 : !pdl.value -> ^bb4750, ^bb4586
  ^bb4750:  // pred: ^bb4749
    pdl_interp.is_not_null %2463 : !pdl.value -> ^bb4751, ^bb4586
  ^bb4751:  // pred: ^bb4750
    %2552 = pdl_interp.get_value_type of %2551 : !pdl.type
    pdl_interp.check_type %2552 is f32 -> ^bb4752, ^bb4586
  ^bb4752:  // pred: ^bb4751
    %2553 = pdl_interp.get_value_type of %2550 : !pdl.type
    pdl_interp.are_equal %2552, %2553 : !pdl.type -> ^bb4753, ^bb4586
  ^bb4753:  // pred: ^bb4752
    %2554 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2552, %2554 : !pdl.type -> ^bb4754, ^bb4586
  ^bb4754:  // pred: ^bb4753
    pdl_interp.check_operation_name of %2464 is "arith.constant" -> ^bb4755, ^bb4586
  ^bb4755:  // pred: ^bb4754
    pdl_interp.check_operand_count of %2464 is 0 -> ^bb4756, ^bb4586
  ^bb4756:  // pred: ^bb4755
    pdl_interp.check_result_count of %2464 is 1 -> ^bb4757, ^bb4586
  ^bb4757:  // pred: ^bb4756
    %2555 = pdl_interp.get_result 0 of %2464
    pdl_interp.is_not_null %2555 : !pdl.value -> ^bb4758, ^bb4586
  ^bb4758:  // pred: ^bb4757
    pdl_interp.are_equal %2555, %2463 : !pdl.value -> ^bb4759, ^bb4586
  ^bb4759:  // pred: ^bb4758
    %2556 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2556 : !pdl.value -> ^bb4760, ^bb4586
  ^bb4760:  // pred: ^bb4759
    %2557 = pdl_interp.get_value_type of %2555 : !pdl.type
    pdl_interp.are_equal %2552, %2557 : !pdl.type -> ^bb4761, ^bb4586
  ^bb4761:  // pred: ^bb4760
    %2558 = pdl_interp.get_value_type of %2556 : !pdl.type
    pdl_interp.are_equal %2552, %2558 : !pdl.type -> ^bb4762, ^bb4586
  ^bb4762:  // pred: ^bb4761
    %2559 = pdl_interp.get_attribute "value" of %2464
    pdl_interp.is_not_null %2559 : !pdl.attribute -> ^bb4763, ^bb4586
  ^bb4763:  // pred: ^bb4762
    pdl_interp.check_attribute %2559 is 3.000000e+00 : f32 -> ^bb4764, ^bb4586
  ^bb4764:  // pred: ^bb4763
    pdl_interp.record_match @rewriters::@cube_div(%2551, %2556, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.constant", "math.powf", "arith.divf"]), loc([%arg0, %2, %2464]), root("math.powf") -> ^bb4586
  ^bb4765:  // pred: ^bb4648
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4766, ^bb4586
  ^bb4766:  // pred: ^bb4765
    pdl_interp.check_result_count of %2 is 1 -> ^bb4767, ^bb4586
  ^bb4767:  // pred: ^bb4766
    %2560 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2560 : !pdl.value -> ^bb4768, ^bb4586
  ^bb4768:  // pred: ^bb4767
    pdl_interp.are_equal %2560, %1 : !pdl.value -> ^bb4769, ^bb4586
  ^bb4769:  // pred: ^bb4768
    %2561 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2561 : !pdl.value -> ^bb4770, ^bb4586
  ^bb4770:  // pred: ^bb4769
    pdl_interp.is_not_null %2463 : !pdl.value -> ^bb4771, ^bb4586
  ^bb4771:  // pred: ^bb4770
    %2562 = pdl_interp.get_value_type of %2561 : !pdl.type
    pdl_interp.check_type %2562 is f32 -> ^bb4772, ^bb4586
  ^bb4772:  // pred: ^bb4771
    %2563 = pdl_interp.get_value_type of %2560 : !pdl.type
    pdl_interp.are_equal %2562, %2563 : !pdl.type -> ^bb4773, ^bb4586
  ^bb4773:  // pred: ^bb4772
    %2564 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2562, %2564 : !pdl.type -> ^bb4774, ^bb4586
  ^bb4774:  // pred: ^bb4773
    pdl_interp.check_operation_name of %2464 is "arith.constant" -> ^bb4775, ^bb4586
  ^bb4775:  // pred: ^bb4774
    pdl_interp.check_operand_count of %2464 is 0 -> ^bb4776, ^bb4586
  ^bb4776:  // pred: ^bb4775
    pdl_interp.check_result_count of %2464 is 1 -> ^bb4777, ^bb4586
  ^bb4777:  // pred: ^bb4776
    %2565 = pdl_interp.get_result 0 of %2464
    pdl_interp.is_not_null %2565 : !pdl.value -> ^bb4778, ^bb4586
  ^bb4778:  // pred: ^bb4777
    pdl_interp.are_equal %2565, %2463 : !pdl.value -> ^bb4779, ^bb4586
  ^bb4779:  // pred: ^bb4778
    %2566 = pdl_interp.get_value_type of %2565 : !pdl.type
    pdl_interp.are_equal %2562, %2566 : !pdl.type -> ^bb4780, ^bb4586
  ^bb4780:  // pred: ^bb4779
    %2567 = pdl_interp.get_attribute "value" of %2464
    pdl_interp.is_not_null %2567 : !pdl.attribute -> ^bb4781, ^bb4586
  ^bb4781:  // pred: ^bb4780
    pdl_interp.check_attribute %2567 is 3.000000e+00 : f32 -> ^bb4782, ^bb4586
  ^bb4782:  // pred: ^bb4781
    pdl_interp.record_match @rewriters::@exp_lft_cube_rev(%2561, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.exp"]), loc([%arg0, %2, %2464]), root("math.powf") -> ^bb4586
  ^bb4783:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb4784, ^bb1
  ^bb4784:  // pred: ^bb4783
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb4785, ^bb1
  ^bb4785:  // pred: ^bb4784
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb4786, ^bb1
  ^bb4786:  // pred: ^bb4785
    pdl_interp.switch_operation_name of %2 to ["arith.mulf", "math.cbrt", "arith.divf", "math.exp", "arith.subf", "arith.addf"](^bb4787, ^bb4800, ^bb4809, ^bb4860, ^bb4869, ^bb4917) -> ^bb1
  ^bb4787:  // pred: ^bb4786
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4788, ^bb1
  ^bb4788:  // pred: ^bb4787
    pdl_interp.check_result_count of %2 is 1 -> ^bb4789, ^bb1
  ^bb4789:  // pred: ^bb4788
    %2568 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2568 : !pdl.value -> ^bb4790, ^bb1
  ^bb4790:  // pred: ^bb4789
    pdl_interp.are_equal %2568, %1 : !pdl.value -> ^bb4791, ^bb1
  ^bb4791:  // pred: ^bb4790
    %2569 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2569 : !pdl.value -> ^bb4792, ^bb1
  ^bb4792:  // pred: ^bb4791
    %2570 = pdl_interp.get_value_type of %2569 : !pdl.type
    pdl_interp.check_type %2570 is f32 -> ^bb4793, ^bb1
  ^bb4793:  // pred: ^bb4792
    %2571 = pdl_interp.get_value_type of %2568 : !pdl.type
    pdl_interp.are_equal %2570, %2571 : !pdl.type -> ^bb4794, ^bb1
  ^bb4794:  // pred: ^bb4793
    %2572 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2570, %2572 : !pdl.type -> ^bb4795, ^bb1
  ^bb4795:  // pred: ^bb4794
    %2573 = pdl_interp.get_operand 1 of %2
    pdl_interp.are_equal %2569, %2573 : !pdl.value -> ^bb4799, ^bb4796
  ^bb4796:  // 2 preds: ^bb4795, ^bb4799
    %2574 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2574 : !pdl.value -> ^bb4797, ^bb1
  ^bb4797:  // pred: ^bb4796
    %2575 = pdl_interp.get_value_type of %2574 : !pdl.type
    pdl_interp.are_equal %2570, %2575 : !pdl.type -> ^bb4798, ^bb1
  ^bb4798:  // pred: ^bb4797
    pdl_interp.record_match @rewriters::@sqrt_prod(%2569, %2574, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sqrt", "math.sqrt", "arith.mulf"]), loc([%arg0, %2]), root("math.sqrt") -> ^bb1
  ^bb4799:  // pred: ^bb4795
    pdl_interp.record_match @rewriters::@rem_sqrt_square(%2569, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.absf"]), loc([%arg0, %2]), root("math.sqrt") -> ^bb4796
  ^bb4800:  // pred: ^bb4786
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4801, ^bb1
  ^bb4801:  // pred: ^bb4800
    pdl_interp.check_result_count of %2 is 1 -> ^bb4802, ^bb1
  ^bb4802:  // pred: ^bb4801
    %2576 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2576 : !pdl.value -> ^bb4803, ^bb1
  ^bb4803:  // pred: ^bb4802
    pdl_interp.are_equal %2576, %1 : !pdl.value -> ^bb4804, ^bb1
  ^bb4804:  // pred: ^bb4803
    %2577 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2577 : !pdl.value -> ^bb4805, ^bb1
  ^bb4805:  // pred: ^bb4804
    %2578 = pdl_interp.get_value_type of %2577 : !pdl.type
    pdl_interp.check_type %2578 is f32 -> ^bb4806, ^bb1
  ^bb4806:  // pred: ^bb4805
    %2579 = pdl_interp.get_value_type of %2576 : !pdl.type
    pdl_interp.are_equal %2578, %2579 : !pdl.type -> ^bb4807, ^bb1
  ^bb4807:  // pred: ^bb4806
    %2580 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2578, %2580 : !pdl.type -> ^bb4808, ^bb1
  ^bb4808:  // pred: ^bb4807
    pdl_interp.record_match @rewriters::@sqrt_cbrt(%2577, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sqrt", "math.cbrt"]), loc([%arg0, %2]), root("math.sqrt") -> ^bb1
  ^bb4809:  // pred: ^bb4786
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4810, ^bb1
  ^bb4810:  // pred: ^bb4809
    pdl_interp.check_result_count of %2 is 1 -> ^bb4811, ^bb1
  ^bb4811:  // pred: ^bb4810
    %2581 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2581 : !pdl.value -> ^bb4812, ^bb1
  ^bb4812:  // pred: ^bb4811
    pdl_interp.are_equal %2581, %1 : !pdl.value -> ^bb4813, ^bb1
  ^bb4813:  // pred: ^bb4812
    %2582 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2582 : !pdl.value -> ^bb4814, ^bb1
  ^bb4814:  // pred: ^bb4813
    %2583 = pdl_interp.get_value_type of %2582 : !pdl.type
    pdl_interp.check_type %2583 is f32 -> ^bb4855, ^bb4815
  ^bb4815:  // 6 preds: ^bb4814, ^bb4855, ^bb4856, ^bb4857, ^bb4858, ^bb4859
    %2584 = pdl_interp.get_operand 1 of %2
    %2585 = pdl_interp.get_defining_op of %2584 : !pdl.value
    pdl_interp.is_not_null %2585 : !pdl.operation -> ^bb4816, ^bb1
  ^bb4816:  // pred: ^bb4815
    %2586 = pdl_interp.get_defining_op of %2582 : !pdl.value
    pdl_interp.is_not_null %2586 : !pdl.operation -> ^bb4817, ^bb1
  ^bb4817:  // pred: ^bb4816
    pdl_interp.is_not_null %2584 : !pdl.value -> ^bb4818, ^bb1
  ^bb4818:  // pred: ^bb4817
    pdl_interp.check_operation_name of %2585 is "arith.constant" -> ^bb4819, ^bb1
  ^bb4819:  // pred: ^bb4818
    pdl_interp.check_operand_count of %2585 is 0 -> ^bb4820, ^bb1
  ^bb4820:  // pred: ^bb4819
    pdl_interp.check_result_count of %2585 is 1 -> ^bb4821, ^bb1
  ^bb4821:  // pred: ^bb4820
    %2587 = pdl_interp.get_result 0 of %2585
    pdl_interp.is_not_null %2587 : !pdl.value -> ^bb4822, ^bb1
  ^bb4822:  // pred: ^bb4821
    pdl_interp.are_equal %2587, %2584 : !pdl.value -> ^bb4823, ^bb1
  ^bb4823:  // pred: ^bb4822
    pdl_interp.check_operation_name of %2586 is "arith.addf" -> ^bb4824, ^bb1
  ^bb4824:  // pred: ^bb4823
    pdl_interp.check_operand_count of %2586 is 2 -> ^bb4825, ^bb1
  ^bb4825:  // pred: ^bb4824
    pdl_interp.check_result_count of %2586 is 1 -> ^bb4826, ^bb1
  ^bb4826:  // pred: ^bb4825
    %2588 = pdl_interp.get_result 0 of %2586
    pdl_interp.is_not_null %2588 : !pdl.value -> ^bb4827, ^bb1
  ^bb4827:  // pred: ^bb4826
    pdl_interp.are_equal %2588, %2582 : !pdl.value -> ^bb4828, ^bb1
  ^bb4828:  // pred: ^bb4827
    %2589 = pdl_interp.get_operand 0 of %2586
    pdl_interp.is_not_null %2589 : !pdl.value -> ^bb4829, ^bb1
  ^bb4829:  // pred: ^bb4828
    %2590 = pdl_interp.get_attribute "value" of %2585
    pdl_interp.is_not_null %2590 : !pdl.attribute -> ^bb4830, ^bb1
  ^bb4830:  // pred: ^bb4829
    pdl_interp.check_attribute %2590 is 2.000000e+00 : f32 -> ^bb4831, ^bb1
  ^bb4831:  // pred: ^bb4830
    %2591 = pdl_interp.get_defining_op of %2589 : !pdl.value
    pdl_interp.is_not_null %2591 : !pdl.operation -> ^bb4832, ^bb1
  ^bb4832:  // pred: ^bb4831
    %2592 = pdl_interp.get_operand 1 of %2586
    %2593 = pdl_interp.get_defining_op of %2592 : !pdl.value
    pdl_interp.is_not_null %2593 : !pdl.operation -> ^bb4833, ^bb1
  ^bb4833:  // pred: ^bb4832
    pdl_interp.is_not_null %2592 : !pdl.value -> ^bb4834, ^bb1
  ^bb4834:  // pred: ^bb4833
    pdl_interp.check_operation_name of %2591 is "math.cosh" -> ^bb4835, ^bb1
  ^bb4835:  // pred: ^bb4834
    pdl_interp.check_operand_count of %2591 is 1 -> ^bb4836, ^bb1
  ^bb4836:  // pred: ^bb4835
    pdl_interp.check_result_count of %2591 is 1 -> ^bb4837, ^bb1
  ^bb4837:  // pred: ^bb4836
    %2594 = pdl_interp.get_result 0 of %2591
    pdl_interp.is_not_null %2594 : !pdl.value -> ^bb4838, ^bb1
  ^bb4838:  // pred: ^bb4837
    pdl_interp.are_equal %2594, %2589 : !pdl.value -> ^bb4839, ^bb1
  ^bb4839:  // pred: ^bb4838
    pdl_interp.check_operation_name of %2593 is "arith.constant" -> ^bb4840, ^bb1
  ^bb4840:  // pred: ^bb4839
    pdl_interp.check_operand_count of %2593 is 0 -> ^bb4841, ^bb1
  ^bb4841:  // pred: ^bb4840
    pdl_interp.check_result_count of %2593 is 1 -> ^bb4842, ^bb1
  ^bb4842:  // pred: ^bb4841
    %2595 = pdl_interp.get_result 0 of %2593
    pdl_interp.is_not_null %2595 : !pdl.value -> ^bb4843, ^bb1
  ^bb4843:  // pred: ^bb4842
    pdl_interp.are_equal %2595, %2592 : !pdl.value -> ^bb4844, ^bb1
  ^bb4844:  // pred: ^bb4843
    %2596 = pdl_interp.get_operand 0 of %2591
    pdl_interp.is_not_null %2596 : !pdl.value -> ^bb4845, ^bb1
  ^bb4845:  // pred: ^bb4844
    %2597 = pdl_interp.get_value_type of %2596 : !pdl.type
    pdl_interp.check_type %2597 is f32 -> ^bb4846, ^bb1
  ^bb4846:  // pred: ^bb4845
    %2598 = pdl_interp.get_value_type of %2594 : !pdl.type
    pdl_interp.are_equal %2597, %2598 : !pdl.type -> ^bb4847, ^bb1
  ^bb4847:  // pred: ^bb4846
    %2599 = pdl_interp.get_value_type of %2588 : !pdl.type
    pdl_interp.are_equal %2597, %2599 : !pdl.type -> ^bb4848, ^bb1
  ^bb4848:  // pred: ^bb4847
    %2600 = pdl_interp.get_value_type of %2581 : !pdl.type
    pdl_interp.are_equal %2597, %2600 : !pdl.type -> ^bb4849, ^bb1
  ^bb4849:  // pred: ^bb4848
    %2601 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2597, %2601 : !pdl.type -> ^bb4850, ^bb1
  ^bb4850:  // pred: ^bb4849
    %2602 = pdl_interp.get_value_type of %2587 : !pdl.type
    pdl_interp.are_equal %2597, %2602 : !pdl.type -> ^bb4851, ^bb1
  ^bb4851:  // pred: ^bb4850
    %2603 = pdl_interp.get_attribute "value" of %2593
    pdl_interp.is_not_null %2603 : !pdl.attribute -> ^bb4852, ^bb1
  ^bb4852:  // pred: ^bb4851
    pdl_interp.check_attribute %2603 is 1.000000e+00 : f32 -> ^bb4853, ^bb1
  ^bb4853:  // pred: ^bb4852
    %2604 = pdl_interp.get_value_type of %2595 : !pdl.type
    pdl_interp.are_equal %2597, %2604 : !pdl.type -> ^bb4854, ^bb1
  ^bb4854:  // pred: ^bb4853
    pdl_interp.record_match @rewriters::@cosh_1div2_rev(%2596, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.cosh"]), loc([%arg0, %2, %2585, %2586, %2591, %2593]), root("math.sqrt") -> ^bb1
  ^bb4855:  // pred: ^bb4814
    %2605 = pdl_interp.get_value_type of %2581 : !pdl.type
    pdl_interp.are_equal %2583, %2605 : !pdl.type -> ^bb4856, ^bb4815
  ^bb4856:  // pred: ^bb4855
    %2606 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2583, %2606 : !pdl.type -> ^bb4857, ^bb4815
  ^bb4857:  // pred: ^bb4856
    %2607 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2607 : !pdl.value -> ^bb4858, ^bb4815
  ^bb4858:  // pred: ^bb4857
    %2608 = pdl_interp.get_value_type of %2607 : !pdl.type
    pdl_interp.are_equal %2583, %2608 : !pdl.type -> ^bb4859, ^bb4815
  ^bb4859:  // pred: ^bb4858
    pdl_interp.record_match @rewriters::@sqrt_div(%2582, %2607, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sqrt", "math.sqrt", "arith.divf"]), loc([%arg0, %2]), root("math.sqrt") -> ^bb4815
  ^bb4860:  // pred: ^bb4786
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4861, ^bb1
  ^bb4861:  // pred: ^bb4860
    pdl_interp.check_result_count of %2 is 1 -> ^bb4862, ^bb1
  ^bb4862:  // pred: ^bb4861
    %2609 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2609 : !pdl.value -> ^bb4863, ^bb1
  ^bb4863:  // pred: ^bb4862
    pdl_interp.are_equal %2609, %1 : !pdl.value -> ^bb4864, ^bb1
  ^bb4864:  // pred: ^bb4863
    %2610 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2610 : !pdl.value -> ^bb4865, ^bb1
  ^bb4865:  // pred: ^bb4864
    %2611 = pdl_interp.get_value_type of %2610 : !pdl.type
    pdl_interp.check_type %2611 is f32 -> ^bb4866, ^bb1
  ^bb4866:  // pred: ^bb4865
    %2612 = pdl_interp.get_value_type of %2609 : !pdl.type
    pdl_interp.are_equal %2611, %2612 : !pdl.type -> ^bb4867, ^bb1
  ^bb4867:  // pred: ^bb4866
    %2613 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2611, %2613 : !pdl.type -> ^bb4868, ^bb1
  ^bb4868:  // pred: ^bb4867
    pdl_interp.record_match @rewriters::@exp_sqrt_rev(%2610, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.exp"]), loc([%arg0, %2]), root("math.sqrt") -> ^bb1
  ^bb4869:  // pred: ^bb4786
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4870, ^bb1
  ^bb4870:  // pred: ^bb4869
    pdl_interp.check_result_count of %2 is 1 -> ^bb4871, ^bb1
  ^bb4871:  // pred: ^bb4870
    %2614 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2614 : !pdl.value -> ^bb4872, ^bb1
  ^bb4872:  // pred: ^bb4871
    pdl_interp.are_equal %2614, %1 : !pdl.value -> ^bb4873, ^bb1
  ^bb4873:  // pred: ^bb4872
    %2615 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2615 : !pdl.value -> ^bb4874, ^bb1
  ^bb4874:  // pred: ^bb4873
    %2616 = pdl_interp.get_operand 1 of %2
    %2617 = pdl_interp.get_defining_op of %2616 : !pdl.value
    pdl_interp.is_not_null %2617 : !pdl.operation -> ^bb4875, ^bb1
  ^bb4875:  // pred: ^bb4874
    %2618 = pdl_interp.get_defining_op of %2615 : !pdl.value
    pdl_interp.is_not_null %2618 : !pdl.operation -> ^bb4876, ^bb1
  ^bb4876:  // pred: ^bb4875
    pdl_interp.is_not_null %2616 : !pdl.value -> ^bb4877, ^bb1
  ^bb4877:  // pred: ^bb4876
    pdl_interp.switch_operation_name of %2617 to ["arith.mulf", "arith.constant"](^bb4878, ^bb4898) -> ^bb1
  ^bb4878:  // pred: ^bb4877
    pdl_interp.check_operand_count of %2617 is 2 -> ^bb4879, ^bb1
  ^bb4879:  // pred: ^bb4878
    pdl_interp.check_result_count of %2617 is 1 -> ^bb4880, ^bb1
  ^bb4880:  // pred: ^bb4879
    %2619 = pdl_interp.get_result 0 of %2617
    pdl_interp.is_not_null %2619 : !pdl.value -> ^bb4881, ^bb1
  ^bb4881:  // pred: ^bb4880
    pdl_interp.are_equal %2619, %2616 : !pdl.value -> ^bb4882, ^bb1
  ^bb4882:  // pred: ^bb4881
    pdl_interp.check_operation_name of %2618 is "arith.constant" -> ^bb4883, ^bb1
  ^bb4883:  // pred: ^bb4882
    pdl_interp.check_operand_count of %2618 is 0 -> ^bb4884, ^bb1
  ^bb4884:  // pred: ^bb4883
    pdl_interp.check_result_count of %2618 is 1 -> ^bb4885, ^bb1
  ^bb4885:  // pred: ^bb4884
    %2620 = pdl_interp.get_result 0 of %2618
    pdl_interp.is_not_null %2620 : !pdl.value -> ^bb4886, ^bb1
  ^bb4886:  // pred: ^bb4885
    pdl_interp.are_equal %2620, %2615 : !pdl.value -> ^bb4887, ^bb1
  ^bb4887:  // pred: ^bb4886
    %2621 = pdl_interp.get_operand 0 of %2617
    pdl_interp.is_not_null %2621 : !pdl.value -> ^bb4888, ^bb1
  ^bb4888:  // pred: ^bb4887
    %2622 = pdl_interp.get_attribute "value" of %2618
    pdl_interp.is_not_null %2622 : !pdl.attribute -> ^bb4889, ^bb1
  ^bb4889:  // pred: ^bb4888
    pdl_interp.check_attribute %2622 is 1.000000e+00 : f32 -> ^bb4890, ^bb1
  ^bb4890:  // pred: ^bb4889
    %2623 = pdl_interp.get_value_type of %2620 : !pdl.type
    pdl_interp.check_type %2623 is f32 -> ^bb4891, ^bb1
  ^bb4891:  // pred: ^bb4890
    %2624 = pdl_interp.get_value_type of %2614 : !pdl.type
    pdl_interp.are_equal %2623, %2624 : !pdl.type -> ^bb4892, ^bb1
  ^bb4892:  // pred: ^bb4891
    %2625 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2623, %2625 : !pdl.type -> ^bb4893, ^bb1
  ^bb4893:  // pred: ^bb4892
    %2626 = pdl_interp.get_value_type of %2619 : !pdl.type
    pdl_interp.are_equal %2623, %2626 : !pdl.type -> ^bb4894, ^bb1
  ^bb4894:  // pred: ^bb4893
    %2627 = pdl_interp.get_value_type of %2621 : !pdl.type
    pdl_interp.are_equal %2623, %2627 : !pdl.type -> ^bb4895, ^bb1
  ^bb4895:  // pred: ^bb4894
    %2628 = pdl_interp.get_operand 1 of %2617
    pdl_interp.are_equal %2621, %2628 : !pdl.value -> ^bb4896, ^bb1
  ^bb4896:  // pred: ^bb4895
    pdl_interp.record_match @rewriters::@sin_acos_rev(%2621, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.acos", "math.sin"]), loc([%arg0, %2, %2617, %2618]), root("math.sqrt") -> ^bb4897
  ^bb4897:  // pred: ^bb4896
    pdl_interp.record_match @rewriters::@cos_asin_rev(%2621, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.asin", "math.cos"]), loc([%arg0, %2, %2617, %2618]), root("math.sqrt") -> ^bb1
  ^bb4898:  // pred: ^bb4877
    pdl_interp.check_operand_count of %2617 is 0 -> ^bb4899, ^bb1
  ^bb4899:  // pred: ^bb4898
    pdl_interp.check_result_count of %2617 is 1 -> ^bb4900, ^bb1
  ^bb4900:  // pred: ^bb4899
    %2629 = pdl_interp.get_result 0 of %2617
    pdl_interp.is_not_null %2629 : !pdl.value -> ^bb4901, ^bb1
  ^bb4901:  // pred: ^bb4900
    pdl_interp.are_equal %2629, %2616 : !pdl.value -> ^bb4902, ^bb1
  ^bb4902:  // pred: ^bb4901
    pdl_interp.check_operation_name of %2618 is "arith.mulf" -> ^bb4903, ^bb1
  ^bb4903:  // pred: ^bb4902
    pdl_interp.check_operand_count of %2618 is 2 -> ^bb4904, ^bb1
  ^bb4904:  // pred: ^bb4903
    pdl_interp.check_result_count of %2618 is 1 -> ^bb4905, ^bb1
  ^bb4905:  // pred: ^bb4904
    %2630 = pdl_interp.get_result 0 of %2618
    pdl_interp.is_not_null %2630 : !pdl.value -> ^bb4906, ^bb1
  ^bb4906:  // pred: ^bb4905
    pdl_interp.are_equal %2630, %2615 : !pdl.value -> ^bb4907, ^bb1
  ^bb4907:  // pred: ^bb4906
    %2631 = pdl_interp.get_operand 0 of %2618
    pdl_interp.is_not_null %2631 : !pdl.value -> ^bb4908, ^bb1
  ^bb4908:  // pred: ^bb4907
    %2632 = pdl_interp.get_attribute "value" of %2617
    pdl_interp.is_not_null %2632 : !pdl.attribute -> ^bb4909, ^bb1
  ^bb4909:  // pred: ^bb4908
    pdl_interp.check_attribute %2632 is 1.000000e+00 : f32 -> ^bb4910, ^bb1
  ^bb4910:  // pred: ^bb4909
    %2633 = pdl_interp.get_value_type of %2631 : !pdl.type
    pdl_interp.check_type %2633 is f32 -> ^bb4911, ^bb1
  ^bb4911:  // pred: ^bb4910
    %2634 = pdl_interp.get_value_type of %2630 : !pdl.type
    pdl_interp.are_equal %2633, %2634 : !pdl.type -> ^bb4912, ^bb1
  ^bb4912:  // pred: ^bb4911
    %2635 = pdl_interp.get_value_type of %2614 : !pdl.type
    pdl_interp.are_equal %2633, %2635 : !pdl.type -> ^bb4913, ^bb1
  ^bb4913:  // pred: ^bb4912
    %2636 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2633, %2636 : !pdl.type -> ^bb4914, ^bb1
  ^bb4914:  // pred: ^bb4913
    %2637 = pdl_interp.get_value_type of %2629 : !pdl.type
    pdl_interp.are_equal %2633, %2637 : !pdl.type -> ^bb4915, ^bb1
  ^bb4915:  // pred: ^bb4914
    %2638 = pdl_interp.get_operand 1 of %2618
    pdl_interp.are_equal %2631, %2638 : !pdl.value -> ^bb4916, ^bb1
  ^bb4916:  // pred: ^bb4915
    pdl_interp.record_match @rewriters::@sinh_acosh_rev(%2631, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.acosh", "math.sinh"]), loc([%arg0, %2, %2617, %2618]), root("math.sqrt") -> ^bb1
  ^bb4917:  // pred: ^bb4786
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4918, ^bb1
  ^bb4918:  // pred: ^bb4917
    pdl_interp.check_result_count of %2 is 1 -> ^bb4919, ^bb1
  ^bb4919:  // pred: ^bb4918
    %2639 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2639 : !pdl.value -> ^bb4920, ^bb1
  ^bb4920:  // pred: ^bb4919
    pdl_interp.are_equal %2639, %1 : !pdl.value -> ^bb4921, ^bb1
  ^bb4921:  // pred: ^bb4920
    %2640 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2640 : !pdl.value -> ^bb4922, ^bb1
  ^bb4922:  // pred: ^bb4921
    %2641 = pdl_interp.get_operand 1 of %2
    %2642 = pdl_interp.get_defining_op of %2641 : !pdl.value
    pdl_interp.is_not_null %2642 : !pdl.operation -> ^bb4923, ^bb1
  ^bb4923:  // pred: ^bb4922
    %2643 = pdl_interp.get_defining_op of %2640 : !pdl.value
    pdl_interp.is_not_null %2643 : !pdl.operation -> ^bb4924, ^bb1
  ^bb4924:  // pred: ^bb4923
    pdl_interp.is_not_null %2641 : !pdl.value -> ^bb4925, ^bb1
  ^bb4925:  // pred: ^bb4924
    pdl_interp.check_operation_name of %2642 is "arith.constant" -> ^bb4926, ^bb1
  ^bb4926:  // pred: ^bb4925
    pdl_interp.check_operand_count of %2642 is 0 -> ^bb4927, ^bb1
  ^bb4927:  // pred: ^bb4926
    pdl_interp.check_result_count of %2642 is 1 -> ^bb4928, ^bb1
  ^bb4928:  // pred: ^bb4927
    %2644 = pdl_interp.get_result 0 of %2642
    pdl_interp.is_not_null %2644 : !pdl.value -> ^bb4929, ^bb1
  ^bb4929:  // pred: ^bb4928
    pdl_interp.are_equal %2644, %2641 : !pdl.value -> ^bb4930, ^bb1
  ^bb4930:  // pred: ^bb4929
    pdl_interp.check_operation_name of %2643 is "arith.mulf" -> ^bb4931, ^bb1
  ^bb4931:  // pred: ^bb4930
    pdl_interp.check_operand_count of %2643 is 2 -> ^bb4932, ^bb1
  ^bb4932:  // pred: ^bb4931
    pdl_interp.check_result_count of %2643 is 1 -> ^bb4933, ^bb1
  ^bb4933:  // pred: ^bb4932
    %2645 = pdl_interp.get_result 0 of %2643
    pdl_interp.is_not_null %2645 : !pdl.value -> ^bb4934, ^bb1
  ^bb4934:  // pred: ^bb4933
    pdl_interp.are_equal %2645, %2640 : !pdl.value -> ^bb4935, ^bb1
  ^bb4935:  // pred: ^bb4934
    %2646 = pdl_interp.get_operand 0 of %2643
    pdl_interp.is_not_null %2646 : !pdl.value -> ^bb4936, ^bb1
  ^bb4936:  // pred: ^bb4935
    %2647 = pdl_interp.get_attribute "value" of %2642
    pdl_interp.is_not_null %2647 : !pdl.attribute -> ^bb4937, ^bb1
  ^bb4937:  // pred: ^bb4936
    pdl_interp.check_attribute %2647 is 1.000000e+00 : f32 -> ^bb4938, ^bb1
  ^bb4938:  // pred: ^bb4937
    %2648 = pdl_interp.get_value_type of %2646 : !pdl.type
    pdl_interp.check_type %2648 is f32 -> ^bb4939, ^bb1
  ^bb4939:  // pred: ^bb4938
    %2649 = pdl_interp.get_value_type of %2645 : !pdl.type
    pdl_interp.are_equal %2648, %2649 : !pdl.type -> ^bb4940, ^bb1
  ^bb4940:  // pred: ^bb4939
    %2650 = pdl_interp.get_value_type of %2639 : !pdl.type
    pdl_interp.are_equal %2648, %2650 : !pdl.type -> ^bb4941, ^bb1
  ^bb4941:  // pred: ^bb4940
    %2651 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2648, %2651 : !pdl.type -> ^bb4942, ^bb1
  ^bb4942:  // pred: ^bb4941
    %2652 = pdl_interp.get_value_type of %2644 : !pdl.type
    pdl_interp.are_equal %2648, %2652 : !pdl.type -> ^bb4943, ^bb1
  ^bb4943:  // pred: ^bb4942
    %2653 = pdl_interp.get_operand 1 of %2643
    pdl_interp.are_equal %2646, %2653 : !pdl.value -> ^bb4944, ^bb1
  ^bb4944:  // pred: ^bb4943
    pdl_interp.record_match @rewriters::@cosh_asinh_rev(%2646, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.asinh", "math.cosh"]), loc([%arg0, %2, %2642, %2643]), root("math.sqrt") -> ^bb1
  ^bb4945:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb4946, ^bb1
  ^bb4946:  // pred: ^bb4945
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb4947, ^bb1
  ^bb4947:  // pred: ^bb4946
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb4948, ^bb1
  ^bb4948:  // pred: ^bb4947
    pdl_interp.switch_operation_name of %2 to ["math.sqrt", "math.powf", "arith.mulf", "arith.divf", "arith.negf", "math.absf", "math.exp"](^bb4949, ^bb4958, ^bb4980, ^bb4991, ^bb5002, ^bb5011, ^bb5020) -> ^bb1
  ^bb4949:  // pred: ^bb4948
    pdl_interp.check_operand_count of %2 is 1 -> ^bb4950, ^bb1
  ^bb4950:  // pred: ^bb4949
    pdl_interp.check_result_count of %2 is 1 -> ^bb4951, ^bb1
  ^bb4951:  // pred: ^bb4950
    %2654 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2654 : !pdl.value -> ^bb4952, ^bb1
  ^bb4952:  // pred: ^bb4951
    pdl_interp.are_equal %2654, %1 : !pdl.value -> ^bb4953, ^bb1
  ^bb4953:  // pred: ^bb4952
    %2655 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2655 : !pdl.value -> ^bb4954, ^bb1
  ^bb4954:  // pred: ^bb4953
    %2656 = pdl_interp.get_value_type of %2655 : !pdl.type
    pdl_interp.check_type %2656 is f32 -> ^bb4955, ^bb1
  ^bb4955:  // pred: ^bb4954
    %2657 = pdl_interp.get_value_type of %2654 : !pdl.type
    pdl_interp.are_equal %2656, %2657 : !pdl.type -> ^bb4956, ^bb1
  ^bb4956:  // pred: ^bb4955
    %2658 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2656, %2658 : !pdl.type -> ^bb4957, ^bb1
  ^bb4957:  // pred: ^bb4956
    pdl_interp.record_match @rewriters::@cbrt_sqrt(%2655, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cbrt", "math.sqrt"]), loc([%arg0, %2]), root("math.cbrt") -> ^bb1
  ^bb4958:  // pred: ^bb4948
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4959, ^bb1
  ^bb4959:  // pred: ^bb4958
    pdl_interp.check_result_count of %2 is 1 -> ^bb4960, ^bb1
  ^bb4960:  // pred: ^bb4959
    %2659 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2659 : !pdl.value -> ^bb4961, ^bb1
  ^bb4961:  // pred: ^bb4960
    pdl_interp.are_equal %2659, %1 : !pdl.value -> ^bb4962, ^bb1
  ^bb4962:  // pred: ^bb4961
    %2660 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2660 : !pdl.value -> ^bb4963, ^bb1
  ^bb4963:  // pred: ^bb4962
    %2661 = pdl_interp.get_value_type of %2660 : !pdl.type
    pdl_interp.check_type %2661 is f32 -> ^bb4964, ^bb1
  ^bb4964:  // pred: ^bb4963
    %2662 = pdl_interp.get_value_type of %2659 : !pdl.type
    pdl_interp.are_equal %2661, %2662 : !pdl.type -> ^bb4965, ^bb1
  ^bb4965:  // pred: ^bb4964
    %2663 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2661, %2663 : !pdl.type -> ^bb4966, ^bb1
  ^bb4966:  // pred: ^bb4965
    %2664 = pdl_interp.get_operand 1 of %2
    %2665 = pdl_interp.get_defining_op of %2664 : !pdl.value
    pdl_interp.is_not_null %2665 : !pdl.operation -> ^bb4970, ^bb4967
  ^bb4967:  // 11 preds: ^bb4966, ^bb4970, ^bb4971, ^bb4972, ^bb4973, ^bb4974, ^bb4975, ^bb4976, ^bb4977, ^bb4978, ^bb4979
    %2666 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2666 : !pdl.value -> ^bb4968, ^bb1
  ^bb4968:  // pred: ^bb4967
    %2667 = pdl_interp.get_value_type of %2666 : !pdl.type
    pdl_interp.are_equal %2661, %2667 : !pdl.type -> ^bb4969, ^bb1
  ^bb4969:  // pred: ^bb4968
    pdl_interp.record_match @rewriters::@cbrt_pow(%2666, %2660, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.powf"]), loc([%arg0, %2]), root("math.cbrt") -> ^bb1
  ^bb4970:  // pred: ^bb4966
    pdl_interp.is_not_null %2664 : !pdl.value -> ^bb4971, ^bb4967
  ^bb4971:  // pred: ^bb4970
    pdl_interp.check_operation_name of %2665 is "arith.constant" -> ^bb4972, ^bb4967
  ^bb4972:  // pred: ^bb4971
    pdl_interp.check_operand_count of %2665 is 0 -> ^bb4973, ^bb4967
  ^bb4973:  // pred: ^bb4972
    pdl_interp.check_result_count of %2665 is 1 -> ^bb4974, ^bb4967
  ^bb4974:  // pred: ^bb4973
    %2668 = pdl_interp.get_result 0 of %2665
    pdl_interp.is_not_null %2668 : !pdl.value -> ^bb4975, ^bb4967
  ^bb4975:  // pred: ^bb4974
    pdl_interp.are_equal %2668, %2664 : !pdl.value -> ^bb4976, ^bb4967
  ^bb4976:  // pred: ^bb4975
    %2669 = pdl_interp.get_attribute "value" of %2665
    pdl_interp.is_not_null %2669 : !pdl.attribute -> ^bb4977, ^bb4967
  ^bb4977:  // pred: ^bb4976
    pdl_interp.check_attribute %2669 is 3.000000e+00 : f32 -> ^bb4978, ^bb4967
  ^bb4978:  // pred: ^bb4977
    %2670 = pdl_interp.get_value_type of %2668 : !pdl.type
    pdl_interp.are_equal %2670, %2661 : !pdl.type -> ^bb4979, ^bb4967
  ^bb4979:  // pred: ^bb4978
    pdl_interp.record_match @rewriters::@rem_cbrt_cube(%2660, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2, %2665]), root("math.cbrt") -> ^bb4967
  ^bb4980:  // pred: ^bb4948
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4981, ^bb1
  ^bb4981:  // pred: ^bb4980
    pdl_interp.check_result_count of %2 is 1 -> ^bb4982, ^bb1
  ^bb4982:  // pred: ^bb4981
    %2671 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2671 : !pdl.value -> ^bb4983, ^bb1
  ^bb4983:  // pred: ^bb4982
    pdl_interp.are_equal %2671, %1 : !pdl.value -> ^bb4984, ^bb1
  ^bb4984:  // pred: ^bb4983
    %2672 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2672 : !pdl.value -> ^bb4985, ^bb1
  ^bb4985:  // pred: ^bb4984
    %2673 = pdl_interp.get_value_type of %2672 : !pdl.type
    pdl_interp.check_type %2673 is f32 -> ^bb4986, ^bb1
  ^bb4986:  // pred: ^bb4985
    %2674 = pdl_interp.get_value_type of %2671 : !pdl.type
    pdl_interp.are_equal %2673, %2674 : !pdl.type -> ^bb4987, ^bb1
  ^bb4987:  // pred: ^bb4986
    %2675 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2673, %2675 : !pdl.type -> ^bb4988, ^bb1
  ^bb4988:  // pred: ^bb4987
    %2676 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2676 : !pdl.value -> ^bb4989, ^bb1
  ^bb4989:  // pred: ^bb4988
    %2677 = pdl_interp.get_value_type of %2676 : !pdl.type
    pdl_interp.are_equal %2673, %2677 : !pdl.type -> ^bb4990, ^bb1
  ^bb4990:  // pred: ^bb4989
    pdl_interp.record_match @rewriters::@cbrt_prod(%2672, %2676, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cbrt", "math.cbrt", "arith.mulf"]), loc([%arg0, %2]), root("math.cbrt") -> ^bb1
  ^bb4991:  // pred: ^bb4948
    pdl_interp.check_operand_count of %2 is 2 -> ^bb4992, ^bb1
  ^bb4992:  // pred: ^bb4991
    pdl_interp.check_result_count of %2 is 1 -> ^bb4993, ^bb1
  ^bb4993:  // pred: ^bb4992
    %2678 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2678 : !pdl.value -> ^bb4994, ^bb1
  ^bb4994:  // pred: ^bb4993
    pdl_interp.are_equal %2678, %1 : !pdl.value -> ^bb4995, ^bb1
  ^bb4995:  // pred: ^bb4994
    %2679 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2679 : !pdl.value -> ^bb4996, ^bb1
  ^bb4996:  // pred: ^bb4995
    %2680 = pdl_interp.get_value_type of %2679 : !pdl.type
    pdl_interp.check_type %2680 is f32 -> ^bb4997, ^bb1
  ^bb4997:  // pred: ^bb4996
    %2681 = pdl_interp.get_value_type of %2678 : !pdl.type
    pdl_interp.are_equal %2680, %2681 : !pdl.type -> ^bb4998, ^bb1
  ^bb4998:  // pred: ^bb4997
    %2682 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2680, %2682 : !pdl.type -> ^bb4999, ^bb1
  ^bb4999:  // pred: ^bb4998
    %2683 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2683 : !pdl.value -> ^bb5000, ^bb1
  ^bb5000:  // pred: ^bb4999
    %2684 = pdl_interp.get_value_type of %2683 : !pdl.type
    pdl_interp.are_equal %2680, %2684 : !pdl.type -> ^bb5001, ^bb1
  ^bb5001:  // pred: ^bb5000
    pdl_interp.record_match @rewriters::@cbrt_div(%2679, %2683, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cbrt", "math.cbrt", "arith.divf"]), loc([%arg0, %2]), root("math.cbrt") -> ^bb1
  ^bb5002:  // pred: ^bb4948
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5003, ^bb1
  ^bb5003:  // pred: ^bb5002
    pdl_interp.check_result_count of %2 is 1 -> ^bb5004, ^bb1
  ^bb5004:  // pred: ^bb5003
    %2685 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2685 : !pdl.value -> ^bb5005, ^bb1
  ^bb5005:  // pred: ^bb5004
    pdl_interp.are_equal %2685, %1 : !pdl.value -> ^bb5006, ^bb1
  ^bb5006:  // pred: ^bb5005
    %2686 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2686 : !pdl.value -> ^bb5007, ^bb1
  ^bb5007:  // pred: ^bb5006
    %2687 = pdl_interp.get_value_type of %2686 : !pdl.type
    pdl_interp.check_type %2687 is f32 -> ^bb5008, ^bb1
  ^bb5008:  // pred: ^bb5007
    %2688 = pdl_interp.get_value_type of %2685 : !pdl.type
    pdl_interp.are_equal %2687, %2688 : !pdl.type -> ^bb5009, ^bb1
  ^bb5009:  // pred: ^bb5008
    %2689 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2687, %2689 : !pdl.type -> ^bb5010, ^bb1
  ^bb5010:  // pred: ^bb5009
    pdl_interp.record_match @rewriters::@cbrt_neg(%2686, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cbrt", "arith.negf"]), loc([%arg0, %2]), root("math.cbrt") -> ^bb1
  ^bb5011:  // pred: ^bb4948
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5012, ^bb1
  ^bb5012:  // pred: ^bb5011
    pdl_interp.check_result_count of %2 is 1 -> ^bb5013, ^bb1
  ^bb5013:  // pred: ^bb5012
    %2690 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2690 : !pdl.value -> ^bb5014, ^bb1
  ^bb5014:  // pred: ^bb5013
    pdl_interp.are_equal %2690, %1 : !pdl.value -> ^bb5015, ^bb1
  ^bb5015:  // pred: ^bb5014
    %2691 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2691 : !pdl.value -> ^bb5016, ^bb1
  ^bb5016:  // pred: ^bb5015
    %2692 = pdl_interp.get_value_type of %2691 : !pdl.type
    pdl_interp.check_type %2692 is f32 -> ^bb5017, ^bb1
  ^bb5017:  // pred: ^bb5016
    %2693 = pdl_interp.get_value_type of %2690 : !pdl.type
    pdl_interp.are_equal %2692, %2693 : !pdl.type -> ^bb5018, ^bb1
  ^bb5018:  // pred: ^bb5017
    %2694 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2692, %2694 : !pdl.type -> ^bb5019, ^bb1
  ^bb5019:  // pred: ^bb5018
    pdl_interp.record_match @rewriters::@cbrt_fabs(%2691, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cbrt", "math.absf"]), loc([%arg0, %2]), root("math.cbrt") -> ^bb1
  ^bb5020:  // pred: ^bb4948
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5021, ^bb1
  ^bb5021:  // pred: ^bb5020
    pdl_interp.check_result_count of %2 is 1 -> ^bb5022, ^bb1
  ^bb5022:  // pred: ^bb5021
    %2695 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2695 : !pdl.value -> ^bb5023, ^bb1
  ^bb5023:  // pred: ^bb5022
    pdl_interp.are_equal %2695, %1 : !pdl.value -> ^bb5024, ^bb1
  ^bb5024:  // pred: ^bb5023
    %2696 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2696 : !pdl.value -> ^bb5025, ^bb1
  ^bb5025:  // pred: ^bb5024
    %2697 = pdl_interp.get_value_type of %2696 : !pdl.type
    pdl_interp.check_type %2697 is f32 -> ^bb5026, ^bb1
  ^bb5026:  // pred: ^bb5025
    %2698 = pdl_interp.get_value_type of %2695 : !pdl.type
    pdl_interp.are_equal %2697, %2698 : !pdl.type -> ^bb5027, ^bb1
  ^bb5027:  // pred: ^bb5026
    %2699 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2697, %2699 : !pdl.type -> ^bb5028, ^bb1
  ^bb5028:  // pred: ^bb5027
    pdl_interp.record_match @rewriters::@exp_cbrt_rev(%2696, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.exp"]), loc([%arg0, %2]), root("math.cbrt") -> ^bb1
  ^bb5029:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb5030, ^bb1
  ^bb5030:  // pred: ^bb5029
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb5031, ^bb1
  ^bb5031:  // pred: ^bb5030
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb5032, ^bb1
  ^bb5032:  // pred: ^bb5031
    pdl_interp.switch_operation_name of %2 to ["math.absf", "arith.subf", "arith.addf", "arith.negf", "arith.mulf", "arith.divf", "math.sqrt", "math.cbrt", "math.exp", "arith.remf"](^bb5033, ^bb5042, ^bb5053, ^bb5080, ^bb5089, ^bb5102, ^bb5126, ^bb5135, ^bb5144, ^bb5153) -> ^bb1
  ^bb5033:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5034, ^bb1
  ^bb5034:  // pred: ^bb5033
    pdl_interp.check_result_count of %2 is 1 -> ^bb5035, ^bb1
  ^bb5035:  // pred: ^bb5034
    %2700 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2700 : !pdl.value -> ^bb5036, ^bb1
  ^bb5036:  // pred: ^bb5035
    pdl_interp.are_equal %2700, %1 : !pdl.value -> ^bb5037, ^bb1
  ^bb5037:  // pred: ^bb5036
    %2701 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2701 : !pdl.value -> ^bb5038, ^bb1
  ^bb5038:  // pred: ^bb5037
    %2702 = pdl_interp.get_value_type of %2701 : !pdl.type
    pdl_interp.check_type %2702 is f32 -> ^bb5039, ^bb1
  ^bb5039:  // pred: ^bb5038
    %2703 = pdl_interp.get_value_type of %2700 : !pdl.type
    pdl_interp.are_equal %2702, %2703 : !pdl.type -> ^bb5040, ^bb1
  ^bb5040:  // pred: ^bb5039
    %2704 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2702, %2704 : !pdl.type -> ^bb5041, ^bb1
  ^bb5041:  // pred: ^bb5040
    pdl_interp.record_match @rewriters::@fabs_fabs(%2701, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.absf"]), loc([%arg0, %2]), root("math.absf") -> ^bb1
  ^bb5042:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5043, ^bb1
  ^bb5043:  // pred: ^bb5042
    pdl_interp.check_result_count of %2 is 1 -> ^bb5044, ^bb1
  ^bb5044:  // pred: ^bb5043
    %2705 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2705 : !pdl.value -> ^bb5045, ^bb1
  ^bb5045:  // pred: ^bb5044
    pdl_interp.are_equal %2705, %1 : !pdl.value -> ^bb5046, ^bb1
  ^bb5046:  // pred: ^bb5045
    %2706 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2706 : !pdl.value -> ^bb5047, ^bb1
  ^bb5047:  // pred: ^bb5046
    %2707 = pdl_interp.get_value_type of %2706 : !pdl.type
    pdl_interp.check_type %2707 is f32 -> ^bb5048, ^bb1
  ^bb5048:  // pred: ^bb5047
    %2708 = pdl_interp.get_value_type of %2705 : !pdl.type
    pdl_interp.are_equal %2707, %2708 : !pdl.type -> ^bb5049, ^bb1
  ^bb5049:  // pred: ^bb5048
    %2709 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2707, %2709 : !pdl.type -> ^bb5050, ^bb1
  ^bb5050:  // pred: ^bb5049
    %2710 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2710 : !pdl.value -> ^bb5051, ^bb1
  ^bb5051:  // pred: ^bb5050
    %2711 = pdl_interp.get_value_type of %2710 : !pdl.type
    pdl_interp.are_equal %2707, %2711 : !pdl.type -> ^bb5052, ^bb1
  ^bb5052:  // pred: ^bb5051
    pdl_interp.record_match @rewriters::@fabs_sub(%2710, %2706, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "math.absf"]), loc([%arg0, %2]), root("math.absf") -> ^bb1
  ^bb5053:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5054, ^bb1
  ^bb5054:  // pred: ^bb5053
    pdl_interp.check_result_count of %2 is 1 -> ^bb5055, ^bb1
  ^bb5055:  // pred: ^bb5054
    %2712 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2712 : !pdl.value -> ^bb5056, ^bb1
  ^bb5056:  // pred: ^bb5055
    pdl_interp.are_equal %2712, %1 : !pdl.value -> ^bb5057, ^bb1
  ^bb5057:  // pred: ^bb5056
    %2713 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2713 : !pdl.value -> ^bb5058, ^bb1
  ^bb5058:  // pred: ^bb5057
    %2714 = pdl_interp.get_operand 1 of %2
    %2715 = pdl_interp.get_defining_op of %2714 : !pdl.value
    pdl_interp.is_not_null %2715 : !pdl.operation -> ^bb5059, ^bb1
  ^bb5059:  // pred: ^bb5058
    %2716 = pdl_interp.get_defining_op of %2713 : !pdl.value
    pdl_interp.is_not_null %2716 : !pdl.operation -> ^bb5060, ^bb1
  ^bb5060:  // pred: ^bb5059
    pdl_interp.is_not_null %2714 : !pdl.value -> ^bb5061, ^bb1
  ^bb5061:  // pred: ^bb5060
    pdl_interp.check_operation_name of %2715 is "math.absf" -> ^bb5062, ^bb1
  ^bb5062:  // pred: ^bb5061
    pdl_interp.check_operand_count of %2715 is 1 -> ^bb5063, ^bb1
  ^bb5063:  // pred: ^bb5062
    pdl_interp.check_result_count of %2715 is 1 -> ^bb5064, ^bb1
  ^bb5064:  // pred: ^bb5063
    %2717 = pdl_interp.get_result 0 of %2715
    pdl_interp.is_not_null %2717 : !pdl.value -> ^bb5065, ^bb1
  ^bb5065:  // pred: ^bb5064
    pdl_interp.are_equal %2717, %2714 : !pdl.value -> ^bb5066, ^bb1
  ^bb5066:  // pred: ^bb5065
    pdl_interp.check_operation_name of %2716 is "math.absf" -> ^bb5067, ^bb1
  ^bb5067:  // pred: ^bb5066
    pdl_interp.check_operand_count of %2716 is 1 -> ^bb5068, ^bb1
  ^bb5068:  // pred: ^bb5067
    pdl_interp.check_result_count of %2716 is 1 -> ^bb5069, ^bb1
  ^bb5069:  // pred: ^bb5068
    %2718 = pdl_interp.get_result 0 of %2716
    pdl_interp.is_not_null %2718 : !pdl.value -> ^bb5070, ^bb1
  ^bb5070:  // pred: ^bb5069
    pdl_interp.are_equal %2718, %2713 : !pdl.value -> ^bb5071, ^bb1
  ^bb5071:  // pred: ^bb5070
    %2719 = pdl_interp.get_operand 0 of %2716
    pdl_interp.is_not_null %2719 : !pdl.value -> ^bb5072, ^bb1
  ^bb5072:  // pred: ^bb5071
    %2720 = pdl_interp.get_value_type of %2719 : !pdl.type
    pdl_interp.check_type %2720 is f32 -> ^bb5073, ^bb1
  ^bb5073:  // pred: ^bb5072
    %2721 = pdl_interp.get_value_type of %2718 : !pdl.type
    pdl_interp.are_equal %2720, %2721 : !pdl.type -> ^bb5074, ^bb1
  ^bb5074:  // pred: ^bb5073
    %2722 = pdl_interp.get_value_type of %2712 : !pdl.type
    pdl_interp.are_equal %2720, %2722 : !pdl.type -> ^bb5075, ^bb1
  ^bb5075:  // pred: ^bb5074
    %2723 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2720, %2723 : !pdl.type -> ^bb5076, ^bb1
  ^bb5076:  // pred: ^bb5075
    %2724 = pdl_interp.get_operand 0 of %2715
    pdl_interp.is_not_null %2724 : !pdl.value -> ^bb5077, ^bb1
  ^bb5077:  // pred: ^bb5076
    %2725 = pdl_interp.get_value_type of %2717 : !pdl.type
    pdl_interp.are_equal %2720, %2725 : !pdl.type -> ^bb5078, ^bb1
  ^bb5078:  // pred: ^bb5077
    %2726 = pdl_interp.get_value_type of %2724 : !pdl.type
    pdl_interp.are_equal %2720, %2726 : !pdl.type -> ^bb5079, ^bb1
  ^bb5079:  // pred: ^bb5078
    pdl_interp.record_match @rewriters::@fabs_add(%2719, %2724, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.absf", "math.absf", "arith.addf"]), loc([%arg0, %2, %2715, %2716]), root("math.absf") -> ^bb1
  ^bb5080:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5081, ^bb1
  ^bb5081:  // pred: ^bb5080
    pdl_interp.check_result_count of %2 is 1 -> ^bb5082, ^bb1
  ^bb5082:  // pred: ^bb5081
    %2727 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2727 : !pdl.value -> ^bb5083, ^bb1
  ^bb5083:  // pred: ^bb5082
    pdl_interp.are_equal %2727, %1 : !pdl.value -> ^bb5084, ^bb1
  ^bb5084:  // pred: ^bb5083
    %2728 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2728 : !pdl.value -> ^bb5085, ^bb1
  ^bb5085:  // pred: ^bb5084
    %2729 = pdl_interp.get_value_type of %2728 : !pdl.type
    pdl_interp.check_type %2729 is f32 -> ^bb5086, ^bb1
  ^bb5086:  // pred: ^bb5085
    %2730 = pdl_interp.get_value_type of %2727 : !pdl.type
    pdl_interp.are_equal %2729, %2730 : !pdl.type -> ^bb5087, ^bb1
  ^bb5087:  // pred: ^bb5086
    %2731 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2729, %2731 : !pdl.type -> ^bb5088, ^bb1
  ^bb5088:  // pred: ^bb5087
    pdl_interp.record_match @rewriters::@fabs_neg(%2728, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.absf"]), loc([%arg0, %2]), root("math.absf") -> ^bb1
  ^bb5089:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5090, ^bb1
  ^bb5090:  // pred: ^bb5089
    pdl_interp.check_result_count of %2 is 1 -> ^bb5091, ^bb1
  ^bb5091:  // pred: ^bb5090
    %2732 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2732 : !pdl.value -> ^bb5092, ^bb1
  ^bb5092:  // pred: ^bb5091
    pdl_interp.are_equal %2732, %1 : !pdl.value -> ^bb5093, ^bb1
  ^bb5093:  // pred: ^bb5092
    %2733 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2733 : !pdl.value -> ^bb5094, ^bb1
  ^bb5094:  // pred: ^bb5093
    %2734 = pdl_interp.get_value_type of %2733 : !pdl.type
    pdl_interp.check_type %2734 is f32 -> ^bb5095, ^bb1
  ^bb5095:  // pred: ^bb5094
    %2735 = pdl_interp.get_value_type of %2732 : !pdl.type
    pdl_interp.are_equal %2734, %2735 : !pdl.type -> ^bb5096, ^bb1
  ^bb5096:  // pred: ^bb5095
    %2736 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2734, %2736 : !pdl.type -> ^bb5097, ^bb1
  ^bb5097:  // pred: ^bb5096
    %2737 = pdl_interp.get_operand 1 of %2
    pdl_interp.are_equal %2733, %2737 : !pdl.value -> ^bb5101, ^bb5098
  ^bb5098:  // 2 preds: ^bb5097, ^bb5101
    %2738 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2738 : !pdl.value -> ^bb5099, ^bb1
  ^bb5099:  // pred: ^bb5098
    %2739 = pdl_interp.get_value_type of %2738 : !pdl.type
    pdl_interp.are_equal %2734, %2739 : !pdl.type -> ^bb5100, ^bb1
  ^bb5100:  // pred: ^bb5099
    pdl_interp.record_match @rewriters::@fabs_mul(%2733, %2738, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.absf", "math.absf", "arith.mulf"]), loc([%arg0, %2]), root("math.absf") -> ^bb1
  ^bb5101:  // pred: ^bb5097
    pdl_interp.record_match @rewriters::@fabs_sqr(%2733, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf"]), loc([%arg0, %2]), root("math.absf") -> ^bb5098
  ^bb5102:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5103, ^bb1
  ^bb5103:  // pred: ^bb5102
    pdl_interp.check_result_count of %2 is 1 -> ^bb5104, ^bb1
  ^bb5104:  // pred: ^bb5103
    %2740 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2740 : !pdl.value -> ^bb5105, ^bb1
  ^bb5105:  // pred: ^bb5104
    pdl_interp.are_equal %2740, %1 : !pdl.value -> ^bb5106, ^bb1
  ^bb5106:  // pred: ^bb5105
    %2741 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2741 : !pdl.value -> ^bb5107, ^bb1
  ^bb5107:  // pred: ^bb5106
    %2742 = pdl_interp.get_value_type of %2741 : !pdl.type
    pdl_interp.check_type %2742 is f32 -> ^bb5121, ^bb5108
  ^bb5108:  // 6 preds: ^bb5107, ^bb5121, ^bb5122, ^bb5123, ^bb5124, ^bb5125
    %2743 = pdl_interp.get_defining_op of %2741 : !pdl.value
    pdl_interp.is_not_null %2743 : !pdl.operation -> ^bb5109, ^bb1
  ^bb5109:  // pred: ^bb5108
    pdl_interp.check_operation_name of %2743 is "math.cbrt" -> ^bb5110, ^bb1
  ^bb5110:  // pred: ^bb5109
    pdl_interp.check_operand_count of %2743 is 1 -> ^bb5111, ^bb1
  ^bb5111:  // pred: ^bb5110
    pdl_interp.check_result_count of %2743 is 1 -> ^bb5112, ^bb1
  ^bb5112:  // pred: ^bb5111
    %2744 = pdl_interp.get_result 0 of %2743
    pdl_interp.is_not_null %2744 : !pdl.value -> ^bb5113, ^bb1
  ^bb5113:  // pred: ^bb5112
    pdl_interp.are_equal %2744, %2741 : !pdl.value -> ^bb5114, ^bb1
  ^bb5114:  // pred: ^bb5113
    %2745 = pdl_interp.get_operand 0 of %2743
    pdl_interp.is_not_null %2745 : !pdl.value -> ^bb5115, ^bb1
  ^bb5115:  // pred: ^bb5114
    %2746 = pdl_interp.get_value_type of %2745 : !pdl.type
    pdl_interp.check_type %2746 is f32 -> ^bb5116, ^bb1
  ^bb5116:  // pred: ^bb5115
    %2747 = pdl_interp.get_value_type of %2744 : !pdl.type
    pdl_interp.are_equal %2746, %2747 : !pdl.type -> ^bb5117, ^bb1
  ^bb5117:  // pred: ^bb5116
    %2748 = pdl_interp.get_value_type of %2740 : !pdl.type
    pdl_interp.are_equal %2746, %2748 : !pdl.type -> ^bb5118, ^bb1
  ^bb5118:  // pred: ^bb5117
    %2749 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2746, %2749 : !pdl.type -> ^bb5119, ^bb1
  ^bb5119:  // pred: ^bb5118
    %2750 = pdl_interp.get_operand 1 of %2
    pdl_interp.are_equal %2745, %2750 : !pdl.value -> ^bb5120, ^bb1
  ^bb5120:  // pred: ^bb5119
    pdl_interp.record_match @rewriters::@fabs_cbrt(%2745, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cbrt", "arith.divf"]), loc([%arg0, %2, %2743]), root("math.absf") -> ^bb1
  ^bb5121:  // pred: ^bb5107
    %2751 = pdl_interp.get_value_type of %2740 : !pdl.type
    pdl_interp.are_equal %2742, %2751 : !pdl.type -> ^bb5122, ^bb5108
  ^bb5122:  // pred: ^bb5121
    %2752 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2742, %2752 : !pdl.type -> ^bb5123, ^bb5108
  ^bb5123:  // pred: ^bb5122
    %2753 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2753 : !pdl.value -> ^bb5124, ^bb5108
  ^bb5124:  // pred: ^bb5123
    %2754 = pdl_interp.get_value_type of %2753 : !pdl.type
    pdl_interp.are_equal %2742, %2754 : !pdl.type -> ^bb5125, ^bb5108
  ^bb5125:  // pred: ^bb5124
    pdl_interp.record_match @rewriters::@fabs_div(%2741, %2753, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.absf", "math.absf", "arith.divf"]), loc([%arg0, %2]), root("math.absf") -> ^bb5108
  ^bb5126:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5127, ^bb1
  ^bb5127:  // pred: ^bb5126
    pdl_interp.check_result_count of %2 is 1 -> ^bb5128, ^bb1
  ^bb5128:  // pred: ^bb5127
    %2755 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2755 : !pdl.value -> ^bb5129, ^bb1
  ^bb5129:  // pred: ^bb5128
    pdl_interp.are_equal %2755, %1 : !pdl.value -> ^bb5130, ^bb1
  ^bb5130:  // pred: ^bb5129
    %2756 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2756 : !pdl.value -> ^bb5131, ^bb1
  ^bb5131:  // pred: ^bb5130
    %2757 = pdl_interp.get_value_type of %2756 : !pdl.type
    pdl_interp.check_type %2757 is f32 -> ^bb5132, ^bb1
  ^bb5132:  // pred: ^bb5131
    %2758 = pdl_interp.get_value_type of %2755 : !pdl.type
    pdl_interp.are_equal %2757, %2758 : !pdl.type -> ^bb5133, ^bb1
  ^bb5133:  // pred: ^bb5132
    %2759 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2757, %2759 : !pdl.type -> ^bb5134, ^bb1
  ^bb5134:  // pred: ^bb5133
    pdl_interp.record_match @rewriters::@sqrt_fabs(%2756, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sqrt"]), loc([%arg0, %2]), root("math.absf") -> ^bb1
  ^bb5135:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5136, ^bb1
  ^bb5136:  // pred: ^bb5135
    pdl_interp.check_result_count of %2 is 1 -> ^bb5137, ^bb1
  ^bb5137:  // pred: ^bb5136
    %2760 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2760 : !pdl.value -> ^bb5138, ^bb1
  ^bb5138:  // pred: ^bb5137
    pdl_interp.are_equal %2760, %1 : !pdl.value -> ^bb5139, ^bb1
  ^bb5139:  // pred: ^bb5138
    %2761 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2761 : !pdl.value -> ^bb5140, ^bb1
  ^bb5140:  // pred: ^bb5139
    %2762 = pdl_interp.get_value_type of %2761 : !pdl.type
    pdl_interp.check_type %2762 is f32 -> ^bb5141, ^bb1
  ^bb5141:  // pred: ^bb5140
    %2763 = pdl_interp.get_value_type of %2760 : !pdl.type
    pdl_interp.are_equal %2762, %2763 : !pdl.type -> ^bb5142, ^bb1
  ^bb5142:  // pred: ^bb5141
    %2764 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2762, %2764 : !pdl.type -> ^bb5143, ^bb1
  ^bb5143:  // pred: ^bb5142
    pdl_interp.record_match @rewriters::@cbrt_fabs_rev(%2761, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.absf", "math.cbrt"]), loc([%arg0, %2]), root("math.absf") -> ^bb1
  ^bb5144:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5145, ^bb1
  ^bb5145:  // pred: ^bb5144
    pdl_interp.check_result_count of %2 is 1 -> ^bb5146, ^bb1
  ^bb5146:  // pred: ^bb5145
    %2765 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2765 : !pdl.value -> ^bb5147, ^bb1
  ^bb5147:  // pred: ^bb5146
    pdl_interp.are_equal %2765, %1 : !pdl.value -> ^bb5148, ^bb1
  ^bb5148:  // pred: ^bb5147
    %2766 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2766 : !pdl.value -> ^bb5149, ^bb1
  ^bb5149:  // pred: ^bb5148
    %2767 = pdl_interp.get_value_type of %2766 : !pdl.type
    pdl_interp.check_type %2767 is f32 -> ^bb5150, ^bb1
  ^bb5150:  // pred: ^bb5149
    %2768 = pdl_interp.get_value_type of %2765 : !pdl.type
    pdl_interp.are_equal %2767, %2768 : !pdl.type -> ^bb5151, ^bb1
  ^bb5151:  // pred: ^bb5150
    %2769 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2767, %2769 : !pdl.type -> ^bb5152, ^bb1
  ^bb5152:  // pred: ^bb5151
    pdl_interp.record_match @rewriters::@fabs_exp(%2766, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp"]), loc([%arg0, %2]), root("math.absf") -> ^bb1
  ^bb5153:  // pred: ^bb5032
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5154, ^bb1
  ^bb5154:  // pred: ^bb5153
    pdl_interp.check_result_count of %2 is 1 -> ^bb5155, ^bb1
  ^bb5155:  // pred: ^bb5154
    %2770 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2770 : !pdl.value -> ^bb5156, ^bb1
  ^bb5156:  // pred: ^bb5155
    pdl_interp.are_equal %2770, %1 : !pdl.value -> ^bb5157, ^bb1
  ^bb5157:  // pred: ^bb5156
    %2771 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2771 : !pdl.value -> ^bb5158, ^bb1
  ^bb5158:  // pred: ^bb5157
    %2772 = pdl_interp.get_value_type of %2771 : !pdl.type
    pdl_interp.check_type %2772 is f32 -> ^bb5159, ^bb1
  ^bb5159:  // pred: ^bb5158
    %2773 = pdl_interp.get_value_type of %2770 : !pdl.type
    pdl_interp.are_equal %2772, %2773 : !pdl.type -> ^bb5160, ^bb1
  ^bb5160:  // pred: ^bb5159
    %2774 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2772, %2774 : !pdl.type -> ^bb5161, ^bb1
  ^bb5161:  // pred: ^bb5160
    %2775 = pdl_interp.get_operand 1 of %2
    %2776 = pdl_interp.get_defining_op of %2775 : !pdl.value
    pdl_interp.is_not_null %2776 : !pdl.operation -> ^bb5162, ^bb1
  ^bb5162:  // pred: ^bb5161
    pdl_interp.is_not_null %2775 : !pdl.value -> ^bb5163, ^bb1
  ^bb5163:  // pred: ^bb5162
    pdl_interp.check_operation_name of %2776 is "arith.mulf" -> ^bb5164, ^bb1
  ^bb5164:  // pred: ^bb5163
    pdl_interp.check_operand_count of %2776 is 2 -> ^bb5165, ^bb1
  ^bb5165:  // pred: ^bb5164
    pdl_interp.check_result_count of %2776 is 1 -> ^bb5166, ^bb1
  ^bb5166:  // pred: ^bb5165
    %2777 = pdl_interp.get_result 0 of %2776
    pdl_interp.is_not_null %2777 : !pdl.value -> ^bb5167, ^bb1
  ^bb5167:  // pred: ^bb5166
    pdl_interp.are_equal %2777, %2775 : !pdl.value -> ^bb5168, ^bb1
  ^bb5168:  // pred: ^bb5167
    %2778 = pdl_interp.get_operand 0 of %2776
    pdl_interp.is_not_null %2778 : !pdl.value -> ^bb5169, ^bb1
  ^bb5169:  // pred: ^bb5168
    %2779 = pdl_interp.get_defining_op of %2778 : !pdl.value
    pdl_interp.is_not_null %2779 : !pdl.operation -> ^bb5170, ^bb1
  ^bb5170:  // pred: ^bb5169
    %2780 = pdl_interp.get_value_type of %2777 : !pdl.type
    pdl_interp.are_equal %2780, %2772 : !pdl.type -> ^bb5171, ^bb1
  ^bb5171:  // pred: ^bb5170
    %2781 = pdl_interp.get_operand 1 of %2776
    %2782 = pdl_interp.get_defining_op of %2781 : !pdl.value
    pdl_interp.is_not_null %2782 : !pdl.operation -> ^bb5172, ^bb1
  ^bb5172:  // pred: ^bb5171
    pdl_interp.check_operation_name of %2779 is "arith.constant" -> ^bb5173, ^bb1
  ^bb5173:  // pred: ^bb5172
    pdl_interp.check_operand_count of %2779 is 0 -> ^bb5174, ^bb1
  ^bb5174:  // pred: ^bb5173
    pdl_interp.check_result_count of %2779 is 1 -> ^bb5175, ^bb1
  ^bb5175:  // pred: ^bb5174
    %2783 = pdl_interp.get_result 0 of %2779
    pdl_interp.is_not_null %2783 : !pdl.value -> ^bb5176, ^bb1
  ^bb5176:  // pred: ^bb5175
    pdl_interp.are_equal %2783, %2778 : !pdl.value -> ^bb5177, ^bb1
  ^bb5177:  // pred: ^bb5176
    pdl_interp.is_not_null %2781 : !pdl.value -> ^bb5178, ^bb1
  ^bb5178:  // pred: ^bb5177
    pdl_interp.check_operation_name of %2782 is "math_xdsl.constant" -> ^bb5179, ^bb1
  ^bb5179:  // pred: ^bb5178
    pdl_interp.check_operand_count of %2782 is 0 -> ^bb5180, ^bb1
  ^bb5180:  // pred: ^bb5179
    pdl_interp.check_result_count of %2782 is 1 -> ^bb5181, ^bb1
  ^bb5181:  // pred: ^bb5180
    %2784 = pdl_interp.get_result 0 of %2782
    pdl_interp.is_not_null %2784 : !pdl.value -> ^bb5182, ^bb1
  ^bb5182:  // pred: ^bb5181
    pdl_interp.are_equal %2784, %2781 : !pdl.value -> ^bb5183, ^bb1
  ^bb5183:  // pred: ^bb5182
    %2785 = pdl_interp.get_attribute "value" of %2779
    pdl_interp.is_not_null %2785 : !pdl.attribute -> ^bb5184, ^bb1
  ^bb5184:  // pred: ^bb5183
    pdl_interp.check_attribute %2785 is 2.000000e+00 : f32 -> ^bb5185, ^bb1
  ^bb5185:  // pred: ^bb5184
    %2786 = pdl_interp.get_attribute "value" of %2782
    pdl_interp.is_not_null %2786 : !pdl.attribute -> ^bb5186, ^bb1
  ^bb5186:  // pred: ^bb5185
    pdl_interp.check_attribute %2786 is #math_xdsl<constant pi> -> ^bb5187, ^bb1
  ^bb5187:  // pred: ^bb5186
    %2787 = pdl_interp.get_value_type of %2783 : !pdl.type
    pdl_interp.are_equal %2787, %2772 : !pdl.type -> ^bb5188, ^bb1
  ^bb5188:  // pred: ^bb5187
    %2788 = pdl_interp.get_value_type of %2784 : !pdl.type
    pdl_interp.are_equal %2788, %2772 : !pdl.type -> ^bb5189, ^bb1
  ^bb5189:  // pred: ^bb5188
    pdl_interp.record_match @rewriters::@acos_cos_rev(%2771, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.acos"]), loc([%arg0, %2, %2776, %2779, %2782]), root("math.absf") -> ^bb1
  ^bb5190:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb5191, ^bb1
  ^bb5191:  // pred: ^bb5190
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb5192, ^bb1
  ^bb5192:  // pred: ^bb5191
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb5193, ^bb1
  ^bb5193:  // pred: ^bb5192
    pdl_interp.switch_operation_name of %2 to ["math.log", "arith.constant", "arith.addf", "arith.negf", "arith.subf", "arith.mulf", "arith.divf"](^bb5194, ^bb5203, ^bb5215, ^bb5226, ^bb5236, ^bb5247, ^bb5285) -> ^bb1
  ^bb5194:  // pred: ^bb5193
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5195, ^bb1
  ^bb5195:  // pred: ^bb5194
    pdl_interp.check_result_count of %2 is 1 -> ^bb5196, ^bb1
  ^bb5196:  // pred: ^bb5195
    %2789 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2789 : !pdl.value -> ^bb5197, ^bb1
  ^bb5197:  // pred: ^bb5196
    pdl_interp.are_equal %2789, %1 : !pdl.value -> ^bb5198, ^bb1
  ^bb5198:  // pred: ^bb5197
    %2790 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2790 : !pdl.value -> ^bb5199, ^bb1
  ^bb5199:  // pred: ^bb5198
    %2791 = pdl_interp.get_value_type of %2790 : !pdl.type
    pdl_interp.check_type %2791 is f32 -> ^bb5200, ^bb1
  ^bb5200:  // pred: ^bb5199
    %2792 = pdl_interp.get_value_type of %2789 : !pdl.type
    pdl_interp.are_equal %2791, %2792 : !pdl.type -> ^bb5201, ^bb1
  ^bb5201:  // pred: ^bb5200
    %2793 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2791, %2793 : !pdl.type -> ^bb5202, ^bb1
  ^bb5202:  // pred: ^bb5201
    pdl_interp.record_match @rewriters::@rem_exp_log(%2790, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("math.exp") -> ^bb1
  ^bb5203:  // pred: ^bb5193
    pdl_interp.check_operand_count of %2 is 0 -> ^bb5204, ^bb1
  ^bb5204:  // pred: ^bb5203
    pdl_interp.check_result_count of %2 is 1 -> ^bb5205, ^bb1
  ^bb5205:  // pred: ^bb5204
    %2794 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2794 : !pdl.value -> ^bb5206, ^bb1
  ^bb5206:  // pred: ^bb5205
    pdl_interp.are_equal %2794, %1 : !pdl.value -> ^bb5207, ^bb1
  ^bb5207:  // pred: ^bb5206
    %2795 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %2795 : !pdl.attribute -> ^bb5208, ^bb1
  ^bb5208:  // pred: ^bb5207
    pdl_interp.switch_attribute %2795 to [0.000000e+00 : f32, 1.000000e+00 : f32](^bb5209, ^bb5212) -> ^bb1
  ^bb5209:  // pred: ^bb5208
    %2796 = pdl_interp.get_value_type of %2794 : !pdl.type
    pdl_interp.check_type %2796 is f32 -> ^bb5210, ^bb1
  ^bb5210:  // pred: ^bb5209
    %2797 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2796, %2797 : !pdl.type -> ^bb5211, ^bb1
  ^bb5211:  // pred: ^bb5210
    pdl_interp.record_match @rewriters::@exp_0(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.exp") -> ^bb1
  ^bb5212:  // pred: ^bb5208
    %2798 = pdl_interp.get_value_type of %2794 : !pdl.type
    pdl_interp.check_type %2798 is f32 -> ^bb5213, ^bb1
  ^bb5213:  // pred: ^bb5212
    %2799 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2798, %2799 : !pdl.type -> ^bb5214, ^bb1
  ^bb5214:  // pred: ^bb5213
    pdl_interp.record_match @rewriters::@exp_1_e(%arg0 : !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant"]), loc([%arg0, %2]), root("math.exp") -> ^bb1
  ^bb5215:  // pred: ^bb5193
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5216, ^bb1
  ^bb5216:  // pred: ^bb5215
    pdl_interp.check_result_count of %2 is 1 -> ^bb5217, ^bb1
  ^bb5217:  // pred: ^bb5216
    %2800 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2800 : !pdl.value -> ^bb5218, ^bb1
  ^bb5218:  // pred: ^bb5217
    pdl_interp.are_equal %2800, %1 : !pdl.value -> ^bb5219, ^bb1
  ^bb5219:  // pred: ^bb5218
    %2801 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2801 : !pdl.value -> ^bb5220, ^bb1
  ^bb5220:  // pred: ^bb5219
    %2802 = pdl_interp.get_value_type of %2801 : !pdl.type
    pdl_interp.check_type %2802 is f32 -> ^bb5221, ^bb1
  ^bb5221:  // pred: ^bb5220
    %2803 = pdl_interp.get_value_type of %2800 : !pdl.type
    pdl_interp.are_equal %2802, %2803 : !pdl.type -> ^bb5222, ^bb1
  ^bb5222:  // pred: ^bb5221
    %2804 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2802, %2804 : !pdl.type -> ^bb5223, ^bb1
  ^bb5223:  // pred: ^bb5222
    %2805 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2805 : !pdl.value -> ^bb5224, ^bb1
  ^bb5224:  // pred: ^bb5223
    %2806 = pdl_interp.get_value_type of %2805 : !pdl.type
    pdl_interp.are_equal %2802, %2806 : !pdl.type -> ^bb5225, ^bb1
  ^bb5225:  // pred: ^bb5224
    pdl_interp.record_match @rewriters::@exp_sum(%2801, %2805, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "math.exp", "arith.mulf"]), loc([%arg0, %2]), root("math.exp") -> ^bb1
  ^bb5226:  // pred: ^bb5193
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5227, ^bb1
  ^bb5227:  // pred: ^bb5226
    pdl_interp.check_result_count of %2 is 1 -> ^bb5228, ^bb1
  ^bb5228:  // pred: ^bb5227
    %2807 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2807 : !pdl.value -> ^bb5229, ^bb1
  ^bb5229:  // pred: ^bb5228
    pdl_interp.are_equal %2807, %1 : !pdl.value -> ^bb5230, ^bb1
  ^bb5230:  // pred: ^bb5229
    %2808 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2808 : !pdl.value -> ^bb5231, ^bb1
  ^bb5231:  // pred: ^bb5230
    %2809 = pdl_interp.get_value_type of %2808 : !pdl.type
    pdl_interp.check_type %2809 is f32 -> ^bb5232, ^bb1
  ^bb5232:  // pred: ^bb5231
    %2810 = pdl_interp.get_value_type of %2807 : !pdl.type
    pdl_interp.are_equal %2809, %2810 : !pdl.type -> ^bb5233, ^bb1
  ^bb5233:  // pred: ^bb5232
    %2811 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2809, %2811 : !pdl.type -> ^bb5234, ^bb1
  ^bb5234:  // pred: ^bb5233
    pdl_interp.record_match @rewriters::@sinhsub__cosh_rev(%2808, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh", "math.sinh", "arith.subf"]), loc([%arg0, %2]), root("math.exp") -> ^bb5235
  ^bb5235:  // pred: ^bb5234
    pdl_interp.record_match @rewriters::@exp_neg(%2808, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.exp", "arith.divf"]), loc([%arg0, %2]), root("math.exp") -> ^bb1
  ^bb5236:  // pred: ^bb5193
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5237, ^bb1
  ^bb5237:  // pred: ^bb5236
    pdl_interp.check_result_count of %2 is 1 -> ^bb5238, ^bb1
  ^bb5238:  // pred: ^bb5237
    %2812 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2812 : !pdl.value -> ^bb5239, ^bb1
  ^bb5239:  // pred: ^bb5238
    pdl_interp.are_equal %2812, %1 : !pdl.value -> ^bb5240, ^bb1
  ^bb5240:  // pred: ^bb5239
    %2813 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2813 : !pdl.value -> ^bb5241, ^bb1
  ^bb5241:  // pred: ^bb5240
    %2814 = pdl_interp.get_value_type of %2813 : !pdl.type
    pdl_interp.check_type %2814 is f32 -> ^bb5242, ^bb1
  ^bb5242:  // pred: ^bb5241
    %2815 = pdl_interp.get_value_type of %2812 : !pdl.type
    pdl_interp.are_equal %2814, %2815 : !pdl.type -> ^bb5243, ^bb1
  ^bb5243:  // pred: ^bb5242
    %2816 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2814, %2816 : !pdl.type -> ^bb5244, ^bb1
  ^bb5244:  // pred: ^bb5243
    %2817 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2817 : !pdl.value -> ^bb5245, ^bb1
  ^bb5245:  // pred: ^bb5244
    %2818 = pdl_interp.get_value_type of %2817 : !pdl.type
    pdl_interp.are_equal %2814, %2818 : !pdl.type -> ^bb5246, ^bb1
  ^bb5246:  // pred: ^bb5245
    pdl_interp.record_match @rewriters::@exp_diff(%2813, %2817, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "math.exp", "arith.divf"]), loc([%arg0, %2]), root("math.exp") -> ^bb1
  ^bb5247:  // pred: ^bb5193
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5248, ^bb1
  ^bb5248:  // pred: ^bb5247
    pdl_interp.check_result_count of %2 is 1 -> ^bb5249, ^bb1
  ^bb5249:  // pred: ^bb5248
    %2819 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2819 : !pdl.value -> ^bb5250, ^bb1
  ^bb5250:  // pred: ^bb5249
    pdl_interp.are_equal %2819, %1 : !pdl.value -> ^bb5251, ^bb1
  ^bb5251:  // pred: ^bb5250
    %2820 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2820 : !pdl.value -> ^bb5252, ^bb1
  ^bb5252:  // pred: ^bb5251
    %2821 = pdl_interp.get_value_type of %2820 : !pdl.type
    pdl_interp.check_type %2821 is f32 -> ^bb5267, ^bb5253
  ^bb5253:  // 16 preds: ^bb5252, ^bb5267, ^bb5268, ^bb5270, ^bb5271, ^bb5272, ^bb5273, ^bb5274, ^bb5275, ^bb5276, ^bb5277, ^bb5278, ^bb5279, ^bb5280, ^bb5281, ^bb5282
    %2822 = pdl_interp.get_defining_op of %2820 : !pdl.value
    pdl_interp.is_not_null %2822 : !pdl.operation -> ^bb5254, ^bb1
  ^bb5254:  // pred: ^bb5253
    %2823 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2823 : !pdl.value -> ^bb5255, ^bb1
  ^bb5255:  // pred: ^bb5254
    pdl_interp.check_operation_name of %2822 is "math.log" -> ^bb5256, ^bb1
  ^bb5256:  // pred: ^bb5255
    pdl_interp.check_operand_count of %2822 is 1 -> ^bb5257, ^bb1
  ^bb5257:  // pred: ^bb5256
    pdl_interp.check_result_count of %2822 is 1 -> ^bb5258, ^bb1
  ^bb5258:  // pred: ^bb5257
    %2824 = pdl_interp.get_result 0 of %2822
    pdl_interp.is_not_null %2824 : !pdl.value -> ^bb5259, ^bb1
  ^bb5259:  // pred: ^bb5258
    pdl_interp.are_equal %2824, %2820 : !pdl.value -> ^bb5260, ^bb1
  ^bb5260:  // pred: ^bb5259
    %2825 = pdl_interp.get_operand 0 of %2822
    pdl_interp.is_not_null %2825 : !pdl.value -> ^bb5261, ^bb1
  ^bb5261:  // pred: ^bb5260
    %2826 = pdl_interp.get_value_type of %2825 : !pdl.type
    pdl_interp.check_type %2826 is f32 -> ^bb5262, ^bb1
  ^bb5262:  // pred: ^bb5261
    %2827 = pdl_interp.get_value_type of %2824 : !pdl.type
    pdl_interp.are_equal %2826, %2827 : !pdl.type -> ^bb5263, ^bb1
  ^bb5263:  // pred: ^bb5262
    %2828 = pdl_interp.get_value_type of %2819 : !pdl.type
    pdl_interp.are_equal %2826, %2828 : !pdl.type -> ^bb5264, ^bb1
  ^bb5264:  // pred: ^bb5263
    %2829 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2826, %2829 : !pdl.type -> ^bb5265, ^bb1
  ^bb5265:  // pred: ^bb5264
    %2830 = pdl_interp.get_value_type of %2823 : !pdl.type
    pdl_interp.are_equal %2826, %2830 : !pdl.type -> ^bb5266, ^bb1
  ^bb5266:  // pred: ^bb5265
    pdl_interp.record_match @rewriters::@exp_to_pow(%2825, %2823, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.powf"]), loc([%arg0, %2, %2822]), root("math.exp") -> ^bb1
  ^bb5267:  // pred: ^bb5252
    %2831 = pdl_interp.get_value_type of %2819 : !pdl.type
    pdl_interp.are_equal %2821, %2831 : !pdl.type -> ^bb5268, ^bb5253
  ^bb5268:  // pred: ^bb5267
    %2832 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2821, %2832 : !pdl.type -> ^bb5269, ^bb5253
  ^bb5269:  // pred: ^bb5268
    %2833 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2833 : !pdl.value -> ^bb5283, ^bb5270
  ^bb5270:  // 3 preds: ^bb5269, ^bb5283, ^bb5284
    %2834 = pdl_interp.get_operand 1 of %2
    %2835 = pdl_interp.get_defining_op of %2834 : !pdl.value
    pdl_interp.is_not_null %2835 : !pdl.operation -> ^bb5271, ^bb5253
  ^bb5271:  // pred: ^bb5270
    pdl_interp.is_not_null %2834 : !pdl.value -> ^bb5272, ^bb5253
  ^bb5272:  // pred: ^bb5271
    pdl_interp.check_operation_name of %2835 is "arith.constant" -> ^bb5273, ^bb5253
  ^bb5273:  // pred: ^bb5272
    pdl_interp.check_operand_count of %2835 is 0 -> ^bb5274, ^bb5253
  ^bb5274:  // pred: ^bb5273
    pdl_interp.check_result_count of %2835 is 1 -> ^bb5275, ^bb5253
  ^bb5275:  // pred: ^bb5274
    %2836 = pdl_interp.get_result 0 of %2835
    pdl_interp.is_not_null %2836 : !pdl.value -> ^bb5276, ^bb5253
  ^bb5276:  // pred: ^bb5275
    pdl_interp.are_equal %2836, %2834 : !pdl.value -> ^bb5277, ^bb5253
  ^bb5277:  // pred: ^bb5276
    %2837 = pdl_interp.get_attribute "value" of %2835
    pdl_interp.is_not_null %2837 : !pdl.attribute -> ^bb5278, ^bb5253
  ^bb5278:  // pred: ^bb5277
    pdl_interp.switch_attribute %2837 to [2.000000e+00 : f32, 3.000000e+00 : f32](^bb5279, ^bb5281) -> ^bb5253
  ^bb5279:  // pred: ^bb5278
    %2838 = pdl_interp.get_value_type of %2836 : !pdl.type
    pdl_interp.are_equal %2838, %2821 : !pdl.type -> ^bb5280, ^bb5253
  ^bb5280:  // pred: ^bb5279
    pdl_interp.record_match @rewriters::@exp_lft_sqr(%2820, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "math.exp", "arith.mulf"]), loc([%arg0, %2, %2835]), root("math.exp") -> ^bb5253
  ^bb5281:  // pred: ^bb5278
    %2839 = pdl_interp.get_value_type of %2836 : !pdl.type
    pdl_interp.are_equal %2839, %2821 : !pdl.type -> ^bb5282, ^bb5253
  ^bb5282:  // pred: ^bb5281
    pdl_interp.record_match @rewriters::@exp_lft_cube(%2820, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "arith.constant", "math.powf"]), loc([%arg0, %2, %2835]), root("math.exp") -> ^bb5253
  ^bb5283:  // pred: ^bb5269
    %2840 = pdl_interp.get_value_type of %2833 : !pdl.type
    pdl_interp.are_equal %2821, %2840 : !pdl.type -> ^bb5284, ^bb5270
  ^bb5284:  // pred: ^bb5283
    pdl_interp.record_match @rewriters::@exp_prod(%2820, %2833, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "math.powf"]), loc([%arg0, %2]), root("math.exp") -> ^bb5270
  ^bb5285:  // pred: ^bb5193
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5286, ^bb1
  ^bb5286:  // pred: ^bb5285
    pdl_interp.check_result_count of %2 is 1 -> ^bb5287, ^bb1
  ^bb5287:  // pred: ^bb5286
    %2841 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2841 : !pdl.value -> ^bb5288, ^bb1
  ^bb5288:  // pred: ^bb5287
    pdl_interp.are_equal %2841, %1 : !pdl.value -> ^bb5289, ^bb1
  ^bb5289:  // pred: ^bb5288
    %2842 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2842 : !pdl.value -> ^bb5290, ^bb1
  ^bb5290:  // pred: ^bb5289
    %2843 = pdl_interp.get_value_type of %2842 : !pdl.type
    pdl_interp.check_type %2843 is f32 -> ^bb5291, ^bb1
  ^bb5291:  // pred: ^bb5290
    %2844 = pdl_interp.get_value_type of %2841 : !pdl.type
    pdl_interp.are_equal %2843, %2844 : !pdl.type -> ^bb5292, ^bb1
  ^bb5292:  // pred: ^bb5291
    %2845 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2843, %2845 : !pdl.type -> ^bb5293, ^bb1
  ^bb5293:  // pred: ^bb5292
    %2846 = pdl_interp.get_operand 1 of %2
    %2847 = pdl_interp.get_defining_op of %2846 : !pdl.value
    pdl_interp.is_not_null %2847 : !pdl.operation -> ^bb5294, ^bb1
  ^bb5294:  // pred: ^bb5293
    pdl_interp.is_not_null %2846 : !pdl.value -> ^bb5295, ^bb1
  ^bb5295:  // pred: ^bb5294
    pdl_interp.check_operation_name of %2847 is "arith.constant" -> ^bb5296, ^bb1
  ^bb5296:  // pred: ^bb5295
    pdl_interp.check_operand_count of %2847 is 0 -> ^bb5297, ^bb1
  ^bb5297:  // pred: ^bb5296
    pdl_interp.check_result_count of %2847 is 1 -> ^bb5298, ^bb1
  ^bb5298:  // pred: ^bb5297
    %2848 = pdl_interp.get_result 0 of %2847
    pdl_interp.is_not_null %2848 : !pdl.value -> ^bb5299, ^bb1
  ^bb5299:  // pred: ^bb5298
    pdl_interp.are_equal %2848, %2846 : !pdl.value -> ^bb5300, ^bb1
  ^bb5300:  // pred: ^bb5299
    %2849 = pdl_interp.get_attribute "value" of %2847
    pdl_interp.is_not_null %2849 : !pdl.attribute -> ^bb5301, ^bb1
  ^bb5301:  // pred: ^bb5300
    pdl_interp.switch_attribute %2849 to [2.000000e+00 : f32, 3.000000e+00 : f32](^bb5302, ^bb5304) -> ^bb1
  ^bb5302:  // pred: ^bb5301
    %2850 = pdl_interp.get_value_type of %2848 : !pdl.type
    pdl_interp.are_equal %2850, %2843 : !pdl.type -> ^bb5303, ^bb1
  ^bb5303:  // pred: ^bb5302
    pdl_interp.record_match @rewriters::@exp_sqrt(%2842, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "math.sqrt"]), loc([%arg0, %2, %2847]), root("math.exp") -> ^bb1
  ^bb5304:  // pred: ^bb5301
    %2851 = pdl_interp.get_value_type of %2848 : !pdl.type
    pdl_interp.are_equal %2851, %2843 : !pdl.type -> ^bb5305, ^bb1
  ^bb5305:  // pred: ^bb5304
    pdl_interp.record_match @rewriters::@exp_cbrt(%2842, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "math.cbrt"]), loc([%arg0, %2, %2847]), root("math.exp") -> ^bb1
  ^bb5306:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb5307, ^bb1
  ^bb5307:  // pred: ^bb5306
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb5308, ^bb1
  ^bb5308:  // pred: ^bb5307
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb5309, ^bb1
  ^bb5309:  // pred: ^bb5308
    pdl_interp.switch_operation_name of %2 to ["math.exp", "arith.divf", "math_xdsl.constant", "arith.mulf", "math.powf", "arith.addf"](^bb5310, ^bb5319, ^bb5344, ^bb5353, ^bb5364, ^bb5375) -> ^bb1
  ^bb5310:  // pred: ^bb5309
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5311, ^bb1
  ^bb5311:  // pred: ^bb5310
    pdl_interp.check_result_count of %2 is 1 -> ^bb5312, ^bb1
  ^bb5312:  // pred: ^bb5311
    %2852 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2852 : !pdl.value -> ^bb5313, ^bb1
  ^bb5313:  // pred: ^bb5312
    pdl_interp.are_equal %2852, %1 : !pdl.value -> ^bb5314, ^bb1
  ^bb5314:  // pred: ^bb5313
    %2853 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2853 : !pdl.value -> ^bb5315, ^bb1
  ^bb5315:  // pred: ^bb5314
    %2854 = pdl_interp.get_value_type of %2853 : !pdl.type
    pdl_interp.check_type %2854 is f32 -> ^bb5316, ^bb1
  ^bb5316:  // pred: ^bb5315
    %2855 = pdl_interp.get_value_type of %2852 : !pdl.type
    pdl_interp.are_equal %2854, %2855 : !pdl.type -> ^bb5317, ^bb1
  ^bb5317:  // pred: ^bb5316
    %2856 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2854, %2856 : !pdl.type -> ^bb5318, ^bb1
  ^bb5318:  // pred: ^bb5317
    pdl_interp.record_match @rewriters::@rem_log_exp(%2853, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("math.log") -> ^bb1
  ^bb5319:  // pred: ^bb5309
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5320, ^bb1
  ^bb5320:  // pred: ^bb5319
    pdl_interp.check_result_count of %2 is 1 -> ^bb5321, ^bb1
  ^bb5321:  // pred: ^bb5320
    %2857 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2857 : !pdl.value -> ^bb5322, ^bb1
  ^bb5322:  // pred: ^bb5321
    pdl_interp.are_equal %2857, %1 : !pdl.value -> ^bb5323, ^bb1
  ^bb5323:  // pred: ^bb5322
    %2858 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2858 : !pdl.value -> ^bb5324, ^bb1
  ^bb5324:  // pred: ^bb5323
    %2859 = pdl_interp.get_defining_op of %2858 : !pdl.value
    pdl_interp.is_not_null %2859 : !pdl.operation -> ^bb5331, ^bb5325
  ^bb5325:  // 14 preds: ^bb5324, ^bb5331, ^bb5332, ^bb5333, ^bb5334, ^bb5335, ^bb5336, ^bb5337, ^bb5338, ^bb5339, ^bb5340, ^bb5341, ^bb5342, ^bb5343
    %2860 = pdl_interp.get_value_type of %2858 : !pdl.type
    pdl_interp.check_type %2860 is f32 -> ^bb5326, ^bb1
  ^bb5326:  // pred: ^bb5325
    %2861 = pdl_interp.get_value_type of %2857 : !pdl.type
    pdl_interp.are_equal %2860, %2861 : !pdl.type -> ^bb5327, ^bb1
  ^bb5327:  // pred: ^bb5326
    %2862 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2860, %2862 : !pdl.type -> ^bb5328, ^bb1
  ^bb5328:  // pred: ^bb5327
    %2863 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2863 : !pdl.value -> ^bb5329, ^bb1
  ^bb5329:  // pred: ^bb5328
    %2864 = pdl_interp.get_value_type of %2863 : !pdl.type
    pdl_interp.are_equal %2860, %2864 : !pdl.type -> ^bb5330, ^bb1
  ^bb5330:  // pred: ^bb5329
    pdl_interp.record_match @rewriters::@log_div(%2858, %2863, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.log", "math.log", "arith.subf"]), loc([%arg0, %2]), root("math.log") -> ^bb1
  ^bb5331:  // pred: ^bb5324
    %2865 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2865 : !pdl.value -> ^bb5332, ^bb5325
  ^bb5332:  // pred: ^bb5331
    pdl_interp.check_operation_name of %2859 is "arith.constant" -> ^bb5333, ^bb5325
  ^bb5333:  // pred: ^bb5332
    pdl_interp.check_operand_count of %2859 is 0 -> ^bb5334, ^bb5325
  ^bb5334:  // pred: ^bb5333
    pdl_interp.check_result_count of %2859 is 1 -> ^bb5335, ^bb5325
  ^bb5335:  // pred: ^bb5334
    %2866 = pdl_interp.get_result 0 of %2859
    pdl_interp.is_not_null %2866 : !pdl.value -> ^bb5336, ^bb5325
  ^bb5336:  // pred: ^bb5335
    pdl_interp.are_equal %2866, %2858 : !pdl.value -> ^bb5337, ^bb5325
  ^bb5337:  // pred: ^bb5336
    %2867 = pdl_interp.get_attribute "value" of %2859
    pdl_interp.is_not_null %2867 : !pdl.attribute -> ^bb5338, ^bb5325
  ^bb5338:  // pred: ^bb5337
    pdl_interp.check_attribute %2867 is 1.000000e+00 : f32 -> ^bb5339, ^bb5325
  ^bb5339:  // pred: ^bb5338
    %2868 = pdl_interp.get_value_type of %2866 : !pdl.type
    pdl_interp.check_type %2868 is f32 -> ^bb5340, ^bb5325
  ^bb5340:  // pred: ^bb5339
    %2869 = pdl_interp.get_value_type of %2857 : !pdl.type
    pdl_interp.are_equal %2868, %2869 : !pdl.type -> ^bb5341, ^bb5325
  ^bb5341:  // pred: ^bb5340
    %2870 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2868, %2870 : !pdl.type -> ^bb5342, ^bb5325
  ^bb5342:  // pred: ^bb5341
    %2871 = pdl_interp.get_value_type of %2865 : !pdl.type
    pdl_interp.are_equal %2868, %2871 : !pdl.type -> ^bb5343, ^bb5325
  ^bb5343:  // pred: ^bb5342
    pdl_interp.record_match @rewriters::@log_rec(%2865, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.log", "arith.negf"]), loc([%arg0, %2, %2859]), root("math.log") -> ^bb5325
  ^bb5344:  // pred: ^bb5309
    pdl_interp.check_operand_count of %2 is 0 -> ^bb5345, ^bb1
  ^bb5345:  // pred: ^bb5344
    pdl_interp.check_result_count of %2 is 1 -> ^bb5346, ^bb1
  ^bb5346:  // pred: ^bb5345
    %2872 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2872 : !pdl.value -> ^bb5347, ^bb1
  ^bb5347:  // pred: ^bb5346
    pdl_interp.are_equal %2872, %1 : !pdl.value -> ^bb5348, ^bb1
  ^bb5348:  // pred: ^bb5347
    %2873 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %2873 : !pdl.attribute -> ^bb5349, ^bb1
  ^bb5349:  // pred: ^bb5348
    pdl_interp.check_attribute %2873 is #math_xdsl<constant e> -> ^bb5350, ^bb1
  ^bb5350:  // pred: ^bb5349
    %2874 = pdl_interp.get_value_type of %2872 : !pdl.type
    pdl_interp.check_type %2874 is f32 -> ^bb5351, ^bb1
  ^bb5351:  // pred: ^bb5350
    %2875 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2874, %2875 : !pdl.type -> ^bb5352, ^bb1
  ^bb5352:  // pred: ^bb5351
    pdl_interp.record_match @rewriters::@log_E(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.log") -> ^bb1
  ^bb5353:  // pred: ^bb5309
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5354, ^bb1
  ^bb5354:  // pred: ^bb5353
    pdl_interp.check_result_count of %2 is 1 -> ^bb5355, ^bb1
  ^bb5355:  // pred: ^bb5354
    %2876 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2876 : !pdl.value -> ^bb5356, ^bb1
  ^bb5356:  // pred: ^bb5355
    pdl_interp.are_equal %2876, %1 : !pdl.value -> ^bb5357, ^bb1
  ^bb5357:  // pred: ^bb5356
    %2877 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2877 : !pdl.value -> ^bb5358, ^bb1
  ^bb5358:  // pred: ^bb5357
    %2878 = pdl_interp.get_value_type of %2877 : !pdl.type
    pdl_interp.check_type %2878 is f32 -> ^bb5359, ^bb1
  ^bb5359:  // pred: ^bb5358
    %2879 = pdl_interp.get_value_type of %2876 : !pdl.type
    pdl_interp.are_equal %2878, %2879 : !pdl.type -> ^bb5360, ^bb1
  ^bb5360:  // pred: ^bb5359
    %2880 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2878, %2880 : !pdl.type -> ^bb5361, ^bb1
  ^bb5361:  // pred: ^bb5360
    %2881 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2881 : !pdl.value -> ^bb5362, ^bb1
  ^bb5362:  // pred: ^bb5361
    %2882 = pdl_interp.get_value_type of %2881 : !pdl.type
    pdl_interp.are_equal %2878, %2882 : !pdl.type -> ^bb5363, ^bb1
  ^bb5363:  // pred: ^bb5362
    pdl_interp.record_match @rewriters::@log_prod(%2877, %2881, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.log", "math.log", "arith.addf"]), loc([%arg0, %2]), root("math.log") -> ^bb1
  ^bb5364:  // pred: ^bb5309
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5365, ^bb1
  ^bb5365:  // pred: ^bb5364
    pdl_interp.check_result_count of %2 is 1 -> ^bb5366, ^bb1
  ^bb5366:  // pred: ^bb5365
    %2883 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2883 : !pdl.value -> ^bb5367, ^bb1
  ^bb5367:  // pred: ^bb5366
    pdl_interp.are_equal %2883, %1 : !pdl.value -> ^bb5368, ^bb1
  ^bb5368:  // pred: ^bb5367
    %2884 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2884 : !pdl.value -> ^bb5369, ^bb1
  ^bb5369:  // pred: ^bb5368
    %2885 = pdl_interp.get_value_type of %2884 : !pdl.type
    pdl_interp.check_type %2885 is f32 -> ^bb5370, ^bb1
  ^bb5370:  // pred: ^bb5369
    %2886 = pdl_interp.get_value_type of %2883 : !pdl.type
    pdl_interp.are_equal %2885, %2886 : !pdl.type -> ^bb5371, ^bb1
  ^bb5371:  // pred: ^bb5370
    %2887 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2885, %2887 : !pdl.type -> ^bb5372, ^bb1
  ^bb5372:  // pred: ^bb5371
    %2888 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2888 : !pdl.value -> ^bb5373, ^bb1
  ^bb5373:  // pred: ^bb5372
    %2889 = pdl_interp.get_value_type of %2888 : !pdl.type
    pdl_interp.are_equal %2885, %2889 : !pdl.type -> ^bb5374, ^bb1
  ^bb5374:  // pred: ^bb5373
    pdl_interp.record_match @rewriters::@log_pow(%2884, %2888, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.log", "arith.mulf"]), loc([%arg0, %2]), root("math.log") -> ^bb1
  ^bb5375:  // pred: ^bb5309
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5376, ^bb1
  ^bb5376:  // pred: ^bb5375
    pdl_interp.check_result_count of %2 is 1 -> ^bb5377, ^bb1
  ^bb5377:  // pred: ^bb5376
    %2890 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2890 : !pdl.value -> ^bb5378, ^bb1
  ^bb5378:  // pred: ^bb5377
    pdl_interp.are_equal %2890, %1 : !pdl.value -> ^bb5379, ^bb1
  ^bb5379:  // pred: ^bb5378
    %2891 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2891 : !pdl.value -> ^bb5380, ^bb1
  ^bb5380:  // pred: ^bb5379
    %2892 = pdl_interp.get_value_type of %2891 : !pdl.type
    pdl_interp.check_type %2892 is f32 -> ^bb5381, ^bb1
  ^bb5381:  // pred: ^bb5380
    %2893 = pdl_interp.get_value_type of %2890 : !pdl.type
    pdl_interp.are_equal %2892, %2893 : !pdl.type -> ^bb5382, ^bb1
  ^bb5382:  // pred: ^bb5381
    %2894 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2892, %2894 : !pdl.type -> ^bb5383, ^bb1
  ^bb5383:  // pred: ^bb5382
    %2895 = pdl_interp.get_operand 1 of %2
    %2896 = pdl_interp.get_defining_op of %2895 : !pdl.value
    pdl_interp.is_not_null %2896 : !pdl.operation -> ^bb5384, ^bb1
  ^bb5384:  // pred: ^bb5383
    pdl_interp.is_not_null %2895 : !pdl.value -> ^bb5385, ^bb1
  ^bb5385:  // pred: ^bb5384
    pdl_interp.check_operation_name of %2896 is "math.sqrt" -> ^bb5386, ^bb1
  ^bb5386:  // pred: ^bb5385
    pdl_interp.check_operand_count of %2896 is 1 -> ^bb5387, ^bb1
  ^bb5387:  // pred: ^bb5386
    pdl_interp.check_result_count of %2896 is 1 -> ^bb5388, ^bb1
  ^bb5388:  // pred: ^bb5387
    %2897 = pdl_interp.get_result 0 of %2896
    pdl_interp.is_not_null %2897 : !pdl.value -> ^bb5389, ^bb1
  ^bb5389:  // pred: ^bb5388
    pdl_interp.are_equal %2897, %2895 : !pdl.value -> ^bb5390, ^bb1
  ^bb5390:  // pred: ^bb5389
    %2898 = pdl_interp.get_operand 0 of %2896
    pdl_interp.is_not_null %2898 : !pdl.value -> ^bb5391, ^bb1
  ^bb5391:  // pred: ^bb5390
    %2899 = pdl_interp.get_defining_op of %2898 : !pdl.value
    pdl_interp.is_not_null %2899 : !pdl.operation -> ^bb5392, ^bb1
  ^bb5392:  // pred: ^bb5391
    %2900 = pdl_interp.get_value_type of %2897 : !pdl.type
    pdl_interp.are_equal %2900, %2892 : !pdl.type -> ^bb5393, ^bb1
  ^bb5393:  // pred: ^bb5392
    pdl_interp.switch_operation_name of %2899 to ["arith.addf", "arith.subf"](^bb5394, ^bb5420) -> ^bb1
  ^bb5394:  // pred: ^bb5393
    pdl_interp.check_operand_count of %2899 is 2 -> ^bb5395, ^bb1
  ^bb5395:  // pred: ^bb5394
    pdl_interp.check_result_count of %2899 is 1 -> ^bb5396, ^bb1
  ^bb5396:  // pred: ^bb5395
    %2901 = pdl_interp.get_result 0 of %2899
    pdl_interp.is_not_null %2901 : !pdl.value -> ^bb5397, ^bb1
  ^bb5397:  // pred: ^bb5396
    pdl_interp.are_equal %2901, %2898 : !pdl.value -> ^bb5398, ^bb1
  ^bb5398:  // pred: ^bb5397
    %2902 = pdl_interp.get_operand 0 of %2899
    pdl_interp.is_not_null %2902 : !pdl.value -> ^bb5399, ^bb1
  ^bb5399:  // pred: ^bb5398
    %2903 = pdl_interp.get_value_type of %2901 : !pdl.type
    pdl_interp.are_equal %2903, %2892 : !pdl.type -> ^bb5400, ^bb1
  ^bb5400:  // pred: ^bb5399
    %2904 = pdl_interp.get_defining_op of %2902 : !pdl.value
    pdl_interp.is_not_null %2904 : !pdl.operation -> ^bb5401, ^bb1
  ^bb5401:  // pred: ^bb5400
    %2905 = pdl_interp.get_operand 1 of %2899
    %2906 = pdl_interp.get_defining_op of %2905 : !pdl.value
    pdl_interp.is_not_null %2906 : !pdl.operation -> ^bb5402, ^bb1
  ^bb5402:  // pred: ^bb5401
    pdl_interp.is_not_null %2905 : !pdl.value -> ^bb5403, ^bb1
  ^bb5403:  // pred: ^bb5402
    pdl_interp.check_operation_name of %2904 is "arith.mulf" -> ^bb5404, ^bb1
  ^bb5404:  // pred: ^bb5403
    pdl_interp.check_operand_count of %2904 is 2 -> ^bb5405, ^bb1
  ^bb5405:  // pred: ^bb5404
    pdl_interp.check_result_count of %2904 is 1 -> ^bb5406, ^bb1
  ^bb5406:  // pred: ^bb5405
    %2907 = pdl_interp.get_result 0 of %2904
    pdl_interp.is_not_null %2907 : !pdl.value -> ^bb5407, ^bb1
  ^bb5407:  // pred: ^bb5406
    pdl_interp.are_equal %2907, %2902 : !pdl.value -> ^bb5408, ^bb1
  ^bb5408:  // pred: ^bb5407
    pdl_interp.check_operation_name of %2906 is "arith.constant" -> ^bb5409, ^bb1
  ^bb5409:  // pred: ^bb5408
    pdl_interp.check_operand_count of %2906 is 0 -> ^bb5410, ^bb1
  ^bb5410:  // pred: ^bb5409
    pdl_interp.check_result_count of %2906 is 1 -> ^bb5411, ^bb1
  ^bb5411:  // pred: ^bb5410
    %2908 = pdl_interp.get_operand 0 of %2904
    pdl_interp.are_equal %2908, %2891 : !pdl.value -> ^bb5412, ^bb1
  ^bb5412:  // pred: ^bb5411
    %2909 = pdl_interp.get_operand 1 of %2904
    pdl_interp.are_equal %2909, %2891 : !pdl.value -> ^bb5413, ^bb1
  ^bb5413:  // pred: ^bb5412
    %2910 = pdl_interp.get_attribute "value" of %2906
    pdl_interp.is_not_null %2910 : !pdl.attribute -> ^bb5414, ^bb1
  ^bb5414:  // pred: ^bb5413
    pdl_interp.check_attribute %2910 is 1.000000e+00 : f32 -> ^bb5415, ^bb1
  ^bb5415:  // pred: ^bb5414
    %2911 = pdl_interp.get_result 0 of %2906
    pdl_interp.is_not_null %2911 : !pdl.value -> ^bb5416, ^bb1
  ^bb5416:  // pred: ^bb5415
    pdl_interp.are_equal %2911, %2905 : !pdl.value -> ^bb5417, ^bb1
  ^bb5417:  // pred: ^bb5416
    %2912 = pdl_interp.get_value_type of %2907 : !pdl.type
    pdl_interp.are_equal %2912, %2892 : !pdl.type -> ^bb5418, ^bb1
  ^bb5418:  // pred: ^bb5417
    %2913 = pdl_interp.get_value_type of %2911 : !pdl.type
    pdl_interp.are_equal %2913, %2892 : !pdl.type -> ^bb5419, ^bb1
  ^bb5419:  // pred: ^bb5418
    pdl_interp.record_match @rewriters::@asinh_def_rev(%2891, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.asinh"]), loc([%arg0, %2, %2896, %2899, %2904, %2906]), root("math.log") -> ^bb1
  ^bb5420:  // pred: ^bb5393
    pdl_interp.check_operand_count of %2899 is 2 -> ^bb5421, ^bb1
  ^bb5421:  // pred: ^bb5420
    pdl_interp.check_result_count of %2899 is 1 -> ^bb5422, ^bb1
  ^bb5422:  // pred: ^bb5421
    %2914 = pdl_interp.get_result 0 of %2899
    pdl_interp.is_not_null %2914 : !pdl.value -> ^bb5423, ^bb1
  ^bb5423:  // pred: ^bb5422
    pdl_interp.are_equal %2914, %2898 : !pdl.value -> ^bb5424, ^bb1
  ^bb5424:  // pred: ^bb5423
    %2915 = pdl_interp.get_operand 0 of %2899
    pdl_interp.is_not_null %2915 : !pdl.value -> ^bb5425, ^bb1
  ^bb5425:  // pred: ^bb5424
    %2916 = pdl_interp.get_value_type of %2914 : !pdl.type
    pdl_interp.are_equal %2916, %2892 : !pdl.type -> ^bb5426, ^bb1
  ^bb5426:  // pred: ^bb5425
    %2917 = pdl_interp.get_defining_op of %2915 : !pdl.value
    pdl_interp.is_not_null %2917 : !pdl.operation -> ^bb5427, ^bb1
  ^bb5427:  // pred: ^bb5426
    %2918 = pdl_interp.get_operand 1 of %2899
    %2919 = pdl_interp.get_defining_op of %2918 : !pdl.value
    pdl_interp.is_not_null %2919 : !pdl.operation -> ^bb5428, ^bb1
  ^bb5428:  // pred: ^bb5427
    pdl_interp.is_not_null %2918 : !pdl.value -> ^bb5429, ^bb1
  ^bb5429:  // pred: ^bb5428
    pdl_interp.check_operation_name of %2917 is "arith.mulf" -> ^bb5430, ^bb1
  ^bb5430:  // pred: ^bb5429
    pdl_interp.check_operand_count of %2917 is 2 -> ^bb5431, ^bb1
  ^bb5431:  // pred: ^bb5430
    pdl_interp.check_result_count of %2917 is 1 -> ^bb5432, ^bb1
  ^bb5432:  // pred: ^bb5431
    %2920 = pdl_interp.get_result 0 of %2917
    pdl_interp.is_not_null %2920 : !pdl.value -> ^bb5433, ^bb1
  ^bb5433:  // pred: ^bb5432
    pdl_interp.are_equal %2920, %2915 : !pdl.value -> ^bb5434, ^bb1
  ^bb5434:  // pred: ^bb5433
    pdl_interp.check_operation_name of %2919 is "arith.constant" -> ^bb5435, ^bb1
  ^bb5435:  // pred: ^bb5434
    pdl_interp.check_operand_count of %2919 is 0 -> ^bb5436, ^bb1
  ^bb5436:  // pred: ^bb5435
    pdl_interp.check_result_count of %2919 is 1 -> ^bb5437, ^bb1
  ^bb5437:  // pred: ^bb5436
    %2921 = pdl_interp.get_operand 0 of %2917
    pdl_interp.are_equal %2921, %2891 : !pdl.value -> ^bb5438, ^bb1
  ^bb5438:  // pred: ^bb5437
    %2922 = pdl_interp.get_operand 1 of %2917
    pdl_interp.are_equal %2922, %2891 : !pdl.value -> ^bb5439, ^bb1
  ^bb5439:  // pred: ^bb5438
    %2923 = pdl_interp.get_attribute "value" of %2919
    pdl_interp.is_not_null %2923 : !pdl.attribute -> ^bb5440, ^bb1
  ^bb5440:  // pred: ^bb5439
    pdl_interp.check_attribute %2923 is 1.000000e+00 : f32 -> ^bb5441, ^bb1
  ^bb5441:  // pred: ^bb5440
    %2924 = pdl_interp.get_result 0 of %2919
    pdl_interp.is_not_null %2924 : !pdl.value -> ^bb5442, ^bb1
  ^bb5442:  // pred: ^bb5441
    pdl_interp.are_equal %2924, %2918 : !pdl.value -> ^bb5443, ^bb1
  ^bb5443:  // pred: ^bb5442
    %2925 = pdl_interp.get_value_type of %2920 : !pdl.type
    pdl_interp.are_equal %2925, %2892 : !pdl.type -> ^bb5444, ^bb1
  ^bb5444:  // pred: ^bb5443
    %2926 = pdl_interp.get_value_type of %2924 : !pdl.type
    pdl_interp.are_equal %2926, %2892 : !pdl.type -> ^bb5445, ^bb1
  ^bb5445:  // pred: ^bb5444
    pdl_interp.record_match @rewriters::@acosh_def_rev(%2891, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.acosh"]), loc([%arg0, %2, %2896, %2899, %2917, %2919]), root("math.log") -> ^bb1
  ^bb5446:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb5447, ^bb1
  ^bb5447:  // pred: ^bb5446
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb5448, ^bb1
  ^bb5448:  // pred: ^bb5447
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb5449, ^bb1
  ^bb5449:  // pred: ^bb5448
    pdl_interp.switch_operation_name of %2 to ["arith.constant", "arith.negf", "math.asin", "arith.divf", "math_xdsl.constant", "arith.addf", "arith.subf", "arith.mulf", "math.acos", "math.atan"](^bb5450, ^bb5459, ^bb5468, ^bb5477, ^bb5525, ^bb5534, ^bb5582, ^bb5593, ^bb5617, ^bb5626) -> ^bb1
  ^bb5450:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 0 -> ^bb5451, ^bb1
  ^bb5451:  // pred: ^bb5450
    pdl_interp.check_result_count of %2 is 1 -> ^bb5452, ^bb1
  ^bb5452:  // pred: ^bb5451
    %2927 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2927 : !pdl.value -> ^bb5453, ^bb1
  ^bb5453:  // pred: ^bb5452
    pdl_interp.are_equal %2927, %1 : !pdl.value -> ^bb5454, ^bb1
  ^bb5454:  // pred: ^bb5453
    %2928 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %2928 : !pdl.attribute -> ^bb5455, ^bb1
  ^bb5455:  // pred: ^bb5454
    pdl_interp.check_attribute %2928 is 0.000000e+00 : f32 -> ^bb5456, ^bb1
  ^bb5456:  // pred: ^bb5455
    %2929 = pdl_interp.get_value_type of %2927 : !pdl.type
    pdl_interp.check_type %2929 is f32 -> ^bb5457, ^bb1
  ^bb5457:  // pred: ^bb5456
    %2930 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2929, %2930 : !pdl.type -> ^bb5458, ^bb1
  ^bb5458:  // pred: ^bb5457
    pdl_interp.record_match @rewriters::@sin_0(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.sin") -> ^bb1
  ^bb5459:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5460, ^bb1
  ^bb5460:  // pred: ^bb5459
    pdl_interp.check_result_count of %2 is 1 -> ^bb5461, ^bb1
  ^bb5461:  // pred: ^bb5460
    %2931 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2931 : !pdl.value -> ^bb5462, ^bb1
  ^bb5462:  // pred: ^bb5461
    pdl_interp.are_equal %2931, %1 : !pdl.value -> ^bb5463, ^bb1
  ^bb5463:  // pred: ^bb5462
    %2932 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2932 : !pdl.value -> ^bb5464, ^bb1
  ^bb5464:  // pred: ^bb5463
    %2933 = pdl_interp.get_value_type of %2932 : !pdl.type
    pdl_interp.check_type %2933 is f32 -> ^bb5465, ^bb1
  ^bb5465:  // pred: ^bb5464
    %2934 = pdl_interp.get_value_type of %2931 : !pdl.type
    pdl_interp.are_equal %2933, %2934 : !pdl.type -> ^bb5466, ^bb1
  ^bb5466:  // pred: ^bb5465
    %2935 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2933, %2935 : !pdl.type -> ^bb5467, ^bb1
  ^bb5467:  // pred: ^bb5466
    pdl_interp.record_match @rewriters::@sin_neg(%2932, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "arith.negf"]), loc([%arg0, %2]), root("math.sin") -> ^bb1
  ^bb5468:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5469, ^bb1
  ^bb5469:  // pred: ^bb5468
    pdl_interp.check_result_count of %2 is 1 -> ^bb5470, ^bb1
  ^bb5470:  // pred: ^bb5469
    %2936 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2936 : !pdl.value -> ^bb5471, ^bb1
  ^bb5471:  // pred: ^bb5470
    pdl_interp.are_equal %2936, %1 : !pdl.value -> ^bb5472, ^bb1
  ^bb5472:  // pred: ^bb5471
    %2937 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2937 : !pdl.value -> ^bb5473, ^bb1
  ^bb5473:  // pred: ^bb5472
    %2938 = pdl_interp.get_value_type of %2937 : !pdl.type
    pdl_interp.check_type %2938 is f32 -> ^bb5474, ^bb1
  ^bb5474:  // pred: ^bb5473
    %2939 = pdl_interp.get_value_type of %2936 : !pdl.type
    pdl_interp.are_equal %2938, %2939 : !pdl.type -> ^bb5475, ^bb1
  ^bb5475:  // pred: ^bb5474
    %2940 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2938, %2940 : !pdl.type -> ^bb5476, ^bb1
  ^bb5476:  // pred: ^bb5475
    pdl_interp.record_match @rewriters::@sin_asin(%2937, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("math.sin") -> ^bb1
  ^bb5477:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5478, ^bb1
  ^bb5478:  // pred: ^bb5477
    pdl_interp.check_result_count of %2 is 1 -> ^bb5479, ^bb1
  ^bb5479:  // pred: ^bb5478
    %2941 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2941 : !pdl.value -> ^bb5480, ^bb1
  ^bb5480:  // pred: ^bb5479
    pdl_interp.are_equal %2941, %1 : !pdl.value -> ^bb5481, ^bb1
  ^bb5481:  // pred: ^bb5480
    %2942 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2942 : !pdl.value -> ^bb5482, ^bb1
  ^bb5482:  // pred: ^bb5481
    %2943 = pdl_interp.get_operand 1 of %2
    %2944 = pdl_interp.get_defining_op of %2943 : !pdl.value
    pdl_interp.is_not_null %2944 : !pdl.operation -> ^bb5483, ^bb1
  ^bb5483:  // pred: ^bb5482
    %2945 = pdl_interp.get_defining_op of %2942 : !pdl.value
    pdl_interp.is_not_null %2945 : !pdl.operation -> ^bb5484, ^bb1
  ^bb5484:  // pred: ^bb5483
    pdl_interp.is_not_null %2943 : !pdl.value -> ^bb5485, ^bb1
  ^bb5485:  // pred: ^bb5484
    pdl_interp.check_operation_name of %2944 is "arith.constant" -> ^bb5486, ^bb1
  ^bb5486:  // pred: ^bb5485
    pdl_interp.check_operand_count of %2944 is 0 -> ^bb5487, ^bb1
  ^bb5487:  // pred: ^bb5486
    pdl_interp.check_result_count of %2944 is 1 -> ^bb5488, ^bb1
  ^bb5488:  // pred: ^bb5487
    %2946 = pdl_interp.get_result 0 of %2944
    pdl_interp.is_not_null %2946 : !pdl.value -> ^bb5489, ^bb1
  ^bb5489:  // pred: ^bb5488
    pdl_interp.are_equal %2946, %2943 : !pdl.value -> ^bb5490, ^bb1
  ^bb5490:  // pred: ^bb5489
    pdl_interp.check_operation_name of %2945 is "math_xdsl.constant" -> ^bb5491, ^bb1
  ^bb5491:  // pred: ^bb5490
    pdl_interp.check_operand_count of %2945 is 0 -> ^bb5492, ^bb1
  ^bb5492:  // pred: ^bb5491
    pdl_interp.check_result_count of %2945 is 1 -> ^bb5493, ^bb1
  ^bb5493:  // pred: ^bb5492
    %2947 = pdl_interp.get_result 0 of %2945
    pdl_interp.is_not_null %2947 : !pdl.value -> ^bb5494, ^bb1
  ^bb5494:  // pred: ^bb5493
    pdl_interp.are_equal %2947, %2942 : !pdl.value -> ^bb5495, ^bb1
  ^bb5495:  // pred: ^bb5494
    %2948 = pdl_interp.get_attribute "value" of %2944
    pdl_interp.is_not_null %2948 : !pdl.attribute -> ^bb5496, ^bb1
  ^bb5496:  // pred: ^bb5495
    pdl_interp.switch_attribute %2948 to [6.000000e+00 : f32, 4.000000e+00 : f32, 3.000000e+00 : f32, 2.000000e+00 : f32](^bb5497, ^bb5504, ^bb5511, ^bb5518) -> ^bb1
  ^bb5497:  // pred: ^bb5496
    %2949 = pdl_interp.get_attribute "value" of %2945
    pdl_interp.is_not_null %2949 : !pdl.attribute -> ^bb5498, ^bb1
  ^bb5498:  // pred: ^bb5497
    pdl_interp.check_attribute %2949 is #math_xdsl<constant pi> -> ^bb5499, ^bb1
  ^bb5499:  // pred: ^bb5498
    %2950 = pdl_interp.get_value_type of %2947 : !pdl.type
    pdl_interp.check_type %2950 is f32 -> ^bb5500, ^bb1
  ^bb5500:  // pred: ^bb5499
    %2951 = pdl_interp.get_value_type of %2941 : !pdl.type
    pdl_interp.are_equal %2950, %2951 : !pdl.type -> ^bb5501, ^bb1
  ^bb5501:  // pred: ^bb5500
    %2952 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2950, %2952 : !pdl.type -> ^bb5502, ^bb1
  ^bb5502:  // pred: ^bb5501
    %2953 = pdl_interp.get_value_type of %2946 : !pdl.type
    pdl_interp.are_equal %2950, %2953 : !pdl.type -> ^bb5503, ^bb1
  ^bb5503:  // pred: ^bb5502
    pdl_interp.record_match @rewriters::@sin_PIdiv6(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2, %2944, %2945]), root("math.sin") -> ^bb1
  ^bb5504:  // pred: ^bb5496
    %2954 = pdl_interp.get_attribute "value" of %2945
    pdl_interp.is_not_null %2954 : !pdl.attribute -> ^bb5505, ^bb1
  ^bb5505:  // pred: ^bb5504
    pdl_interp.check_attribute %2954 is #math_xdsl<constant pi> -> ^bb5506, ^bb1
  ^bb5506:  // pred: ^bb5505
    %2955 = pdl_interp.get_value_type of %2947 : !pdl.type
    pdl_interp.check_type %2955 is f32 -> ^bb5507, ^bb1
  ^bb5507:  // pred: ^bb5506
    %2956 = pdl_interp.get_value_type of %2941 : !pdl.type
    pdl_interp.are_equal %2955, %2956 : !pdl.type -> ^bb5508, ^bb1
  ^bb5508:  // pred: ^bb5507
    %2957 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2955, %2957 : !pdl.type -> ^bb5509, ^bb1
  ^bb5509:  // pred: ^bb5508
    %2958 = pdl_interp.get_value_type of %2946 : !pdl.type
    pdl_interp.are_equal %2955, %2958 : !pdl.type -> ^bb5510, ^bb1
  ^bb5510:  // pred: ^bb5509
    pdl_interp.record_match @rewriters::@sin_PIdiv4(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sqrt", "arith.constant", "arith.divf"]), loc([%arg0, %2, %2944, %2945]), root("math.sin") -> ^bb1
  ^bb5511:  // pred: ^bb5496
    %2959 = pdl_interp.get_attribute "value" of %2945
    pdl_interp.is_not_null %2959 : !pdl.attribute -> ^bb5512, ^bb1
  ^bb5512:  // pred: ^bb5511
    pdl_interp.check_attribute %2959 is #math_xdsl<constant pi> -> ^bb5513, ^bb1
  ^bb5513:  // pred: ^bb5512
    %2960 = pdl_interp.get_value_type of %2947 : !pdl.type
    pdl_interp.check_type %2960 is f32 -> ^bb5514, ^bb1
  ^bb5514:  // pred: ^bb5513
    %2961 = pdl_interp.get_value_type of %2941 : !pdl.type
    pdl_interp.are_equal %2960, %2961 : !pdl.type -> ^bb5515, ^bb1
  ^bb5515:  // pred: ^bb5514
    %2962 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2960, %2962 : !pdl.type -> ^bb5516, ^bb1
  ^bb5516:  // pred: ^bb5515
    %2963 = pdl_interp.get_value_type of %2946 : !pdl.type
    pdl_interp.are_equal %2960, %2963 : !pdl.type -> ^bb5517, ^bb1
  ^bb5517:  // pred: ^bb5516
    pdl_interp.record_match @rewriters::@sin_PIdiv3(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sqrt", "arith.constant", "arith.divf"]), loc([%arg0, %2, %2944, %2945]), root("math.sin") -> ^bb1
  ^bb5518:  // pred: ^bb5496
    %2964 = pdl_interp.get_attribute "value" of %2945
    pdl_interp.is_not_null %2964 : !pdl.attribute -> ^bb5519, ^bb1
  ^bb5519:  // pred: ^bb5518
    pdl_interp.check_attribute %2964 is #math_xdsl<constant pi> -> ^bb5520, ^bb1
  ^bb5520:  // pred: ^bb5519
    %2965 = pdl_interp.get_value_type of %2947 : !pdl.type
    pdl_interp.check_type %2965 is f32 -> ^bb5521, ^bb1
  ^bb5521:  // pred: ^bb5520
    %2966 = pdl_interp.get_value_type of %2941 : !pdl.type
    pdl_interp.are_equal %2965, %2966 : !pdl.type -> ^bb5522, ^bb1
  ^bb5522:  // pred: ^bb5521
    %2967 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2965, %2967 : !pdl.type -> ^bb5523, ^bb1
  ^bb5523:  // pred: ^bb5522
    %2968 = pdl_interp.get_value_type of %2946 : !pdl.type
    pdl_interp.are_equal %2965, %2968 : !pdl.type -> ^bb5524, ^bb1
  ^bb5524:  // pred: ^bb5523
    pdl_interp.record_match @rewriters::@sin_PIdiv2(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2, %2944, %2945]), root("math.sin") -> ^bb1
  ^bb5525:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 0 -> ^bb5526, ^bb1
  ^bb5526:  // pred: ^bb5525
    pdl_interp.check_result_count of %2 is 1 -> ^bb5527, ^bb1
  ^bb5527:  // pred: ^bb5526
    %2969 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2969 : !pdl.value -> ^bb5528, ^bb1
  ^bb5528:  // pred: ^bb5527
    pdl_interp.are_equal %2969, %1 : !pdl.value -> ^bb5529, ^bb1
  ^bb5529:  // pred: ^bb5528
    %2970 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %2970 : !pdl.attribute -> ^bb5530, ^bb1
  ^bb5530:  // pred: ^bb5529
    pdl_interp.check_attribute %2970 is #math_xdsl<constant pi> -> ^bb5531, ^bb1
  ^bb5531:  // pred: ^bb5530
    %2971 = pdl_interp.get_value_type of %2969 : !pdl.type
    pdl_interp.check_type %2971 is f32 -> ^bb5532, ^bb1
  ^bb5532:  // pred: ^bb5531
    %2972 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2971, %2972 : !pdl.type -> ^bb5533, ^bb1
  ^bb5533:  // pred: ^bb5532
    pdl_interp.record_match @rewriters::@sin_PI(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.sin") -> ^bb1
  ^bb5534:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5535, ^bb1
  ^bb5535:  // pred: ^bb5534
    pdl_interp.check_result_count of %2 is 1 -> ^bb5536, ^bb1
  ^bb5536:  // pred: ^bb5535
    %2973 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2973 : !pdl.value -> ^bb5537, ^bb1
  ^bb5537:  // pred: ^bb5536
    pdl_interp.are_equal %2973, %1 : !pdl.value -> ^bb5538, ^bb1
  ^bb5538:  // pred: ^bb5537
    %2974 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2974 : !pdl.value -> ^bb5539, ^bb1
  ^bb5539:  // pred: ^bb5538
    %2975 = pdl_interp.get_value_type of %2974 : !pdl.type
    pdl_interp.check_type %2975 is f32 -> ^bb5540, ^bb1
  ^bb5540:  // pred: ^bb5539
    %2976 = pdl_interp.get_value_type of %2973 : !pdl.type
    pdl_interp.are_equal %2975, %2976 : !pdl.type -> ^bb5541, ^bb1
  ^bb5541:  // pred: ^bb5540
    %2977 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2975, %2977 : !pdl.type -> ^bb5542, ^bb1
  ^bb5542:  // pred: ^bb5541
    %2978 = pdl_interp.get_operand 1 of %2
    %2979 = pdl_interp.get_defining_op of %2978 : !pdl.value
    pdl_interp.is_not_null %2979 : !pdl.operation -> ^bb5546, ^bb5543
  ^bb5543:  // 37 preds: ^bb5542, ^bb5546, ^bb5547, ^bb5548, ^bb5549, ^bb5550, ^bb5551, ^bb5552, ^bb5553, ^bb5554, ^bb5555, ^bb5556, ^bb5557, ^bb5558, ^bb5559, ^bb5560, ^bb5561, ^bb5562, ^bb5563, ^bb5564, ^bb5565, ^bb5566, ^bb5567, ^bb5568, ^bb5569, ^bb5570, ^bb5571, ^bb5572, ^bb5573, ^bb5574, ^bb5575, ^bb5576, ^bb5577, ^bb5578, ^bb5579, ^bb5580, ^bb5581
    %2980 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %2980 : !pdl.value -> ^bb5544, ^bb1
  ^bb5544:  // pred: ^bb5543
    %2981 = pdl_interp.get_value_type of %2980 : !pdl.type
    pdl_interp.are_equal %2975, %2981 : !pdl.type -> ^bb5545, ^bb1
  ^bb5545:  // pred: ^bb5544
    pdl_interp.record_match @rewriters::@sin_sum(%2974, %2980, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.cos", "arith.mulf", "math.cos", "math.sin", "arith.mulf", "arith.addf"]), loc([%arg0, %2]), root("math.sin") -> ^bb1
  ^bb5546:  // pred: ^bb5542
    pdl_interp.is_not_null %2978 : !pdl.value -> ^bb5547, ^bb5543
  ^bb5547:  // pred: ^bb5546
    pdl_interp.switch_operation_name of %2979 to ["math_xdsl.constant", "arith.divf"](^bb5548, ^bb5556) -> ^bb5543
  ^bb5548:  // pred: ^bb5547
    pdl_interp.check_operand_count of %2979 is 0 -> ^bb5549, ^bb5543
  ^bb5549:  // pred: ^bb5548
    pdl_interp.check_result_count of %2979 is 1 -> ^bb5550, ^bb5543
  ^bb5550:  // pred: ^bb5549
    %2982 = pdl_interp.get_result 0 of %2979
    pdl_interp.is_not_null %2982 : !pdl.value -> ^bb5551, ^bb5543
  ^bb5551:  // pred: ^bb5550
    pdl_interp.are_equal %2982, %2978 : !pdl.value -> ^bb5552, ^bb5543
  ^bb5552:  // pred: ^bb5551
    %2983 = pdl_interp.get_attribute "value" of %2979
    pdl_interp.is_not_null %2983 : !pdl.attribute -> ^bb5553, ^bb5543
  ^bb5553:  // pred: ^bb5552
    pdl_interp.check_attribute %2983 is #math_xdsl<constant pi> -> ^bb5554, ^bb5543
  ^bb5554:  // pred: ^bb5553
    %2984 = pdl_interp.get_value_type of %2982 : !pdl.type
    pdl_interp.are_equal %2984, %2975 : !pdl.type -> ^bb5555, ^bb5543
  ^bb5555:  // pred: ^bb5554
    pdl_interp.record_match @rewriters::@sin_addPI(%2974, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "arith.negf"]), loc([%arg0, %2, %2979]), root("math.sin") -> ^bb5543
  ^bb5556:  // pred: ^bb5547
    pdl_interp.check_operand_count of %2979 is 2 -> ^bb5557, ^bb5543
  ^bb5557:  // pred: ^bb5556
    pdl_interp.check_result_count of %2979 is 1 -> ^bb5558, ^bb5543
  ^bb5558:  // pred: ^bb5557
    %2985 = pdl_interp.get_result 0 of %2979
    pdl_interp.is_not_null %2985 : !pdl.value -> ^bb5559, ^bb5543
  ^bb5559:  // pred: ^bb5558
    pdl_interp.are_equal %2985, %2978 : !pdl.value -> ^bb5560, ^bb5543
  ^bb5560:  // pred: ^bb5559
    %2986 = pdl_interp.get_operand 0 of %2979
    pdl_interp.is_not_null %2986 : !pdl.value -> ^bb5561, ^bb5543
  ^bb5561:  // pred: ^bb5560
    %2987 = pdl_interp.get_defining_op of %2986 : !pdl.value
    pdl_interp.is_not_null %2987 : !pdl.operation -> ^bb5562, ^bb5543
  ^bb5562:  // pred: ^bb5561
    %2988 = pdl_interp.get_value_type of %2985 : !pdl.type
    pdl_interp.are_equal %2988, %2975 : !pdl.type -> ^bb5563, ^bb5543
  ^bb5563:  // pred: ^bb5562
    %2989 = pdl_interp.get_operand 1 of %2979
    %2990 = pdl_interp.get_defining_op of %2989 : !pdl.value
    pdl_interp.is_not_null %2990 : !pdl.operation -> ^bb5564, ^bb5543
  ^bb5564:  // pred: ^bb5563
    pdl_interp.check_operation_name of %2987 is "math_xdsl.constant" -> ^bb5565, ^bb5543
  ^bb5565:  // pred: ^bb5564
    pdl_interp.check_operand_count of %2987 is 0 -> ^bb5566, ^bb5543
  ^bb5566:  // pred: ^bb5565
    pdl_interp.check_result_count of %2987 is 1 -> ^bb5567, ^bb5543
  ^bb5567:  // pred: ^bb5566
    %2991 = pdl_interp.get_result 0 of %2987
    pdl_interp.is_not_null %2991 : !pdl.value -> ^bb5568, ^bb5543
  ^bb5568:  // pred: ^bb5567
    pdl_interp.are_equal %2991, %2986 : !pdl.value -> ^bb5569, ^bb5543
  ^bb5569:  // pred: ^bb5568
    pdl_interp.is_not_null %2989 : !pdl.value -> ^bb5570, ^bb5543
  ^bb5570:  // pred: ^bb5569
    pdl_interp.check_operation_name of %2990 is "arith.constant" -> ^bb5571, ^bb5543
  ^bb5571:  // pred: ^bb5570
    pdl_interp.check_operand_count of %2990 is 0 -> ^bb5572, ^bb5543
  ^bb5572:  // pred: ^bb5571
    pdl_interp.check_result_count of %2990 is 1 -> ^bb5573, ^bb5543
  ^bb5573:  // pred: ^bb5572
    %2992 = pdl_interp.get_result 0 of %2990
    pdl_interp.is_not_null %2992 : !pdl.value -> ^bb5574, ^bb5543
  ^bb5574:  // pred: ^bb5573
    pdl_interp.are_equal %2992, %2989 : !pdl.value -> ^bb5575, ^bb5543
  ^bb5575:  // pred: ^bb5574
    %2993 = pdl_interp.get_attribute "value" of %2987
    pdl_interp.is_not_null %2993 : !pdl.attribute -> ^bb5576, ^bb5543
  ^bb5576:  // pred: ^bb5575
    pdl_interp.check_attribute %2993 is #math_xdsl<constant pi> -> ^bb5577, ^bb5543
  ^bb5577:  // pred: ^bb5576
    %2994 = pdl_interp.get_attribute "value" of %2990
    pdl_interp.is_not_null %2994 : !pdl.attribute -> ^bb5578, ^bb5543
  ^bb5578:  // pred: ^bb5577
    pdl_interp.check_attribute %2994 is 2.000000e+00 : f32 -> ^bb5579, ^bb5543
  ^bb5579:  // pred: ^bb5578
    %2995 = pdl_interp.get_value_type of %2991 : !pdl.type
    pdl_interp.are_equal %2995, %2975 : !pdl.type -> ^bb5580, ^bb5543
  ^bb5580:  // pred: ^bb5579
    %2996 = pdl_interp.get_value_type of %2992 : !pdl.type
    pdl_interp.are_equal %2996, %2975 : !pdl.type -> ^bb5581, ^bb5543
  ^bb5581:  // pred: ^bb5580
    pdl_interp.record_match @rewriters::@sin_addPIdiv2(%2974, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos"]), loc([%arg0, %2, %2979, %2987, %2990]), root("math.sin") -> ^bb5543
  ^bb5582:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5583, ^bb1
  ^bb5583:  // pred: ^bb5582
    pdl_interp.check_result_count of %2 is 1 -> ^bb5584, ^bb1
  ^bb5584:  // pred: ^bb5583
    %2997 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %2997 : !pdl.value -> ^bb5585, ^bb1
  ^bb5585:  // pred: ^bb5584
    pdl_interp.are_equal %2997, %1 : !pdl.value -> ^bb5586, ^bb1
  ^bb5586:  // pred: ^bb5585
    %2998 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %2998 : !pdl.value -> ^bb5587, ^bb1
  ^bb5587:  // pred: ^bb5586
    %2999 = pdl_interp.get_value_type of %2998 : !pdl.type
    pdl_interp.check_type %2999 is f32 -> ^bb5588, ^bb1
  ^bb5588:  // pred: ^bb5587
    %3000 = pdl_interp.get_value_type of %2997 : !pdl.type
    pdl_interp.are_equal %2999, %3000 : !pdl.type -> ^bb5589, ^bb1
  ^bb5589:  // pred: ^bb5588
    %3001 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %2999, %3001 : !pdl.type -> ^bb5590, ^bb1
  ^bb5590:  // pred: ^bb5589
    %3002 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3002 : !pdl.value -> ^bb5591, ^bb1
  ^bb5591:  // pred: ^bb5590
    %3003 = pdl_interp.get_value_type of %3002 : !pdl.type
    pdl_interp.are_equal %2999, %3003 : !pdl.type -> ^bb5592, ^bb1
  ^bb5592:  // pred: ^bb5591
    pdl_interp.record_match @rewriters::@sin_diff(%2998, %3002, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.cos", "arith.mulf", "math.cos", "math.sin", "arith.mulf", "arith.subf"]), loc([%arg0, %2]), root("math.sin") -> ^bb1
  ^bb5593:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5594, ^bb1
  ^bb5594:  // pred: ^bb5593
    pdl_interp.check_result_count of %2 is 1 -> ^bb5595, ^bb1
  ^bb5595:  // pred: ^bb5594
    %3004 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3004 : !pdl.value -> ^bb5596, ^bb1
  ^bb5596:  // pred: ^bb5595
    pdl_interp.are_equal %3004, %1 : !pdl.value -> ^bb5597, ^bb1
  ^bb5597:  // pred: ^bb5596
    %3005 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3005 : !pdl.value -> ^bb5598, ^bb1
  ^bb5598:  // pred: ^bb5597
    %3006 = pdl_interp.get_defining_op of %3005 : !pdl.value
    pdl_interp.is_not_null %3006 : !pdl.operation -> ^bb5599, ^bb1
  ^bb5599:  // pred: ^bb5598
    %3007 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3007 : !pdl.value -> ^bb5600, ^bb1
  ^bb5600:  // pred: ^bb5599
    pdl_interp.check_operation_name of %3006 is "arith.constant" -> ^bb5601, ^bb1
  ^bb5601:  // pred: ^bb5600
    pdl_interp.check_operand_count of %3006 is 0 -> ^bb5602, ^bb1
  ^bb5602:  // pred: ^bb5601
    pdl_interp.check_result_count of %3006 is 1 -> ^bb5603, ^bb1
  ^bb5603:  // pred: ^bb5602
    %3008 = pdl_interp.get_result 0 of %3006
    pdl_interp.is_not_null %3008 : !pdl.value -> ^bb5604, ^bb1
  ^bb5604:  // pred: ^bb5603
    pdl_interp.are_equal %3008, %3005 : !pdl.value -> ^bb5605, ^bb1
  ^bb5605:  // pred: ^bb5604
    %3009 = pdl_interp.get_attribute "value" of %3006
    pdl_interp.is_not_null %3009 : !pdl.attribute -> ^bb5606, ^bb1
  ^bb5606:  // pred: ^bb5605
    pdl_interp.switch_attribute %3009 to [2.000000e+00 : f32, 3.000000e+00 : f32](^bb5607, ^bb5612) -> ^bb1
  ^bb5607:  // pred: ^bb5606
    %3010 = pdl_interp.get_value_type of %3008 : !pdl.type
    pdl_interp.check_type %3010 is f32 -> ^bb5608, ^bb1
  ^bb5608:  // pred: ^bb5607
    %3011 = pdl_interp.get_value_type of %3004 : !pdl.type
    pdl_interp.are_equal %3010, %3011 : !pdl.type -> ^bb5609, ^bb1
  ^bb5609:  // pred: ^bb5608
    %3012 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3010, %3012 : !pdl.type -> ^bb5610, ^bb1
  ^bb5610:  // pred: ^bb5609
    %3013 = pdl_interp.get_value_type of %3007 : !pdl.type
    pdl_interp.are_equal %3010, %3013 : !pdl.type -> ^bb5611, ^bb1
  ^bb5611:  // pred: ^bb5610
    pdl_interp.record_match @rewriters::@sin_2(%3007, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sin", "math.cos", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %3006]), root("math.sin") -> ^bb1
  ^bb5612:  // pred: ^bb5606
    %3014 = pdl_interp.get_value_type of %3008 : !pdl.type
    pdl_interp.check_type %3014 is f32 -> ^bb5613, ^bb1
  ^bb5613:  // pred: ^bb5612
    %3015 = pdl_interp.get_value_type of %3004 : !pdl.type
    pdl_interp.are_equal %3014, %3015 : !pdl.type -> ^bb5614, ^bb1
  ^bb5614:  // pred: ^bb5613
    %3016 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3014, %3016 : !pdl.type -> ^bb5615, ^bb1
  ^bb5615:  // pred: ^bb5614
    %3017 = pdl_interp.get_value_type of %3007 : !pdl.type
    pdl_interp.are_equal %3014, %3017 : !pdl.type -> ^bb5616, ^bb1
  ^bb5616:  // pred: ^bb5615
    pdl_interp.record_match @rewriters::@sin_3(%3007, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sin", "arith.mulf", "arith.constant", "math.sin", "arith.constant", "math.powf", "arith.mulf", "arith.subf"]), loc([%arg0, %2, %3006]), root("math.sin") -> ^bb1
  ^bb5617:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5618, ^bb1
  ^bb5618:  // pred: ^bb5617
    pdl_interp.check_result_count of %2 is 1 -> ^bb5619, ^bb1
  ^bb5619:  // pred: ^bb5618
    %3018 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3018 : !pdl.value -> ^bb5620, ^bb1
  ^bb5620:  // pred: ^bb5619
    pdl_interp.are_equal %3018, %1 : !pdl.value -> ^bb5621, ^bb1
  ^bb5621:  // pred: ^bb5620
    %3019 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3019 : !pdl.value -> ^bb5622, ^bb1
  ^bb5622:  // pred: ^bb5621
    %3020 = pdl_interp.get_value_type of %3019 : !pdl.type
    pdl_interp.check_type %3020 is f32 -> ^bb5623, ^bb1
  ^bb5623:  // pred: ^bb5622
    %3021 = pdl_interp.get_value_type of %3018 : !pdl.type
    pdl_interp.are_equal %3020, %3021 : !pdl.type -> ^bb5624, ^bb1
  ^bb5624:  // pred: ^bb5623
    %3022 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3020, %3022 : !pdl.type -> ^bb5625, ^bb1
  ^bb5625:  // pred: ^bb5624
    pdl_interp.record_match @rewriters::@sin_acos(%3019, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "arith.subf", "math.sqrt"]), loc([%arg0, %2]), root("math.sin") -> ^bb1
  ^bb5626:  // pred: ^bb5449
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5627, ^bb1
  ^bb5627:  // pred: ^bb5626
    pdl_interp.check_result_count of %2 is 1 -> ^bb5628, ^bb1
  ^bb5628:  // pred: ^bb5627
    %3023 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3023 : !pdl.value -> ^bb5629, ^bb1
  ^bb5629:  // pred: ^bb5628
    pdl_interp.are_equal %3023, %1 : !pdl.value -> ^bb5630, ^bb1
  ^bb5630:  // pred: ^bb5629
    %3024 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3024 : !pdl.value -> ^bb5631, ^bb1
  ^bb5631:  // pred: ^bb5630
    %3025 = pdl_interp.get_value_type of %3024 : !pdl.type
    pdl_interp.check_type %3025 is f32 -> ^bb5632, ^bb1
  ^bb5632:  // pred: ^bb5631
    %3026 = pdl_interp.get_value_type of %3023 : !pdl.type
    pdl_interp.are_equal %3025, %3026 : !pdl.type -> ^bb5633, ^bb1
  ^bb5633:  // pred: ^bb5632
    %3027 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3025, %3027 : !pdl.type -> ^bb5634, ^bb1
  ^bb5634:  // pred: ^bb5633
    pdl_interp.record_match @rewriters::@sin_atan(%3024, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "arith.addf", "math.sqrt", "arith.divf"]), loc([%arg0, %2]), root("math.sin") -> ^bb1
  ^bb5635:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb5636, ^bb1
  ^bb5636:  // pred: ^bb5635
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb5637, ^bb1
  ^bb5637:  // pred: ^bb5636
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb5638, ^bb1
  ^bb5638:  // pred: ^bb5637
    pdl_interp.switch_operation_name of %2 to ["arith.constant", "arith.negf", "math.absf", "math.acos", "arith.divf", "math_xdsl.constant", "arith.addf", "arith.subf", "arith.mulf", "math.asin", "math.atan"](^bb5639, ^bb5648, ^bb5657, ^bb5666, ^bb5675, ^bb5723, ^bb5732, ^bb5780, ^bb5791, ^bb5815, ^bb5824) -> ^bb1
  ^bb5639:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 0 -> ^bb5640, ^bb1
  ^bb5640:  // pred: ^bb5639
    pdl_interp.check_result_count of %2 is 1 -> ^bb5641, ^bb1
  ^bb5641:  // pred: ^bb5640
    %3028 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3028 : !pdl.value -> ^bb5642, ^bb1
  ^bb5642:  // pred: ^bb5641
    pdl_interp.are_equal %3028, %1 : !pdl.value -> ^bb5643, ^bb1
  ^bb5643:  // pred: ^bb5642
    %3029 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %3029 : !pdl.attribute -> ^bb5644, ^bb1
  ^bb5644:  // pred: ^bb5643
    pdl_interp.check_attribute %3029 is 0.000000e+00 : f32 -> ^bb5645, ^bb1
  ^bb5645:  // pred: ^bb5644
    %3030 = pdl_interp.get_value_type of %3028 : !pdl.type
    pdl_interp.check_type %3030 is f32 -> ^bb5646, ^bb1
  ^bb5646:  // pred: ^bb5645
    %3031 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3030, %3031 : !pdl.type -> ^bb5647, ^bb1
  ^bb5647:  // pred: ^bb5646
    pdl_interp.record_match @rewriters::@cos_0(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.cos") -> ^bb1
  ^bb5648:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5649, ^bb1
  ^bb5649:  // pred: ^bb5648
    pdl_interp.check_result_count of %2 is 1 -> ^bb5650, ^bb1
  ^bb5650:  // pred: ^bb5649
    %3032 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3032 : !pdl.value -> ^bb5651, ^bb1
  ^bb5651:  // pred: ^bb5650
    pdl_interp.are_equal %3032, %1 : !pdl.value -> ^bb5652, ^bb1
  ^bb5652:  // pred: ^bb5651
    %3033 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3033 : !pdl.value -> ^bb5653, ^bb1
  ^bb5653:  // pred: ^bb5652
    %3034 = pdl_interp.get_value_type of %3033 : !pdl.type
    pdl_interp.check_type %3034 is f32 -> ^bb5654, ^bb1
  ^bb5654:  // pred: ^bb5653
    %3035 = pdl_interp.get_value_type of %3032 : !pdl.type
    pdl_interp.are_equal %3034, %3035 : !pdl.type -> ^bb5655, ^bb1
  ^bb5655:  // pred: ^bb5654
    %3036 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3034, %3036 : !pdl.type -> ^bb5656, ^bb1
  ^bb5656:  // pred: ^bb5655
    pdl_interp.record_match @rewriters::@cos_neg(%3033, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos"]), loc([%arg0, %2]), root("math.cos") -> ^bb1
  ^bb5657:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5658, ^bb1
  ^bb5658:  // pred: ^bb5657
    pdl_interp.check_result_count of %2 is 1 -> ^bb5659, ^bb1
  ^bb5659:  // pred: ^bb5658
    %3037 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3037 : !pdl.value -> ^bb5660, ^bb1
  ^bb5660:  // pred: ^bb5659
    pdl_interp.are_equal %3037, %1 : !pdl.value -> ^bb5661, ^bb1
  ^bb5661:  // pred: ^bb5660
    %3038 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3038 : !pdl.value -> ^bb5662, ^bb1
  ^bb5662:  // pred: ^bb5661
    %3039 = pdl_interp.get_value_type of %3038 : !pdl.type
    pdl_interp.check_type %3039 is f32 -> ^bb5663, ^bb1
  ^bb5663:  // pred: ^bb5662
    %3040 = pdl_interp.get_value_type of %3037 : !pdl.type
    pdl_interp.are_equal %3039, %3040 : !pdl.type -> ^bb5664, ^bb1
  ^bb5664:  // pred: ^bb5663
    %3041 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3039, %3041 : !pdl.type -> ^bb5665, ^bb1
  ^bb5665:  // pred: ^bb5664
    pdl_interp.record_match @rewriters::@cos_fabs(%3038, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos"]), loc([%arg0, %2]), root("math.cos") -> ^bb1
  ^bb5666:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5667, ^bb1
  ^bb5667:  // pred: ^bb5666
    pdl_interp.check_result_count of %2 is 1 -> ^bb5668, ^bb1
  ^bb5668:  // pred: ^bb5667
    %3042 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3042 : !pdl.value -> ^bb5669, ^bb1
  ^bb5669:  // pred: ^bb5668
    pdl_interp.are_equal %3042, %1 : !pdl.value -> ^bb5670, ^bb1
  ^bb5670:  // pred: ^bb5669
    %3043 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3043 : !pdl.value -> ^bb5671, ^bb1
  ^bb5671:  // pred: ^bb5670
    %3044 = pdl_interp.get_value_type of %3043 : !pdl.type
    pdl_interp.check_type %3044 is f32 -> ^bb5672, ^bb1
  ^bb5672:  // pred: ^bb5671
    %3045 = pdl_interp.get_value_type of %3042 : !pdl.type
    pdl_interp.are_equal %3044, %3045 : !pdl.type -> ^bb5673, ^bb1
  ^bb5673:  // pred: ^bb5672
    %3046 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3044, %3046 : !pdl.type -> ^bb5674, ^bb1
  ^bb5674:  // pred: ^bb5673
    pdl_interp.record_match @rewriters::@cos_acos(%3043, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("math.cos") -> ^bb1
  ^bb5675:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5676, ^bb1
  ^bb5676:  // pred: ^bb5675
    pdl_interp.check_result_count of %2 is 1 -> ^bb5677, ^bb1
  ^bb5677:  // pred: ^bb5676
    %3047 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3047 : !pdl.value -> ^bb5678, ^bb1
  ^bb5678:  // pred: ^bb5677
    pdl_interp.are_equal %3047, %1 : !pdl.value -> ^bb5679, ^bb1
  ^bb5679:  // pred: ^bb5678
    %3048 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3048 : !pdl.value -> ^bb5680, ^bb1
  ^bb5680:  // pred: ^bb5679
    %3049 = pdl_interp.get_operand 1 of %2
    %3050 = pdl_interp.get_defining_op of %3049 : !pdl.value
    pdl_interp.is_not_null %3050 : !pdl.operation -> ^bb5681, ^bb1
  ^bb5681:  // pred: ^bb5680
    %3051 = pdl_interp.get_defining_op of %3048 : !pdl.value
    pdl_interp.is_not_null %3051 : !pdl.operation -> ^bb5682, ^bb1
  ^bb5682:  // pred: ^bb5681
    pdl_interp.is_not_null %3049 : !pdl.value -> ^bb5683, ^bb1
  ^bb5683:  // pred: ^bb5682
    pdl_interp.check_operation_name of %3050 is "arith.constant" -> ^bb5684, ^bb1
  ^bb5684:  // pred: ^bb5683
    pdl_interp.check_operand_count of %3050 is 0 -> ^bb5685, ^bb1
  ^bb5685:  // pred: ^bb5684
    pdl_interp.check_result_count of %3050 is 1 -> ^bb5686, ^bb1
  ^bb5686:  // pred: ^bb5685
    %3052 = pdl_interp.get_result 0 of %3050
    pdl_interp.is_not_null %3052 : !pdl.value -> ^bb5687, ^bb1
  ^bb5687:  // pred: ^bb5686
    pdl_interp.are_equal %3052, %3049 : !pdl.value -> ^bb5688, ^bb1
  ^bb5688:  // pred: ^bb5687
    pdl_interp.check_operation_name of %3051 is "math_xdsl.constant" -> ^bb5689, ^bb1
  ^bb5689:  // pred: ^bb5688
    pdl_interp.check_operand_count of %3051 is 0 -> ^bb5690, ^bb1
  ^bb5690:  // pred: ^bb5689
    pdl_interp.check_result_count of %3051 is 1 -> ^bb5691, ^bb1
  ^bb5691:  // pred: ^bb5690
    %3053 = pdl_interp.get_result 0 of %3051
    pdl_interp.is_not_null %3053 : !pdl.value -> ^bb5692, ^bb1
  ^bb5692:  // pred: ^bb5691
    pdl_interp.are_equal %3053, %3048 : !pdl.value -> ^bb5693, ^bb1
  ^bb5693:  // pred: ^bb5692
    %3054 = pdl_interp.get_attribute "value" of %3050
    pdl_interp.is_not_null %3054 : !pdl.attribute -> ^bb5694, ^bb1
  ^bb5694:  // pred: ^bb5693
    pdl_interp.switch_attribute %3054 to [6.000000e+00 : f32, 4.000000e+00 : f32, 3.000000e+00 : f32, 2.000000e+00 : f32](^bb5695, ^bb5702, ^bb5709, ^bb5716) -> ^bb1
  ^bb5695:  // pred: ^bb5694
    %3055 = pdl_interp.get_attribute "value" of %3051
    pdl_interp.is_not_null %3055 : !pdl.attribute -> ^bb5696, ^bb1
  ^bb5696:  // pred: ^bb5695
    pdl_interp.check_attribute %3055 is #math_xdsl<constant pi> -> ^bb5697, ^bb1
  ^bb5697:  // pred: ^bb5696
    %3056 = pdl_interp.get_value_type of %3053 : !pdl.type
    pdl_interp.check_type %3056 is f32 -> ^bb5698, ^bb1
  ^bb5698:  // pred: ^bb5697
    %3057 = pdl_interp.get_value_type of %3047 : !pdl.type
    pdl_interp.are_equal %3056, %3057 : !pdl.type -> ^bb5699, ^bb1
  ^bb5699:  // pred: ^bb5698
    %3058 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3056, %3058 : !pdl.type -> ^bb5700, ^bb1
  ^bb5700:  // pred: ^bb5699
    %3059 = pdl_interp.get_value_type of %3052 : !pdl.type
    pdl_interp.are_equal %3056, %3059 : !pdl.type -> ^bb5701, ^bb1
  ^bb5701:  // pred: ^bb5700
    pdl_interp.record_match @rewriters::@cos_PIdiv6(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sqrt", "arith.constant", "arith.divf"]), loc([%arg0, %2, %3050, %3051]), root("math.cos") -> ^bb1
  ^bb5702:  // pred: ^bb5694
    %3060 = pdl_interp.get_attribute "value" of %3051
    pdl_interp.is_not_null %3060 : !pdl.attribute -> ^bb5703, ^bb1
  ^bb5703:  // pred: ^bb5702
    pdl_interp.check_attribute %3060 is #math_xdsl<constant pi> -> ^bb5704, ^bb1
  ^bb5704:  // pred: ^bb5703
    %3061 = pdl_interp.get_value_type of %3053 : !pdl.type
    pdl_interp.check_type %3061 is f32 -> ^bb5705, ^bb1
  ^bb5705:  // pred: ^bb5704
    %3062 = pdl_interp.get_value_type of %3047 : !pdl.type
    pdl_interp.are_equal %3061, %3062 : !pdl.type -> ^bb5706, ^bb1
  ^bb5706:  // pred: ^bb5705
    %3063 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3061, %3063 : !pdl.type -> ^bb5707, ^bb1
  ^bb5707:  // pred: ^bb5706
    %3064 = pdl_interp.get_value_type of %3052 : !pdl.type
    pdl_interp.are_equal %3061, %3064 : !pdl.type -> ^bb5708, ^bb1
  ^bb5708:  // pred: ^bb5707
    pdl_interp.record_match @rewriters::@cos_PIdiv4(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sqrt", "arith.constant", "arith.divf"]), loc([%arg0, %2, %3050, %3051]), root("math.cos") -> ^bb1
  ^bb5709:  // pred: ^bb5694
    %3065 = pdl_interp.get_attribute "value" of %3051
    pdl_interp.is_not_null %3065 : !pdl.attribute -> ^bb5710, ^bb1
  ^bb5710:  // pred: ^bb5709
    pdl_interp.check_attribute %3065 is #math_xdsl<constant pi> -> ^bb5711, ^bb1
  ^bb5711:  // pred: ^bb5710
    %3066 = pdl_interp.get_value_type of %3053 : !pdl.type
    pdl_interp.check_type %3066 is f32 -> ^bb5712, ^bb1
  ^bb5712:  // pred: ^bb5711
    %3067 = pdl_interp.get_value_type of %3047 : !pdl.type
    pdl_interp.are_equal %3066, %3067 : !pdl.type -> ^bb5713, ^bb1
  ^bb5713:  // pred: ^bb5712
    %3068 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3066, %3068 : !pdl.type -> ^bb5714, ^bb1
  ^bb5714:  // pred: ^bb5713
    %3069 = pdl_interp.get_value_type of %3052 : !pdl.type
    pdl_interp.are_equal %3066, %3069 : !pdl.type -> ^bb5715, ^bb1
  ^bb5715:  // pred: ^bb5714
    pdl_interp.record_match @rewriters::@cos_PIdiv3(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2, %3050, %3051]), root("math.cos") -> ^bb1
  ^bb5716:  // pred: ^bb5694
    %3070 = pdl_interp.get_attribute "value" of %3051
    pdl_interp.is_not_null %3070 : !pdl.attribute -> ^bb5717, ^bb1
  ^bb5717:  // pred: ^bb5716
    pdl_interp.check_attribute %3070 is #math_xdsl<constant pi> -> ^bb5718, ^bb1
  ^bb5718:  // pred: ^bb5717
    %3071 = pdl_interp.get_value_type of %3053 : !pdl.type
    pdl_interp.check_type %3071 is f32 -> ^bb5719, ^bb1
  ^bb5719:  // pred: ^bb5718
    %3072 = pdl_interp.get_value_type of %3047 : !pdl.type
    pdl_interp.are_equal %3071, %3072 : !pdl.type -> ^bb5720, ^bb1
  ^bb5720:  // pred: ^bb5719
    %3073 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3071, %3073 : !pdl.type -> ^bb5721, ^bb1
  ^bb5721:  // pred: ^bb5720
    %3074 = pdl_interp.get_value_type of %3052 : !pdl.type
    pdl_interp.are_equal %3071, %3074 : !pdl.type -> ^bb5722, ^bb1
  ^bb5722:  // pred: ^bb5721
    pdl_interp.record_match @rewriters::@cos_PIdiv2(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2, %3050, %3051]), root("math.cos") -> ^bb1
  ^bb5723:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 0 -> ^bb5724, ^bb1
  ^bb5724:  // pred: ^bb5723
    pdl_interp.check_result_count of %2 is 1 -> ^bb5725, ^bb1
  ^bb5725:  // pred: ^bb5724
    %3075 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3075 : !pdl.value -> ^bb5726, ^bb1
  ^bb5726:  // pred: ^bb5725
    pdl_interp.are_equal %3075, %1 : !pdl.value -> ^bb5727, ^bb1
  ^bb5727:  // pred: ^bb5726
    %3076 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %3076 : !pdl.attribute -> ^bb5728, ^bb1
  ^bb5728:  // pred: ^bb5727
    pdl_interp.check_attribute %3076 is #math_xdsl<constant pi> -> ^bb5729, ^bb1
  ^bb5729:  // pred: ^bb5728
    %3077 = pdl_interp.get_value_type of %3075 : !pdl.type
    pdl_interp.check_type %3077 is f32 -> ^bb5730, ^bb1
  ^bb5730:  // pred: ^bb5729
    %3078 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3077, %3078 : !pdl.type -> ^bb5731, ^bb1
  ^bb5731:  // pred: ^bb5730
    pdl_interp.record_match @rewriters::@cos_PI(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.cos") -> ^bb1
  ^bb5732:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5733, ^bb1
  ^bb5733:  // pred: ^bb5732
    pdl_interp.check_result_count of %2 is 1 -> ^bb5734, ^bb1
  ^bb5734:  // pred: ^bb5733
    %3079 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3079 : !pdl.value -> ^bb5735, ^bb1
  ^bb5735:  // pred: ^bb5734
    pdl_interp.are_equal %3079, %1 : !pdl.value -> ^bb5736, ^bb1
  ^bb5736:  // pred: ^bb5735
    %3080 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3080 : !pdl.value -> ^bb5737, ^bb1
  ^bb5737:  // pred: ^bb5736
    %3081 = pdl_interp.get_value_type of %3080 : !pdl.type
    pdl_interp.check_type %3081 is f32 -> ^bb5738, ^bb1
  ^bb5738:  // pred: ^bb5737
    %3082 = pdl_interp.get_value_type of %3079 : !pdl.type
    pdl_interp.are_equal %3081, %3082 : !pdl.type -> ^bb5739, ^bb1
  ^bb5739:  // pred: ^bb5738
    %3083 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3081, %3083 : !pdl.type -> ^bb5740, ^bb1
  ^bb5740:  // pred: ^bb5739
    %3084 = pdl_interp.get_operand 1 of %2
    %3085 = pdl_interp.get_defining_op of %3084 : !pdl.value
    pdl_interp.is_not_null %3085 : !pdl.operation -> ^bb5744, ^bb5741
  ^bb5741:  // 37 preds: ^bb5740, ^bb5744, ^bb5745, ^bb5746, ^bb5747, ^bb5748, ^bb5749, ^bb5750, ^bb5751, ^bb5752, ^bb5753, ^bb5754, ^bb5755, ^bb5756, ^bb5757, ^bb5758, ^bb5759, ^bb5760, ^bb5761, ^bb5762, ^bb5763, ^bb5764, ^bb5765, ^bb5766, ^bb5767, ^bb5768, ^bb5769, ^bb5770, ^bb5771, ^bb5772, ^bb5773, ^bb5774, ^bb5775, ^bb5776, ^bb5777, ^bb5778, ^bb5779
    %3086 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3086 : !pdl.value -> ^bb5742, ^bb1
  ^bb5742:  // pred: ^bb5741
    %3087 = pdl_interp.get_value_type of %3086 : !pdl.type
    pdl_interp.are_equal %3081, %3087 : !pdl.type -> ^bb5743, ^bb1
  ^bb5743:  // pred: ^bb5742
    pdl_interp.record_match @rewriters::@cos_sum(%3080, %3086, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.mulf", "math.sin", "math.sin", "arith.mulf", "arith.subf"]), loc([%arg0, %2]), root("math.cos") -> ^bb1
  ^bb5744:  // pred: ^bb5740
    pdl_interp.is_not_null %3084 : !pdl.value -> ^bb5745, ^bb5741
  ^bb5745:  // pred: ^bb5744
    pdl_interp.switch_operation_name of %3085 to ["math_xdsl.constant", "arith.divf"](^bb5746, ^bb5754) -> ^bb5741
  ^bb5746:  // pred: ^bb5745
    pdl_interp.check_operand_count of %3085 is 0 -> ^bb5747, ^bb5741
  ^bb5747:  // pred: ^bb5746
    pdl_interp.check_result_count of %3085 is 1 -> ^bb5748, ^bb5741
  ^bb5748:  // pred: ^bb5747
    %3088 = pdl_interp.get_result 0 of %3085
    pdl_interp.is_not_null %3088 : !pdl.value -> ^bb5749, ^bb5741
  ^bb5749:  // pred: ^bb5748
    pdl_interp.are_equal %3088, %3084 : !pdl.value -> ^bb5750, ^bb5741
  ^bb5750:  // pred: ^bb5749
    %3089 = pdl_interp.get_attribute "value" of %3085
    pdl_interp.is_not_null %3089 : !pdl.attribute -> ^bb5751, ^bb5741
  ^bb5751:  // pred: ^bb5750
    pdl_interp.check_attribute %3089 is #math_xdsl<constant pi> -> ^bb5752, ^bb5741
  ^bb5752:  // pred: ^bb5751
    %3090 = pdl_interp.get_value_type of %3088 : !pdl.type
    pdl_interp.are_equal %3090, %3081 : !pdl.type -> ^bb5753, ^bb5741
  ^bb5753:  // pred: ^bb5752
    pdl_interp.record_match @rewriters::@cos_addPI(%3080, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "arith.negf"]), loc([%arg0, %2, %3085]), root("math.cos") -> ^bb5741
  ^bb5754:  // pred: ^bb5745
    pdl_interp.check_operand_count of %3085 is 2 -> ^bb5755, ^bb5741
  ^bb5755:  // pred: ^bb5754
    pdl_interp.check_result_count of %3085 is 1 -> ^bb5756, ^bb5741
  ^bb5756:  // pred: ^bb5755
    %3091 = pdl_interp.get_result 0 of %3085
    pdl_interp.is_not_null %3091 : !pdl.value -> ^bb5757, ^bb5741
  ^bb5757:  // pred: ^bb5756
    pdl_interp.are_equal %3091, %3084 : !pdl.value -> ^bb5758, ^bb5741
  ^bb5758:  // pred: ^bb5757
    %3092 = pdl_interp.get_operand 0 of %3085
    pdl_interp.is_not_null %3092 : !pdl.value -> ^bb5759, ^bb5741
  ^bb5759:  // pred: ^bb5758
    %3093 = pdl_interp.get_defining_op of %3092 : !pdl.value
    pdl_interp.is_not_null %3093 : !pdl.operation -> ^bb5760, ^bb5741
  ^bb5760:  // pred: ^bb5759
    %3094 = pdl_interp.get_value_type of %3091 : !pdl.type
    pdl_interp.are_equal %3094, %3081 : !pdl.type -> ^bb5761, ^bb5741
  ^bb5761:  // pred: ^bb5760
    %3095 = pdl_interp.get_operand 1 of %3085
    %3096 = pdl_interp.get_defining_op of %3095 : !pdl.value
    pdl_interp.is_not_null %3096 : !pdl.operation -> ^bb5762, ^bb5741
  ^bb5762:  // pred: ^bb5761
    pdl_interp.check_operation_name of %3093 is "math_xdsl.constant" -> ^bb5763, ^bb5741
  ^bb5763:  // pred: ^bb5762
    pdl_interp.check_operand_count of %3093 is 0 -> ^bb5764, ^bb5741
  ^bb5764:  // pred: ^bb5763
    pdl_interp.check_result_count of %3093 is 1 -> ^bb5765, ^bb5741
  ^bb5765:  // pred: ^bb5764
    %3097 = pdl_interp.get_result 0 of %3093
    pdl_interp.is_not_null %3097 : !pdl.value -> ^bb5766, ^bb5741
  ^bb5766:  // pred: ^bb5765
    pdl_interp.are_equal %3097, %3092 : !pdl.value -> ^bb5767, ^bb5741
  ^bb5767:  // pred: ^bb5766
    pdl_interp.is_not_null %3095 : !pdl.value -> ^bb5768, ^bb5741
  ^bb5768:  // pred: ^bb5767
    pdl_interp.check_operation_name of %3096 is "arith.constant" -> ^bb5769, ^bb5741
  ^bb5769:  // pred: ^bb5768
    pdl_interp.check_operand_count of %3096 is 0 -> ^bb5770, ^bb5741
  ^bb5770:  // pred: ^bb5769
    pdl_interp.check_result_count of %3096 is 1 -> ^bb5771, ^bb5741
  ^bb5771:  // pred: ^bb5770
    %3098 = pdl_interp.get_result 0 of %3096
    pdl_interp.is_not_null %3098 : !pdl.value -> ^bb5772, ^bb5741
  ^bb5772:  // pred: ^bb5771
    pdl_interp.are_equal %3098, %3095 : !pdl.value -> ^bb5773, ^bb5741
  ^bb5773:  // pred: ^bb5772
    %3099 = pdl_interp.get_attribute "value" of %3093
    pdl_interp.is_not_null %3099 : !pdl.attribute -> ^bb5774, ^bb5741
  ^bb5774:  // pred: ^bb5773
    pdl_interp.check_attribute %3099 is #math_xdsl<constant pi> -> ^bb5775, ^bb5741
  ^bb5775:  // pred: ^bb5774
    %3100 = pdl_interp.get_attribute "value" of %3096
    pdl_interp.is_not_null %3100 : !pdl.attribute -> ^bb5776, ^bb5741
  ^bb5776:  // pred: ^bb5775
    pdl_interp.check_attribute %3100 is 2.000000e+00 : f32 -> ^bb5777, ^bb5741
  ^bb5777:  // pred: ^bb5776
    %3101 = pdl_interp.get_value_type of %3097 : !pdl.type
    pdl_interp.are_equal %3101, %3081 : !pdl.type -> ^bb5778, ^bb5741
  ^bb5778:  // pred: ^bb5777
    %3102 = pdl_interp.get_value_type of %3098 : !pdl.type
    pdl_interp.are_equal %3102, %3081 : !pdl.type -> ^bb5779, ^bb5741
  ^bb5779:  // pred: ^bb5778
    pdl_interp.record_match @rewriters::@cos_addPIdiv2(%3080, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "arith.negf"]), loc([%arg0, %2, %3085, %3093, %3096]), root("math.cos") -> ^bb5741
  ^bb5780:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5781, ^bb1
  ^bb5781:  // pred: ^bb5780
    pdl_interp.check_result_count of %2 is 1 -> ^bb5782, ^bb1
  ^bb5782:  // pred: ^bb5781
    %3103 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3103 : !pdl.value -> ^bb5783, ^bb1
  ^bb5783:  // pred: ^bb5782
    pdl_interp.are_equal %3103, %1 : !pdl.value -> ^bb5784, ^bb1
  ^bb5784:  // pred: ^bb5783
    %3104 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3104 : !pdl.value -> ^bb5785, ^bb1
  ^bb5785:  // pred: ^bb5784
    %3105 = pdl_interp.get_value_type of %3104 : !pdl.type
    pdl_interp.check_type %3105 is f32 -> ^bb5786, ^bb1
  ^bb5786:  // pred: ^bb5785
    %3106 = pdl_interp.get_value_type of %3103 : !pdl.type
    pdl_interp.are_equal %3105, %3106 : !pdl.type -> ^bb5787, ^bb1
  ^bb5787:  // pred: ^bb5786
    %3107 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3105, %3107 : !pdl.type -> ^bb5788, ^bb1
  ^bb5788:  // pred: ^bb5787
    %3108 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3108 : !pdl.value -> ^bb5789, ^bb1
  ^bb5789:  // pred: ^bb5788
    %3109 = pdl_interp.get_value_type of %3108 : !pdl.type
    pdl_interp.are_equal %3105, %3109 : !pdl.type -> ^bb5790, ^bb1
  ^bb5790:  // pred: ^bb5789
    pdl_interp.record_match @rewriters::@cos_diff(%3104, %3108, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.mulf", "math.sin", "math.sin", "arith.mulf", "arith.addf"]), loc([%arg0, %2]), root("math.cos") -> ^bb1
  ^bb5791:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5792, ^bb1
  ^bb5792:  // pred: ^bb5791
    pdl_interp.check_result_count of %2 is 1 -> ^bb5793, ^bb1
  ^bb5793:  // pred: ^bb5792
    %3110 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3110 : !pdl.value -> ^bb5794, ^bb1
  ^bb5794:  // pred: ^bb5793
    pdl_interp.are_equal %3110, %1 : !pdl.value -> ^bb5795, ^bb1
  ^bb5795:  // pred: ^bb5794
    %3111 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3111 : !pdl.value -> ^bb5796, ^bb1
  ^bb5796:  // pred: ^bb5795
    %3112 = pdl_interp.get_defining_op of %3111 : !pdl.value
    pdl_interp.is_not_null %3112 : !pdl.operation -> ^bb5797, ^bb1
  ^bb5797:  // pred: ^bb5796
    %3113 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3113 : !pdl.value -> ^bb5798, ^bb1
  ^bb5798:  // pred: ^bb5797
    pdl_interp.check_operation_name of %3112 is "arith.constant" -> ^bb5799, ^bb1
  ^bb5799:  // pred: ^bb5798
    pdl_interp.check_operand_count of %3112 is 0 -> ^bb5800, ^bb1
  ^bb5800:  // pred: ^bb5799
    pdl_interp.check_result_count of %3112 is 1 -> ^bb5801, ^bb1
  ^bb5801:  // pred: ^bb5800
    %3114 = pdl_interp.get_result 0 of %3112
    pdl_interp.is_not_null %3114 : !pdl.value -> ^bb5802, ^bb1
  ^bb5802:  // pred: ^bb5801
    pdl_interp.are_equal %3114, %3111 : !pdl.value -> ^bb5803, ^bb1
  ^bb5803:  // pred: ^bb5802
    %3115 = pdl_interp.get_attribute "value" of %3112
    pdl_interp.is_not_null %3115 : !pdl.attribute -> ^bb5804, ^bb1
  ^bb5804:  // pred: ^bb5803
    pdl_interp.switch_attribute %3115 to [2.000000e+00 : f32, 3.000000e+00 : f32](^bb5805, ^bb5810) -> ^bb1
  ^bb5805:  // pred: ^bb5804
    %3116 = pdl_interp.get_value_type of %3114 : !pdl.type
    pdl_interp.check_type %3116 is f32 -> ^bb5806, ^bb1
  ^bb5806:  // pred: ^bb5805
    %3117 = pdl_interp.get_value_type of %3110 : !pdl.type
    pdl_interp.are_equal %3116, %3117 : !pdl.type -> ^bb5807, ^bb1
  ^bb5807:  // pred: ^bb5806
    %3118 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3116, %3118 : !pdl.type -> ^bb5808, ^bb1
  ^bb5808:  // pred: ^bb5807
    %3119 = pdl_interp.get_value_type of %3113 : !pdl.type
    pdl_interp.are_equal %3116, %3119 : !pdl.type -> ^bb5809, ^bb1
  ^bb5809:  // pred: ^bb5808
    pdl_interp.record_match @rewriters::@cos_2(%3113, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cos", "math.cos", "arith.mulf", "math.sin", "math.sin", "arith.mulf", "arith.subf"]), loc([%arg0, %2, %3112]), root("math.cos") -> ^bb1
  ^bb5810:  // pred: ^bb5804
    %3120 = pdl_interp.get_value_type of %3114 : !pdl.type
    pdl_interp.check_type %3120 is f32 -> ^bb5811, ^bb1
  ^bb5811:  // pred: ^bb5810
    %3121 = pdl_interp.get_value_type of %3110 : !pdl.type
    pdl_interp.are_equal %3120, %3121 : !pdl.type -> ^bb5812, ^bb1
  ^bb5812:  // pred: ^bb5811
    %3122 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3120, %3122 : !pdl.type -> ^bb5813, ^bb1
  ^bb5813:  // pred: ^bb5812
    %3123 = pdl_interp.get_value_type of %3113 : !pdl.type
    pdl_interp.are_equal %3120, %3123 : !pdl.type -> ^bb5814, ^bb1
  ^bb5814:  // pred: ^bb5813
    pdl_interp.record_match @rewriters::@cos_3(%3113, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.cos", "arith.constant", "math.powf", "arith.mulf", "arith.constant", "math.cos", "arith.mulf", "arith.subf"]), loc([%arg0, %2, %3112]), root("math.cos") -> ^bb1
  ^bb5815:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5816, ^bb1
  ^bb5816:  // pred: ^bb5815
    pdl_interp.check_result_count of %2 is 1 -> ^bb5817, ^bb1
  ^bb5817:  // pred: ^bb5816
    %3124 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3124 : !pdl.value -> ^bb5818, ^bb1
  ^bb5818:  // pred: ^bb5817
    pdl_interp.are_equal %3124, %1 : !pdl.value -> ^bb5819, ^bb1
  ^bb5819:  // pred: ^bb5818
    %3125 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3125 : !pdl.value -> ^bb5820, ^bb1
  ^bb5820:  // pred: ^bb5819
    %3126 = pdl_interp.get_value_type of %3125 : !pdl.type
    pdl_interp.check_type %3126 is f32 -> ^bb5821, ^bb1
  ^bb5821:  // pred: ^bb5820
    %3127 = pdl_interp.get_value_type of %3124 : !pdl.type
    pdl_interp.are_equal %3126, %3127 : !pdl.type -> ^bb5822, ^bb1
  ^bb5822:  // pred: ^bb5821
    %3128 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3126, %3128 : !pdl.type -> ^bb5823, ^bb1
  ^bb5823:  // pred: ^bb5822
    pdl_interp.record_match @rewriters::@cos_asin(%3125, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "arith.subf", "math.sqrt"]), loc([%arg0, %2]), root("math.cos") -> ^bb1
  ^bb5824:  // pred: ^bb5638
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5825, ^bb1
  ^bb5825:  // pred: ^bb5824
    pdl_interp.check_result_count of %2 is 1 -> ^bb5826, ^bb1
  ^bb5826:  // pred: ^bb5825
    %3129 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3129 : !pdl.value -> ^bb5827, ^bb1
  ^bb5827:  // pred: ^bb5826
    pdl_interp.are_equal %3129, %1 : !pdl.value -> ^bb5828, ^bb1
  ^bb5828:  // pred: ^bb5827
    %3130 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3130 : !pdl.value -> ^bb5829, ^bb1
  ^bb5829:  // pred: ^bb5828
    %3131 = pdl_interp.get_value_type of %3130 : !pdl.type
    pdl_interp.check_type %3131 is f32 -> ^bb5830, ^bb1
  ^bb5830:  // pred: ^bb5829
    %3132 = pdl_interp.get_value_type of %3129 : !pdl.type
    pdl_interp.are_equal %3131, %3132 : !pdl.type -> ^bb5831, ^bb1
  ^bb5831:  // pred: ^bb5830
    %3133 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3131, %3133 : !pdl.type -> ^bb5832, ^bb1
  ^bb5832:  // pred: ^bb5831
    pdl_interp.record_match @rewriters::@cos_atan(%3130, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.constant", "arith.mulf", "arith.addf", "math.sqrt", "arith.divf"]), loc([%arg0, %2]), root("math.cos") -> ^bb1
  ^bb5833:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb5834, ^bb1
  ^bb5834:  // pred: ^bb5833
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb5835, ^bb1
  ^bb5835:  // pred: ^bb5834
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb5836, ^bb1
  ^bb5836:  // pred: ^bb5835
    pdl_interp.switch_operation_name of %2 to ["arith.constant", "arith.negf", "math.atan", "arith.divf", "math_xdsl.constant", "arith.addf", "arith.mulf", "math.asin", "math.acos"](^bb5837, ^bb5846, ^bb5855, ^bb5864, ^bb5964, ^bb5973, ^bb6061, ^bb6080, ^bb6089) -> ^bb1
  ^bb5837:  // pred: ^bb5836
    pdl_interp.check_operand_count of %2 is 0 -> ^bb5838, ^bb1
  ^bb5838:  // pred: ^bb5837
    pdl_interp.check_result_count of %2 is 1 -> ^bb5839, ^bb1
  ^bb5839:  // pred: ^bb5838
    %3134 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3134 : !pdl.value -> ^bb5840, ^bb1
  ^bb5840:  // pred: ^bb5839
    pdl_interp.are_equal %3134, %1 : !pdl.value -> ^bb5841, ^bb1
  ^bb5841:  // pred: ^bb5840
    %3135 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %3135 : !pdl.attribute -> ^bb5842, ^bb1
  ^bb5842:  // pred: ^bb5841
    pdl_interp.check_attribute %3135 is 0.000000e+00 : f32 -> ^bb5843, ^bb1
  ^bb5843:  // pred: ^bb5842
    %3136 = pdl_interp.get_value_type of %3134 : !pdl.type
    pdl_interp.check_type %3136 is f32 -> ^bb5844, ^bb1
  ^bb5844:  // pred: ^bb5843
    %3137 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3136, %3137 : !pdl.type -> ^bb5845, ^bb1
  ^bb5845:  // pred: ^bb5844
    pdl_interp.record_match @rewriters::@tan_0(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.tan") -> ^bb1
  ^bb5846:  // pred: ^bb5836
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5847, ^bb1
  ^bb5847:  // pred: ^bb5846
    pdl_interp.check_result_count of %2 is 1 -> ^bb5848, ^bb1
  ^bb5848:  // pred: ^bb5847
    %3138 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3138 : !pdl.value -> ^bb5849, ^bb1
  ^bb5849:  // pred: ^bb5848
    pdl_interp.are_equal %3138, %1 : !pdl.value -> ^bb5850, ^bb1
  ^bb5850:  // pred: ^bb5849
    %3139 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3139 : !pdl.value -> ^bb5851, ^bb1
  ^bb5851:  // pred: ^bb5850
    %3140 = pdl_interp.get_value_type of %3139 : !pdl.type
    pdl_interp.check_type %3140 is f32 -> ^bb5852, ^bb1
  ^bb5852:  // pred: ^bb5851
    %3141 = pdl_interp.get_value_type of %3138 : !pdl.type
    pdl_interp.are_equal %3140, %3141 : !pdl.type -> ^bb5853, ^bb1
  ^bb5853:  // pred: ^bb5852
    %3142 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3140, %3142 : !pdl.type -> ^bb5854, ^bb1
  ^bb5854:  // pred: ^bb5853
    pdl_interp.record_match @rewriters::@tan_neg(%3139, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.tan", "arith.negf"]), loc([%arg0, %2]), root("math.tan") -> ^bb1
  ^bb5855:  // pred: ^bb5836
    pdl_interp.check_operand_count of %2 is 1 -> ^bb5856, ^bb1
  ^bb5856:  // pred: ^bb5855
    pdl_interp.check_result_count of %2 is 1 -> ^bb5857, ^bb1
  ^bb5857:  // pred: ^bb5856
    %3143 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3143 : !pdl.value -> ^bb5858, ^bb1
  ^bb5858:  // pred: ^bb5857
    pdl_interp.are_equal %3143, %1 : !pdl.value -> ^bb5859, ^bb1
  ^bb5859:  // pred: ^bb5858
    %3144 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3144 : !pdl.value -> ^bb5860, ^bb1
  ^bb5860:  // pred: ^bb5859
    %3145 = pdl_interp.get_value_type of %3144 : !pdl.type
    pdl_interp.check_type %3145 is f32 -> ^bb5861, ^bb1
  ^bb5861:  // pred: ^bb5860
    %3146 = pdl_interp.get_value_type of %3143 : !pdl.type
    pdl_interp.are_equal %3145, %3146 : !pdl.type -> ^bb5862, ^bb1
  ^bb5862:  // pred: ^bb5861
    %3147 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3145, %3147 : !pdl.type -> ^bb5863, ^bb1
  ^bb5863:  // pred: ^bb5862
    pdl_interp.record_match @rewriters::@tan_atan(%3144, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("math.tan") -> ^bb1
  ^bb5864:  // pred: ^bb5836
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5865, ^bb1
  ^bb5865:  // pred: ^bb5864
    pdl_interp.check_result_count of %2 is 1 -> ^bb5866, ^bb1
  ^bb5866:  // pred: ^bb5865
    %3148 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3148 : !pdl.value -> ^bb5867, ^bb1
  ^bb5867:  // pred: ^bb5866
    pdl_interp.are_equal %3148, %1 : !pdl.value -> ^bb5868, ^bb1
  ^bb5868:  // pred: ^bb5867
    %3149 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3149 : !pdl.value -> ^bb5869, ^bb1
  ^bb5869:  // pred: ^bb5868
    %3150 = pdl_interp.get_operand 1 of %2
    %3151 = pdl_interp.get_defining_op of %3150 : !pdl.value
    pdl_interp.is_not_null %3151 : !pdl.operation -> ^bb5885, ^bb5870
  ^bb5870:  // 79 preds: ^bb5869, ^bb5885, ^bb5886, ^bb5887, ^bb5888, ^bb5889, ^bb5890, ^bb5891, ^bb5892, ^bb5893, ^bb5894, ^bb5895, ^bb5896, ^bb5897, ^bb5898, ^bb5899, ^bb5900, ^bb5901, ^bb5902, ^bb5903, ^bb5904, ^bb5905, ^bb5906, ^bb5907, ^bb5908, ^bb5909, ^bb5910, ^bb5911, ^bb5912, ^bb5913, ^bb5914, ^bb5915, ^bb5916, ^bb5917, ^bb5918, ^bb5919, ^bb5920, ^bb5921, ^bb5922, ^bb5923, ^bb5924, ^bb5925, ^bb5926, ^bb5927, ^bb5928, ^bb5929, ^bb5930, ^bb5931, ^bb5933, ^bb5934, ^bb5935, ^bb5936, ^bb5937, ^bb5938, ^bb5939, ^bb5940, ^bb5941, ^bb5942, ^bb5943, ^bb5944, ^bb5945, ^bb5946, ^bb5947, ^bb5948, ^bb5949, ^bb5950, ^bb5951, ^bb5952, ^bb5953, ^bb5954, ^bb5955, ^bb5956, ^bb5957, ^bb5958, ^bb5959, ^bb5960, ^bb5961, ^bb5962, ^bb5963
    %3152 = pdl_interp.get_value_type of %3149 : !pdl.type
    pdl_interp.check_type %3152 is f32 -> ^bb5871, ^bb1
  ^bb5871:  // pred: ^bb5870
    %3153 = pdl_interp.get_value_type of %3148 : !pdl.type
    pdl_interp.are_equal %3152, %3153 : !pdl.type -> ^bb5872, ^bb1
  ^bb5872:  // pred: ^bb5871
    %3154 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3152, %3154 : !pdl.type -> ^bb5873, ^bb1
  ^bb5873:  // pred: ^bb5872
    %3155 = pdl_interp.get_operand 1 of %2
    %3156 = pdl_interp.get_defining_op of %3155 : !pdl.value
    pdl_interp.is_not_null %3156 : !pdl.operation -> ^bb5874, ^bb1
  ^bb5874:  // pred: ^bb5873
    pdl_interp.is_not_null %3155 : !pdl.value -> ^bb5875, ^bb1
  ^bb5875:  // pred: ^bb5874
    pdl_interp.check_operation_name of %3156 is "arith.constant" -> ^bb5876, ^bb1
  ^bb5876:  // pred: ^bb5875
    pdl_interp.check_operand_count of %3156 is 0 -> ^bb5877, ^bb1
  ^bb5877:  // pred: ^bb5876
    pdl_interp.check_result_count of %3156 is 1 -> ^bb5878, ^bb1
  ^bb5878:  // pred: ^bb5877
    %3157 = pdl_interp.get_result 0 of %3156
    pdl_interp.is_not_null %3157 : !pdl.value -> ^bb5879, ^bb1
  ^bb5879:  // pred: ^bb5878
    pdl_interp.are_equal %3157, %3155 : !pdl.value -> ^bb5880, ^bb1
  ^bb5880:  // pred: ^bb5879
    %3158 = pdl_interp.get_attribute "value" of %3156
    pdl_interp.is_not_null %3158 : !pdl.attribute -> ^bb5881, ^bb1
  ^bb5881:  // pred: ^bb5880
    pdl_interp.check_attribute %3158 is 2.000000e+00 : f32 -> ^bb5882, ^bb1
  ^bb5882:  // pred: ^bb5881
    %3159 = pdl_interp.get_value_type of %3157 : !pdl.type
    pdl_interp.are_equal %3159, %3152 : !pdl.type -> ^bb5883, ^bb1
  ^bb5883:  // pred: ^bb5882
    pdl_interp.record_match @rewriters::@hang_p0_tan_rev(%3149, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.cos", "arith.subf", "math.sin", "arith.divf"]), loc([%arg0, %2, %3156]), root("math.tan") -> ^bb5884
  ^bb5884:  // pred: ^bb5883
    pdl_interp.record_match @rewriters::@hang_0p_tan_rev(%3149, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "arith.constant", "math.cos", "arith.addf", "arith.divf"]), loc([%arg0, %2, %3156]), root("math.tan") -> ^bb1
  ^bb5885:  // pred: ^bb5869
    %3160 = pdl_interp.get_defining_op of %3149 : !pdl.value
    pdl_interp.is_not_null %3160 : !pdl.operation -> ^bb5886, ^bb5870
  ^bb5886:  // pred: ^bb5885
    pdl_interp.is_not_null %3150 : !pdl.value -> ^bb5887, ^bb5870
  ^bb5887:  // pred: ^bb5886
    pdl_interp.check_operation_name of %3151 is "arith.constant" -> ^bb5888, ^bb5870
  ^bb5888:  // pred: ^bb5887
    pdl_interp.check_operand_count of %3151 is 0 -> ^bb5889, ^bb5870
  ^bb5889:  // pred: ^bb5888
    pdl_interp.check_result_count of %3151 is 1 -> ^bb5890, ^bb5870
  ^bb5890:  // pred: ^bb5889
    %3161 = pdl_interp.get_result 0 of %3151
    pdl_interp.is_not_null %3161 : !pdl.value -> ^bb5891, ^bb5870
  ^bb5891:  // pred: ^bb5890
    pdl_interp.are_equal %3161, %3150 : !pdl.value -> ^bb5892, ^bb5870
  ^bb5892:  // pred: ^bb5891
    pdl_interp.switch_operation_name of %3160 to ["math_xdsl.constant", "arith.negf", "arith.addf", "arith.subf"](^bb5893, ^bb5920, ^bb5934, ^bb5949) -> ^bb5870
  ^bb5893:  // pred: ^bb5892
    pdl_interp.check_operand_count of %3160 is 0 -> ^bb5894, ^bb5870
  ^bb5894:  // pred: ^bb5893
    pdl_interp.check_result_count of %3160 is 1 -> ^bb5895, ^bb5870
  ^bb5895:  // pred: ^bb5894
    %3162 = pdl_interp.get_result 0 of %3160
    pdl_interp.is_not_null %3162 : !pdl.value -> ^bb5896, ^bb5870
  ^bb5896:  // pred: ^bb5895
    pdl_interp.are_equal %3162, %3149 : !pdl.value -> ^bb5897, ^bb5870
  ^bb5897:  // pred: ^bb5896
    %3163 = pdl_interp.get_attribute "value" of %3151
    pdl_interp.is_not_null %3163 : !pdl.attribute -> ^bb5898, ^bb5870
  ^bb5898:  // pred: ^bb5897
    pdl_interp.switch_attribute %3163 to [6.000000e+00 : f32, 4.000000e+00 : f32, 3.000000e+00 : f32](^bb5899, ^bb5906, ^bb5913) -> ^bb5870
  ^bb5899:  // pred: ^bb5898
    %3164 = pdl_interp.get_attribute "value" of %3160
    pdl_interp.is_not_null %3164 : !pdl.attribute -> ^bb5900, ^bb5870
  ^bb5900:  // pred: ^bb5899
    pdl_interp.check_attribute %3164 is #math_xdsl<constant pi> -> ^bb5901, ^bb5870
  ^bb5901:  // pred: ^bb5900
    %3165 = pdl_interp.get_value_type of %3162 : !pdl.type
    pdl_interp.check_type %3165 is f32 -> ^bb5902, ^bb5870
  ^bb5902:  // pred: ^bb5901
    %3166 = pdl_interp.get_value_type of %3148 : !pdl.type
    pdl_interp.are_equal %3165, %3166 : !pdl.type -> ^bb5903, ^bb5870
  ^bb5903:  // pred: ^bb5902
    %3167 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3165, %3167 : !pdl.type -> ^bb5904, ^bb5870
  ^bb5904:  // pred: ^bb5903
    %3168 = pdl_interp.get_value_type of %3161 : !pdl.type
    pdl_interp.are_equal %3165, %3168 : !pdl.type -> ^bb5905, ^bb5870
  ^bb5905:  // pred: ^bb5904
    pdl_interp.record_match @rewriters::@tan_PIdiv6(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.constant", "math.sqrt", "arith.divf"]), loc([%arg0, %2, %3151, %3160]), root("math.tan") -> ^bb5870
  ^bb5906:  // pred: ^bb5898
    %3169 = pdl_interp.get_attribute "value" of %3160
    pdl_interp.is_not_null %3169 : !pdl.attribute -> ^bb5907, ^bb5870
  ^bb5907:  // pred: ^bb5906
    pdl_interp.check_attribute %3169 is #math_xdsl<constant pi> -> ^bb5908, ^bb5870
  ^bb5908:  // pred: ^bb5907
    %3170 = pdl_interp.get_value_type of %3162 : !pdl.type
    pdl_interp.check_type %3170 is f32 -> ^bb5909, ^bb5870
  ^bb5909:  // pred: ^bb5908
    %3171 = pdl_interp.get_value_type of %3148 : !pdl.type
    pdl_interp.are_equal %3170, %3171 : !pdl.type -> ^bb5910, ^bb5870
  ^bb5910:  // pred: ^bb5909
    %3172 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3170, %3172 : !pdl.type -> ^bb5911, ^bb5870
  ^bb5911:  // pred: ^bb5910
    %3173 = pdl_interp.get_value_type of %3161 : !pdl.type
    pdl_interp.are_equal %3170, %3173 : !pdl.type -> ^bb5912, ^bb5870
  ^bb5912:  // pred: ^bb5911
    pdl_interp.record_match @rewriters::@tan_PIdiv4(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2, %3151, %3160]), root("math.tan") -> ^bb5870
  ^bb5913:  // pred: ^bb5898
    %3174 = pdl_interp.get_attribute "value" of %3160
    pdl_interp.is_not_null %3174 : !pdl.attribute -> ^bb5914, ^bb5870
  ^bb5914:  // pred: ^bb5913
    pdl_interp.check_attribute %3174 is #math_xdsl<constant pi> -> ^bb5915, ^bb5870
  ^bb5915:  // pred: ^bb5914
    %3175 = pdl_interp.get_value_type of %3162 : !pdl.type
    pdl_interp.check_type %3175 is f32 -> ^bb5916, ^bb5870
  ^bb5916:  // pred: ^bb5915
    %3176 = pdl_interp.get_value_type of %3148 : !pdl.type
    pdl_interp.are_equal %3175, %3176 : !pdl.type -> ^bb5917, ^bb5870
  ^bb5917:  // pred: ^bb5916
    %3177 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3175, %3177 : !pdl.type -> ^bb5918, ^bb5870
  ^bb5918:  // pred: ^bb5917
    %3178 = pdl_interp.get_value_type of %3161 : !pdl.type
    pdl_interp.are_equal %3175, %3178 : !pdl.type -> ^bb5919, ^bb5870
  ^bb5919:  // pred: ^bb5918
    pdl_interp.record_match @rewriters::@tan_PIdiv3(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sqrt"]), loc([%arg0, %2, %3151, %3160]), root("math.tan") -> ^bb5870
  ^bb5920:  // pred: ^bb5892
    pdl_interp.check_operand_count of %3160 is 1 -> ^bb5921, ^bb5870
  ^bb5921:  // pred: ^bb5920
    pdl_interp.check_result_count of %3160 is 1 -> ^bb5922, ^bb5870
  ^bb5922:  // pred: ^bb5921
    %3179 = pdl_interp.get_result 0 of %3160
    pdl_interp.is_not_null %3179 : !pdl.value -> ^bb5923, ^bb5870
  ^bb5923:  // pred: ^bb5922
    pdl_interp.are_equal %3179, %3149 : !pdl.value -> ^bb5924, ^bb5870
  ^bb5924:  // pred: ^bb5923
    %3180 = pdl_interp.get_operand 0 of %3160
    pdl_interp.is_not_null %3180 : !pdl.value -> ^bb5925, ^bb5870
  ^bb5925:  // pred: ^bb5924
    %3181 = pdl_interp.get_attribute "value" of %3151
    pdl_interp.is_not_null %3181 : !pdl.attribute -> ^bb5926, ^bb5870
  ^bb5926:  // pred: ^bb5925
    pdl_interp.check_attribute %3181 is 2.000000e+00 : f32 -> ^bb5927, ^bb5870
  ^bb5927:  // pred: ^bb5926
    %3182 = pdl_interp.get_value_type of %3180 : !pdl.type
    pdl_interp.check_type %3182 is f32 -> ^bb5928, ^bb5870
  ^bb5928:  // pred: ^bb5927
    %3183 = pdl_interp.get_value_type of %3179 : !pdl.type
    pdl_interp.are_equal %3182, %3183 : !pdl.type -> ^bb5929, ^bb5870
  ^bb5929:  // pred: ^bb5928
    %3184 = pdl_interp.get_value_type of %3148 : !pdl.type
    pdl_interp.are_equal %3182, %3184 : !pdl.type -> ^bb5930, ^bb5870
  ^bb5930:  // pred: ^bb5929
    %3185 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3182, %3185 : !pdl.type -> ^bb5931, ^bb5870
  ^bb5931:  // pred: ^bb5930
    %3186 = pdl_interp.get_value_type of %3161 : !pdl.type
    pdl_interp.are_equal %3182, %3186 : !pdl.type -> ^bb5932, ^bb5870
  ^bb5932:  // pred: ^bb5931
    pdl_interp.record_match @rewriters::@hang_m0_tan_rev(%3180, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.cos", "arith.subf", "math.sin", "arith.negf", "arith.divf"]), loc([%arg0, %2, %3151, %3160]), root("math.tan") -> ^bb5933
  ^bb5933:  // pred: ^bb5932
    pdl_interp.record_match @rewriters::@hang_0m_tan_rev(%3180, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "arith.negf", "arith.constant", "math.cos", "arith.addf", "arith.divf"]), loc([%arg0, %2, %3151, %3160]), root("math.tan") -> ^bb5870
  ^bb5934:  // pred: ^bb5892
    pdl_interp.check_operand_count of %3160 is 2 -> ^bb5935, ^bb5870
  ^bb5935:  // pred: ^bb5934
    pdl_interp.check_result_count of %3160 is 1 -> ^bb5936, ^bb5870
  ^bb5936:  // pred: ^bb5935
    %3187 = pdl_interp.get_result 0 of %3160
    pdl_interp.is_not_null %3187 : !pdl.value -> ^bb5937, ^bb5870
  ^bb5937:  // pred: ^bb5936
    pdl_interp.are_equal %3187, %3149 : !pdl.value -> ^bb5938, ^bb5870
  ^bb5938:  // pred: ^bb5937
    %3188 = pdl_interp.get_operand 0 of %3160
    pdl_interp.is_not_null %3188 : !pdl.value -> ^bb5939, ^bb5870
  ^bb5939:  // pred: ^bb5938
    %3189 = pdl_interp.get_attribute "value" of %3151
    pdl_interp.is_not_null %3189 : !pdl.attribute -> ^bb5940, ^bb5870
  ^bb5940:  // pred: ^bb5939
    pdl_interp.check_attribute %3189 is 2.000000e+00 : f32 -> ^bb5941, ^bb5870
  ^bb5941:  // pred: ^bb5940
    %3190 = pdl_interp.get_value_type of %3188 : !pdl.type
    pdl_interp.check_type %3190 is f32 -> ^bb5942, ^bb5870
  ^bb5942:  // pred: ^bb5941
    %3191 = pdl_interp.get_value_type of %3187 : !pdl.type
    pdl_interp.are_equal %3190, %3191 : !pdl.type -> ^bb5943, ^bb5870
  ^bb5943:  // pred: ^bb5942
    %3192 = pdl_interp.get_value_type of %3148 : !pdl.type
    pdl_interp.are_equal %3190, %3192 : !pdl.type -> ^bb5944, ^bb5870
  ^bb5944:  // pred: ^bb5943
    %3193 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3190, %3193 : !pdl.type -> ^bb5945, ^bb5870
  ^bb5945:  // pred: ^bb5944
    %3194 = pdl_interp.get_value_type of %3161 : !pdl.type
    pdl_interp.are_equal %3190, %3194 : !pdl.type -> ^bb5946, ^bb5870
  ^bb5946:  // pred: ^bb5945
    %3195 = pdl_interp.get_operand 1 of %3160
    pdl_interp.is_not_null %3195 : !pdl.value -> ^bb5947, ^bb5870
  ^bb5947:  // pred: ^bb5946
    %3196 = pdl_interp.get_value_type of %3195 : !pdl.type
    pdl_interp.are_equal %3190, %3196 : !pdl.type -> ^bb5948, ^bb5870
  ^bb5948:  // pred: ^bb5947
    pdl_interp.record_match @rewriters::@tan_hang_p(%3188, %3195, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.addf", "math.cos", "math.cos", "arith.addf", "arith.divf"]), loc([%arg0, %2, %3151, %3160]), root("math.tan") -> ^bb5870
  ^bb5949:  // pred: ^bb5892
    pdl_interp.check_operand_count of %3160 is 2 -> ^bb5950, ^bb5870
  ^bb5950:  // pred: ^bb5949
    pdl_interp.check_result_count of %3160 is 1 -> ^bb5951, ^bb5870
  ^bb5951:  // pred: ^bb5950
    %3197 = pdl_interp.get_result 0 of %3160
    pdl_interp.is_not_null %3197 : !pdl.value -> ^bb5952, ^bb5870
  ^bb5952:  // pred: ^bb5951
    pdl_interp.are_equal %3197, %3149 : !pdl.value -> ^bb5953, ^bb5870
  ^bb5953:  // pred: ^bb5952
    %3198 = pdl_interp.get_operand 0 of %3160
    pdl_interp.is_not_null %3198 : !pdl.value -> ^bb5954, ^bb5870
  ^bb5954:  // pred: ^bb5953
    %3199 = pdl_interp.get_attribute "value" of %3151
    pdl_interp.is_not_null %3199 : !pdl.attribute -> ^bb5955, ^bb5870
  ^bb5955:  // pred: ^bb5954
    pdl_interp.check_attribute %3199 is 2.000000e+00 : f32 -> ^bb5956, ^bb5870
  ^bb5956:  // pred: ^bb5955
    %3200 = pdl_interp.get_value_type of %3198 : !pdl.type
    pdl_interp.check_type %3200 is f32 -> ^bb5957, ^bb5870
  ^bb5957:  // pred: ^bb5956
    %3201 = pdl_interp.get_value_type of %3197 : !pdl.type
    pdl_interp.are_equal %3200, %3201 : !pdl.type -> ^bb5958, ^bb5870
  ^bb5958:  // pred: ^bb5957
    %3202 = pdl_interp.get_value_type of %3148 : !pdl.type
    pdl_interp.are_equal %3200, %3202 : !pdl.type -> ^bb5959, ^bb5870
  ^bb5959:  // pred: ^bb5958
    %3203 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3200, %3203 : !pdl.type -> ^bb5960, ^bb5870
  ^bb5960:  // pred: ^bb5959
    %3204 = pdl_interp.get_value_type of %3161 : !pdl.type
    pdl_interp.are_equal %3200, %3204 : !pdl.type -> ^bb5961, ^bb5870
  ^bb5961:  // pred: ^bb5960
    %3205 = pdl_interp.get_operand 1 of %3160
    pdl_interp.is_not_null %3205 : !pdl.value -> ^bb5962, ^bb5870
  ^bb5962:  // pred: ^bb5961
    %3206 = pdl_interp.get_value_type of %3205 : !pdl.type
    pdl_interp.are_equal %3200, %3206 : !pdl.type -> ^bb5963, ^bb5870
  ^bb5963:  // pred: ^bb5962
    pdl_interp.record_match @rewriters::@tan_hang_m(%3198, %3205, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.sin", "arith.subf", "math.cos", "math.cos", "arith.addf", "arith.divf"]), loc([%arg0, %2, %3151, %3160]), root("math.tan") -> ^bb5870
  ^bb5964:  // pred: ^bb5836
    pdl_interp.check_operand_count of %2 is 0 -> ^bb5965, ^bb1
  ^bb5965:  // pred: ^bb5964
    pdl_interp.check_result_count of %2 is 1 -> ^bb5966, ^bb1
  ^bb5966:  // pred: ^bb5965
    %3207 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3207 : !pdl.value -> ^bb5967, ^bb1
  ^bb5967:  // pred: ^bb5966
    pdl_interp.are_equal %3207, %1 : !pdl.value -> ^bb5968, ^bb1
  ^bb5968:  // pred: ^bb5967
    %3208 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %3208 : !pdl.attribute -> ^bb5969, ^bb1
  ^bb5969:  // pred: ^bb5968
    pdl_interp.check_attribute %3208 is #math_xdsl<constant pi> -> ^bb5970, ^bb1
  ^bb5970:  // pred: ^bb5969
    %3209 = pdl_interp.get_value_type of %3207 : !pdl.type
    pdl_interp.check_type %3209 is f32 -> ^bb5971, ^bb1
  ^bb5971:  // pred: ^bb5970
    %3210 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3209, %3210 : !pdl.type -> ^bb5972, ^bb1
  ^bb5972:  // pred: ^bb5971
    pdl_interp.record_match @rewriters::@tan_PI(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.tan") -> ^bb1
  ^bb5973:  // pred: ^bb5836
    pdl_interp.check_operand_count of %2 is 2 -> ^bb5974, ^bb1
  ^bb5974:  // pred: ^bb5973
    pdl_interp.check_result_count of %2 is 1 -> ^bb5975, ^bb1
  ^bb5975:  // pred: ^bb5974
    %3211 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3211 : !pdl.value -> ^bb5976, ^bb1
  ^bb5976:  // pred: ^bb5975
    pdl_interp.are_equal %3211, %1 : !pdl.value -> ^bb5977, ^bb1
  ^bb5977:  // pred: ^bb5976
    %3212 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3212 : !pdl.value -> ^bb5978, ^bb1
  ^bb5978:  // pred: ^bb5977
    %3213 = pdl_interp.get_value_type of %3212 : !pdl.type
    pdl_interp.check_type %3213 is f32 -> ^bb6019, ^bb5979
  ^bb5979:  // 6 preds: ^bb5978, ^bb6019, ^bb6020, ^bb6022, ^bb6023, ^bb6024
    %3214 = pdl_interp.get_operand 1 of %2
    %3215 = pdl_interp.get_defining_op of %3214 : !pdl.value
    pdl_interp.is_not_null %3215 : !pdl.operation -> ^bb5980, ^bb1
  ^bb5980:  // pred: ^bb5979
    %3216 = pdl_interp.get_defining_op of %3212 : !pdl.value
    pdl_interp.is_not_null %3216 : !pdl.operation -> ^bb5981, ^bb1
  ^bb5981:  // pred: ^bb5980
    pdl_interp.is_not_null %3214 : !pdl.value -> ^bb5982, ^bb1
  ^bb5982:  // pred: ^bb5981
    pdl_interp.check_operation_name of %3215 is "arith.divf" -> ^bb5983, ^bb1
  ^bb5983:  // pred: ^bb5982
    pdl_interp.check_operand_count of %3215 is 2 -> ^bb5984, ^bb1
  ^bb5984:  // pred: ^bb5983
    pdl_interp.check_result_count of %3215 is 1 -> ^bb5985, ^bb1
  ^bb5985:  // pred: ^bb5984
    %3217 = pdl_interp.get_result 0 of %3215
    pdl_interp.is_not_null %3217 : !pdl.value -> ^bb5986, ^bb1
  ^bb5986:  // pred: ^bb5985
    pdl_interp.are_equal %3217, %3214 : !pdl.value -> ^bb5987, ^bb1
  ^bb5987:  // pred: ^bb5986
    pdl_interp.check_operation_name of %3216 is "arith.negf" -> ^bb5988, ^bb1
  ^bb5988:  // pred: ^bb5987
    pdl_interp.check_operand_count of %3216 is 1 -> ^bb5989, ^bb1
  ^bb5989:  // pred: ^bb5988
    pdl_interp.check_result_count of %3216 is 1 -> ^bb5990, ^bb1
  ^bb5990:  // pred: ^bb5989
    %3218 = pdl_interp.get_result 0 of %3216
    pdl_interp.is_not_null %3218 : !pdl.value -> ^bb5991, ^bb1
  ^bb5991:  // pred: ^bb5990
    pdl_interp.are_equal %3218, %3212 : !pdl.value -> ^bb5992, ^bb1
  ^bb5992:  // pred: ^bb5991
    %3219 = pdl_interp.get_operand 0 of %3216
    pdl_interp.is_not_null %3219 : !pdl.value -> ^bb5993, ^bb1
  ^bb5993:  // pred: ^bb5992
    %3220 = pdl_interp.get_value_type of %3219 : !pdl.type
    pdl_interp.check_type %3220 is f32 -> ^bb5994, ^bb1
  ^bb5994:  // pred: ^bb5993
    %3221 = pdl_interp.get_value_type of %3218 : !pdl.type
    pdl_interp.are_equal %3220, %3221 : !pdl.type -> ^bb5995, ^bb1
  ^bb5995:  // pred: ^bb5994
    %3222 = pdl_interp.get_value_type of %3211 : !pdl.type
    pdl_interp.are_equal %3220, %3222 : !pdl.type -> ^bb5996, ^bb1
  ^bb5996:  // pred: ^bb5995
    %3223 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3220, %3223 : !pdl.type -> ^bb5997, ^bb1
  ^bb5997:  // pred: ^bb5996
    %3224 = pdl_interp.get_operand 0 of %3215
    pdl_interp.is_not_null %3224 : !pdl.value -> ^bb5998, ^bb1
  ^bb5998:  // pred: ^bb5997
    %3225 = pdl_interp.get_defining_op of %3224 : !pdl.value
    pdl_interp.is_not_null %3225 : !pdl.operation -> ^bb5999, ^bb1
  ^bb5999:  // pred: ^bb5998
    %3226 = pdl_interp.get_value_type of %3217 : !pdl.type
    pdl_interp.are_equal %3220, %3226 : !pdl.type -> ^bb6000, ^bb1
  ^bb6000:  // pred: ^bb5999
    %3227 = pdl_interp.get_operand 1 of %3215
    %3228 = pdl_interp.get_defining_op of %3227 : !pdl.value
    pdl_interp.is_not_null %3228 : !pdl.operation -> ^bb6001, ^bb1
  ^bb6001:  // pred: ^bb6000
    pdl_interp.check_operation_name of %3225 is "math_xdsl.constant" -> ^bb6002, ^bb1
  ^bb6002:  // pred: ^bb6001
    pdl_interp.check_operand_count of %3225 is 0 -> ^bb6003, ^bb1
  ^bb6003:  // pred: ^bb6002
    pdl_interp.check_result_count of %3225 is 1 -> ^bb6004, ^bb1
  ^bb6004:  // pred: ^bb6003
    %3229 = pdl_interp.get_result 0 of %3225
    pdl_interp.is_not_null %3229 : !pdl.value -> ^bb6005, ^bb1
  ^bb6005:  // pred: ^bb6004
    pdl_interp.are_equal %3229, %3224 : !pdl.value -> ^bb6006, ^bb1
  ^bb6006:  // pred: ^bb6005
    pdl_interp.is_not_null %3227 : !pdl.value -> ^bb6007, ^bb1
  ^bb6007:  // pred: ^bb6006
    pdl_interp.check_operation_name of %3228 is "arith.constant" -> ^bb6008, ^bb1
  ^bb6008:  // pred: ^bb6007
    pdl_interp.check_operand_count of %3228 is 0 -> ^bb6009, ^bb1
  ^bb6009:  // pred: ^bb6008
    pdl_interp.check_result_count of %3228 is 1 -> ^bb6010, ^bb1
  ^bb6010:  // pred: ^bb6009
    %3230 = pdl_interp.get_result 0 of %3228
    pdl_interp.is_not_null %3230 : !pdl.value -> ^bb6011, ^bb1
  ^bb6011:  // pred: ^bb6010
    pdl_interp.are_equal %3230, %3227 : !pdl.value -> ^bb6012, ^bb1
  ^bb6012:  // pred: ^bb6011
    %3231 = pdl_interp.get_value_type of %3229 : !pdl.type
    pdl_interp.are_equal %3231, %3220 : !pdl.type -> ^bb6013, ^bb1
  ^bb6013:  // pred: ^bb6012
    %3232 = pdl_interp.get_attribute "value" of %3225
    pdl_interp.is_not_null %3232 : !pdl.attribute -> ^bb6014, ^bb1
  ^bb6014:  // pred: ^bb6013
    pdl_interp.check_attribute %3232 is #math_xdsl<constant pi> -> ^bb6015, ^bb1
  ^bb6015:  // pred: ^bb6014
    %3233 = pdl_interp.get_attribute "value" of %3228
    pdl_interp.is_not_null %3233 : !pdl.attribute -> ^bb6016, ^bb1
  ^bb6016:  // pred: ^bb6015
    pdl_interp.check_attribute %3233 is 2.000000e+00 : f32 -> ^bb6017, ^bb1
  ^bb6017:  // pred: ^bb6016
    %3234 = pdl_interp.get_value_type of %3230 : !pdl.type
    pdl_interp.are_equal %3234, %3220 : !pdl.type -> ^bb6018, ^bb1
  ^bb6018:  // pred: ^bb6017
    pdl_interp.record_match @rewriters::@tan_addPIdiv2(%3219, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.tan", "arith.divf"]), loc([%arg0, %2, %3215, %3216, %3225, %3228]), root("math.tan") -> ^bb1
  ^bb6019:  // pred: ^bb5978
    %3235 = pdl_interp.get_value_type of %3211 : !pdl.type
    pdl_interp.are_equal %3213, %3235 : !pdl.type -> ^bb6020, ^bb5979
  ^bb6020:  // pred: ^bb6019
    %3236 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3213, %3236 : !pdl.type -> ^bb6021, ^bb5979
  ^bb6021:  // pred: ^bb6020
    %3237 = pdl_interp.get_operand 1 of %2
    %3238 = pdl_interp.get_defining_op of %3237 : !pdl.value
    pdl_interp.is_not_null %3238 : !pdl.operation -> ^bb6025, ^bb6022
  ^bb6022:  // 37 preds: ^bb6021, ^bb6025, ^bb6026, ^bb6027, ^bb6028, ^bb6029, ^bb6030, ^bb6031, ^bb6032, ^bb6033, ^bb6034, ^bb6035, ^bb6036, ^bb6037, ^bb6038, ^bb6039, ^bb6040, ^bb6041, ^bb6042, ^bb6043, ^bb6044, ^bb6045, ^bb6046, ^bb6047, ^bb6048, ^bb6049, ^bb6050, ^bb6051, ^bb6052, ^bb6053, ^bb6054, ^bb6055, ^bb6056, ^bb6057, ^bb6058, ^bb6059, ^bb6060
    %3239 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3239 : !pdl.value -> ^bb6023, ^bb5979
  ^bb6023:  // pred: ^bb6022
    %3240 = pdl_interp.get_value_type of %3239 : !pdl.type
    pdl_interp.are_equal %3213, %3240 : !pdl.type -> ^bb6024, ^bb5979
  ^bb6024:  // pred: ^bb6023
    pdl_interp.record_match @rewriters::@tan_sum(%3212, %3239, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.tan", "math.tan", "arith.addf", "arith.constant", "math.tan", "math.tan", "arith.mulf", "arith.subf", "arith.divf"]), loc([%arg0, %2]), root("math.tan") -> ^bb5979
  ^bb6025:  // pred: ^bb6021
    pdl_interp.is_not_null %3237 : !pdl.value -> ^bb6026, ^bb6022
  ^bb6026:  // pred: ^bb6025
    pdl_interp.switch_operation_name of %3238 to ["math_xdsl.constant", "arith.divf"](^bb6027, ^bb6035) -> ^bb6022
  ^bb6027:  // pred: ^bb6026
    pdl_interp.check_operand_count of %3238 is 0 -> ^bb6028, ^bb6022
  ^bb6028:  // pred: ^bb6027
    pdl_interp.check_result_count of %3238 is 1 -> ^bb6029, ^bb6022
  ^bb6029:  // pred: ^bb6028
    %3241 = pdl_interp.get_result 0 of %3238
    pdl_interp.is_not_null %3241 : !pdl.value -> ^bb6030, ^bb6022
  ^bb6030:  // pred: ^bb6029
    pdl_interp.are_equal %3241, %3237 : !pdl.value -> ^bb6031, ^bb6022
  ^bb6031:  // pred: ^bb6030
    %3242 = pdl_interp.get_attribute "value" of %3238
    pdl_interp.is_not_null %3242 : !pdl.attribute -> ^bb6032, ^bb6022
  ^bb6032:  // pred: ^bb6031
    pdl_interp.check_attribute %3242 is #math_xdsl<constant pi> -> ^bb6033, ^bb6022
  ^bb6033:  // pred: ^bb6032
    %3243 = pdl_interp.get_value_type of %3241 : !pdl.type
    pdl_interp.are_equal %3243, %3213 : !pdl.type -> ^bb6034, ^bb6022
  ^bb6034:  // pred: ^bb6033
    pdl_interp.record_match @rewriters::@tan_addPI(%3212, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.tan"]), loc([%arg0, %2, %3238]), root("math.tan") -> ^bb6022
  ^bb6035:  // pred: ^bb6026
    pdl_interp.check_operand_count of %3238 is 2 -> ^bb6036, ^bb6022
  ^bb6036:  // pred: ^bb6035
    pdl_interp.check_result_count of %3238 is 1 -> ^bb6037, ^bb6022
  ^bb6037:  // pred: ^bb6036
    %3244 = pdl_interp.get_result 0 of %3238
    pdl_interp.is_not_null %3244 : !pdl.value -> ^bb6038, ^bb6022
  ^bb6038:  // pred: ^bb6037
    pdl_interp.are_equal %3244, %3237 : !pdl.value -> ^bb6039, ^bb6022
  ^bb6039:  // pred: ^bb6038
    %3245 = pdl_interp.get_operand 0 of %3238
    pdl_interp.is_not_null %3245 : !pdl.value -> ^bb6040, ^bb6022
  ^bb6040:  // pred: ^bb6039
    %3246 = pdl_interp.get_defining_op of %3245 : !pdl.value
    pdl_interp.is_not_null %3246 : !pdl.operation -> ^bb6041, ^bb6022
  ^bb6041:  // pred: ^bb6040
    %3247 = pdl_interp.get_value_type of %3244 : !pdl.type
    pdl_interp.are_equal %3247, %3213 : !pdl.type -> ^bb6042, ^bb6022
  ^bb6042:  // pred: ^bb6041
    %3248 = pdl_interp.get_operand 1 of %3238
    %3249 = pdl_interp.get_defining_op of %3248 : !pdl.value
    pdl_interp.is_not_null %3249 : !pdl.operation -> ^bb6043, ^bb6022
  ^bb6043:  // pred: ^bb6042
    pdl_interp.check_operation_name of %3246 is "math_xdsl.constant" -> ^bb6044, ^bb6022
  ^bb6044:  // pred: ^bb6043
    pdl_interp.check_operand_count of %3246 is 0 -> ^bb6045, ^bb6022
  ^bb6045:  // pred: ^bb6044
    pdl_interp.check_result_count of %3246 is 1 -> ^bb6046, ^bb6022
  ^bb6046:  // pred: ^bb6045
    %3250 = pdl_interp.get_result 0 of %3246
    pdl_interp.is_not_null %3250 : !pdl.value -> ^bb6047, ^bb6022
  ^bb6047:  // pred: ^bb6046
    pdl_interp.are_equal %3250, %3245 : !pdl.value -> ^bb6048, ^bb6022
  ^bb6048:  // pred: ^bb6047
    pdl_interp.is_not_null %3248 : !pdl.value -> ^bb6049, ^bb6022
  ^bb6049:  // pred: ^bb6048
    pdl_interp.check_operation_name of %3249 is "arith.constant" -> ^bb6050, ^bb6022
  ^bb6050:  // pred: ^bb6049
    pdl_interp.check_operand_count of %3249 is 0 -> ^bb6051, ^bb6022
  ^bb6051:  // pred: ^bb6050
    pdl_interp.check_result_count of %3249 is 1 -> ^bb6052, ^bb6022
  ^bb6052:  // pred: ^bb6051
    %3251 = pdl_interp.get_result 0 of %3249
    pdl_interp.is_not_null %3251 : !pdl.value -> ^bb6053, ^bb6022
  ^bb6053:  // pred: ^bb6052
    pdl_interp.are_equal %3251, %3248 : !pdl.value -> ^bb6054, ^bb6022
  ^bb6054:  // pred: ^bb6053
    %3252 = pdl_interp.get_attribute "value" of %3246
    pdl_interp.is_not_null %3252 : !pdl.attribute -> ^bb6055, ^bb6022
  ^bb6055:  // pred: ^bb6054
    pdl_interp.check_attribute %3252 is #math_xdsl<constant pi> -> ^bb6056, ^bb6022
  ^bb6056:  // pred: ^bb6055
    %3253 = pdl_interp.get_attribute "value" of %3249
    pdl_interp.is_not_null %3253 : !pdl.attribute -> ^bb6057, ^bb6022
  ^bb6057:  // pred: ^bb6056
    pdl_interp.check_attribute %3253 is 2.000000e+00 : f32 -> ^bb6058, ^bb6022
  ^bb6058:  // pred: ^bb6057
    %3254 = pdl_interp.get_value_type of %3250 : !pdl.type
    pdl_interp.are_equal %3254, %3213 : !pdl.type -> ^bb6059, ^bb6022
  ^bb6059:  // pred: ^bb6058
    %3255 = pdl_interp.get_value_type of %3251 : !pdl.type
    pdl_interp.are_equal %3255, %3213 : !pdl.type -> ^bb6060, ^bb6022
  ^bb6060:  // pred: ^bb6059
    pdl_interp.record_match @rewriters::@neg_tan_addPIdiv2(%3212, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.tan", "arith.divf"]), loc([%arg0, %2, %3238, %3246, %3249]), root("math.tan") -> ^bb6022
  ^bb6061:  // pred: ^bb5836
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6062, ^bb1
  ^bb6062:  // pred: ^bb6061
    pdl_interp.check_result_count of %2 is 1 -> ^bb6063, ^bb1
  ^bb6063:  // pred: ^bb6062
    %3256 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3256 : !pdl.value -> ^bb6064, ^bb1
  ^bb6064:  // pred: ^bb6063
    pdl_interp.are_equal %3256, %1 : !pdl.value -> ^bb6065, ^bb1
  ^bb6065:  // pred: ^bb6064
    %3257 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3257 : !pdl.value -> ^bb6066, ^bb1
  ^bb6066:  // pred: ^bb6065
    %3258 = pdl_interp.get_defining_op of %3257 : !pdl.value
    pdl_interp.is_not_null %3258 : !pdl.operation -> ^bb6067, ^bb1
  ^bb6067:  // pred: ^bb6066
    %3259 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3259 : !pdl.value -> ^bb6068, ^bb1
  ^bb6068:  // pred: ^bb6067
    pdl_interp.check_operation_name of %3258 is "arith.constant" -> ^bb6069, ^bb1
  ^bb6069:  // pred: ^bb6068
    pdl_interp.check_operand_count of %3258 is 0 -> ^bb6070, ^bb1
  ^bb6070:  // pred: ^bb6069
    pdl_interp.check_result_count of %3258 is 1 -> ^bb6071, ^bb1
  ^bb6071:  // pred: ^bb6070
    %3260 = pdl_interp.get_result 0 of %3258
    pdl_interp.is_not_null %3260 : !pdl.value -> ^bb6072, ^bb1
  ^bb6072:  // pred: ^bb6071
    pdl_interp.are_equal %3260, %3257 : !pdl.value -> ^bb6073, ^bb1
  ^bb6073:  // pred: ^bb6072
    %3261 = pdl_interp.get_attribute "value" of %3258
    pdl_interp.is_not_null %3261 : !pdl.attribute -> ^bb6074, ^bb1
  ^bb6074:  // pred: ^bb6073
    pdl_interp.check_attribute %3261 is 2.000000e+00 : f32 -> ^bb6075, ^bb1
  ^bb6075:  // pred: ^bb6074
    %3262 = pdl_interp.get_value_type of %3260 : !pdl.type
    pdl_interp.check_type %3262 is f32 -> ^bb6076, ^bb1
  ^bb6076:  // pred: ^bb6075
    %3263 = pdl_interp.get_value_type of %3256 : !pdl.type
    pdl_interp.are_equal %3262, %3263 : !pdl.type -> ^bb6077, ^bb1
  ^bb6077:  // pred: ^bb6076
    %3264 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3262, %3264 : !pdl.type -> ^bb6078, ^bb1
  ^bb6078:  // pred: ^bb6077
    %3265 = pdl_interp.get_value_type of %3259 : !pdl.type
    pdl_interp.are_equal %3262, %3265 : !pdl.type -> ^bb6079, ^bb1
  ^bb6079:  // pred: ^bb6078
    pdl_interp.record_match @rewriters::@tan_2(%3259, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.tan", "arith.mulf", "arith.constant", "math.tan", "math.tan", "arith.mulf", "arith.subf", "arith.divf"]), loc([%arg0, %2, %3258]), root("math.tan") -> ^bb1
  ^bb6080:  // pred: ^bb5836
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6081, ^bb1
  ^bb6081:  // pred: ^bb6080
    pdl_interp.check_result_count of %2 is 1 -> ^bb6082, ^bb1
  ^bb6082:  // pred: ^bb6081
    %3266 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3266 : !pdl.value -> ^bb6083, ^bb1
  ^bb6083:  // pred: ^bb6082
    pdl_interp.are_equal %3266, %1 : !pdl.value -> ^bb6084, ^bb1
  ^bb6084:  // pred: ^bb6083
    %3267 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3267 : !pdl.value -> ^bb6085, ^bb1
  ^bb6085:  // pred: ^bb6084
    %3268 = pdl_interp.get_value_type of %3267 : !pdl.type
    pdl_interp.check_type %3268 is f32 -> ^bb6086, ^bb1
  ^bb6086:  // pred: ^bb6085
    %3269 = pdl_interp.get_value_type of %3266 : !pdl.type
    pdl_interp.are_equal %3268, %3269 : !pdl.type -> ^bb6087, ^bb1
  ^bb6087:  // pred: ^bb6086
    %3270 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3268, %3270 : !pdl.type -> ^bb6088, ^bb1
  ^bb6088:  // pred: ^bb6087
    pdl_interp.record_match @rewriters::@tan_asin(%3267, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "arith.subf", "math.sqrt", "arith.divf"]), loc([%arg0, %2]), root("math.tan") -> ^bb1
  ^bb6089:  // pred: ^bb5836
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6090, ^bb1
  ^bb6090:  // pred: ^bb6089
    pdl_interp.check_result_count of %2 is 1 -> ^bb6091, ^bb1
  ^bb6091:  // pred: ^bb6090
    %3271 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3271 : !pdl.value -> ^bb6092, ^bb1
  ^bb6092:  // pred: ^bb6091
    pdl_interp.are_equal %3271, %1 : !pdl.value -> ^bb6093, ^bb1
  ^bb6093:  // pred: ^bb6092
    %3272 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3272 : !pdl.value -> ^bb6094, ^bb1
  ^bb6094:  // pred: ^bb6093
    %3273 = pdl_interp.get_value_type of %3272 : !pdl.type
    pdl_interp.check_type %3273 is f32 -> ^bb6095, ^bb1
  ^bb6095:  // pred: ^bb6094
    %3274 = pdl_interp.get_value_type of %3271 : !pdl.type
    pdl_interp.are_equal %3273, %3274 : !pdl.type -> ^bb6096, ^bb1
  ^bb6096:  // pred: ^bb6095
    %3275 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3273, %3275 : !pdl.type -> ^bb6097, ^bb1
  ^bb6097:  // pred: ^bb6096
    pdl_interp.record_match @rewriters::@tan_acos(%3272, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "arith.subf", "math.sqrt", "arith.divf"]), loc([%arg0, %2]), root("math.tan") -> ^bb1
  ^bb6098:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb6099, ^bb1
  ^bb6099:  // pred: ^bb6098
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6100, ^bb1
  ^bb6100:  // pred: ^bb6099
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6101, ^bb1
  ^bb6101:  // pred: ^bb6100
    pdl_interp.switch_operation_name of %2 to ["math.tan", "arith.negf"](^bb6102, ^bb6111) -> ^bb1
  ^bb6102:  // pred: ^bb6101
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6103, ^bb1
  ^bb6103:  // pred: ^bb6102
    pdl_interp.check_result_count of %2 is 1 -> ^bb6104, ^bb1
  ^bb6104:  // pred: ^bb6103
    %3276 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3276 : !pdl.value -> ^bb6105, ^bb1
  ^bb6105:  // pred: ^bb6104
    pdl_interp.are_equal %3276, %1 : !pdl.value -> ^bb6106, ^bb1
  ^bb6106:  // pred: ^bb6105
    %3277 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3277 : !pdl.value -> ^bb6107, ^bb1
  ^bb6107:  // pred: ^bb6106
    %3278 = pdl_interp.get_value_type of %3277 : !pdl.type
    pdl_interp.check_type %3278 is f32 -> ^bb6108, ^bb1
  ^bb6108:  // pred: ^bb6107
    %3279 = pdl_interp.get_value_type of %3276 : !pdl.type
    pdl_interp.are_equal %3278, %3279 : !pdl.type -> ^bb6109, ^bb1
  ^bb6109:  // pred: ^bb6108
    %3280 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3278, %3280 : !pdl.type -> ^bb6110, ^bb1
  ^bb6110:  // pred: ^bb6109
    pdl_interp.record_match @rewriters::@atan_tan(%3277, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.remf"]), loc([%arg0, %2]), root("math.atan") -> ^bb1
  ^bb6111:  // pred: ^bb6101
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6112, ^bb1
  ^bb6112:  // pred: ^bb6111
    pdl_interp.check_result_count of %2 is 1 -> ^bb6113, ^bb1
  ^bb6113:  // pred: ^bb6112
    %3281 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3281 : !pdl.value -> ^bb6114, ^bb1
  ^bb6114:  // pred: ^bb6113
    pdl_interp.are_equal %3281, %1 : !pdl.value -> ^bb6115, ^bb1
  ^bb6115:  // pred: ^bb6114
    %3282 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3282 : !pdl.value -> ^bb6116, ^bb1
  ^bb6116:  // pred: ^bb6115
    %3283 = pdl_interp.get_value_type of %3282 : !pdl.type
    pdl_interp.check_type %3283 is f32 -> ^bb6117, ^bb1
  ^bb6117:  // pred: ^bb6116
    %3284 = pdl_interp.get_value_type of %3281 : !pdl.type
    pdl_interp.are_equal %3283, %3284 : !pdl.type -> ^bb6118, ^bb1
  ^bb6118:  // pred: ^bb6117
    %3285 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3283, %3285 : !pdl.type -> ^bb6119, ^bb1
  ^bb6119:  // pred: ^bb6118
    pdl_interp.record_match @rewriters::@atan_neg(%3282, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.atan", "arith.negf"]), loc([%arg0, %2]), root("math.atan") -> ^bb1
  ^bb6120:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb6121, ^bb1
  ^bb6121:  // pred: ^bb6120
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6122, ^bb1
  ^bb6122:  // pred: ^bb6121
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6123, ^bb1
  ^bb6123:  // pred: ^bb6122
    pdl_interp.switch_operation_name of %2 to ["math.sin", "arith.negf"](^bb6124, ^bb6133) -> ^bb1
  ^bb6124:  // pred: ^bb6123
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6125, ^bb1
  ^bb6125:  // pred: ^bb6124
    pdl_interp.check_result_count of %2 is 1 -> ^bb6126, ^bb1
  ^bb6126:  // pred: ^bb6125
    %3286 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3286 : !pdl.value -> ^bb6127, ^bb1
  ^bb6127:  // pred: ^bb6126
    pdl_interp.are_equal %3286, %1 : !pdl.value -> ^bb6128, ^bb1
  ^bb6128:  // pred: ^bb6127
    %3287 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3287 : !pdl.value -> ^bb6129, ^bb1
  ^bb6129:  // pred: ^bb6128
    %3288 = pdl_interp.get_value_type of %3287 : !pdl.type
    pdl_interp.check_type %3288 is f32 -> ^bb6130, ^bb1
  ^bb6130:  // pred: ^bb6129
    %3289 = pdl_interp.get_value_type of %3286 : !pdl.type
    pdl_interp.are_equal %3288, %3289 : !pdl.type -> ^bb6131, ^bb1
  ^bb6131:  // pred: ^bb6130
    %3290 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3288, %3290 : !pdl.type -> ^bb6132, ^bb1
  ^bb6132:  // pred: ^bb6131
    pdl_interp.record_match @rewriters::@asin_sin(%3287, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.constant", "arith.divf", "arith.addf", "arith.constant", "math_xdsl.constant", "arith.mulf", "arith.remf", "math.absf", "math_xdsl.constant", "arith.constant", "arith.divf", "arith.subf"]), loc([%arg0, %2]), root("math.asin") -> ^bb1
  ^bb6133:  // pred: ^bb6123
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6134, ^bb1
  ^bb6134:  // pred: ^bb6133
    pdl_interp.check_result_count of %2 is 1 -> ^bb6135, ^bb1
  ^bb6135:  // pred: ^bb6134
    %3291 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3291 : !pdl.value -> ^bb6136, ^bb1
  ^bb6136:  // pred: ^bb6135
    pdl_interp.are_equal %3291, %1 : !pdl.value -> ^bb6137, ^bb1
  ^bb6137:  // pred: ^bb6136
    %3292 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3292 : !pdl.value -> ^bb6138, ^bb1
  ^bb6138:  // pred: ^bb6137
    %3293 = pdl_interp.get_value_type of %3292 : !pdl.type
    pdl_interp.check_type %3293 is f32 -> ^bb6139, ^bb1
  ^bb6139:  // pred: ^bb6138
    %3294 = pdl_interp.get_value_type of %3291 : !pdl.type
    pdl_interp.are_equal %3293, %3294 : !pdl.type -> ^bb6140, ^bb1
  ^bb6140:  // pred: ^bb6139
    %3295 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3293, %3295 : !pdl.type -> ^bb6141, ^bb1
  ^bb6141:  // pred: ^bb6140
    pdl_interp.record_match @rewriters::@asin_neg(%3292, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.asin", "arith.negf"]), loc([%arg0, %2]), root("math.asin") -> ^bb1
  ^bb6142:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb6143, ^bb1
  ^bb6143:  // pred: ^bb6142
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6144, ^bb1
  ^bb6144:  // pred: ^bb6143
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6145, ^bb1
  ^bb6145:  // pred: ^bb6144
    pdl_interp.switch_operation_name of %2 to ["math.cos", "arith.negf"](^bb6146, ^bb6155) -> ^bb1
  ^bb6146:  // pred: ^bb6145
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6147, ^bb1
  ^bb6147:  // pred: ^bb6146
    pdl_interp.check_result_count of %2 is 1 -> ^bb6148, ^bb1
  ^bb6148:  // pred: ^bb6147
    %3296 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3296 : !pdl.value -> ^bb6149, ^bb1
  ^bb6149:  // pred: ^bb6148
    pdl_interp.are_equal %3296, %1 : !pdl.value -> ^bb6150, ^bb1
  ^bb6150:  // pred: ^bb6149
    %3297 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3297 : !pdl.value -> ^bb6151, ^bb1
  ^bb6151:  // pred: ^bb6150
    %3298 = pdl_interp.get_value_type of %3297 : !pdl.type
    pdl_interp.check_type %3298 is f32 -> ^bb6152, ^bb1
  ^bb6152:  // pred: ^bb6151
    %3299 = pdl_interp.get_value_type of %3296 : !pdl.type
    pdl_interp.are_equal %3298, %3299 : !pdl.type -> ^bb6153, ^bb1
  ^bb6153:  // pred: ^bb6152
    %3300 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3298, %3300 : !pdl.type -> ^bb6154, ^bb1
  ^bb6154:  // pred: ^bb6153
    pdl_interp.record_match @rewriters::@acos_cos(%3297, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math_xdsl.constant", "arith.mulf", "arith.remf", "math.absf"]), loc([%arg0, %2]), root("math.acos") -> ^bb1
  ^bb6155:  // pred: ^bb6145
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6156, ^bb1
  ^bb6156:  // pred: ^bb6155
    pdl_interp.check_result_count of %2 is 1 -> ^bb6157, ^bb1
  ^bb6157:  // pred: ^bb6156
    %3301 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3301 : !pdl.value -> ^bb6158, ^bb1
  ^bb6158:  // pred: ^bb6157
    pdl_interp.are_equal %3301, %1 : !pdl.value -> ^bb6159, ^bb1
  ^bb6159:  // pred: ^bb6158
    %3302 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3302 : !pdl.value -> ^bb6160, ^bb1
  ^bb6160:  // pred: ^bb6159
    %3303 = pdl_interp.get_value_type of %3302 : !pdl.type
    pdl_interp.check_type %3303 is f32 -> ^bb6161, ^bb1
  ^bb6161:  // pred: ^bb6160
    %3304 = pdl_interp.get_value_type of %3301 : !pdl.type
    pdl_interp.are_equal %3303, %3304 : !pdl.type -> ^bb6162, ^bb1
  ^bb6162:  // pred: ^bb6161
    %3305 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3303, %3305 : !pdl.type -> ^bb6163, ^bb1
  ^bb6163:  // pred: ^bb6162
    pdl_interp.record_match @rewriters::@acos_neg(%3302, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "math.acos", "arith.subf"]), loc([%arg0, %2]), root("math.acos") -> ^bb1
  ^bb6164:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb6165, ^bb1
  ^bb6165:  // pred: ^bb6164
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6166, ^bb1
  ^bb6166:  // pred: ^bb6165
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6167, ^bb1
  ^bb6167:  // pred: ^bb6166
    %3306 = pdl_interp.get_operand 1 of %arg0
    %3307 = pdl_interp.get_defining_op of %3306 : !pdl.value
    pdl_interp.is_not_null %3307 : !pdl.operation -> ^bb6168, ^bb1
  ^bb6168:  // pred: ^bb6167
    pdl_interp.switch_operation_name of %2 to ["arith.subf", "arith.addf"](^bb6169, ^bb6207) -> ^bb1
  ^bb6169:  // pred: ^bb6168
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6170, ^bb1
  ^bb6170:  // pred: ^bb6169
    pdl_interp.check_result_count of %2 is 1 -> ^bb6171, ^bb1
  ^bb6171:  // pred: ^bb6170
    %3308 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3308 : !pdl.value -> ^bb6172, ^bb1
  ^bb6172:  // pred: ^bb6171
    pdl_interp.are_equal %3308, %1 : !pdl.value -> ^bb6173, ^bb1
  ^bb6173:  // pred: ^bb6172
    %3309 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3309 : !pdl.value -> ^bb6174, ^bb1
  ^bb6174:  // pred: ^bb6173
    pdl_interp.is_not_null %3306 : !pdl.value -> ^bb6175, ^bb1
  ^bb6175:  // pred: ^bb6174
    %3310 = pdl_interp.get_value_type of %3309 : !pdl.type
    pdl_interp.check_type %3310 is f32 -> ^bb6176, ^bb1
  ^bb6176:  // pred: ^bb6175
    %3311 = pdl_interp.get_value_type of %3308 : !pdl.type
    pdl_interp.are_equal %3310, %3311 : !pdl.type -> ^bb6177, ^bb1
  ^bb6177:  // pred: ^bb6176
    %3312 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3310, %3312 : !pdl.type -> ^bb6178, ^bb1
  ^bb6178:  // pred: ^bb6177
    pdl_interp.check_operation_name of %3307 is "arith.addf" -> ^bb6179, ^bb1
  ^bb6179:  // pred: ^bb6178
    pdl_interp.check_operand_count of %3307 is 2 -> ^bb6180, ^bb1
  ^bb6180:  // pred: ^bb6179
    pdl_interp.check_result_count of %3307 is 1 -> ^bb6181, ^bb1
  ^bb6181:  // pred: ^bb6180
    %3313 = pdl_interp.get_result 0 of %3307
    pdl_interp.is_not_null %3313 : !pdl.value -> ^bb6182, ^bb1
  ^bb6182:  // pred: ^bb6181
    pdl_interp.are_equal %3313, %3306 : !pdl.value -> ^bb6183, ^bb1
  ^bb6183:  // pred: ^bb6182
    %3314 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3314 : !pdl.value -> ^bb6184, ^bb1
  ^bb6184:  // pred: ^bb6183
    %3315 = pdl_interp.get_operand 0 of %3307
    pdl_interp.is_not_null %3315 : !pdl.value -> ^bb6185, ^bb1
  ^bb6185:  // pred: ^bb6184
    %3316 = pdl_interp.get_defining_op of %3315 : !pdl.value
    pdl_interp.is_not_null %3316 : !pdl.operation -> ^bb6186, ^bb1
  ^bb6186:  // pred: ^bb6185
    %3317 = pdl_interp.get_operand 1 of %3307
    %3318 = pdl_interp.get_defining_op of %3317 : !pdl.value
    pdl_interp.is_not_null %3318 : !pdl.operation -> ^bb6187, ^bb1
  ^bb6187:  // pred: ^bb6186
    pdl_interp.is_not_null %3317 : !pdl.value -> ^bb6188, ^bb1
  ^bb6188:  // pred: ^bb6187
    %3319 = pdl_interp.get_value_type of %3313 : !pdl.type
    pdl_interp.are_equal %3310, %3319 : !pdl.type -> ^bb6189, ^bb1
  ^bb6189:  // pred: ^bb6188
    %3320 = pdl_interp.get_value_type of %3314 : !pdl.type
    pdl_interp.are_equal %3310, %3320 : !pdl.type -> ^bb6190, ^bb1
  ^bb6190:  // pred: ^bb6189
    pdl_interp.check_operation_name of %3316 is "arith.constant" -> ^bb6191, ^bb1
  ^bb6191:  // pred: ^bb6190
    pdl_interp.check_operand_count of %3316 is 0 -> ^bb6192, ^bb1
  ^bb6192:  // pred: ^bb6191
    pdl_interp.check_result_count of %3316 is 1 -> ^bb6193, ^bb1
  ^bb6193:  // pred: ^bb6192
    %3321 = pdl_interp.get_result 0 of %3316
    pdl_interp.is_not_null %3321 : !pdl.value -> ^bb6194, ^bb1
  ^bb6194:  // pred: ^bb6193
    pdl_interp.are_equal %3321, %3315 : !pdl.value -> ^bb6195, ^bb1
  ^bb6195:  // pred: ^bb6194
    pdl_interp.check_operation_name of %3318 is "arith.mulf" -> ^bb6196, ^bb1
  ^bb6196:  // pred: ^bb6195
    pdl_interp.check_operand_count of %3318 is 2 -> ^bb6197, ^bb1
  ^bb6197:  // pred: ^bb6196
    pdl_interp.check_result_count of %3318 is 1 -> ^bb6198, ^bb1
  ^bb6198:  // pred: ^bb6197
    %3322 = pdl_interp.get_result 0 of %3318
    pdl_interp.is_not_null %3322 : !pdl.value -> ^bb6199, ^bb1
  ^bb6199:  // pred: ^bb6198
    pdl_interp.are_equal %3322, %3317 : !pdl.value -> ^bb6200, ^bb1
  ^bb6200:  // pred: ^bb6199
    %3323 = pdl_interp.get_attribute "value" of %3316
    pdl_interp.is_not_null %3323 : !pdl.attribute -> ^bb6201, ^bb1
  ^bb6201:  // pred: ^bb6200
    pdl_interp.check_attribute %3323 is 1.000000e+00 : f32 -> ^bb6202, ^bb1
  ^bb6202:  // pred: ^bb6201
    %3324 = pdl_interp.get_value_type of %3322 : !pdl.type
    pdl_interp.are_equal %3324, %3310 : !pdl.type -> ^bb6203, ^bb1
  ^bb6203:  // pred: ^bb6202
    %3325 = pdl_interp.get_value_type of %3321 : !pdl.type
    pdl_interp.are_equal %3325, %3310 : !pdl.type -> ^bb6204, ^bb1
  ^bb6204:  // pred: ^bb6203
    %3326 = pdl_interp.get_operand 0 of %3318
    pdl_interp.are_equal %3326, %3309 : !pdl.value -> ^bb6205, ^bb1
  ^bb6205:  // pred: ^bb6204
    %3327 = pdl_interp.get_operand 1 of %3318
    pdl_interp.are_equal %3327, %3314 : !pdl.value -> ^bb6206, ^bb1
  ^bb6206:  // pred: ^bb6205
    pdl_interp.record_match @rewriters::@diff_atan_rev(%3309, %3314, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.atan", "math.atan", "arith.subf"]), loc([%arg0, %3307, %2, %3316, %3318]), root("math.atan2") -> ^bb1
  ^bb6207:  // pred: ^bb6168
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6208, ^bb1
  ^bb6208:  // pred: ^bb6207
    pdl_interp.check_result_count of %2 is 1 -> ^bb6209, ^bb1
  ^bb6209:  // pred: ^bb6208
    %3328 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3328 : !pdl.value -> ^bb6210, ^bb1
  ^bb6210:  // pred: ^bb6209
    pdl_interp.are_equal %3328, %1 : !pdl.value -> ^bb6211, ^bb1
  ^bb6211:  // pred: ^bb6210
    %3329 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3329 : !pdl.value -> ^bb6212, ^bb1
  ^bb6212:  // pred: ^bb6211
    pdl_interp.is_not_null %3306 : !pdl.value -> ^bb6213, ^bb1
  ^bb6213:  // pred: ^bb6212
    %3330 = pdl_interp.get_value_type of %3329 : !pdl.type
    pdl_interp.check_type %3330 is f32 -> ^bb6214, ^bb1
  ^bb6214:  // pred: ^bb6213
    %3331 = pdl_interp.get_value_type of %3328 : !pdl.type
    pdl_interp.are_equal %3330, %3331 : !pdl.type -> ^bb6215, ^bb1
  ^bb6215:  // pred: ^bb6214
    %3332 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3330, %3332 : !pdl.type -> ^bb6216, ^bb1
  ^bb6216:  // pred: ^bb6215
    pdl_interp.check_operation_name of %3307 is "arith.subf" -> ^bb6217, ^bb1
  ^bb6217:  // pred: ^bb6216
    pdl_interp.check_operand_count of %3307 is 2 -> ^bb6218, ^bb1
  ^bb6218:  // pred: ^bb6217
    pdl_interp.check_result_count of %3307 is 1 -> ^bb6219, ^bb1
  ^bb6219:  // pred: ^bb6218
    %3333 = pdl_interp.get_result 0 of %3307
    pdl_interp.is_not_null %3333 : !pdl.value -> ^bb6220, ^bb1
  ^bb6220:  // pred: ^bb6219
    pdl_interp.are_equal %3333, %3306 : !pdl.value -> ^bb6221, ^bb1
  ^bb6221:  // pred: ^bb6220
    %3334 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3334 : !pdl.value -> ^bb6222, ^bb1
  ^bb6222:  // pred: ^bb6221
    %3335 = pdl_interp.get_operand 0 of %3307
    pdl_interp.is_not_null %3335 : !pdl.value -> ^bb6223, ^bb1
  ^bb6223:  // pred: ^bb6222
    %3336 = pdl_interp.get_defining_op of %3335 : !pdl.value
    pdl_interp.is_not_null %3336 : !pdl.operation -> ^bb6224, ^bb1
  ^bb6224:  // pred: ^bb6223
    %3337 = pdl_interp.get_operand 1 of %3307
    %3338 = pdl_interp.get_defining_op of %3337 : !pdl.value
    pdl_interp.is_not_null %3338 : !pdl.operation -> ^bb6225, ^bb1
  ^bb6225:  // pred: ^bb6224
    pdl_interp.is_not_null %3337 : !pdl.value -> ^bb6226, ^bb1
  ^bb6226:  // pred: ^bb6225
    %3339 = pdl_interp.get_value_type of %3333 : !pdl.type
    pdl_interp.are_equal %3330, %3339 : !pdl.type -> ^bb6227, ^bb1
  ^bb6227:  // pred: ^bb6226
    %3340 = pdl_interp.get_value_type of %3334 : !pdl.type
    pdl_interp.are_equal %3330, %3340 : !pdl.type -> ^bb6228, ^bb1
  ^bb6228:  // pred: ^bb6227
    pdl_interp.check_operation_name of %3336 is "arith.constant" -> ^bb6229, ^bb1
  ^bb6229:  // pred: ^bb6228
    pdl_interp.check_operand_count of %3336 is 0 -> ^bb6230, ^bb1
  ^bb6230:  // pred: ^bb6229
    pdl_interp.check_result_count of %3336 is 1 -> ^bb6231, ^bb1
  ^bb6231:  // pred: ^bb6230
    %3341 = pdl_interp.get_result 0 of %3336
    pdl_interp.is_not_null %3341 : !pdl.value -> ^bb6232, ^bb1
  ^bb6232:  // pred: ^bb6231
    pdl_interp.are_equal %3341, %3335 : !pdl.value -> ^bb6233, ^bb1
  ^bb6233:  // pred: ^bb6232
    pdl_interp.check_operation_name of %3338 is "arith.mulf" -> ^bb6234, ^bb1
  ^bb6234:  // pred: ^bb6233
    pdl_interp.check_operand_count of %3338 is 2 -> ^bb6235, ^bb1
  ^bb6235:  // pred: ^bb6234
    pdl_interp.check_result_count of %3338 is 1 -> ^bb6236, ^bb1
  ^bb6236:  // pred: ^bb6235
    %3342 = pdl_interp.get_result 0 of %3338
    pdl_interp.is_not_null %3342 : !pdl.value -> ^bb6237, ^bb1
  ^bb6237:  // pred: ^bb6236
    pdl_interp.are_equal %3342, %3337 : !pdl.value -> ^bb6238, ^bb1
  ^bb6238:  // pred: ^bb6237
    %3343 = pdl_interp.get_attribute "value" of %3336
    pdl_interp.is_not_null %3343 : !pdl.attribute -> ^bb6239, ^bb1
  ^bb6239:  // pred: ^bb6238
    pdl_interp.check_attribute %3343 is 1.000000e+00 : f32 -> ^bb6240, ^bb1
  ^bb6240:  // pred: ^bb6239
    %3344 = pdl_interp.get_value_type of %3342 : !pdl.type
    pdl_interp.are_equal %3344, %3330 : !pdl.type -> ^bb6241, ^bb1
  ^bb6241:  // pred: ^bb6240
    %3345 = pdl_interp.get_value_type of %3341 : !pdl.type
    pdl_interp.are_equal %3345, %3330 : !pdl.type -> ^bb6242, ^bb1
  ^bb6242:  // pred: ^bb6241
    %3346 = pdl_interp.get_operand 0 of %3338
    pdl_interp.are_equal %3346, %3329 : !pdl.value -> ^bb6243, ^bb1
  ^bb6243:  // pred: ^bb6242
    %3347 = pdl_interp.get_operand 1 of %3338
    pdl_interp.are_equal %3347, %3334 : !pdl.value -> ^bb6244, ^bb1
  ^bb6244:  // pred: ^bb6243
    pdl_interp.record_match @rewriters::@sum_atan_rev(%3329, %3334, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.atan", "math.atan", "arith.addf"]), loc([%arg0, %2, %3307, %3336, %3338]), root("math.atan2") -> ^bb1
  ^bb6245:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb6246, ^bb1
  ^bb6246:  // pred: ^bb6245
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6247, ^bb1
  ^bb6247:  // pred: ^bb6246
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6248, ^bb1
  ^bb6248:  // pred: ^bb6247
    pdl_interp.switch_operation_name of %2 to ["arith.addf", "arith.subf", "arith.mulf", "arith.divf", "arith.negf", "arith.constant", "math.asinh", "math.acosh", "math.atanh"](^bb6249, ^bb6260, ^bb6271, ^bb6290, ^bb6309, ^bb6318, ^bb6327, ^bb6336, ^bb6345) -> ^bb1
  ^bb6249:  // pred: ^bb6248
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6250, ^bb1
  ^bb6250:  // pred: ^bb6249
    pdl_interp.check_result_count of %2 is 1 -> ^bb6251, ^bb1
  ^bb6251:  // pred: ^bb6250
    %3348 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3348 : !pdl.value -> ^bb6252, ^bb1
  ^bb6252:  // pred: ^bb6251
    pdl_interp.are_equal %3348, %1 : !pdl.value -> ^bb6253, ^bb1
  ^bb6253:  // pred: ^bb6252
    %3349 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3349 : !pdl.value -> ^bb6254, ^bb1
  ^bb6254:  // pred: ^bb6253
    %3350 = pdl_interp.get_value_type of %3349 : !pdl.type
    pdl_interp.check_type %3350 is f32 -> ^bb6255, ^bb1
  ^bb6255:  // pred: ^bb6254
    %3351 = pdl_interp.get_value_type of %3348 : !pdl.type
    pdl_interp.are_equal %3350, %3351 : !pdl.type -> ^bb6256, ^bb1
  ^bb6256:  // pred: ^bb6255
    %3352 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3350, %3352 : !pdl.type -> ^bb6257, ^bb1
  ^bb6257:  // pred: ^bb6256
    %3353 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3353 : !pdl.value -> ^bb6258, ^bb1
  ^bb6258:  // pred: ^bb6257
    %3354 = pdl_interp.get_value_type of %3353 : !pdl.type
    pdl_interp.are_equal %3350, %3354 : !pdl.type -> ^bb6259, ^bb1
  ^bb6259:  // pred: ^bb6258
    pdl_interp.record_match @rewriters::@cosh_sum(%3349, %3353, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh", "math.cosh", "arith.mulf", "math.sinh", "math.sinh", "arith.mulf", "arith.addf"]), loc([%arg0, %2]), root("math.cosh") -> ^bb1
  ^bb6260:  // pred: ^bb6248
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6261, ^bb1
  ^bb6261:  // pred: ^bb6260
    pdl_interp.check_result_count of %2 is 1 -> ^bb6262, ^bb1
  ^bb6262:  // pred: ^bb6261
    %3355 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3355 : !pdl.value -> ^bb6263, ^bb1
  ^bb6263:  // pred: ^bb6262
    pdl_interp.are_equal %3355, %1 : !pdl.value -> ^bb6264, ^bb1
  ^bb6264:  // pred: ^bb6263
    %3356 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3356 : !pdl.value -> ^bb6265, ^bb1
  ^bb6265:  // pred: ^bb6264
    %3357 = pdl_interp.get_value_type of %3356 : !pdl.type
    pdl_interp.check_type %3357 is f32 -> ^bb6266, ^bb1
  ^bb6266:  // pred: ^bb6265
    %3358 = pdl_interp.get_value_type of %3355 : !pdl.type
    pdl_interp.are_equal %3357, %3358 : !pdl.type -> ^bb6267, ^bb1
  ^bb6267:  // pred: ^bb6266
    %3359 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3357, %3359 : !pdl.type -> ^bb6268, ^bb1
  ^bb6268:  // pred: ^bb6267
    %3360 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3360 : !pdl.value -> ^bb6269, ^bb1
  ^bb6269:  // pred: ^bb6268
    %3361 = pdl_interp.get_value_type of %3360 : !pdl.type
    pdl_interp.are_equal %3357, %3361 : !pdl.type -> ^bb6270, ^bb1
  ^bb6270:  // pred: ^bb6269
    pdl_interp.record_match @rewriters::@cosh_diff(%3356, %3360, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh", "math.cosh", "arith.mulf", "math.sinh", "math.sinh", "arith.mulf", "arith.subf"]), loc([%arg0, %2]), root("math.cosh") -> ^bb1
  ^bb6271:  // pred: ^bb6248
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6272, ^bb1
  ^bb6272:  // pred: ^bb6271
    pdl_interp.check_result_count of %2 is 1 -> ^bb6273, ^bb1
  ^bb6273:  // pred: ^bb6272
    %3362 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3362 : !pdl.value -> ^bb6274, ^bb1
  ^bb6274:  // pred: ^bb6273
    pdl_interp.are_equal %3362, %1 : !pdl.value -> ^bb6275, ^bb1
  ^bb6275:  // pred: ^bb6274
    %3363 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3363 : !pdl.value -> ^bb6276, ^bb1
  ^bb6276:  // pred: ^bb6275
    %3364 = pdl_interp.get_defining_op of %3363 : !pdl.value
    pdl_interp.is_not_null %3364 : !pdl.operation -> ^bb6277, ^bb1
  ^bb6277:  // pred: ^bb6276
    %3365 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3365 : !pdl.value -> ^bb6278, ^bb1
  ^bb6278:  // pred: ^bb6277
    pdl_interp.check_operation_name of %3364 is "arith.constant" -> ^bb6279, ^bb1
  ^bb6279:  // pred: ^bb6278
    pdl_interp.check_operand_count of %3364 is 0 -> ^bb6280, ^bb1
  ^bb6280:  // pred: ^bb6279
    pdl_interp.check_result_count of %3364 is 1 -> ^bb6281, ^bb1
  ^bb6281:  // pred: ^bb6280
    %3366 = pdl_interp.get_result 0 of %3364
    pdl_interp.is_not_null %3366 : !pdl.value -> ^bb6282, ^bb1
  ^bb6282:  // pred: ^bb6281
    pdl_interp.are_equal %3366, %3363 : !pdl.value -> ^bb6283, ^bb1
  ^bb6283:  // pred: ^bb6282
    %3367 = pdl_interp.get_attribute "value" of %3364
    pdl_interp.is_not_null %3367 : !pdl.attribute -> ^bb6284, ^bb1
  ^bb6284:  // pred: ^bb6283
    pdl_interp.check_attribute %3367 is 2.000000e+00 : f32 -> ^bb6285, ^bb1
  ^bb6285:  // pred: ^bb6284
    %3368 = pdl_interp.get_value_type of %3366 : !pdl.type
    pdl_interp.check_type %3368 is f32 -> ^bb6286, ^bb1
  ^bb6286:  // pred: ^bb6285
    %3369 = pdl_interp.get_value_type of %3362 : !pdl.type
    pdl_interp.are_equal %3368, %3369 : !pdl.type -> ^bb6287, ^bb1
  ^bb6287:  // pred: ^bb6286
    %3370 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3368, %3370 : !pdl.type -> ^bb6288, ^bb1
  ^bb6288:  // pred: ^bb6287
    %3371 = pdl_interp.get_value_type of %3365 : !pdl.type
    pdl_interp.are_equal %3368, %3371 : !pdl.type -> ^bb6289, ^bb1
  ^bb6289:  // pred: ^bb6288
    pdl_interp.record_match @rewriters::@cosh_2(%3365, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sinh", "math.sinh", "arith.mulf", "math.cosh", "math.cosh", "arith.mulf", "arith.addf"]), loc([%arg0, %2, %3364]), root("math.cosh") -> ^bb1
  ^bb6290:  // pred: ^bb6248
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6291, ^bb1
  ^bb6291:  // pred: ^bb6290
    pdl_interp.check_result_count of %2 is 1 -> ^bb6292, ^bb1
  ^bb6292:  // pred: ^bb6291
    %3372 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3372 : !pdl.value -> ^bb6293, ^bb1
  ^bb6293:  // pred: ^bb6292
    pdl_interp.are_equal %3372, %1 : !pdl.value -> ^bb6294, ^bb1
  ^bb6294:  // pred: ^bb6293
    %3373 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3373 : !pdl.value -> ^bb6295, ^bb1
  ^bb6295:  // pred: ^bb6294
    %3374 = pdl_interp.get_value_type of %3373 : !pdl.type
    pdl_interp.check_type %3374 is f32 -> ^bb6296, ^bb1
  ^bb6296:  // pred: ^bb6295
    %3375 = pdl_interp.get_value_type of %3372 : !pdl.type
    pdl_interp.are_equal %3374, %3375 : !pdl.type -> ^bb6297, ^bb1
  ^bb6297:  // pred: ^bb6296
    %3376 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3374, %3376 : !pdl.type -> ^bb6298, ^bb1
  ^bb6298:  // pred: ^bb6297
    %3377 = pdl_interp.get_operand 1 of %2
    %3378 = pdl_interp.get_defining_op of %3377 : !pdl.value
    pdl_interp.is_not_null %3378 : !pdl.operation -> ^bb6299, ^bb1
  ^bb6299:  // pred: ^bb6298
    pdl_interp.is_not_null %3377 : !pdl.value -> ^bb6300, ^bb1
  ^bb6300:  // pred: ^bb6299
    pdl_interp.check_operation_name of %3378 is "arith.constant" -> ^bb6301, ^bb1
  ^bb6301:  // pred: ^bb6300
    pdl_interp.check_operand_count of %3378 is 0 -> ^bb6302, ^bb1
  ^bb6302:  // pred: ^bb6301
    pdl_interp.check_result_count of %3378 is 1 -> ^bb6303, ^bb1
  ^bb6303:  // pred: ^bb6302
    %3379 = pdl_interp.get_result 0 of %3378
    pdl_interp.is_not_null %3379 : !pdl.value -> ^bb6304, ^bb1
  ^bb6304:  // pred: ^bb6303
    pdl_interp.are_equal %3379, %3377 : !pdl.value -> ^bb6305, ^bb1
  ^bb6305:  // pred: ^bb6304
    %3380 = pdl_interp.get_attribute "value" of %3378
    pdl_interp.is_not_null %3380 : !pdl.attribute -> ^bb6306, ^bb1
  ^bb6306:  // pred: ^bb6305
    pdl_interp.check_attribute %3380 is 2.000000e+00 : f32 -> ^bb6307, ^bb1
  ^bb6307:  // pred: ^bb6306
    %3381 = pdl_interp.get_value_type of %3379 : !pdl.type
    pdl_interp.are_equal %3381, %3374 : !pdl.type -> ^bb6308, ^bb1
  ^bb6308:  // pred: ^bb6307
    pdl_interp.record_match @rewriters::@cosh_1div2(%3373, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh", "arith.constant", "arith.addf", "arith.constant", "arith.divf", "math.sqrt"]), loc([%arg0, %2, %3378]), root("math.cosh") -> ^bb1
  ^bb6309:  // pred: ^bb6248
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6310, ^bb1
  ^bb6310:  // pred: ^bb6309
    pdl_interp.check_result_count of %2 is 1 -> ^bb6311, ^bb1
  ^bb6311:  // pred: ^bb6310
    %3382 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3382 : !pdl.value -> ^bb6312, ^bb1
  ^bb6312:  // pred: ^bb6311
    pdl_interp.are_equal %3382, %1 : !pdl.value -> ^bb6313, ^bb1
  ^bb6313:  // pred: ^bb6312
    %3383 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3383 : !pdl.value -> ^bb6314, ^bb1
  ^bb6314:  // pred: ^bb6313
    %3384 = pdl_interp.get_value_type of %3383 : !pdl.type
    pdl_interp.check_type %3384 is f32 -> ^bb6315, ^bb1
  ^bb6315:  // pred: ^bb6314
    %3385 = pdl_interp.get_value_type of %3382 : !pdl.type
    pdl_interp.are_equal %3384, %3385 : !pdl.type -> ^bb6316, ^bb1
  ^bb6316:  // pred: ^bb6315
    %3386 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3384, %3386 : !pdl.type -> ^bb6317, ^bb1
  ^bb6317:  // pred: ^bb6316
    pdl_interp.record_match @rewriters::@cosh_neg(%3383, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh"]), loc([%arg0, %2]), root("math.cosh") -> ^bb1
  ^bb6318:  // pred: ^bb6248
    pdl_interp.check_operand_count of %2 is 0 -> ^bb6319, ^bb1
  ^bb6319:  // pred: ^bb6318
    pdl_interp.check_result_count of %2 is 1 -> ^bb6320, ^bb1
  ^bb6320:  // pred: ^bb6319
    %3387 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3387 : !pdl.value -> ^bb6321, ^bb1
  ^bb6321:  // pred: ^bb6320
    pdl_interp.are_equal %3387, %1 : !pdl.value -> ^bb6322, ^bb1
  ^bb6322:  // pred: ^bb6321
    %3388 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %3388 : !pdl.attribute -> ^bb6323, ^bb1
  ^bb6323:  // pred: ^bb6322
    pdl_interp.check_attribute %3388 is 0.000000e+00 : f32 -> ^bb6324, ^bb1
  ^bb6324:  // pred: ^bb6323
    %3389 = pdl_interp.get_value_type of %3387 : !pdl.type
    pdl_interp.check_type %3389 is f32 -> ^bb6325, ^bb1
  ^bb6325:  // pred: ^bb6324
    %3390 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3389, %3390 : !pdl.type -> ^bb6326, ^bb1
  ^bb6326:  // pred: ^bb6325
    pdl_interp.record_match @rewriters::@cosh_0(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.cosh") -> ^bb1
  ^bb6327:  // pred: ^bb6248
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6328, ^bb1
  ^bb6328:  // pred: ^bb6327
    pdl_interp.check_result_count of %2 is 1 -> ^bb6329, ^bb1
  ^bb6329:  // pred: ^bb6328
    %3391 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3391 : !pdl.value -> ^bb6330, ^bb1
  ^bb6330:  // pred: ^bb6329
    pdl_interp.are_equal %3391, %1 : !pdl.value -> ^bb6331, ^bb1
  ^bb6331:  // pred: ^bb6330
    %3392 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3392 : !pdl.value -> ^bb6332, ^bb1
  ^bb6332:  // pred: ^bb6331
    %3393 = pdl_interp.get_value_type of %3392 : !pdl.type
    pdl_interp.check_type %3393 is f32 -> ^bb6333, ^bb1
  ^bb6333:  // pred: ^bb6332
    %3394 = pdl_interp.get_value_type of %3391 : !pdl.type
    pdl_interp.are_equal %3393, %3394 : !pdl.type -> ^bb6334, ^bb1
  ^bb6334:  // pred: ^bb6333
    %3395 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3393, %3395 : !pdl.type -> ^bb6335, ^bb1
  ^bb6335:  // pred: ^bb6334
    pdl_interp.record_match @rewriters::@cosh_asinh(%3392, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.constant", "arith.addf", "math.sqrt"]), loc([%arg0, %2]), root("math.cosh") -> ^bb1
  ^bb6336:  // pred: ^bb6248
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6337, ^bb1
  ^bb6337:  // pred: ^bb6336
    pdl_interp.check_result_count of %2 is 1 -> ^bb6338, ^bb1
  ^bb6338:  // pred: ^bb6337
    %3396 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3396 : !pdl.value -> ^bb6339, ^bb1
  ^bb6339:  // pred: ^bb6338
    pdl_interp.are_equal %3396, %1 : !pdl.value -> ^bb6340, ^bb1
  ^bb6340:  // pred: ^bb6339
    %3397 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3397 : !pdl.value -> ^bb6341, ^bb1
  ^bb6341:  // pred: ^bb6340
    %3398 = pdl_interp.get_value_type of %3397 : !pdl.type
    pdl_interp.check_type %3398 is f32 -> ^bb6342, ^bb1
  ^bb6342:  // pred: ^bb6341
    %3399 = pdl_interp.get_value_type of %3396 : !pdl.type
    pdl_interp.are_equal %3398, %3399 : !pdl.type -> ^bb6343, ^bb1
  ^bb6343:  // pred: ^bb6342
    %3400 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3398, %3400 : !pdl.type -> ^bb6344, ^bb1
  ^bb6344:  // pred: ^bb6343
    pdl_interp.record_match @rewriters::@cosh_acosh(%3397, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("math.cosh") -> ^bb1
  ^bb6345:  // pred: ^bb6248
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6346, ^bb1
  ^bb6346:  // pred: ^bb6345
    pdl_interp.check_result_count of %2 is 1 -> ^bb6347, ^bb1
  ^bb6347:  // pred: ^bb6346
    %3401 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3401 : !pdl.value -> ^bb6348, ^bb1
  ^bb6348:  // pred: ^bb6347
    pdl_interp.are_equal %3401, %1 : !pdl.value -> ^bb6349, ^bb1
  ^bb6349:  // pred: ^bb6348
    %3402 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3402 : !pdl.value -> ^bb6350, ^bb1
  ^bb6350:  // pred: ^bb6349
    %3403 = pdl_interp.get_value_type of %3402 : !pdl.type
    pdl_interp.check_type %3403 is f32 -> ^bb6351, ^bb1
  ^bb6351:  // pred: ^bb6350
    %3404 = pdl_interp.get_value_type of %3401 : !pdl.type
    pdl_interp.are_equal %3403, %3404 : !pdl.type -> ^bb6352, ^bb1
  ^bb6352:  // pred: ^bb6351
    %3405 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3403, %3405 : !pdl.type -> ^bb6353, ^bb1
  ^bb6353:  // pred: ^bb6352
    pdl_interp.record_match @rewriters::@cosh_atanh(%3402, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.constant", "arith.mulf", "arith.subf", "math.sqrt", "arith.divf"]), loc([%arg0, %2]), root("math.cosh") -> ^bb1
  ^bb6354:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb6355, ^bb1
  ^bb6355:  // pred: ^bb6354
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6356, ^bb1
  ^bb6356:  // pred: ^bb6355
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6357, ^bb1
  ^bb6357:  // pred: ^bb6356
    pdl_interp.switch_operation_name of %2 to ["arith.addf", "arith.subf", "arith.mulf", "arith.divf", "arith.negf", "arith.constant", "math.asinh", "math.acosh", "math.atanh"](^bb6358, ^bb6369, ^bb6380, ^bb6399, ^bb6418, ^bb6427, ^bb6436, ^bb6445, ^bb6454) -> ^bb1
  ^bb6358:  // pred: ^bb6357
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6359, ^bb1
  ^bb6359:  // pred: ^bb6358
    pdl_interp.check_result_count of %2 is 1 -> ^bb6360, ^bb1
  ^bb6360:  // pred: ^bb6359
    %3406 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3406 : !pdl.value -> ^bb6361, ^bb1
  ^bb6361:  // pred: ^bb6360
    pdl_interp.are_equal %3406, %1 : !pdl.value -> ^bb6362, ^bb1
  ^bb6362:  // pred: ^bb6361
    %3407 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3407 : !pdl.value -> ^bb6363, ^bb1
  ^bb6363:  // pred: ^bb6362
    %3408 = pdl_interp.get_value_type of %3407 : !pdl.type
    pdl_interp.check_type %3408 is f32 -> ^bb6364, ^bb1
  ^bb6364:  // pred: ^bb6363
    %3409 = pdl_interp.get_value_type of %3406 : !pdl.type
    pdl_interp.are_equal %3408, %3409 : !pdl.type -> ^bb6365, ^bb1
  ^bb6365:  // pred: ^bb6364
    %3410 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3408, %3410 : !pdl.type -> ^bb6366, ^bb1
  ^bb6366:  // pred: ^bb6365
    %3411 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3411 : !pdl.value -> ^bb6367, ^bb1
  ^bb6367:  // pred: ^bb6366
    %3412 = pdl_interp.get_value_type of %3411 : !pdl.type
    pdl_interp.are_equal %3408, %3412 : !pdl.type -> ^bb6368, ^bb1
  ^bb6368:  // pred: ^bb6367
    pdl_interp.record_match @rewriters::@sinh_sum(%3407, %3411, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sinh", "math.cosh", "arith.mulf", "math.cosh", "math.sinh", "arith.mulf", "arith.addf"]), loc([%arg0, %2]), root("math.sinh") -> ^bb1
  ^bb6369:  // pred: ^bb6357
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6370, ^bb1
  ^bb6370:  // pred: ^bb6369
    pdl_interp.check_result_count of %2 is 1 -> ^bb6371, ^bb1
  ^bb6371:  // pred: ^bb6370
    %3413 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3413 : !pdl.value -> ^bb6372, ^bb1
  ^bb6372:  // pred: ^bb6371
    pdl_interp.are_equal %3413, %1 : !pdl.value -> ^bb6373, ^bb1
  ^bb6373:  // pred: ^bb6372
    %3414 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3414 : !pdl.value -> ^bb6374, ^bb1
  ^bb6374:  // pred: ^bb6373
    %3415 = pdl_interp.get_value_type of %3414 : !pdl.type
    pdl_interp.check_type %3415 is f32 -> ^bb6375, ^bb1
  ^bb6375:  // pred: ^bb6374
    %3416 = pdl_interp.get_value_type of %3413 : !pdl.type
    pdl_interp.are_equal %3415, %3416 : !pdl.type -> ^bb6376, ^bb1
  ^bb6376:  // pred: ^bb6375
    %3417 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3415, %3417 : !pdl.type -> ^bb6377, ^bb1
  ^bb6377:  // pred: ^bb6376
    %3418 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3418 : !pdl.value -> ^bb6378, ^bb1
  ^bb6378:  // pred: ^bb6377
    %3419 = pdl_interp.get_value_type of %3418 : !pdl.type
    pdl_interp.are_equal %3415, %3419 : !pdl.type -> ^bb6379, ^bb1
  ^bb6379:  // pred: ^bb6378
    pdl_interp.record_match @rewriters::@sinh_diff(%3414, %3418, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sinh", "math.cosh", "arith.mulf", "math.cosh", "math.sinh", "arith.mulf", "arith.subf"]), loc([%arg0, %2]), root("math.sinh") -> ^bb1
  ^bb6380:  // pred: ^bb6357
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6381, ^bb1
  ^bb6381:  // pred: ^bb6380
    pdl_interp.check_result_count of %2 is 1 -> ^bb6382, ^bb1
  ^bb6382:  // pred: ^bb6381
    %3420 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3420 : !pdl.value -> ^bb6383, ^bb1
  ^bb6383:  // pred: ^bb6382
    pdl_interp.are_equal %3420, %1 : !pdl.value -> ^bb6384, ^bb1
  ^bb6384:  // pred: ^bb6383
    %3421 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3421 : !pdl.value -> ^bb6385, ^bb1
  ^bb6385:  // pred: ^bb6384
    %3422 = pdl_interp.get_defining_op of %3421 : !pdl.value
    pdl_interp.is_not_null %3422 : !pdl.operation -> ^bb6386, ^bb1
  ^bb6386:  // pred: ^bb6385
    %3423 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3423 : !pdl.value -> ^bb6387, ^bb1
  ^bb6387:  // pred: ^bb6386
    pdl_interp.check_operation_name of %3422 is "arith.constant" -> ^bb6388, ^bb1
  ^bb6388:  // pred: ^bb6387
    pdl_interp.check_operand_count of %3422 is 0 -> ^bb6389, ^bb1
  ^bb6389:  // pred: ^bb6388
    pdl_interp.check_result_count of %3422 is 1 -> ^bb6390, ^bb1
  ^bb6390:  // pred: ^bb6389
    %3424 = pdl_interp.get_result 0 of %3422
    pdl_interp.is_not_null %3424 : !pdl.value -> ^bb6391, ^bb1
  ^bb6391:  // pred: ^bb6390
    pdl_interp.are_equal %3424, %3421 : !pdl.value -> ^bb6392, ^bb1
  ^bb6392:  // pred: ^bb6391
    %3425 = pdl_interp.get_attribute "value" of %3422
    pdl_interp.is_not_null %3425 : !pdl.attribute -> ^bb6393, ^bb1
  ^bb6393:  // pred: ^bb6392
    pdl_interp.check_attribute %3425 is 2.000000e+00 : f32 -> ^bb6394, ^bb1
  ^bb6394:  // pred: ^bb6393
    %3426 = pdl_interp.get_value_type of %3424 : !pdl.type
    pdl_interp.check_type %3426 is f32 -> ^bb6395, ^bb1
  ^bb6395:  // pred: ^bb6394
    %3427 = pdl_interp.get_value_type of %3420 : !pdl.type
    pdl_interp.are_equal %3426, %3427 : !pdl.type -> ^bb6396, ^bb1
  ^bb6396:  // pred: ^bb6395
    %3428 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3426, %3428 : !pdl.type -> ^bb6397, ^bb1
  ^bb6397:  // pred: ^bb6396
    %3429 = pdl_interp.get_value_type of %3423 : !pdl.type
    pdl_interp.are_equal %3426, %3429 : !pdl.type -> ^bb6398, ^bb1
  ^bb6398:  // pred: ^bb6397
    pdl_interp.record_match @rewriters::@sinh_2(%3423, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sinh", "math.cosh", "arith.mulf", "arith.mulf"]), loc([%arg0, %2, %3422]), root("math.sinh") -> ^bb1
  ^bb6399:  // pred: ^bb6357
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6400, ^bb1
  ^bb6400:  // pred: ^bb6399
    pdl_interp.check_result_count of %2 is 1 -> ^bb6401, ^bb1
  ^bb6401:  // pred: ^bb6400
    %3430 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3430 : !pdl.value -> ^bb6402, ^bb1
  ^bb6402:  // pred: ^bb6401
    pdl_interp.are_equal %3430, %1 : !pdl.value -> ^bb6403, ^bb1
  ^bb6403:  // pred: ^bb6402
    %3431 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3431 : !pdl.value -> ^bb6404, ^bb1
  ^bb6404:  // pred: ^bb6403
    %3432 = pdl_interp.get_value_type of %3431 : !pdl.type
    pdl_interp.check_type %3432 is f32 -> ^bb6405, ^bb1
  ^bb6405:  // pred: ^bb6404
    %3433 = pdl_interp.get_value_type of %3430 : !pdl.type
    pdl_interp.are_equal %3432, %3433 : !pdl.type -> ^bb6406, ^bb1
  ^bb6406:  // pred: ^bb6405
    %3434 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3432, %3434 : !pdl.type -> ^bb6407, ^bb1
  ^bb6407:  // pred: ^bb6406
    %3435 = pdl_interp.get_operand 1 of %2
    %3436 = pdl_interp.get_defining_op of %3435 : !pdl.value
    pdl_interp.is_not_null %3436 : !pdl.operation -> ^bb6408, ^bb1
  ^bb6408:  // pred: ^bb6407
    pdl_interp.is_not_null %3435 : !pdl.value -> ^bb6409, ^bb1
  ^bb6409:  // pred: ^bb6408
    pdl_interp.check_operation_name of %3436 is "arith.constant" -> ^bb6410, ^bb1
  ^bb6410:  // pred: ^bb6409
    pdl_interp.check_operand_count of %3436 is 0 -> ^bb6411, ^bb1
  ^bb6411:  // pred: ^bb6410
    pdl_interp.check_result_count of %3436 is 1 -> ^bb6412, ^bb1
  ^bb6412:  // pred: ^bb6411
    %3437 = pdl_interp.get_result 0 of %3436
    pdl_interp.is_not_null %3437 : !pdl.value -> ^bb6413, ^bb1
  ^bb6413:  // pred: ^bb6412
    pdl_interp.are_equal %3437, %3435 : !pdl.value -> ^bb6414, ^bb1
  ^bb6414:  // pred: ^bb6413
    %3438 = pdl_interp.get_attribute "value" of %3436
    pdl_interp.is_not_null %3438 : !pdl.attribute -> ^bb6415, ^bb1
  ^bb6415:  // pred: ^bb6414
    pdl_interp.check_attribute %3438 is 2.000000e+00 : f32 -> ^bb6416, ^bb1
  ^bb6416:  // pred: ^bb6415
    %3439 = pdl_interp.get_value_type of %3437 : !pdl.type
    pdl_interp.are_equal %3439, %3432 : !pdl.type -> ^bb6417, ^bb1
  ^bb6417:  // pred: ^bb6416
    pdl_interp.record_match @rewriters::@sinh_1div2(%3431, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sinh", "arith.constant", "math.cosh", "arith.constant", "arith.addf", "arith.mulf", "math.sqrt", "arith.divf"]), loc([%arg0, %2, %3436]), root("math.sinh") -> ^bb1
  ^bb6418:  // pred: ^bb6357
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6419, ^bb1
  ^bb6419:  // pred: ^bb6418
    pdl_interp.check_result_count of %2 is 1 -> ^bb6420, ^bb1
  ^bb6420:  // pred: ^bb6419
    %3440 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3440 : !pdl.value -> ^bb6421, ^bb1
  ^bb6421:  // pred: ^bb6420
    pdl_interp.are_equal %3440, %1 : !pdl.value -> ^bb6422, ^bb1
  ^bb6422:  // pred: ^bb6421
    %3441 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3441 : !pdl.value -> ^bb6423, ^bb1
  ^bb6423:  // pred: ^bb6422
    %3442 = pdl_interp.get_value_type of %3441 : !pdl.type
    pdl_interp.check_type %3442 is f32 -> ^bb6424, ^bb1
  ^bb6424:  // pred: ^bb6423
    %3443 = pdl_interp.get_value_type of %3440 : !pdl.type
    pdl_interp.are_equal %3442, %3443 : !pdl.type -> ^bb6425, ^bb1
  ^bb6425:  // pred: ^bb6424
    %3444 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3442, %3444 : !pdl.type -> ^bb6426, ^bb1
  ^bb6426:  // pred: ^bb6425
    pdl_interp.record_match @rewriters::@sinh_neg(%3441, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sinh", "arith.negf"]), loc([%arg0, %2]), root("math.sinh") -> ^bb1
  ^bb6427:  // pred: ^bb6357
    pdl_interp.check_operand_count of %2 is 0 -> ^bb6428, ^bb1
  ^bb6428:  // pred: ^bb6427
    pdl_interp.check_result_count of %2 is 1 -> ^bb6429, ^bb1
  ^bb6429:  // pred: ^bb6428
    %3445 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3445 : !pdl.value -> ^bb6430, ^bb1
  ^bb6430:  // pred: ^bb6429
    pdl_interp.are_equal %3445, %1 : !pdl.value -> ^bb6431, ^bb1
  ^bb6431:  // pred: ^bb6430
    %3446 = pdl_interp.get_attribute "value" of %2
    pdl_interp.is_not_null %3446 : !pdl.attribute -> ^bb6432, ^bb1
  ^bb6432:  // pred: ^bb6431
    pdl_interp.check_attribute %3446 is 0.000000e+00 : f32 -> ^bb6433, ^bb1
  ^bb6433:  // pred: ^bb6432
    %3447 = pdl_interp.get_value_type of %3445 : !pdl.type
    pdl_interp.check_type %3447 is f32 -> ^bb6434, ^bb1
  ^bb6434:  // pred: ^bb6433
    %3448 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3447, %3448 : !pdl.type -> ^bb6435, ^bb1
  ^bb6435:  // pred: ^bb6434
    pdl_interp.record_match @rewriters::@sinh_0(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %2]), root("math.sinh") -> ^bb1
  ^bb6436:  // pred: ^bb6357
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6437, ^bb1
  ^bb6437:  // pred: ^bb6436
    pdl_interp.check_result_count of %2 is 1 -> ^bb6438, ^bb1
  ^bb6438:  // pred: ^bb6437
    %3449 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3449 : !pdl.value -> ^bb6439, ^bb1
  ^bb6439:  // pred: ^bb6438
    pdl_interp.are_equal %3449, %1 : !pdl.value -> ^bb6440, ^bb1
  ^bb6440:  // pred: ^bb6439
    %3450 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3450 : !pdl.value -> ^bb6441, ^bb1
  ^bb6441:  // pred: ^bb6440
    %3451 = pdl_interp.get_value_type of %3450 : !pdl.type
    pdl_interp.check_type %3451 is f32 -> ^bb6442, ^bb1
  ^bb6442:  // pred: ^bb6441
    %3452 = pdl_interp.get_value_type of %3449 : !pdl.type
    pdl_interp.are_equal %3451, %3452 : !pdl.type -> ^bb6443, ^bb1
  ^bb6443:  // pred: ^bb6442
    %3453 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3451, %3453 : !pdl.type -> ^bb6444, ^bb1
  ^bb6444:  // pred: ^bb6443
    pdl_interp.record_match @rewriters::@sinh_asinh(%3450, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("math.sinh") -> ^bb1
  ^bb6445:  // pred: ^bb6357
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6446, ^bb1
  ^bb6446:  // pred: ^bb6445
    pdl_interp.check_result_count of %2 is 1 -> ^bb6447, ^bb1
  ^bb6447:  // pred: ^bb6446
    %3454 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3454 : !pdl.value -> ^bb6448, ^bb1
  ^bb6448:  // pred: ^bb6447
    pdl_interp.are_equal %3454, %1 : !pdl.value -> ^bb6449, ^bb1
  ^bb6449:  // pred: ^bb6448
    %3455 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3455 : !pdl.value -> ^bb6450, ^bb1
  ^bb6450:  // pred: ^bb6449
    %3456 = pdl_interp.get_value_type of %3455 : !pdl.type
    pdl_interp.check_type %3456 is f32 -> ^bb6451, ^bb1
  ^bb6451:  // pred: ^bb6450
    %3457 = pdl_interp.get_value_type of %3454 : !pdl.type
    pdl_interp.are_equal %3456, %3457 : !pdl.type -> ^bb6452, ^bb1
  ^bb6452:  // pred: ^bb6451
    %3458 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3456, %3458 : !pdl.type -> ^bb6453, ^bb1
  ^bb6453:  // pred: ^bb6452
    pdl_interp.record_match @rewriters::@sinh_acosh(%3455, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.constant", "arith.subf", "math.sqrt"]), loc([%arg0, %2]), root("math.sinh") -> ^bb1
  ^bb6454:  // pred: ^bb6357
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6455, ^bb1
  ^bb6455:  // pred: ^bb6454
    pdl_interp.check_result_count of %2 is 1 -> ^bb6456, ^bb1
  ^bb6456:  // pred: ^bb6455
    %3459 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3459 : !pdl.value -> ^bb6457, ^bb1
  ^bb6457:  // pred: ^bb6456
    pdl_interp.are_equal %3459, %1 : !pdl.value -> ^bb6458, ^bb1
  ^bb6458:  // pred: ^bb6457
    %3460 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3460 : !pdl.value -> ^bb6459, ^bb1
  ^bb6459:  // pred: ^bb6458
    %3461 = pdl_interp.get_value_type of %3460 : !pdl.type
    pdl_interp.check_type %3461 is f32 -> ^bb6460, ^bb1
  ^bb6460:  // pred: ^bb6459
    %3462 = pdl_interp.get_value_type of %3459 : !pdl.type
    pdl_interp.are_equal %3461, %3462 : !pdl.type -> ^bb6461, ^bb1
  ^bb6461:  // pred: ^bb6460
    %3463 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3461, %3463 : !pdl.type -> ^bb6462, ^bb1
  ^bb6462:  // pred: ^bb6461
    pdl_interp.record_match @rewriters::@sinh_atanh(%3460, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "arith.subf", "math.sqrt", "arith.divf"]), loc([%arg0, %2]), root("math.sinh") -> ^bb1
  ^bb6463:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb6464, ^bb1
  ^bb6464:  // pred: ^bb6463
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6465, ^bb1
  ^bb6465:  // pred: ^bb6464
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6466, ^bb1
  ^bb6466:  // pred: ^bb6465
    pdl_interp.switch_operation_name of %2 to ["arith.mulf", "arith.divf", "arith.addf", "math.asinh", "math.acosh", "math.atanh"](^bb6467, ^bb6486, ^bb6506, ^bb6517, ^bb6526, ^bb6535) -> ^bb1
  ^bb6467:  // pred: ^bb6466
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6468, ^bb1
  ^bb6468:  // pred: ^bb6467
    pdl_interp.check_result_count of %2 is 1 -> ^bb6469, ^bb1
  ^bb6469:  // pred: ^bb6468
    %3464 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3464 : !pdl.value -> ^bb6470, ^bb1
  ^bb6470:  // pred: ^bb6469
    pdl_interp.are_equal %3464, %1 : !pdl.value -> ^bb6471, ^bb1
  ^bb6471:  // pred: ^bb6470
    %3465 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3465 : !pdl.value -> ^bb6472, ^bb1
  ^bb6472:  // pred: ^bb6471
    %3466 = pdl_interp.get_defining_op of %3465 : !pdl.value
    pdl_interp.is_not_null %3466 : !pdl.operation -> ^bb6473, ^bb1
  ^bb6473:  // pred: ^bb6472
    %3467 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3467 : !pdl.value -> ^bb6474, ^bb1
  ^bb6474:  // pred: ^bb6473
    pdl_interp.check_operation_name of %3466 is "arith.constant" -> ^bb6475, ^bb1
  ^bb6475:  // pred: ^bb6474
    pdl_interp.check_operand_count of %3466 is 0 -> ^bb6476, ^bb1
  ^bb6476:  // pred: ^bb6475
    pdl_interp.check_result_count of %3466 is 1 -> ^bb6477, ^bb1
  ^bb6477:  // pred: ^bb6476
    %3468 = pdl_interp.get_result 0 of %3466
    pdl_interp.is_not_null %3468 : !pdl.value -> ^bb6478, ^bb1
  ^bb6478:  // pred: ^bb6477
    pdl_interp.are_equal %3468, %3465 : !pdl.value -> ^bb6479, ^bb1
  ^bb6479:  // pred: ^bb6478
    %3469 = pdl_interp.get_attribute "value" of %3466
    pdl_interp.is_not_null %3469 : !pdl.attribute -> ^bb6480, ^bb1
  ^bb6480:  // pred: ^bb6479
    pdl_interp.check_attribute %3469 is 2.000000e+00 : f32 -> ^bb6481, ^bb1
  ^bb6481:  // pred: ^bb6480
    %3470 = pdl_interp.get_value_type of %3468 : !pdl.type
    pdl_interp.check_type %3470 is f32 -> ^bb6482, ^bb1
  ^bb6482:  // pred: ^bb6481
    %3471 = pdl_interp.get_value_type of %3464 : !pdl.type
    pdl_interp.are_equal %3470, %3471 : !pdl.type -> ^bb6483, ^bb1
  ^bb6483:  // pred: ^bb6482
    %3472 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3470, %3472 : !pdl.type -> ^bb6484, ^bb1
  ^bb6484:  // pred: ^bb6483
    %3473 = pdl_interp.get_value_type of %3467 : !pdl.type
    pdl_interp.are_equal %3470, %3473 : !pdl.type -> ^bb6485, ^bb1
  ^bb6485:  // pred: ^bb6484
    pdl_interp.record_match @rewriters::@tanh_2(%3467, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.tanh", "arith.mulf", "arith.constant", "math.tanh", "math.tanh", "arith.mulf", "arith.addf", "arith.divf"]), loc([%arg0, %2, %3466]), root("math.tanh") -> ^bb1
  ^bb6486:  // pred: ^bb6466
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6487, ^bb1
  ^bb6487:  // pred: ^bb6486
    pdl_interp.check_result_count of %2 is 1 -> ^bb6488, ^bb1
  ^bb6488:  // pred: ^bb6487
    %3474 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3474 : !pdl.value -> ^bb6489, ^bb1
  ^bb6489:  // pred: ^bb6488
    pdl_interp.are_equal %3474, %1 : !pdl.value -> ^bb6490, ^bb1
  ^bb6490:  // pred: ^bb6489
    %3475 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3475 : !pdl.value -> ^bb6491, ^bb1
  ^bb6491:  // pred: ^bb6490
    %3476 = pdl_interp.get_value_type of %3475 : !pdl.type
    pdl_interp.check_type %3476 is f32 -> ^bb6492, ^bb1
  ^bb6492:  // pred: ^bb6491
    %3477 = pdl_interp.get_value_type of %3474 : !pdl.type
    pdl_interp.are_equal %3476, %3477 : !pdl.type -> ^bb6493, ^bb1
  ^bb6493:  // pred: ^bb6492
    %3478 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3476, %3478 : !pdl.type -> ^bb6494, ^bb1
  ^bb6494:  // pred: ^bb6493
    %3479 = pdl_interp.get_operand 1 of %2
    %3480 = pdl_interp.get_defining_op of %3479 : !pdl.value
    pdl_interp.is_not_null %3480 : !pdl.operation -> ^bb6495, ^bb1
  ^bb6495:  // pred: ^bb6494
    pdl_interp.is_not_null %3479 : !pdl.value -> ^bb6496, ^bb1
  ^bb6496:  // pred: ^bb6495
    pdl_interp.check_operation_name of %3480 is "arith.constant" -> ^bb6497, ^bb1
  ^bb6497:  // pred: ^bb6496
    pdl_interp.check_operand_count of %3480 is 0 -> ^bb6498, ^bb1
  ^bb6498:  // pred: ^bb6497
    pdl_interp.check_result_count of %3480 is 1 -> ^bb6499, ^bb1
  ^bb6499:  // pred: ^bb6498
    %3481 = pdl_interp.get_result 0 of %3480
    pdl_interp.is_not_null %3481 : !pdl.value -> ^bb6500, ^bb1
  ^bb6500:  // pred: ^bb6499
    pdl_interp.are_equal %3481, %3479 : !pdl.value -> ^bb6501, ^bb1
  ^bb6501:  // pred: ^bb6500
    %3482 = pdl_interp.get_attribute "value" of %3480
    pdl_interp.is_not_null %3482 : !pdl.attribute -> ^bb6502, ^bb1
  ^bb6502:  // pred: ^bb6501
    pdl_interp.check_attribute %3482 is 2.000000e+00 : f32 -> ^bb6503, ^bb1
  ^bb6503:  // pred: ^bb6502
    %3483 = pdl_interp.get_value_type of %3481 : !pdl.type
    pdl_interp.are_equal %3483, %3476 : !pdl.type -> ^bb6504, ^bb1
  ^bb6504:  // pred: ^bb6503
    pdl_interp.record_match @rewriters::@tanh_1div2mul(%3475, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh", "arith.constant", "arith.subf", "math.sinh", "arith.divf"]), loc([%arg0, %2, %3480]), root("math.tanh") -> ^bb6505
  ^bb6505:  // pred: ^bb6504
    pdl_interp.record_match @rewriters::@tanh_1div2(%3475, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sinh", "math.cosh", "arith.constant", "arith.addf", "arith.divf"]), loc([%arg0, %2, %3480]), root("math.tanh") -> ^bb1
  ^bb6506:  // pred: ^bb6466
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6507, ^bb1
  ^bb6507:  // pred: ^bb6506
    pdl_interp.check_result_count of %2 is 1 -> ^bb6508, ^bb1
  ^bb6508:  // pred: ^bb6507
    %3484 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3484 : !pdl.value -> ^bb6509, ^bb1
  ^bb6509:  // pred: ^bb6508
    pdl_interp.are_equal %3484, %1 : !pdl.value -> ^bb6510, ^bb1
  ^bb6510:  // pred: ^bb6509
    %3485 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3485 : !pdl.value -> ^bb6511, ^bb1
  ^bb6511:  // pred: ^bb6510
    %3486 = pdl_interp.get_value_type of %3485 : !pdl.type
    pdl_interp.check_type %3486 is f32 -> ^bb6512, ^bb1
  ^bb6512:  // pred: ^bb6511
    %3487 = pdl_interp.get_value_type of %3484 : !pdl.type
    pdl_interp.are_equal %3486, %3487 : !pdl.type -> ^bb6513, ^bb1
  ^bb6513:  // pred: ^bb6512
    %3488 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3486, %3488 : !pdl.type -> ^bb6514, ^bb1
  ^bb6514:  // pred: ^bb6513
    %3489 = pdl_interp.get_operand 1 of %2
    pdl_interp.is_not_null %3489 : !pdl.value -> ^bb6515, ^bb1
  ^bb6515:  // pred: ^bb6514
    %3490 = pdl_interp.get_value_type of %3489 : !pdl.type
    pdl_interp.are_equal %3486, %3490 : !pdl.type -> ^bb6516, ^bb1
  ^bb6516:  // pred: ^bb6515
    pdl_interp.record_match @rewriters::@tanh_sum(%3485, %3489, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.tanh", "math.tanh", "arith.addf", "arith.constant", "math.tanh", "math.tanh", "arith.mulf", "arith.addf", "arith.divf"]), loc([%arg0, %2]), root("math.tanh") -> ^bb1
  ^bb6517:  // pred: ^bb6466
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6518, ^bb1
  ^bb6518:  // pred: ^bb6517
    pdl_interp.check_result_count of %2 is 1 -> ^bb6519, ^bb1
  ^bb6519:  // pred: ^bb6518
    %3491 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3491 : !pdl.value -> ^bb6520, ^bb1
  ^bb6520:  // pred: ^bb6519
    pdl_interp.are_equal %3491, %1 : !pdl.value -> ^bb6521, ^bb1
  ^bb6521:  // pred: ^bb6520
    %3492 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3492 : !pdl.value -> ^bb6522, ^bb1
  ^bb6522:  // pred: ^bb6521
    %3493 = pdl_interp.get_value_type of %3492 : !pdl.type
    pdl_interp.check_type %3493 is f32 -> ^bb6523, ^bb1
  ^bb6523:  // pred: ^bb6522
    %3494 = pdl_interp.get_value_type of %3491 : !pdl.type
    pdl_interp.are_equal %3493, %3494 : !pdl.type -> ^bb6524, ^bb1
  ^bb6524:  // pred: ^bb6523
    %3495 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3493, %3495 : !pdl.type -> ^bb6525, ^bb1
  ^bb6525:  // pred: ^bb6524
    pdl_interp.record_match @rewriters::@tanh_asinh(%3492, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "arith.addf", "math.sqrt", "arith.divf"]), loc([%arg0, %2]), root("math.tanh") -> ^bb1
  ^bb6526:  // pred: ^bb6466
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6527, ^bb1
  ^bb6527:  // pred: ^bb6526
    pdl_interp.check_result_count of %2 is 1 -> ^bb6528, ^bb1
  ^bb6528:  // pred: ^bb6527
    %3496 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3496 : !pdl.value -> ^bb6529, ^bb1
  ^bb6529:  // pred: ^bb6528
    pdl_interp.are_equal %3496, %1 : !pdl.value -> ^bb6530, ^bb1
  ^bb6530:  // pred: ^bb6529
    %3497 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3497 : !pdl.value -> ^bb6531, ^bb1
  ^bb6531:  // pred: ^bb6530
    %3498 = pdl_interp.get_value_type of %3497 : !pdl.type
    pdl_interp.check_type %3498 is f32 -> ^bb6532, ^bb1
  ^bb6532:  // pred: ^bb6531
    %3499 = pdl_interp.get_value_type of %3496 : !pdl.type
    pdl_interp.are_equal %3498, %3499 : !pdl.type -> ^bb6533, ^bb1
  ^bb6533:  // pred: ^bb6532
    %3500 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3498, %3500 : !pdl.type -> ^bb6534, ^bb1
  ^bb6534:  // pred: ^bb6533
    pdl_interp.record_match @rewriters::@tanh_acosh(%3497, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.constant", "arith.subf", "math.sqrt", "arith.divf"]), loc([%arg0, %2]), root("math.tanh") -> ^bb1
  ^bb6535:  // pred: ^bb6466
    pdl_interp.check_operand_count of %2 is 1 -> ^bb6536, ^bb1
  ^bb6536:  // pred: ^bb6535
    pdl_interp.check_result_count of %2 is 1 -> ^bb6537, ^bb1
  ^bb6537:  // pred: ^bb6536
    %3501 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3501 : !pdl.value -> ^bb6538, ^bb1
  ^bb6538:  // pred: ^bb6537
    pdl_interp.are_equal %3501, %1 : !pdl.value -> ^bb6539, ^bb1
  ^bb6539:  // pred: ^bb6538
    %3502 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3502 : !pdl.value -> ^bb6540, ^bb1
  ^bb6540:  // pred: ^bb6539
    %3503 = pdl_interp.get_value_type of %3502 : !pdl.type
    pdl_interp.check_type %3503 is f32 -> ^bb6541, ^bb1
  ^bb6541:  // pred: ^bb6540
    %3504 = pdl_interp.get_value_type of %3501 : !pdl.type
    pdl_interp.are_equal %3503, %3504 : !pdl.type -> ^bb6542, ^bb1
  ^bb6542:  // pred: ^bb6541
    %3505 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3503, %3505 : !pdl.type -> ^bb6543, ^bb1
  ^bb6543:  // pred: ^bb6542
    pdl_interp.record_match @rewriters::@tanh_atanh(%3502, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %2]), root("math.tanh") -> ^bb1
  ^bb6544:  // pred: ^bb4
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb6545, ^bb1
  ^bb6545:  // pred: ^bb6544
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6546, ^bb1
  ^bb6546:  // pred: ^bb6545
    pdl_interp.is_not_null %1 : !pdl.value -> ^bb6547, ^bb1
  ^bb6547:  // pred: ^bb6546
    pdl_interp.switch_operation_name of %2 to ["arith.addf", "arith.subf"](^bb6548, ^bb6594) -> ^bb1
  ^bb6548:  // pred: ^bb6547
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6549, ^bb1
  ^bb6549:  // pred: ^bb6548
    pdl_interp.check_result_count of %2 is 1 -> ^bb6550, ^bb1
  ^bb6550:  // pred: ^bb6549
    %3506 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3506 : !pdl.value -> ^bb6551, ^bb1
  ^bb6551:  // pred: ^bb6550
    pdl_interp.are_equal %3506, %1 : !pdl.value -> ^bb6552, ^bb1
  ^bb6552:  // pred: ^bb6551
    %3507 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3507 : !pdl.value -> ^bb6553, ^bb1
  ^bb6553:  // pred: ^bb6552
    %3508 = pdl_interp.get_operand 1 of %2
    %3509 = pdl_interp.get_defining_op of %3508 : !pdl.value
    pdl_interp.is_not_null %3509 : !pdl.operation -> ^bb6554, ^bb1
  ^bb6554:  // pred: ^bb6553
    %3510 = pdl_interp.get_defining_op of %3507 : !pdl.value
    pdl_interp.is_not_null %3510 : !pdl.operation -> ^bb6555, ^bb1
  ^bb6555:  // pred: ^bb6554
    pdl_interp.is_not_null %3508 : !pdl.value -> ^bb6556, ^bb1
  ^bb6556:  // pred: ^bb6555
    pdl_interp.check_operation_name of %3509 is "arith.constant" -> ^bb6557, ^bb1
  ^bb6557:  // pred: ^bb6556
    pdl_interp.check_operand_count of %3509 is 0 -> ^bb6558, ^bb1
  ^bb6558:  // pred: ^bb6557
    pdl_interp.check_result_count of %3509 is 1 -> ^bb6559, ^bb1
  ^bb6559:  // pred: ^bb6558
    %3511 = pdl_interp.get_result 0 of %3509
    pdl_interp.is_not_null %3511 : !pdl.value -> ^bb6560, ^bb1
  ^bb6560:  // pred: ^bb6559
    pdl_interp.are_equal %3511, %3508 : !pdl.value -> ^bb6561, ^bb1
  ^bb6561:  // pred: ^bb6560
    pdl_interp.check_operation_name of %3510 is "arith.mulf" -> ^bb6562, ^bb1
  ^bb6562:  // pred: ^bb6561
    pdl_interp.check_operand_count of %3510 is 2 -> ^bb6563, ^bb1
  ^bb6563:  // pred: ^bb6562
    pdl_interp.check_result_count of %3510 is 1 -> ^bb6564, ^bb1
  ^bb6564:  // pred: ^bb6563
    %3512 = pdl_interp.get_result 0 of %3510
    pdl_interp.is_not_null %3512 : !pdl.value -> ^bb6565, ^bb1
  ^bb6565:  // pred: ^bb6564
    pdl_interp.are_equal %3512, %3507 : !pdl.value -> ^bb6566, ^bb1
  ^bb6566:  // pred: ^bb6565
    %3513 = pdl_interp.get_operand 0 of %3510
    pdl_interp.is_not_null %3513 : !pdl.value -> ^bb6567, ^bb1
  ^bb6567:  // pred: ^bb6566
    %3514 = pdl_interp.get_attribute "value" of %3509
    pdl_interp.is_not_null %3514 : !pdl.attribute -> ^bb6568, ^bb1
  ^bb6568:  // pred: ^bb6567
    pdl_interp.check_attribute %3514 is 1.000000e+00 : f32 -> ^bb6569, ^bb1
  ^bb6569:  // pred: ^bb6568
    %3515 = pdl_interp.get_defining_op of %3513 : !pdl.value
    pdl_interp.is_not_null %3515 : !pdl.operation -> ^bb6570, ^bb1
  ^bb6570:  // pred: ^bb6569
    %3516 = pdl_interp.get_operand 1 of %3510
    %3517 = pdl_interp.get_defining_op of %3516 : !pdl.value
    pdl_interp.is_not_null %3517 : !pdl.operation -> ^bb6571, ^bb1
  ^bb6571:  // pred: ^bb6570
    pdl_interp.is_not_null %3516 : !pdl.value -> ^bb6572, ^bb1
  ^bb6572:  // pred: ^bb6571
    pdl_interp.check_operation_name of %3515 is "arith.constant" -> ^bb6573, ^bb1
  ^bb6573:  // pred: ^bb6572
    pdl_interp.check_operand_count of %3515 is 0 -> ^bb6574, ^bb1
  ^bb6574:  // pred: ^bb6573
    pdl_interp.check_result_count of %3515 is 1 -> ^bb6575, ^bb1
  ^bb6575:  // pred: ^bb6574
    %3518 = pdl_interp.get_result 0 of %3515
    pdl_interp.is_not_null %3518 : !pdl.value -> ^bb6576, ^bb1
  ^bb6576:  // pred: ^bb6575
    pdl_interp.are_equal %3518, %3513 : !pdl.value -> ^bb6577, ^bb1
  ^bb6577:  // pred: ^bb6576
    pdl_interp.check_operation_name of %3517 is "arith.mulf" -> ^bb6578, ^bb1
  ^bb6578:  // pred: ^bb6577
    pdl_interp.check_operand_count of %3517 is 2 -> ^bb6579, ^bb1
  ^bb6579:  // pred: ^bb6578
    pdl_interp.check_result_count of %3517 is 1 -> ^bb6580, ^bb1
  ^bb6580:  // pred: ^bb6579
    %3519 = pdl_interp.get_result 0 of %3517
    pdl_interp.is_not_null %3519 : !pdl.value -> ^bb6581, ^bb1
  ^bb6581:  // pred: ^bb6580
    pdl_interp.are_equal %3519, %3516 : !pdl.value -> ^bb6582, ^bb1
  ^bb6582:  // pred: ^bb6581
    %3520 = pdl_interp.get_operand 0 of %3517
    pdl_interp.is_not_null %3520 : !pdl.value -> ^bb6583, ^bb1
  ^bb6583:  // pred: ^bb6582
    %3521 = pdl_interp.get_operand 1 of %3517
    pdl_interp.are_equal %3520, %3521 : !pdl.value -> ^bb6584, ^bb1
  ^bb6584:  // pred: ^bb6583
    %3522 = pdl_interp.get_attribute "value" of %3515
    pdl_interp.is_not_null %3522 : !pdl.attribute -> ^bb6585, ^bb1
  ^bb6585:  // pred: ^bb6584
    pdl_interp.check_attribute %3522 is 2.000000e+00 : f32 -> ^bb6586, ^bb1
  ^bb6586:  // pred: ^bb6585
    %3523 = pdl_interp.get_value_type of %3518 : !pdl.type
    pdl_interp.check_type %3523 is f32 -> ^bb6587, ^bb1
  ^bb6587:  // pred: ^bb6586
    %3524 = pdl_interp.get_value_type of %3520 : !pdl.type
    pdl_interp.are_equal %3523, %3524 : !pdl.type -> ^bb6588, ^bb1
  ^bb6588:  // pred: ^bb6587
    %3525 = pdl_interp.get_value_type of %3519 : !pdl.type
    pdl_interp.are_equal %3523, %3525 : !pdl.type -> ^bb6589, ^bb1
  ^bb6589:  // pred: ^bb6588
    %3526 = pdl_interp.get_value_type of %3512 : !pdl.type
    pdl_interp.are_equal %3523, %3526 : !pdl.type -> ^bb6590, ^bb1
  ^bb6590:  // pred: ^bb6589
    %3527 = pdl_interp.get_value_type of %3506 : !pdl.type
    pdl_interp.are_equal %3523, %3527 : !pdl.type -> ^bb6591, ^bb1
  ^bb6591:  // pred: ^bb6590
    %3528 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3523, %3528 : !pdl.type -> ^bb6592, ^bb1
  ^bb6592:  // pred: ^bb6591
    %3529 = pdl_interp.get_value_type of %3511 : !pdl.type
    pdl_interp.are_equal %3523, %3529 : !pdl.type -> ^bb6593, ^bb1
  ^bb6593:  // pred: ^bb6592
    pdl_interp.record_match @rewriters::@asinh_2(%3520, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.absf", "math.asinh", "arith.mulf"]), loc([%arg0, %2, %3509, %3510, %3515, %3517]), root("math.acosh") -> ^bb1
  ^bb6594:  // pred: ^bb6547
    pdl_interp.check_operand_count of %2 is 2 -> ^bb6595, ^bb1
  ^bb6595:  // pred: ^bb6594
    pdl_interp.check_result_count of %2 is 1 -> ^bb6596, ^bb1
  ^bb6596:  // pred: ^bb6595
    %3530 = pdl_interp.get_result 0 of %2
    pdl_interp.is_not_null %3530 : !pdl.value -> ^bb6597, ^bb1
  ^bb6597:  // pred: ^bb6596
    pdl_interp.are_equal %3530, %1 : !pdl.value -> ^bb6598, ^bb1
  ^bb6598:  // pred: ^bb6597
    %3531 = pdl_interp.get_operand 0 of %2
    pdl_interp.is_not_null %3531 : !pdl.value -> ^bb6599, ^bb1
  ^bb6599:  // pred: ^bb6598
    %3532 = pdl_interp.get_operand 1 of %2
    %3533 = pdl_interp.get_defining_op of %3532 : !pdl.value
    pdl_interp.is_not_null %3533 : !pdl.operation -> ^bb6600, ^bb1
  ^bb6600:  // pred: ^bb6599
    %3534 = pdl_interp.get_defining_op of %3531 : !pdl.value
    pdl_interp.is_not_null %3534 : !pdl.operation -> ^bb6601, ^bb1
  ^bb6601:  // pred: ^bb6600
    pdl_interp.is_not_null %3532 : !pdl.value -> ^bb6602, ^bb1
  ^bb6602:  // pred: ^bb6601
    pdl_interp.check_operation_name of %3533 is "arith.constant" -> ^bb6603, ^bb1
  ^bb6603:  // pred: ^bb6602
    pdl_interp.check_operand_count of %3533 is 0 -> ^bb6604, ^bb1
  ^bb6604:  // pred: ^bb6603
    pdl_interp.check_result_count of %3533 is 1 -> ^bb6605, ^bb1
  ^bb6605:  // pred: ^bb6604
    %3535 = pdl_interp.get_result 0 of %3533
    pdl_interp.is_not_null %3535 : !pdl.value -> ^bb6606, ^bb1
  ^bb6606:  // pred: ^bb6605
    pdl_interp.are_equal %3535, %3532 : !pdl.value -> ^bb6607, ^bb1
  ^bb6607:  // pred: ^bb6606
    pdl_interp.check_operation_name of %3534 is "arith.mulf" -> ^bb6608, ^bb1
  ^bb6608:  // pred: ^bb6607
    pdl_interp.check_operand_count of %3534 is 2 -> ^bb6609, ^bb1
  ^bb6609:  // pred: ^bb6608
    pdl_interp.check_result_count of %3534 is 1 -> ^bb6610, ^bb1
  ^bb6610:  // pred: ^bb6609
    %3536 = pdl_interp.get_result 0 of %3534
    pdl_interp.is_not_null %3536 : !pdl.value -> ^bb6611, ^bb1
  ^bb6611:  // pred: ^bb6610
    pdl_interp.are_equal %3536, %3531 : !pdl.value -> ^bb6612, ^bb1
  ^bb6612:  // pred: ^bb6611
    %3537 = pdl_interp.get_operand 0 of %3534
    pdl_interp.is_not_null %3537 : !pdl.value -> ^bb6613, ^bb1
  ^bb6613:  // pred: ^bb6612
    %3538 = pdl_interp.get_attribute "value" of %3533
    pdl_interp.is_not_null %3538 : !pdl.attribute -> ^bb6614, ^bb1
  ^bb6614:  // pred: ^bb6613
    pdl_interp.check_attribute %3538 is 1.000000e+00 : f32 -> ^bb6615, ^bb1
  ^bb6615:  // pred: ^bb6614
    %3539 = pdl_interp.get_defining_op of %3537 : !pdl.value
    pdl_interp.is_not_null %3539 : !pdl.operation -> ^bb6616, ^bb1
  ^bb6616:  // pred: ^bb6615
    %3540 = pdl_interp.get_operand 1 of %3534
    %3541 = pdl_interp.get_defining_op of %3540 : !pdl.value
    pdl_interp.is_not_null %3541 : !pdl.operation -> ^bb6617, ^bb1
  ^bb6617:  // pred: ^bb6616
    pdl_interp.is_not_null %3540 : !pdl.value -> ^bb6618, ^bb1
  ^bb6618:  // pred: ^bb6617
    pdl_interp.check_operation_name of %3539 is "arith.constant" -> ^bb6619, ^bb1
  ^bb6619:  // pred: ^bb6618
    pdl_interp.check_operand_count of %3539 is 0 -> ^bb6620, ^bb1
  ^bb6620:  // pred: ^bb6619
    pdl_interp.check_result_count of %3539 is 1 -> ^bb6621, ^bb1
  ^bb6621:  // pred: ^bb6620
    %3542 = pdl_interp.get_result 0 of %3539
    pdl_interp.is_not_null %3542 : !pdl.value -> ^bb6622, ^bb1
  ^bb6622:  // pred: ^bb6621
    pdl_interp.are_equal %3542, %3537 : !pdl.value -> ^bb6623, ^bb1
  ^bb6623:  // pred: ^bb6622
    pdl_interp.check_operation_name of %3541 is "arith.mulf" -> ^bb6624, ^bb1
  ^bb6624:  // pred: ^bb6623
    pdl_interp.check_operand_count of %3541 is 2 -> ^bb6625, ^bb1
  ^bb6625:  // pred: ^bb6624
    pdl_interp.check_result_count of %3541 is 1 -> ^bb6626, ^bb1
  ^bb6626:  // pred: ^bb6625
    %3543 = pdl_interp.get_result 0 of %3541
    pdl_interp.is_not_null %3543 : !pdl.value -> ^bb6627, ^bb1
  ^bb6627:  // pred: ^bb6626
    pdl_interp.are_equal %3543, %3540 : !pdl.value -> ^bb6628, ^bb1
  ^bb6628:  // pred: ^bb6627
    %3544 = pdl_interp.get_operand 0 of %3541
    pdl_interp.is_not_null %3544 : !pdl.value -> ^bb6629, ^bb1
  ^bb6629:  // pred: ^bb6628
    %3545 = pdl_interp.get_operand 1 of %3541
    pdl_interp.are_equal %3544, %3545 : !pdl.value -> ^bb6630, ^bb1
  ^bb6630:  // pred: ^bb6629
    %3546 = pdl_interp.get_attribute "value" of %3539
    pdl_interp.is_not_null %3546 : !pdl.attribute -> ^bb6631, ^bb1
  ^bb6631:  // pred: ^bb6630
    pdl_interp.check_attribute %3546 is 2.000000e+00 : f32 -> ^bb6632, ^bb1
  ^bb6632:  // pred: ^bb6631
    %3547 = pdl_interp.get_value_type of %3542 : !pdl.type
    pdl_interp.check_type %3547 is f32 -> ^bb6633, ^bb1
  ^bb6633:  // pred: ^bb6632
    %3548 = pdl_interp.get_value_type of %3544 : !pdl.type
    pdl_interp.are_equal %3547, %3548 : !pdl.type -> ^bb6634, ^bb1
  ^bb6634:  // pred: ^bb6633
    %3549 = pdl_interp.get_value_type of %3543 : !pdl.type
    pdl_interp.are_equal %3547, %3549 : !pdl.type -> ^bb6635, ^bb1
  ^bb6635:  // pred: ^bb6634
    %3550 = pdl_interp.get_value_type of %3536 : !pdl.type
    pdl_interp.are_equal %3547, %3550 : !pdl.type -> ^bb6636, ^bb1
  ^bb6636:  // pred: ^bb6635
    %3551 = pdl_interp.get_value_type of %3530 : !pdl.type
    pdl_interp.are_equal %3547, %3551 : !pdl.type -> ^bb6637, ^bb1
  ^bb6637:  // pred: ^bb6636
    %3552 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3547, %3552 : !pdl.type -> ^bb6638, ^bb1
  ^bb6638:  // pred: ^bb6637
    %3553 = pdl_interp.get_value_type of %3535 : !pdl.type
    pdl_interp.are_equal %3547, %3553 : !pdl.type -> ^bb6639, ^bb1
  ^bb6639:  // pred: ^bb6638
    pdl_interp.record_match @rewriters::@acosh_2(%3544, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.acosh", "arith.mulf"]), loc([%arg0, %2, %3533, %3534, %3539, %3541]), root("math.acosh") -> ^bb1
  ^bb6640:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb6641, ^bb3
  ^bb6641:  // pred: ^bb6640
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6642, ^bb3
  ^bb6642:  // pred: ^bb6641
    %3554 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3554 : !pdl.value -> ^bb6643, ^bb3
  ^bb6643:  // pred: ^bb6642
    %3555 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %3555 : !pdl.value -> ^bb6738, ^bb6644
  ^bb6644:  // 5 preds: ^bb6643, ^bb6738, ^bb6739, ^bb6740, ^bb6745
    %3556 = pdl_interp.get_operand 1 of %arg0
    %3557 = pdl_interp.get_defining_op of %3556 : !pdl.value
    pdl_interp.is_not_null %3557 : !pdl.operation -> ^bb6649, ^bb6645
  ^bb6645:  // 79 preds: ^bb6644, ^bb6649, ^bb6650, ^bb6651, ^bb6652, ^bb6653, ^bb6654, ^bb6655, ^bb6656, ^bb6657, ^bb6658, ^bb6659, ^bb6660, ^bb6661, ^bb6662, ^bb6663, ^bb6664, ^bb6665, ^bb6666, ^bb6667, ^bb6668, ^bb6669, ^bb6670, ^bb6671, ^bb6672, ^bb6673, ^bb6674, ^bb6675, ^bb6676, ^bb6677, ^bb6678, ^bb6679, ^bb6680, ^bb6681, ^bb6682, ^bb6683, ^bb6684, ^bb6685, ^bb6686, ^bb6687, ^bb6688, ^bb6689, ^bb6691, ^bb6692, ^bb6693, ^bb6694, ^bb6695, ^bb6696, ^bb6697, ^bb6698, ^bb6699, ^bb6700, ^bb6701, ^bb6702, ^bb6703, ^bb6704, ^bb6705, ^bb6716, ^bb6717, ^bb6718, ^bb6719, ^bb6720, ^bb6721, ^bb6722, ^bb6723, ^bb6724, ^bb6725, ^bb6726, ^bb6727, ^bb6728, ^bb6729, ^bb6730, ^bb6731, ^bb6732, ^bb6733, ^bb6734, ^bb6735, ^bb6736, ^bb6737
    %3558 = pdl_interp.get_value_type of %3554 : !pdl.type
    pdl_interp.check_type %3558 is f32 -> ^bb6646, ^bb3
  ^bb6646:  // pred: ^bb6645
    %3559 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3558, %3559 : !pdl.type -> ^bb6647, ^bb3
  ^bb6647:  // pred: ^bb6646
    %3560 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %3554, %3560 : !pdl.value -> ^bb6648, ^bb3
  ^bb6648:  // pred: ^bb6647
    pdl_interp.record_match @rewriters::@count_2(%3554, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf"]), loc([%arg0]), root("arith.addf") -> ^bb3
  ^bb6649:  // pred: ^bb6644
    pdl_interp.is_not_null %3556 : !pdl.value -> ^bb6650, ^bb6645
  ^bb6650:  // pred: ^bb6649
    pdl_interp.switch_operation_name of %3557 to ["arith.addf", "arith.subf", "arith.constant", "arith.mulf", "arith.negf", "arith.divf"](^bb6651, ^bb6663, ^bb6675, ^bb6685, ^bb6716, ^bb6726) -> ^bb6645
  ^bb6651:  // pred: ^bb6650
    pdl_interp.check_operand_count of %3557 is 2 -> ^bb6652, ^bb6645
  ^bb6652:  // pred: ^bb6651
    pdl_interp.check_result_count of %3557 is 1 -> ^bb6653, ^bb6645
  ^bb6653:  // pred: ^bb6652
    %3561 = pdl_interp.get_result 0 of %3557
    pdl_interp.is_not_null %3561 : !pdl.value -> ^bb6654, ^bb6645
  ^bb6654:  // pred: ^bb6653
    pdl_interp.are_equal %3561, %3556 : !pdl.value -> ^bb6655, ^bb6645
  ^bb6655:  // pred: ^bb6654
    %3562 = pdl_interp.get_operand 0 of %3557
    pdl_interp.is_not_null %3562 : !pdl.value -> ^bb6656, ^bb6645
  ^bb6656:  // pred: ^bb6655
    %3563 = pdl_interp.get_value_type of %3554 : !pdl.type
    pdl_interp.check_type %3563 is f32 -> ^bb6657, ^bb6645
  ^bb6657:  // pred: ^bb6656
    %3564 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3563, %3564 : !pdl.type -> ^bb6658, ^bb6645
  ^bb6658:  // pred: ^bb6657
    %3565 = pdl_interp.get_operand 1 of %3557
    pdl_interp.is_not_null %3565 : !pdl.value -> ^bb6659, ^bb6645
  ^bb6659:  // pred: ^bb6658
    %3566 = pdl_interp.get_value_type of %3561 : !pdl.type
    pdl_interp.are_equal %3566, %3563 : !pdl.type -> ^bb6660, ^bb6645
  ^bb6660:  // pred: ^bb6659
    %3567 = pdl_interp.get_value_type of %3562 : !pdl.type
    pdl_interp.are_equal %3567, %3563 : !pdl.type -> ^bb6661, ^bb6645
  ^bb6661:  // pred: ^bb6660
    %3568 = pdl_interp.get_value_type of %3565 : !pdl.type
    pdl_interp.are_equal %3568, %3563 : !pdl.type -> ^bb6662, ^bb6645
  ^bb6662:  // pred: ^bb6661
    pdl_interp.record_match @rewriters::@associate_addradd(%3554, %3562, %3565, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.addf"]), loc([%arg0, %3557]), root("arith.addf") -> ^bb6645
  ^bb6663:  // pred: ^bb6650
    pdl_interp.check_operand_count of %3557 is 2 -> ^bb6664, ^bb6645
  ^bb6664:  // pred: ^bb6663
    pdl_interp.check_result_count of %3557 is 1 -> ^bb6665, ^bb6645
  ^bb6665:  // pred: ^bb6664
    %3569 = pdl_interp.get_result 0 of %3557
    pdl_interp.is_not_null %3569 : !pdl.value -> ^bb6666, ^bb6645
  ^bb6666:  // pred: ^bb6665
    pdl_interp.are_equal %3569, %3556 : !pdl.value -> ^bb6667, ^bb6645
  ^bb6667:  // pred: ^bb6666
    %3570 = pdl_interp.get_operand 0 of %3557
    pdl_interp.is_not_null %3570 : !pdl.value -> ^bb6668, ^bb6645
  ^bb6668:  // pred: ^bb6667
    %3571 = pdl_interp.get_value_type of %3554 : !pdl.type
    pdl_interp.check_type %3571 is f32 -> ^bb6669, ^bb6645
  ^bb6669:  // pred: ^bb6668
    %3572 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3571, %3572 : !pdl.type -> ^bb6670, ^bb6645
  ^bb6670:  // pred: ^bb6669
    %3573 = pdl_interp.get_operand 1 of %3557
    pdl_interp.is_not_null %3573 : !pdl.value -> ^bb6671, ^bb6645
  ^bb6671:  // pred: ^bb6670
    %3574 = pdl_interp.get_value_type of %3569 : !pdl.type
    pdl_interp.are_equal %3574, %3571 : !pdl.type -> ^bb6672, ^bb6645
  ^bb6672:  // pred: ^bb6671
    %3575 = pdl_interp.get_value_type of %3570 : !pdl.type
    pdl_interp.are_equal %3575, %3571 : !pdl.type -> ^bb6673, ^bb6645
  ^bb6673:  // pred: ^bb6672
    %3576 = pdl_interp.get_value_type of %3573 : !pdl.type
    pdl_interp.are_equal %3576, %3571 : !pdl.type -> ^bb6674, ^bb6645
  ^bb6674:  // pred: ^bb6673
    pdl_interp.record_match @rewriters::@associate_addr_(%3554, %3570, %3573, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf", "arith.subf"]), loc([%arg0, %3557]), root("arith.addf") -> ^bb6645
  ^bb6675:  // pred: ^bb6650
    pdl_interp.check_operand_count of %3557 is 0 -> ^bb6676, ^bb6645
  ^bb6676:  // pred: ^bb6675
    pdl_interp.check_result_count of %3557 is 1 -> ^bb6677, ^bb6645
  ^bb6677:  // pred: ^bb6676
    %3577 = pdl_interp.get_result 0 of %3557
    pdl_interp.is_not_null %3577 : !pdl.value -> ^bb6678, ^bb6645
  ^bb6678:  // pred: ^bb6677
    pdl_interp.are_equal %3577, %3556 : !pdl.value -> ^bb6679, ^bb6645
  ^bb6679:  // pred: ^bb6678
    %3578 = pdl_interp.get_value_type of %3554 : !pdl.type
    pdl_interp.check_type %3578 is f32 -> ^bb6680, ^bb6645
  ^bb6680:  // pred: ^bb6679
    %3579 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3578, %3579 : !pdl.type -> ^bb6681, ^bb6645
  ^bb6681:  // pred: ^bb6680
    %3580 = pdl_interp.get_value_type of %3577 : !pdl.type
    pdl_interp.are_equal %3580, %3578 : !pdl.type -> ^bb6682, ^bb6645
  ^bb6682:  // pred: ^bb6681
    %3581 = pdl_interp.get_attribute "value" of %3557
    pdl_interp.is_not_null %3581 : !pdl.attribute -> ^bb6683, ^bb6645
  ^bb6683:  // pred: ^bb6682
    pdl_interp.check_attribute %3581 is 0.000000e+00 : f32 -> ^bb6684, ^bb6645
  ^bb6684:  // pred: ^bb6683
    pdl_interp.record_match @rewriters::@add_rgt_identity(%3554, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %3557]), root("arith.addf") -> ^bb6645
  ^bb6685:  // pred: ^bb6650
    pdl_interp.check_operand_count of %3557 is 2 -> ^bb6686, ^bb6645
  ^bb6686:  // pred: ^bb6685
    pdl_interp.check_result_count of %3557 is 1 -> ^bb6687, ^bb6645
  ^bb6687:  // pred: ^bb6686
    %3582 = pdl_interp.get_result 0 of %3557
    pdl_interp.is_not_null %3582 : !pdl.value -> ^bb6688, ^bb6645
  ^bb6688:  // pred: ^bb6687
    pdl_interp.are_equal %3582, %3556 : !pdl.value -> ^bb6689, ^bb6645
  ^bb6689:  // pred: ^bb6688
    %3583 = pdl_interp.get_operand 0 of %3557
    pdl_interp.is_not_null %3583 : !pdl.value -> ^bb6690, ^bb6645
  ^bb6690:  // pred: ^bb6689
    %3584 = pdl_interp.get_value_type of %3554 : !pdl.type
    pdl_interp.check_type %3584 is f32 -> ^bb6706, ^bb6691
  ^bb6691:  // 7 preds: ^bb6690, ^bb6706, ^bb6708, ^bb6709, ^bb6710, ^bb6711, ^bb6712
    %3585 = pdl_interp.get_defining_op of %3583 : !pdl.value
    pdl_interp.is_not_null %3585 : !pdl.operation -> ^bb6692, ^bb6645
  ^bb6692:  // pred: ^bb6691
    %3586 = pdl_interp.get_value_type of %3554 : !pdl.type
    pdl_interp.check_type %3586 is f32 -> ^bb6693, ^bb6645
  ^bb6693:  // pred: ^bb6692
    %3587 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3586, %3587 : !pdl.type -> ^bb6694, ^bb6645
  ^bb6694:  // pred: ^bb6693
    %3588 = pdl_interp.get_operand 1 of %3557
    pdl_interp.is_not_null %3588 : !pdl.value -> ^bb6695, ^bb6645
  ^bb6695:  // pred: ^bb6694
    pdl_interp.check_operation_name of %3585 is "arith.negf" -> ^bb6696, ^bb6645
  ^bb6696:  // pred: ^bb6695
    pdl_interp.check_operand_count of %3585 is 1 -> ^bb6697, ^bb6645
  ^bb6697:  // pred: ^bb6696
    pdl_interp.check_result_count of %3585 is 1 -> ^bb6698, ^bb6645
  ^bb6698:  // pred: ^bb6697
    %3589 = pdl_interp.get_result 0 of %3585
    pdl_interp.is_not_null %3589 : !pdl.value -> ^bb6699, ^bb6645
  ^bb6699:  // pred: ^bb6698
    pdl_interp.are_equal %3589, %3583 : !pdl.value -> ^bb6700, ^bb6645
  ^bb6700:  // pred: ^bb6699
    %3590 = pdl_interp.get_value_type of %3582 : !pdl.type
    pdl_interp.are_equal %3590, %3586 : !pdl.type -> ^bb6701, ^bb6645
  ^bb6701:  // pred: ^bb6700
    %3591 = pdl_interp.get_operand 0 of %3585
    pdl_interp.is_not_null %3591 : !pdl.value -> ^bb6702, ^bb6645
  ^bb6702:  // pred: ^bb6701
    %3592 = pdl_interp.get_value_type of %3588 : !pdl.type
    pdl_interp.are_equal %3592, %3586 : !pdl.type -> ^bb6703, ^bb6645
  ^bb6703:  // pred: ^bb6702
    %3593 = pdl_interp.get_value_type of %3589 : !pdl.type
    pdl_interp.are_equal %3593, %3586 : !pdl.type -> ^bb6704, ^bb6645
  ^bb6704:  // pred: ^bb6703
    %3594 = pdl_interp.get_value_type of %3591 : !pdl.type
    pdl_interp.are_equal %3594, %3586 : !pdl.type -> ^bb6705, ^bb6645
  ^bb6705:  // pred: ^bb6704
    pdl_interp.record_match @rewriters::@fp_cancel_sub_sign(%3591, %3588, %3554, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.subf"]), loc([%arg0, %3557, %3585]), root("arith.addf") -> ^bb6645
  ^bb6706:  // pred: ^bb6690
    %3595 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3584, %3595 : !pdl.type -> ^bb6707, ^bb6691
  ^bb6707:  // pred: ^bb6706
    %3596 = pdl_interp.get_value_type of %3582 : !pdl.type
    pdl_interp.are_equal %3596, %3584 : !pdl.type -> ^bb6713, ^bb6708
  ^bb6708:  // 4 preds: ^bb6707, ^bb6713, ^bb6714, ^bb6715
    %3597 = pdl_interp.get_operand 1 of %3557
    pdl_interp.is_not_null %3597 : !pdl.value -> ^bb6709, ^bb6691
  ^bb6709:  // pred: ^bb6708
    %3598 = pdl_interp.get_value_type of %3582 : !pdl.type
    pdl_interp.are_equal %3598, %3584 : !pdl.type -> ^bb6710, ^bb6691
  ^bb6710:  // pred: ^bb6709
    %3599 = pdl_interp.get_value_type of %3583 : !pdl.type
    pdl_interp.are_equal %3599, %3584 : !pdl.type -> ^bb6711, ^bb6691
  ^bb6711:  // pred: ^bb6710
    %3600 = pdl_interp.get_value_type of %3597 : !pdl.type
    pdl_interp.are_equal %3600, %3584 : !pdl.type -> ^bb6712, ^bb6691
  ^bb6712:  // pred: ^bb6711
    pdl_interp.record_match @rewriters::@fp_cancel_sign_sub_inv(%3583, %3597, %3554, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.mulf", "arith.subf"]), loc([%arg0, %3557]), root("arith.addf") -> ^bb6691
  ^bb6713:  // pred: ^bb6707
    %3601 = pdl_interp.get_value_type of %3583 : !pdl.type
    pdl_interp.are_equal %3601, %3584 : !pdl.type -> ^bb6714, ^bb6708
  ^bb6714:  // pred: ^bb6713
    %3602 = pdl_interp.get_operand 1 of %3557
    pdl_interp.are_equal %3602, %3554 : !pdl.value -> ^bb6715, ^bb6708
  ^bb6715:  // pred: ^bb6714
    pdl_interp.record_match @rewriters::@distribute_rgt1_in(%3583, %3554, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.mulf"]), loc([%arg0, %3557]), root("arith.addf") -> ^bb6708
  ^bb6716:  // pred: ^bb6650
    pdl_interp.check_operand_count of %3557 is 1 -> ^bb6717, ^bb6645
  ^bb6717:  // pred: ^bb6716
    pdl_interp.check_result_count of %3557 is 1 -> ^bb6718, ^bb6645
  ^bb6718:  // pred: ^bb6717
    %3603 = pdl_interp.get_result 0 of %3557
    pdl_interp.is_not_null %3603 : !pdl.value -> ^bb6719, ^bb6645
  ^bb6719:  // pred: ^bb6718
    pdl_interp.are_equal %3603, %3556 : !pdl.value -> ^bb6720, ^bb6645
  ^bb6720:  // pred: ^bb6719
    %3604 = pdl_interp.get_operand 0 of %3557
    pdl_interp.is_not_null %3604 : !pdl.value -> ^bb6721, ^bb6645
  ^bb6721:  // pred: ^bb6720
    %3605 = pdl_interp.get_value_type of %3554 : !pdl.type
    pdl_interp.check_type %3605 is f32 -> ^bb6722, ^bb6645
  ^bb6722:  // pred: ^bb6721
    %3606 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3605, %3606 : !pdl.type -> ^bb6723, ^bb6645
  ^bb6723:  // pred: ^bb6722
    %3607 = pdl_interp.get_value_type of %3603 : !pdl.type
    pdl_interp.are_equal %3607, %3605 : !pdl.type -> ^bb6724, ^bb6645
  ^bb6724:  // pred: ^bb6723
    %3608 = pdl_interp.get_value_type of %3604 : !pdl.type
    pdl_interp.are_equal %3608, %3605 : !pdl.type -> ^bb6725, ^bb6645
  ^bb6725:  // pred: ^bb6724
    pdl_interp.record_match @rewriters::@sub_flip_reverse(%3554, %3604, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf"]), loc([%arg0, %3557]), root("arith.addf") -> ^bb6645
  ^bb6726:  // pred: ^bb6650
    pdl_interp.check_operand_count of %3557 is 2 -> ^bb6727, ^bb6645
  ^bb6727:  // pred: ^bb6726
    pdl_interp.check_result_count of %3557 is 1 -> ^bb6728, ^bb6645
  ^bb6728:  // pred: ^bb6727
    %3609 = pdl_interp.get_result 0 of %3557
    pdl_interp.is_not_null %3609 : !pdl.value -> ^bb6729, ^bb6645
  ^bb6729:  // pred: ^bb6728
    pdl_interp.are_equal %3609, %3556 : !pdl.value -> ^bb6730, ^bb6645
  ^bb6730:  // pred: ^bb6729
    %3610 = pdl_interp.get_operand 0 of %3557
    pdl_interp.is_not_null %3610 : !pdl.value -> ^bb6731, ^bb6645
  ^bb6731:  // pred: ^bb6730
    %3611 = pdl_interp.get_value_type of %3554 : !pdl.type
    pdl_interp.check_type %3611 is f32 -> ^bb6732, ^bb6645
  ^bb6732:  // pred: ^bb6731
    %3612 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3611, %3612 : !pdl.type -> ^bb6733, ^bb6645
  ^bb6733:  // pred: ^bb6732
    %3613 = pdl_interp.get_operand 1 of %3557
    pdl_interp.is_not_null %3613 : !pdl.value -> ^bb6734, ^bb6645
  ^bb6734:  // pred: ^bb6733
    %3614 = pdl_interp.get_value_type of %3609 : !pdl.type
    pdl_interp.are_equal %3614, %3611 : !pdl.type -> ^bb6735, ^bb6645
  ^bb6735:  // pred: ^bb6734
    %3615 = pdl_interp.get_value_type of %3610 : !pdl.type
    pdl_interp.are_equal %3615, %3611 : !pdl.type -> ^bb6736, ^bb6645
  ^bb6736:  // pred: ^bb6735
    %3616 = pdl_interp.get_value_type of %3613 : !pdl.type
    pdl_interp.are_equal %3616, %3611 : !pdl.type -> ^bb6737, ^bb6645
  ^bb6737:  // pred: ^bb6736
    pdl_interp.record_match @rewriters::@add_to_fraction(%3554, %3613, %3610, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.addf", "arith.divf"]), loc([%arg0, %3557]), root("arith.addf") -> ^bb6645
  ^bb6738:  // pred: ^bb6643
    %3617 = pdl_interp.get_value_type of %3554 : !pdl.type
    pdl_interp.check_type %3617 is f32 -> ^bb6739, ^bb6644
  ^bb6739:  // pred: ^bb6738
    %3618 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3617, %3618 : !pdl.type -> ^bb6740, ^bb6644
  ^bb6740:  // pred: ^bb6739
    %3619 = pdl_interp.get_value_type of %3555 : !pdl.type
    pdl_interp.are_equal %3617, %3619 : !pdl.type -> ^bb6741, ^bb6644
  ^bb6741:  // pred: ^bb6740
    pdl_interp.record_match @rewriters::@flip3_add(%3554, %3555, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.constant", "math.powf", "arith.addf", "arith.mulf", "arith.mulf", "arith.mulf", "arith.subf", "arith.addf", "arith.divf"]), loc([%arg0]), root("arith.addf") -> ^bb6742
  ^bb6742:  // pred: ^bb6741
    pdl_interp.record_match @rewriters::@flip_add(%3554, %3555, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.subf", "arith.subf", "arith.divf"]), loc([%arg0]), root("arith.addf") -> ^bb6743
  ^bb6743:  // pred: ^bb6742
    pdl_interp.record_match @rewriters::@sum_to_mult(%3555, %3554, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "arith.addf", "arith.mulf"]), loc([%arg0]), root("arith.addf") -> ^bb6744
  ^bb6744:  // pred: ^bb6743
    pdl_interp.record_match @rewriters::@add_flip(%3555, %3554, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.subf"]), loc([%arg0]), root("arith.addf") -> ^bb6745
  ^bb6745:  // pred: ^bb6744
    pdl_interp.record_match @rewriters::@add_commutative(%3555, %3554, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf"]), loc([%arg0]), root("arith.addf") -> ^bb6644
  ^bb6746:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb6747, ^bb3
  ^bb6747:  // pred: ^bb6746
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6748, ^bb3
  ^bb6748:  // pred: ^bb6747
    %3620 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3620 : !pdl.value -> ^bb6749, ^bb3
  ^bb6749:  // pred: ^bb6748
    %3621 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %3621 : !pdl.value -> ^bb6859, ^bb6750
  ^bb6750:  // 5 preds: ^bb6749, ^bb6859, ^bb6860, ^bb6861, ^bb6862
    %3622 = pdl_interp.get_operand 1 of %arg0
    %3623 = pdl_interp.get_defining_op of %3622 : !pdl.value
    pdl_interp.is_not_null %3623 : !pdl.operation -> ^bb6757, ^bb6751
  ^bb6751:  // 76 preds: ^bb6750, ^bb6757, ^bb6758, ^bb6759, ^bb6760, ^bb6761, ^bb6762, ^bb6764, ^bb6765, ^bb6766, ^bb6767, ^bb6768, ^bb6769, ^bb6777, ^bb6778, ^bb6779, ^bb6780, ^bb6781, ^bb6783, ^bb6784, ^bb6785, ^bb6787, ^bb6788, ^bb6789, ^bb6790, ^bb6791, ^bb6792, ^bb6793, ^bb6794, ^bb6795, ^bb6796, ^bb6797, ^bb6798, ^bb6815, ^bb6816, ^bb6817, ^bb6818, ^bb6819, ^bb6820, ^bb6821, ^bb6822, ^bb6823, ^bb6824, ^bb6825, ^bb6826, ^bb6827, ^bb6828, ^bb6829, ^bb6830, ^bb6831, ^bb6832, ^bb6833, ^bb6834, ^bb6835, ^bb6836, ^bb6838, ^bb6839, ^bb6840, ^bb6841, ^bb6842, ^bb6843, ^bb6844, ^bb6845, ^bb6846, ^bb6847, ^bb6848, ^bb6849, ^bb6850, ^bb6851, ^bb6852, ^bb6853, ^bb6854, ^bb6855, ^bb6856, ^bb6857, ^bb6858
    %3624 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3624 is f32 -> ^bb6752, ^bb3
  ^bb6752:  // pred: ^bb6751
    %3625 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3624, %3625 : !pdl.type -> ^bb6753, ^bb3
  ^bb6753:  // pred: ^bb6752
    %3626 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %3620, %3626 : !pdl.value -> ^bb6754, ^bb3
  ^bb6754:  // pred: ^bb6753
    pdl_interp.record_match @rewriters::@pow2(%3620, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf"]), loc([%arg0]), root("arith.mulf") -> ^bb6755
  ^bb6755:  // pred: ^bb6754
    pdl_interp.record_match @rewriters::@sqr_neg_rev(%3620, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.negf", "arith.mulf"]), loc([%arg0]), root("arith.mulf") -> ^bb6756
  ^bb6756:  // pred: ^bb6755
    pdl_interp.record_match @rewriters::@sqr_abs_rev(%3620, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.absf", "math.absf", "arith.mulf"]), loc([%arg0]), root("arith.mulf") -> ^bb3
  ^bb6757:  // pred: ^bb6750
    pdl_interp.is_not_null %3622 : !pdl.value -> ^bb6758, ^bb6751
  ^bb6758:  // pred: ^bb6757
    pdl_interp.switch_operation_name of %3623 to ["arith.mulf", "arith.divf", "arith.constant", "arith.addf", "arith.negf", "math.log"](^bb6759, ^bb6777, ^bb6815, ^bb6826, ^bb6839, ^bb6849) -> ^bb6751
  ^bb6759:  // pred: ^bb6758
    pdl_interp.check_operand_count of %3623 is 2 -> ^bb6760, ^bb6751
  ^bb6760:  // pred: ^bb6759
    pdl_interp.check_result_count of %3623 is 1 -> ^bb6761, ^bb6751
  ^bb6761:  // pred: ^bb6760
    %3627 = pdl_interp.get_result 0 of %3623
    pdl_interp.is_not_null %3627 : !pdl.value -> ^bb6762, ^bb6751
  ^bb6762:  // pred: ^bb6761
    pdl_interp.are_equal %3627, %3622 : !pdl.value -> ^bb6763, ^bb6751
  ^bb6763:  // pred: ^bb6762
    %3628 = pdl_interp.get_operand 0 of %3623
    pdl_interp.is_not_null %3628 : !pdl.value -> ^bb6770, ^bb6764
  ^bb6764:  // 8 preds: ^bb6763, ^bb6770, ^bb6771, ^bb6772, ^bb6773, ^bb6774, ^bb6775, ^bb6776
    %3629 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3629 is f32 -> ^bb6765, ^bb6751
  ^bb6765:  // pred: ^bb6764
    %3630 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3629, %3630 : !pdl.type -> ^bb6766, ^bb6751
  ^bb6766:  // pred: ^bb6765
    %3631 = pdl_interp.get_value_type of %3627 : !pdl.type
    pdl_interp.are_equal %3631, %3629 : !pdl.type -> ^bb6767, ^bb6751
  ^bb6767:  // pred: ^bb6766
    %3632 = pdl_interp.get_operand 1 of %3623
    pdl_interp.are_equal %3632, %3620 : !pdl.value -> ^bb6768, ^bb6751
  ^bb6768:  // pred: ^bb6767
    %3633 = pdl_interp.get_operand 0 of %3623
    pdl_interp.are_equal %3633, %3620 : !pdl.value -> ^bb6769, ^bb6751
  ^bb6769:  // pred: ^bb6768
    pdl_interp.record_match @rewriters::@cube_unmult(%3620, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf"]), loc([%arg0, %3623]), root("arith.mulf") -> ^bb6751
  ^bb6770:  // pred: ^bb6763
    %3634 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3634 is f32 -> ^bb6771, ^bb6764
  ^bb6771:  // pred: ^bb6770
    %3635 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3634, %3635 : !pdl.type -> ^bb6772, ^bb6764
  ^bb6772:  // pred: ^bb6771
    %3636 = pdl_interp.get_operand 1 of %3623
    pdl_interp.is_not_null %3636 : !pdl.value -> ^bb6773, ^bb6764
  ^bb6773:  // pred: ^bb6772
    %3637 = pdl_interp.get_value_type of %3627 : !pdl.type
    pdl_interp.are_equal %3637, %3634 : !pdl.type -> ^bb6774, ^bb6764
  ^bb6774:  // pred: ^bb6773
    %3638 = pdl_interp.get_value_type of %3628 : !pdl.type
    pdl_interp.are_equal %3638, %3634 : !pdl.type -> ^bb6775, ^bb6764
  ^bb6775:  // pred: ^bb6774
    %3639 = pdl_interp.get_value_type of %3636 : !pdl.type
    pdl_interp.are_equal %3639, %3634 : !pdl.type -> ^bb6776, ^bb6764
  ^bb6776:  // pred: ^bb6775
    pdl_interp.record_match @rewriters::@associate_mulrmul(%3620, %3628, %3636, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf"]), loc([%arg0, %3623]), root("arith.mulf") -> ^bb6764
  ^bb6777:  // pred: ^bb6758
    pdl_interp.check_operand_count of %3623 is 2 -> ^bb6778, ^bb6751
  ^bb6778:  // pred: ^bb6777
    pdl_interp.check_result_count of %3623 is 1 -> ^bb6779, ^bb6751
  ^bb6779:  // pred: ^bb6778
    %3640 = pdl_interp.get_result 0 of %3623
    pdl_interp.is_not_null %3640 : !pdl.value -> ^bb6780, ^bb6751
  ^bb6780:  // pred: ^bb6779
    pdl_interp.are_equal %3640, %3622 : !pdl.value -> ^bb6781, ^bb6751
  ^bb6781:  // pred: ^bb6780
    %3641 = pdl_interp.get_operand 0 of %3623
    pdl_interp.is_not_null %3641 : !pdl.value -> ^bb6782, ^bb6751
  ^bb6782:  // pred: ^bb6781
    %3642 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3642 is f32 -> ^bb6809, ^bb6783
  ^bb6783:  // 7 preds: ^bb6782, ^bb6809, ^bb6810, ^bb6811, ^bb6812, ^bb6813, ^bb6814
    %3643 = pdl_interp.get_defining_op of %3641 : !pdl.value
    pdl_interp.is_not_null %3643 : !pdl.operation -> ^bb6784, ^bb6751
  ^bb6784:  // pred: ^bb6783
    %3644 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3644 is f32 -> ^bb6785, ^bb6751
  ^bb6785:  // pred: ^bb6784
    %3645 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3644, %3645 : !pdl.type -> ^bb6786, ^bb6751
  ^bb6786:  // pred: ^bb6785
    pdl_interp.check_operation_name of %3643 is "arith.constant" -> ^bb6799, ^bb6787
  ^bb6787:  // 11 preds: ^bb6786, ^bb6799, ^bb6800, ^bb6801, ^bb6802, ^bb6803, ^bb6804, ^bb6805, ^bb6806, ^bb6807, ^bb6808
    %3646 = pdl_interp.get_operand 1 of %3623
    pdl_interp.is_not_null %3646 : !pdl.value -> ^bb6788, ^bb6751
  ^bb6788:  // pred: ^bb6787
    pdl_interp.check_operation_name of %3643 is "arith.constant" -> ^bb6789, ^bb6751
  ^bb6789:  // pred: ^bb6788
    pdl_interp.check_operand_count of %3643 is 0 -> ^bb6790, ^bb6751
  ^bb6790:  // pred: ^bb6789
    pdl_interp.check_result_count of %3643 is 1 -> ^bb6791, ^bb6751
  ^bb6791:  // pred: ^bb6790
    %3647 = pdl_interp.get_result 0 of %3643
    pdl_interp.is_not_null %3647 : !pdl.value -> ^bb6792, ^bb6751
  ^bb6792:  // pred: ^bb6791
    pdl_interp.are_equal %3647, %3641 : !pdl.value -> ^bb6793, ^bb6751
  ^bb6793:  // pred: ^bb6792
    %3648 = pdl_interp.get_value_type of %3640 : !pdl.type
    pdl_interp.are_equal %3648, %3644 : !pdl.type -> ^bb6794, ^bb6751
  ^bb6794:  // pred: ^bb6793
    %3649 = pdl_interp.get_value_type of %3646 : !pdl.type
    pdl_interp.are_equal %3649, %3644 : !pdl.type -> ^bb6795, ^bb6751
  ^bb6795:  // pred: ^bb6794
    %3650 = pdl_interp.get_attribute "value" of %3643
    pdl_interp.is_not_null %3650 : !pdl.attribute -> ^bb6796, ^bb6751
  ^bb6796:  // pred: ^bb6795
    pdl_interp.check_attribute %3650 is 1.000000e+00 : f32 -> ^bb6797, ^bb6751
  ^bb6797:  // pred: ^bb6796
    %3651 = pdl_interp.get_value_type of %3647 : !pdl.type
    pdl_interp.are_equal %3651, %3644 : !pdl.type -> ^bb6798, ^bb6751
  ^bb6798:  // pred: ^bb6797
    pdl_interp.record_match @rewriters::@mult_flip_rev(%3620, %3646, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf"]), loc([%arg0, %3623, %3643]), root("arith.mulf") -> ^bb6751
  ^bb6799:  // pred: ^bb6786
    pdl_interp.check_operand_count of %3643 is 0 -> ^bb6800, ^bb6787
  ^bb6800:  // pred: ^bb6799
    pdl_interp.check_result_count of %3643 is 1 -> ^bb6801, ^bb6787
  ^bb6801:  // pred: ^bb6800
    %3652 = pdl_interp.get_result 0 of %3643
    pdl_interp.is_not_null %3652 : !pdl.value -> ^bb6802, ^bb6787
  ^bb6802:  // pred: ^bb6801
    pdl_interp.are_equal %3652, %3641 : !pdl.value -> ^bb6803, ^bb6787
  ^bb6803:  // pred: ^bb6802
    %3653 = pdl_interp.get_value_type of %3640 : !pdl.type
    pdl_interp.are_equal %3653, %3644 : !pdl.type -> ^bb6804, ^bb6787
  ^bb6804:  // pred: ^bb6803
    %3654 = pdl_interp.get_attribute "value" of %3643
    pdl_interp.is_not_null %3654 : !pdl.attribute -> ^bb6805, ^bb6787
  ^bb6805:  // pred: ^bb6804
    pdl_interp.check_attribute %3654 is 1.000000e+00 : f32 -> ^bb6806, ^bb6787
  ^bb6806:  // pred: ^bb6805
    %3655 = pdl_interp.get_value_type of %3652 : !pdl.type
    pdl_interp.are_equal %3655, %3644 : !pdl.type -> ^bb6807, ^bb6787
  ^bb6807:  // pred: ^bb6806
    %3656 = pdl_interp.get_operand 1 of %3623
    pdl_interp.are_equal %3656, %3620 : !pdl.value -> ^bb6808, ^bb6787
  ^bb6808:  // pred: ^bb6807
    pdl_interp.record_match @rewriters::@rgt_mult_inverse(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %3623, %3643]), root("arith.mulf") -> ^bb6787
  ^bb6809:  // pred: ^bb6782
    %3657 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3642, %3657 : !pdl.type -> ^bb6810, ^bb6783
  ^bb6810:  // pred: ^bb6809
    %3658 = pdl_interp.get_operand 1 of %3623
    pdl_interp.is_not_null %3658 : !pdl.value -> ^bb6811, ^bb6783
  ^bb6811:  // pred: ^bb6810
    %3659 = pdl_interp.get_value_type of %3640 : !pdl.type
    pdl_interp.are_equal %3659, %3642 : !pdl.type -> ^bb6812, ^bb6783
  ^bb6812:  // pred: ^bb6811
    %3660 = pdl_interp.get_value_type of %3641 : !pdl.type
    pdl_interp.are_equal %3660, %3642 : !pdl.type -> ^bb6813, ^bb6783
  ^bb6813:  // pred: ^bb6812
    %3661 = pdl_interp.get_value_type of %3658 : !pdl.type
    pdl_interp.are_equal %3661, %3642 : !pdl.type -> ^bb6814, ^bb6783
  ^bb6814:  // pred: ^bb6813
    pdl_interp.record_match @rewriters::@associate_mulrdiv(%3620, %3641, %3658, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.divf"]), loc([%arg0, %3623]), root("arith.mulf") -> ^bb6783
  ^bb6815:  // pred: ^bb6758
    pdl_interp.check_operand_count of %3623 is 0 -> ^bb6816, ^bb6751
  ^bb6816:  // pred: ^bb6815
    pdl_interp.check_result_count of %3623 is 1 -> ^bb6817, ^bb6751
  ^bb6817:  // pred: ^bb6816
    %3662 = pdl_interp.get_result 0 of %3623
    pdl_interp.is_not_null %3662 : !pdl.value -> ^bb6818, ^bb6751
  ^bb6818:  // pred: ^bb6817
    pdl_interp.are_equal %3662, %3622 : !pdl.value -> ^bb6819, ^bb6751
  ^bb6819:  // pred: ^bb6818
    %3663 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3663 is f32 -> ^bb6820, ^bb6751
  ^bb6820:  // pred: ^bb6819
    %3664 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3663, %3664 : !pdl.type -> ^bb6821, ^bb6751
  ^bb6821:  // pred: ^bb6820
    %3665 = pdl_interp.get_value_type of %3662 : !pdl.type
    pdl_interp.are_equal %3665, %3663 : !pdl.type -> ^bb6822, ^bb6751
  ^bb6822:  // pred: ^bb6821
    %3666 = pdl_interp.get_attribute "value" of %3623
    pdl_interp.is_not_null %3666 : !pdl.attribute -> ^bb6823, ^bb6751
  ^bb6823:  // pred: ^bb6822
    pdl_interp.switch_attribute %3666 to [0.000000e+00 : f32, 1.000000e+00 : f32](^bb6824, ^bb6825) -> ^bb6751
  ^bb6824:  // pred: ^bb6823
    pdl_interp.record_match @rewriters::@mul0_rgt(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %3623]), root("arith.mulf") -> ^bb6751
  ^bb6825:  // pred: ^bb6823
    pdl_interp.record_match @rewriters::@mul_rgt_identity(%3620, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %3623]), root("arith.mulf") -> ^bb6751
  ^bb6826:  // pred: ^bb6758
    pdl_interp.check_operand_count of %3623 is 2 -> ^bb6827, ^bb6751
  ^bb6827:  // pred: ^bb6826
    pdl_interp.check_result_count of %3623 is 1 -> ^bb6828, ^bb6751
  ^bb6828:  // pred: ^bb6827
    %3667 = pdl_interp.get_result 0 of %3623
    pdl_interp.is_not_null %3667 : !pdl.value -> ^bb6829, ^bb6751
  ^bb6829:  // pred: ^bb6828
    pdl_interp.are_equal %3667, %3622 : !pdl.value -> ^bb6830, ^bb6751
  ^bb6830:  // pred: ^bb6829
    %3668 = pdl_interp.get_operand 0 of %3623
    pdl_interp.is_not_null %3668 : !pdl.value -> ^bb6831, ^bb6751
  ^bb6831:  // pred: ^bb6830
    %3669 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3669 is f32 -> ^bb6832, ^bb6751
  ^bb6832:  // pred: ^bb6831
    %3670 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3669, %3670 : !pdl.type -> ^bb6833, ^bb6751
  ^bb6833:  // pred: ^bb6832
    %3671 = pdl_interp.get_operand 1 of %3623
    pdl_interp.is_not_null %3671 : !pdl.value -> ^bb6834, ^bb6751
  ^bb6834:  // pred: ^bb6833
    %3672 = pdl_interp.get_value_type of %3667 : !pdl.type
    pdl_interp.are_equal %3672, %3669 : !pdl.type -> ^bb6835, ^bb6751
  ^bb6835:  // pred: ^bb6834
    %3673 = pdl_interp.get_value_type of %3668 : !pdl.type
    pdl_interp.are_equal %3673, %3669 : !pdl.type -> ^bb6836, ^bb6751
  ^bb6836:  // pred: ^bb6835
    %3674 = pdl_interp.get_value_type of %3671 : !pdl.type
    pdl_interp.are_equal %3674, %3669 : !pdl.type -> ^bb6837, ^bb6751
  ^bb6837:  // pred: ^bb6836
    pdl_interp.record_match @rewriters::@distribute_rgt_in(%3668, %3620, %3671, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.addf"]), loc([%arg0, %3623]), root("arith.mulf") -> ^bb6838
  ^bb6838:  // pred: ^bb6837
    pdl_interp.record_match @rewriters::@distribute_lft_in(%3620, %3668, %3671, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.addf"]), loc([%arg0, %3623]), root("arith.mulf") -> ^bb6751
  ^bb6839:  // pred: ^bb6758
    pdl_interp.check_operand_count of %3623 is 1 -> ^bb6840, ^bb6751
  ^bb6840:  // pred: ^bb6839
    pdl_interp.check_result_count of %3623 is 1 -> ^bb6841, ^bb6751
  ^bb6841:  // pred: ^bb6840
    %3675 = pdl_interp.get_result 0 of %3623
    pdl_interp.is_not_null %3675 : !pdl.value -> ^bb6842, ^bb6751
  ^bb6842:  // pred: ^bb6841
    pdl_interp.are_equal %3675, %3622 : !pdl.value -> ^bb6843, ^bb6751
  ^bb6843:  // pred: ^bb6842
    %3676 = pdl_interp.get_operand 0 of %3623
    pdl_interp.is_not_null %3676 : !pdl.value -> ^bb6844, ^bb6751
  ^bb6844:  // pred: ^bb6843
    %3677 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3677 is f32 -> ^bb6845, ^bb6751
  ^bb6845:  // pred: ^bb6844
    %3678 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3677, %3678 : !pdl.type -> ^bb6846, ^bb6751
  ^bb6846:  // pred: ^bb6845
    %3679 = pdl_interp.get_value_type of %3675 : !pdl.type
    pdl_interp.are_equal %3679, %3677 : !pdl.type -> ^bb6847, ^bb6751
  ^bb6847:  // pred: ^bb6846
    %3680 = pdl_interp.get_value_type of %3676 : !pdl.type
    pdl_interp.are_equal %3680, %3677 : !pdl.type -> ^bb6848, ^bb6751
  ^bb6848:  // pred: ^bb6847
    pdl_interp.record_match @rewriters::@distribute_rgt_neg_out(%3620, %3676, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.negf"]), loc([%arg0, %3623]), root("arith.mulf") -> ^bb6751
  ^bb6849:  // pred: ^bb6758
    pdl_interp.check_operand_count of %3623 is 1 -> ^bb6850, ^bb6751
  ^bb6850:  // pred: ^bb6849
    pdl_interp.check_result_count of %3623 is 1 -> ^bb6851, ^bb6751
  ^bb6851:  // pred: ^bb6850
    %3681 = pdl_interp.get_result 0 of %3623
    pdl_interp.is_not_null %3681 : !pdl.value -> ^bb6852, ^bb6751
  ^bb6852:  // pred: ^bb6851
    pdl_interp.are_equal %3681, %3622 : !pdl.value -> ^bb6853, ^bb6751
  ^bb6853:  // pred: ^bb6852
    %3682 = pdl_interp.get_operand 0 of %3623
    pdl_interp.is_not_null %3682 : !pdl.value -> ^bb6854, ^bb6751
  ^bb6854:  // pred: ^bb6853
    %3683 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3683 is f32 -> ^bb6855, ^bb6751
  ^bb6855:  // pred: ^bb6854
    %3684 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3683, %3684 : !pdl.type -> ^bb6856, ^bb6751
  ^bb6856:  // pred: ^bb6855
    %3685 = pdl_interp.get_value_type of %3681 : !pdl.type
    pdl_interp.are_equal %3685, %3683 : !pdl.type -> ^bb6857, ^bb6751
  ^bb6857:  // pred: ^bb6856
    %3686 = pdl_interp.get_value_type of %3682 : !pdl.type
    pdl_interp.are_equal %3686, %3683 : !pdl.type -> ^bb6858, ^bb6751
  ^bb6858:  // pred: ^bb6857
    pdl_interp.record_match @rewriters::@log_pow_rev(%3682, %3620, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.powf", "math.log"]), loc([%arg0, %3623]), root("arith.mulf") -> ^bb6751
  ^bb6859:  // pred: ^bb6749
    %3687 = pdl_interp.get_value_type of %3620 : !pdl.type
    pdl_interp.check_type %3687 is f32 -> ^bb6860, ^bb6750
  ^bb6860:  // pred: ^bb6859
    %3688 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3687, %3688 : !pdl.type -> ^bb6861, ^bb6750
  ^bb6861:  // pred: ^bb6860
    %3689 = pdl_interp.get_value_type of %3621 : !pdl.type
    pdl_interp.are_equal %3687, %3689 : !pdl.type -> ^bb6862, ^bb6750
  ^bb6862:  // pred: ^bb6861
    pdl_interp.record_match @rewriters::@mul_commutative(%3621, %3620, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf"]), loc([%arg0]), root("arith.mulf") -> ^bb6750
  ^bb6863:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb6864, ^bb3
  ^bb6864:  // pred: ^bb6863
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6865, ^bb3
  ^bb6865:  // pred: ^bb6864
    %3690 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3690 : !pdl.value -> ^bb6866, ^bb3
  ^bb6866:  // pred: ^bb6865
    %3691 = pdl_interp.get_operand 1 of %arg0
    %3692 = pdl_interp.get_defining_op of %3691 : !pdl.value
    pdl_interp.is_not_null %3692 : !pdl.operation -> ^bb6880, ^bb6867
  ^bb6867:  // 71 preds: ^bb6866, ^bb6880, ^bb6881, ^bb6882, ^bb6883, ^bb6884, ^bb6885, ^bb6886, ^bb6887, ^bb6888, ^bb6889, ^bb6890, ^bb6891, ^bb6892, ^bb6893, ^bb6894, ^bb6895, ^bb6896, ^bb6897, ^bb6898, ^bb6899, ^bb6900, ^bb6901, ^bb6902, ^bb6903, ^bb6904, ^bb6905, ^bb6906, ^bb6907, ^bb6908, ^bb6909, ^bb6910, ^bb6911, ^bb6912, ^bb6913, ^bb6914, ^bb6915, ^bb6916, ^bb6917, ^bb6918, ^bb6919, ^bb6920, ^bb6922, ^bb6923, ^bb6924, ^bb6925, ^bb6926, ^bb6927, ^bb6928, ^bb6943, ^bb6944, ^bb6945, ^bb6946, ^bb6947, ^bb6948, ^bb6949, ^bb6950, ^bb6951, ^bb6952, ^bb6953, ^bb6954, ^bb6955, ^bb6956, ^bb6957, ^bb6958, ^bb6959, ^bb6960, ^bb6961, ^bb6962, ^bb6963, ^bb6964
    %3693 = pdl_interp.get_value_type of %3690 : !pdl.type
    pdl_interp.check_type %3693 is f32 -> ^bb6877, ^bb6868
  ^bb6868:  // 4 preds: ^bb6867, ^bb6877, ^bb6878, ^bb6879
    %3694 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %3694 : !pdl.value -> ^bb6869, ^bb3
  ^bb6869:  // pred: ^bb6868
    %3695 = pdl_interp.get_value_type of %3690 : !pdl.type
    pdl_interp.check_type %3695 is f32 -> ^bb6870, ^bb3
  ^bb6870:  // pred: ^bb6869
    %3696 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3695, %3696 : !pdl.type -> ^bb6871, ^bb3
  ^bb6871:  // pred: ^bb6870
    %3697 = pdl_interp.get_value_type of %3694 : !pdl.type
    pdl_interp.are_equal %3695, %3697 : !pdl.type -> ^bb6872, ^bb3
  ^bb6872:  // pred: ^bb6871
    pdl_interp.record_match @rewriters::@flip3sub_(%3690, %3694, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.constant", "math.powf", "arith.subf", "arith.mulf", "arith.mulf", "arith.mulf", "arith.addf", "arith.addf", "arith.divf"]), loc([%arg0]), root("arith.subf") -> ^bb6873
  ^bb6873:  // pred: ^bb6872
    pdl_interp.record_match @rewriters::@flipsub_(%3690, %3694, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf", "arith.subf", "arith.addf", "arith.divf"]), loc([%arg0]), root("arith.subf") -> ^bb6874
  ^bb6874:  // pred: ^bb6873
    pdl_interp.record_match @rewriters::@sub_to_mult(%3694, %3690, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "arith.subf", "arith.mulf"]), loc([%arg0]), root("arith.subf") -> ^bb6875
  ^bb6875:  // pred: ^bb6874
    pdl_interp.record_match @rewriters::@sub_negate_rev(%3694, %3690, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.negf"]), loc([%arg0]), root("arith.subf") -> ^bb6876
  ^bb6876:  // pred: ^bb6875
    pdl_interp.record_match @rewriters::@sub_flip(%3694, %3690, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.addf"]), loc([%arg0]), root("arith.subf") -> ^bb3
  ^bb6877:  // pred: ^bb6867
    %3698 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3693, %3698 : !pdl.type -> ^bb6878, ^bb6868
  ^bb6878:  // pred: ^bb6877
    %3699 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %3690, %3699 : !pdl.value -> ^bb6879, ^bb6868
  ^bb6879:  // pred: ^bb6878
    pdl_interp.record_match @rewriters::@add_inverses(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0]), root("arith.subf") -> ^bb6868
  ^bb6880:  // pred: ^bb6866
    pdl_interp.is_not_null %3691 : !pdl.value -> ^bb6881, ^bb6867
  ^bb6881:  // pred: ^bb6880
    pdl_interp.switch_operation_name of %3692 to ["arith.addf", "arith.subf", "arith.constant", "arith.mulf", "arith.negf", "arith.divf"](^bb6882, ^bb6894, ^bb6906, ^bb6916, ^bb6943, ^bb6953) -> ^bb6867
  ^bb6882:  // pred: ^bb6881
    pdl_interp.check_operand_count of %3692 is 2 -> ^bb6883, ^bb6867
  ^bb6883:  // pred: ^bb6882
    pdl_interp.check_result_count of %3692 is 1 -> ^bb6884, ^bb6867
  ^bb6884:  // pred: ^bb6883
    %3700 = pdl_interp.get_result 0 of %3692
    pdl_interp.is_not_null %3700 : !pdl.value -> ^bb6885, ^bb6867
  ^bb6885:  // pred: ^bb6884
    pdl_interp.are_equal %3700, %3691 : !pdl.value -> ^bb6886, ^bb6867
  ^bb6886:  // pred: ^bb6885
    %3701 = pdl_interp.get_operand 0 of %3692
    pdl_interp.is_not_null %3701 : !pdl.value -> ^bb6887, ^bb6867
  ^bb6887:  // pred: ^bb6886
    %3702 = pdl_interp.get_value_type of %3690 : !pdl.type
    pdl_interp.check_type %3702 is f32 -> ^bb6888, ^bb6867
  ^bb6888:  // pred: ^bb6887
    %3703 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3702, %3703 : !pdl.type -> ^bb6889, ^bb6867
  ^bb6889:  // pred: ^bb6888
    %3704 = pdl_interp.get_operand 1 of %3692
    pdl_interp.is_not_null %3704 : !pdl.value -> ^bb6890, ^bb6867
  ^bb6890:  // pred: ^bb6889
    %3705 = pdl_interp.get_value_type of %3700 : !pdl.type
    pdl_interp.are_equal %3705, %3702 : !pdl.type -> ^bb6891, ^bb6867
  ^bb6891:  // pred: ^bb6890
    %3706 = pdl_interp.get_value_type of %3701 : !pdl.type
    pdl_interp.are_equal %3706, %3702 : !pdl.type -> ^bb6892, ^bb6867
  ^bb6892:  // pred: ^bb6891
    %3707 = pdl_interp.get_value_type of %3704 : !pdl.type
    pdl_interp.are_equal %3707, %3702 : !pdl.type -> ^bb6893, ^bb6867
  ^bb6893:  // pred: ^bb6892
    pdl_interp.record_match @rewriters::@associatesub_radd(%3690, %3701, %3704, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.subf"]), loc([%arg0, %3692]), root("arith.subf") -> ^bb6867
  ^bb6894:  // pred: ^bb6881
    pdl_interp.check_operand_count of %3692 is 2 -> ^bb6895, ^bb6867
  ^bb6895:  // pred: ^bb6894
    pdl_interp.check_result_count of %3692 is 1 -> ^bb6896, ^bb6867
  ^bb6896:  // pred: ^bb6895
    %3708 = pdl_interp.get_result 0 of %3692
    pdl_interp.is_not_null %3708 : !pdl.value -> ^bb6897, ^bb6867
  ^bb6897:  // pred: ^bb6896
    pdl_interp.are_equal %3708, %3691 : !pdl.value -> ^bb6898, ^bb6867
  ^bb6898:  // pred: ^bb6897
    %3709 = pdl_interp.get_operand 0 of %3692
    pdl_interp.is_not_null %3709 : !pdl.value -> ^bb6899, ^bb6867
  ^bb6899:  // pred: ^bb6898
    %3710 = pdl_interp.get_value_type of %3690 : !pdl.type
    pdl_interp.check_type %3710 is f32 -> ^bb6900, ^bb6867
  ^bb6900:  // pred: ^bb6899
    %3711 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3710, %3711 : !pdl.type -> ^bb6901, ^bb6867
  ^bb6901:  // pred: ^bb6900
    %3712 = pdl_interp.get_operand 1 of %3692
    pdl_interp.is_not_null %3712 : !pdl.value -> ^bb6902, ^bb6867
  ^bb6902:  // pred: ^bb6901
    %3713 = pdl_interp.get_value_type of %3708 : !pdl.type
    pdl_interp.are_equal %3713, %3710 : !pdl.type -> ^bb6903, ^bb6867
  ^bb6903:  // pred: ^bb6902
    %3714 = pdl_interp.get_value_type of %3709 : !pdl.type
    pdl_interp.are_equal %3714, %3710 : !pdl.type -> ^bb6904, ^bb6867
  ^bb6904:  // pred: ^bb6903
    %3715 = pdl_interp.get_value_type of %3712 : !pdl.type
    pdl_interp.are_equal %3715, %3710 : !pdl.type -> ^bb6905, ^bb6867
  ^bb6905:  // pred: ^bb6904
    pdl_interp.record_match @rewriters::@associatesub_r_(%3690, %3709, %3712, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.subf", "arith.addf"]), loc([%arg0, %3692]), root("arith.subf") -> ^bb6867
  ^bb6906:  // pred: ^bb6881
    pdl_interp.check_operand_count of %3692 is 0 -> ^bb6907, ^bb6867
  ^bb6907:  // pred: ^bb6906
    pdl_interp.check_result_count of %3692 is 1 -> ^bb6908, ^bb6867
  ^bb6908:  // pred: ^bb6907
    %3716 = pdl_interp.get_result 0 of %3692
    pdl_interp.is_not_null %3716 : !pdl.value -> ^bb6909, ^bb6867
  ^bb6909:  // pred: ^bb6908
    pdl_interp.are_equal %3716, %3691 : !pdl.value -> ^bb6910, ^bb6867
  ^bb6910:  // pred: ^bb6909
    %3717 = pdl_interp.get_value_type of %3690 : !pdl.type
    pdl_interp.check_type %3717 is f32 -> ^bb6911, ^bb6867
  ^bb6911:  // pred: ^bb6910
    %3718 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3717, %3718 : !pdl.type -> ^bb6912, ^bb6867
  ^bb6912:  // pred: ^bb6911
    %3719 = pdl_interp.get_value_type of %3716 : !pdl.type
    pdl_interp.are_equal %3719, %3717 : !pdl.type -> ^bb6913, ^bb6867
  ^bb6913:  // pred: ^bb6912
    %3720 = pdl_interp.get_attribute "value" of %3692
    pdl_interp.is_not_null %3720 : !pdl.attribute -> ^bb6914, ^bb6867
  ^bb6914:  // pred: ^bb6913
    pdl_interp.check_attribute %3720 is 0.000000e+00 : f32 -> ^bb6915, ^bb6867
  ^bb6915:  // pred: ^bb6914
    pdl_interp.record_match @rewriters::@sub_rgt_identity(%3690, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %3692]), root("arith.subf") -> ^bb6867
  ^bb6916:  // pred: ^bb6881
    pdl_interp.check_operand_count of %3692 is 2 -> ^bb6917, ^bb6867
  ^bb6917:  // pred: ^bb6916
    pdl_interp.check_result_count of %3692 is 1 -> ^bb6918, ^bb6867
  ^bb6918:  // pred: ^bb6917
    %3721 = pdl_interp.get_result 0 of %3692
    pdl_interp.is_not_null %3721 : !pdl.value -> ^bb6919, ^bb6867
  ^bb6919:  // pred: ^bb6918
    pdl_interp.are_equal %3721, %3691 : !pdl.value -> ^bb6920, ^bb6867
  ^bb6920:  // pred: ^bb6919
    %3722 = pdl_interp.get_operand 0 of %3692
    pdl_interp.is_not_null %3722 : !pdl.value -> ^bb6921, ^bb6867
  ^bb6921:  // pred: ^bb6920
    %3723 = pdl_interp.get_defining_op of %3722 : !pdl.value
    pdl_interp.is_not_null %3723 : !pdl.operation -> ^bb6929, ^bb6922
  ^bb6922:  // 15 preds: ^bb6921, ^bb6929, ^bb6930, ^bb6931, ^bb6932, ^bb6933, ^bb6934, ^bb6935, ^bb6936, ^bb6937, ^bb6938, ^bb6939, ^bb6940, ^bb6941, ^bb6942
    %3724 = pdl_interp.get_value_type of %3690 : !pdl.type
    pdl_interp.check_type %3724 is f32 -> ^bb6923, ^bb6867
  ^bb6923:  // pred: ^bb6922
    %3725 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3724, %3725 : !pdl.type -> ^bb6924, ^bb6867
  ^bb6924:  // pred: ^bb6923
    %3726 = pdl_interp.get_operand 1 of %3692
    pdl_interp.is_not_null %3726 : !pdl.value -> ^bb6925, ^bb6867
  ^bb6925:  // pred: ^bb6924
    %3727 = pdl_interp.get_value_type of %3721 : !pdl.type
    pdl_interp.are_equal %3727, %3724 : !pdl.type -> ^bb6926, ^bb6867
  ^bb6926:  // pred: ^bb6925
    %3728 = pdl_interp.get_value_type of %3722 : !pdl.type
    pdl_interp.are_equal %3728, %3724 : !pdl.type -> ^bb6927, ^bb6867
  ^bb6927:  // pred: ^bb6926
    %3729 = pdl_interp.get_value_type of %3726 : !pdl.type
    pdl_interp.are_equal %3729, %3724 : !pdl.type -> ^bb6928, ^bb6867
  ^bb6928:  // pred: ^bb6927
    pdl_interp.record_match @rewriters::@fp_cancel_sub_sign_inv(%3722, %3726, %3690, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.mulf", "arith.addf"]), loc([%arg0, %3692]), root("arith.subf") -> ^bb6867
  ^bb6929:  // pred: ^bb6921
    %3730 = pdl_interp.get_value_type of %3690 : !pdl.type
    pdl_interp.check_type %3730 is f32 -> ^bb6930, ^bb6922
  ^bb6930:  // pred: ^bb6929
    %3731 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3730, %3731 : !pdl.type -> ^bb6931, ^bb6922
  ^bb6931:  // pred: ^bb6930
    %3732 = pdl_interp.get_operand 1 of %3692
    pdl_interp.is_not_null %3732 : !pdl.value -> ^bb6932, ^bb6922
  ^bb6932:  // pred: ^bb6931
    pdl_interp.check_operation_name of %3723 is "arith.negf" -> ^bb6933, ^bb6922
  ^bb6933:  // pred: ^bb6932
    pdl_interp.check_operand_count of %3723 is 1 -> ^bb6934, ^bb6922
  ^bb6934:  // pred: ^bb6933
    pdl_interp.check_result_count of %3723 is 1 -> ^bb6935, ^bb6922
  ^bb6935:  // pred: ^bb6934
    %3733 = pdl_interp.get_result 0 of %3723
    pdl_interp.is_not_null %3733 : !pdl.value -> ^bb6936, ^bb6922
  ^bb6936:  // pred: ^bb6935
    pdl_interp.are_equal %3733, %3722 : !pdl.value -> ^bb6937, ^bb6922
  ^bb6937:  // pred: ^bb6936
    %3734 = pdl_interp.get_value_type of %3721 : !pdl.type
    pdl_interp.are_equal %3734, %3730 : !pdl.type -> ^bb6938, ^bb6922
  ^bb6938:  // pred: ^bb6937
    %3735 = pdl_interp.get_operand 0 of %3723
    pdl_interp.is_not_null %3735 : !pdl.value -> ^bb6939, ^bb6922
  ^bb6939:  // pred: ^bb6938
    %3736 = pdl_interp.get_value_type of %3732 : !pdl.type
    pdl_interp.are_equal %3736, %3730 : !pdl.type -> ^bb6940, ^bb6922
  ^bb6940:  // pred: ^bb6939
    %3737 = pdl_interp.get_value_type of %3733 : !pdl.type
    pdl_interp.are_equal %3737, %3730 : !pdl.type -> ^bb6941, ^bb6922
  ^bb6941:  // pred: ^bb6940
    %3738 = pdl_interp.get_value_type of %3735 : !pdl.type
    pdl_interp.are_equal %3738, %3730 : !pdl.type -> ^bb6942, ^bb6922
  ^bb6942:  // pred: ^bb6941
    pdl_interp.record_match @rewriters::@fp_cancel_sign_sub(%3735, %3732, %3690, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.addf"]), loc([%arg0, %3692, %3723]), root("arith.subf") -> ^bb6922
  ^bb6943:  // pred: ^bb6881
    pdl_interp.check_operand_count of %3692 is 1 -> ^bb6944, ^bb6867
  ^bb6944:  // pred: ^bb6943
    pdl_interp.check_result_count of %3692 is 1 -> ^bb6945, ^bb6867
  ^bb6945:  // pred: ^bb6944
    %3739 = pdl_interp.get_result 0 of %3692
    pdl_interp.is_not_null %3739 : !pdl.value -> ^bb6946, ^bb6867
  ^bb6946:  // pred: ^bb6945
    pdl_interp.are_equal %3739, %3691 : !pdl.value -> ^bb6947, ^bb6867
  ^bb6947:  // pred: ^bb6946
    %3740 = pdl_interp.get_operand 0 of %3692
    pdl_interp.is_not_null %3740 : !pdl.value -> ^bb6948, ^bb6867
  ^bb6948:  // pred: ^bb6947
    %3741 = pdl_interp.get_value_type of %3690 : !pdl.type
    pdl_interp.check_type %3741 is f32 -> ^bb6949, ^bb6867
  ^bb6949:  // pred: ^bb6948
    %3742 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3741, %3742 : !pdl.type -> ^bb6950, ^bb6867
  ^bb6950:  // pred: ^bb6949
    %3743 = pdl_interp.get_value_type of %3739 : !pdl.type
    pdl_interp.are_equal %3743, %3741 : !pdl.type -> ^bb6951, ^bb6867
  ^bb6951:  // pred: ^bb6950
    %3744 = pdl_interp.get_value_type of %3740 : !pdl.type
    pdl_interp.are_equal %3744, %3741 : !pdl.type -> ^bb6952, ^bb6867
  ^bb6952:  // pred: ^bb6951
    pdl_interp.record_match @rewriters::@add_flip_rev(%3690, %3740, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.addf"]), loc([%arg0, %3692]), root("arith.subf") -> ^bb6867
  ^bb6953:  // pred: ^bb6881
    pdl_interp.check_operand_count of %3692 is 2 -> ^bb6954, ^bb6867
  ^bb6954:  // pred: ^bb6953
    pdl_interp.check_result_count of %3692 is 1 -> ^bb6955, ^bb6867
  ^bb6955:  // pred: ^bb6954
    %3745 = pdl_interp.get_result 0 of %3692
    pdl_interp.is_not_null %3745 : !pdl.value -> ^bb6956, ^bb6867
  ^bb6956:  // pred: ^bb6955
    pdl_interp.are_equal %3745, %3691 : !pdl.value -> ^bb6957, ^bb6867
  ^bb6957:  // pred: ^bb6956
    %3746 = pdl_interp.get_operand 0 of %3692
    pdl_interp.is_not_null %3746 : !pdl.value -> ^bb6958, ^bb6867
  ^bb6958:  // pred: ^bb6957
    %3747 = pdl_interp.get_value_type of %3690 : !pdl.type
    pdl_interp.check_type %3747 is f32 -> ^bb6959, ^bb6867
  ^bb6959:  // pred: ^bb6958
    %3748 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3747, %3748 : !pdl.type -> ^bb6960, ^bb6867
  ^bb6960:  // pred: ^bb6959
    %3749 = pdl_interp.get_operand 1 of %3692
    pdl_interp.is_not_null %3749 : !pdl.value -> ^bb6961, ^bb6867
  ^bb6961:  // pred: ^bb6960
    %3750 = pdl_interp.get_value_type of %3745 : !pdl.type
    pdl_interp.are_equal %3750, %3747 : !pdl.type -> ^bb6962, ^bb6867
  ^bb6962:  // pred: ^bb6961
    %3751 = pdl_interp.get_value_type of %3746 : !pdl.type
    pdl_interp.are_equal %3751, %3747 : !pdl.type -> ^bb6963, ^bb6867
  ^bb6963:  // pred: ^bb6962
    %3752 = pdl_interp.get_value_type of %3749 : !pdl.type
    pdl_interp.are_equal %3752, %3747 : !pdl.type -> ^bb6964, ^bb6867
  ^bb6964:  // pred: ^bb6963
    pdl_interp.record_match @rewriters::@sub_to_fraction(%3690, %3749, %3746, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.subf", "arith.divf"]), loc([%arg0, %3692]), root("arith.subf") -> ^bb6867
  ^bb6965:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb6966, ^bb3
  ^bb6966:  // pred: ^bb6965
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb6967, ^bb3
  ^bb6967:  // pred: ^bb6966
    %3753 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3753 : !pdl.value -> ^bb6968, ^bb3
  ^bb6968:  // pred: ^bb6967
    %3754 = pdl_interp.get_operand 1 of %arg0
    %3755 = pdl_interp.get_defining_op of %3754 : !pdl.value
    pdl_interp.is_not_null %3755 : !pdl.operation -> ^bb6980, ^bb6969
  ^bb6969:  // 119 preds: ^bb6968, ^bb6980, ^bb6981, ^bb6982, ^bb6983, ^bb6984, ^bb6985, ^bb6986, ^bb6987, ^bb6988, ^bb6989, ^bb6990, ^bb6991, ^bb6992, ^bb6993, ^bb6994, ^bb6995, ^bb6996, ^bb6997, ^bb6998, ^bb6999, ^bb7000, ^bb7001, ^bb7002, ^bb7003, ^bb7004, ^bb7005, ^bb7006, ^bb7007, ^bb7008, ^bb7009, ^bb7010, ^bb7011, ^bb7012, ^bb7013, ^bb7014, ^bb7015, ^bb7016, ^bb7017, ^bb7018, ^bb7019, ^bb7020, ^bb7021, ^bb7022, ^bb7023, ^bb7024, ^bb7025, ^bb7026, ^bb7027, ^bb7028, ^bb7029, ^bb7030, ^bb7031, ^bb7032, ^bb7033, ^bb7034, ^bb7035, ^bb7036, ^bb7037, ^bb7038, ^bb7039, ^bb7040, ^bb7041, ^bb7042, ^bb7043, ^bb7044, ^bb7045, ^bb7046, ^bb7047, ^bb7048, ^bb7049, ^bb7050, ^bb7051, ^bb7052, ^bb7053, ^bb7054, ^bb7055, ^bb7056, ^bb7057, ^bb7058, ^bb7059, ^bb7060, ^bb7061, ^bb7062, ^bb7063, ^bb7064, ^bb7065, ^bb7066, ^bb7067, ^bb7068, ^bb7069, ^bb7071, ^bb7072, ^bb7073, ^bb7074, ^bb7075, ^bb7076, ^bb7077, ^bb7078, ^bb7079, ^bb7080, ^bb7081, ^bb7082, ^bb7083, ^bb7084, ^bb7085, ^bb7086, ^bb7087, ^bb7088, ^bb7089, ^bb7090, ^bb7091, ^bb7092, ^bb7093, ^bb7094, ^bb7095, ^bb7096, ^bb7097, ^bb7099
    %3756 = pdl_interp.get_value_type of %3753 : !pdl.type
    pdl_interp.check_type %3756 is f32 -> ^bb6977, ^bb6970
  ^bb6970:  // 4 preds: ^bb6969, ^bb6977, ^bb6978, ^bb6979
    %3757 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %3757 : !pdl.value -> ^bb6971, ^bb3
  ^bb6971:  // pred: ^bb6970
    %3758 = pdl_interp.get_value_type of %3753 : !pdl.type
    pdl_interp.check_type %3758 is f32 -> ^bb6972, ^bb3
  ^bb6972:  // pred: ^bb6971
    %3759 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3758, %3759 : !pdl.type -> ^bb6973, ^bb3
  ^bb6973:  // pred: ^bb6972
    %3760 = pdl_interp.get_value_type of %3757 : !pdl.type
    pdl_interp.are_equal %3758, %3760 : !pdl.type -> ^bb6974, ^bb3
  ^bb6974:  // pred: ^bb6973
    pdl_interp.record_match @rewriters::@frac_2neg(%3753, %3757, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "arith.negf", "arith.divf"]), loc([%arg0]), root("arith.divf") -> ^bb6975
  ^bb6975:  // pred: ^bb6974
    pdl_interp.record_match @rewriters::@div_flip(%3757, %3753, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "arith.divf"]), loc([%arg0]), root("arith.divf") -> ^bb6976
  ^bb6976:  // pred: ^bb6975
    pdl_interp.record_match @rewriters::@mult_flip(%3757, %3753, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "arith.mulf"]), loc([%arg0]), root("arith.divf") -> ^bb3
  ^bb6977:  // pred: ^bb6969
    %3761 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3756, %3761 : !pdl.type -> ^bb6978, ^bb6970
  ^bb6978:  // pred: ^bb6977
    %3762 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.are_equal %3753, %3762 : !pdl.value -> ^bb6979, ^bb6970
  ^bb6979:  // pred: ^bb6978
    pdl_interp.record_match @rewriters::@mul_inverses(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0]), root("arith.divf") -> ^bb6970
  ^bb6980:  // pred: ^bb6968
    pdl_interp.is_not_null %3754 : !pdl.value -> ^bb6981, ^bb6969
  ^bb6981:  // pred: ^bb6980
    pdl_interp.switch_operation_name of %3755 to ["arith.mulf", "arith.divf", "arith.constant", "arith.negf", "math.absf", "math.sqrt"](^bb6982, ^bb6994, ^bb7006, ^bb7016, ^bb7026, ^bb7035) -> ^bb6969
  ^bb6982:  // pred: ^bb6981
    pdl_interp.check_operand_count of %3755 is 2 -> ^bb6983, ^bb6969
  ^bb6983:  // pred: ^bb6982
    pdl_interp.check_result_count of %3755 is 1 -> ^bb6984, ^bb6969
  ^bb6984:  // pred: ^bb6983
    %3763 = pdl_interp.get_result 0 of %3755
    pdl_interp.is_not_null %3763 : !pdl.value -> ^bb6985, ^bb6969
  ^bb6985:  // pred: ^bb6984
    pdl_interp.are_equal %3763, %3754 : !pdl.value -> ^bb6986, ^bb6969
  ^bb6986:  // pred: ^bb6985
    %3764 = pdl_interp.get_operand 0 of %3755
    pdl_interp.is_not_null %3764 : !pdl.value -> ^bb6987, ^bb6969
  ^bb6987:  // pred: ^bb6986
    %3765 = pdl_interp.get_value_type of %3753 : !pdl.type
    pdl_interp.check_type %3765 is f32 -> ^bb6988, ^bb6969
  ^bb6988:  // pred: ^bb6987
    %3766 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3765, %3766 : !pdl.type -> ^bb6989, ^bb6969
  ^bb6989:  // pred: ^bb6988
    %3767 = pdl_interp.get_operand 1 of %3755
    pdl_interp.is_not_null %3767 : !pdl.value -> ^bb6990, ^bb6969
  ^bb6990:  // pred: ^bb6989
    %3768 = pdl_interp.get_value_type of %3763 : !pdl.type
    pdl_interp.are_equal %3768, %3765 : !pdl.type -> ^bb6991, ^bb6969
  ^bb6991:  // pred: ^bb6990
    %3769 = pdl_interp.get_value_type of %3764 : !pdl.type
    pdl_interp.are_equal %3769, %3765 : !pdl.type -> ^bb6992, ^bb6969
  ^bb6992:  // pred: ^bb6991
    %3770 = pdl_interp.get_value_type of %3767 : !pdl.type
    pdl_interp.are_equal %3770, %3765 : !pdl.type -> ^bb6993, ^bb6969
  ^bb6993:  // pred: ^bb6992
    pdl_interp.record_match @rewriters::@associate_divrmul(%3753, %3764, %3767, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.divf"]), loc([%arg0, %3755]), root("arith.divf") -> ^bb6969
  ^bb6994:  // pred: ^bb6981
    pdl_interp.check_operand_count of %3755 is 2 -> ^bb6995, ^bb6969
  ^bb6995:  // pred: ^bb6994
    pdl_interp.check_result_count of %3755 is 1 -> ^bb6996, ^bb6969
  ^bb6996:  // pred: ^bb6995
    %3771 = pdl_interp.get_result 0 of %3755
    pdl_interp.is_not_null %3771 : !pdl.value -> ^bb6997, ^bb6969
  ^bb6997:  // pred: ^bb6996
    pdl_interp.are_equal %3771, %3754 : !pdl.value -> ^bb6998, ^bb6969
  ^bb6998:  // pred: ^bb6997
    %3772 = pdl_interp.get_operand 0 of %3755
    pdl_interp.is_not_null %3772 : !pdl.value -> ^bb6999, ^bb6969
  ^bb6999:  // pred: ^bb6998
    %3773 = pdl_interp.get_value_type of %3753 : !pdl.type
    pdl_interp.check_type %3773 is f32 -> ^bb7000, ^bb6969
  ^bb7000:  // pred: ^bb6999
    %3774 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3773, %3774 : !pdl.type -> ^bb7001, ^bb6969
  ^bb7001:  // pred: ^bb7000
    %3775 = pdl_interp.get_operand 1 of %3755
    pdl_interp.is_not_null %3775 : !pdl.value -> ^bb7002, ^bb6969
  ^bb7002:  // pred: ^bb7001
    %3776 = pdl_interp.get_value_type of %3771 : !pdl.type
    pdl_interp.are_equal %3776, %3773 : !pdl.type -> ^bb7003, ^bb6969
  ^bb7003:  // pred: ^bb7002
    %3777 = pdl_interp.get_value_type of %3772 : !pdl.type
    pdl_interp.are_equal %3777, %3773 : !pdl.type -> ^bb7004, ^bb6969
  ^bb7004:  // pred: ^bb7003
    %3778 = pdl_interp.get_value_type of %3775 : !pdl.type
    pdl_interp.are_equal %3778, %3773 : !pdl.type -> ^bb7005, ^bb6969
  ^bb7005:  // pred: ^bb7004
    pdl_interp.record_match @rewriters::@associate_divrdiv(%3753, %3772, %3775, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.mulf"]), loc([%arg0, %3755]), root("arith.divf") -> ^bb6969
  ^bb7006:  // pred: ^bb6981
    pdl_interp.check_operand_count of %3755 is 0 -> ^bb7007, ^bb6969
  ^bb7007:  // pred: ^bb7006
    pdl_interp.check_result_count of %3755 is 1 -> ^bb7008, ^bb6969
  ^bb7008:  // pred: ^bb7007
    %3779 = pdl_interp.get_result 0 of %3755
    pdl_interp.is_not_null %3779 : !pdl.value -> ^bb7009, ^bb6969
  ^bb7009:  // pred: ^bb7008
    pdl_interp.are_equal %3779, %3754 : !pdl.value -> ^bb7010, ^bb6969
  ^bb7010:  // pred: ^bb7009
    %3780 = pdl_interp.get_value_type of %3753 : !pdl.type
    pdl_interp.check_type %3780 is f32 -> ^bb7011, ^bb6969
  ^bb7011:  // pred: ^bb7010
    %3781 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3780, %3781 : !pdl.type -> ^bb7012, ^bb6969
  ^bb7012:  // pred: ^bb7011
    %3782 = pdl_interp.get_value_type of %3779 : !pdl.type
    pdl_interp.are_equal %3782, %3780 : !pdl.type -> ^bb7013, ^bb6969
  ^bb7013:  // pred: ^bb7012
    %3783 = pdl_interp.get_attribute "value" of %3755
    pdl_interp.is_not_null %3783 : !pdl.attribute -> ^bb7014, ^bb6969
  ^bb7014:  // pred: ^bb7013
    pdl_interp.check_attribute %3783 is 1.000000e+00 : f32 -> ^bb7015, ^bb6969
  ^bb7015:  // pred: ^bb7014
    pdl_interp.record_match @rewriters::@div_rgt_identity(%3753, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %3755]), root("arith.divf") -> ^bb6969
  ^bb7016:  // pred: ^bb6981
    pdl_interp.check_operand_count of %3755 is 1 -> ^bb7017, ^bb6969
  ^bb7017:  // pred: ^bb7016
    pdl_interp.check_result_count of %3755 is 1 -> ^bb7018, ^bb6969
  ^bb7018:  // pred: ^bb7017
    %3784 = pdl_interp.get_result 0 of %3755
    pdl_interp.is_not_null %3784 : !pdl.value -> ^bb7019, ^bb6969
  ^bb7019:  // pred: ^bb7018
    pdl_interp.are_equal %3784, %3754 : !pdl.value -> ^bb7020, ^bb6969
  ^bb7020:  // pred: ^bb7019
    %3785 = pdl_interp.get_operand 0 of %3755
    pdl_interp.is_not_null %3785 : !pdl.value -> ^bb7021, ^bb6969
  ^bb7021:  // pred: ^bb7020
    %3786 = pdl_interp.get_value_type of %3753 : !pdl.type
    pdl_interp.check_type %3786 is f32 -> ^bb7022, ^bb6969
  ^bb7022:  // pred: ^bb7021
    %3787 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3786, %3787 : !pdl.type -> ^bb7023, ^bb6969
  ^bb7023:  // pred: ^bb7022
    %3788 = pdl_interp.get_value_type of %3784 : !pdl.type
    pdl_interp.are_equal %3788, %3786 : !pdl.type -> ^bb7024, ^bb6969
  ^bb7024:  // pred: ^bb7023
    %3789 = pdl_interp.get_value_type of %3785 : !pdl.type
    pdl_interp.are_equal %3789, %3786 : !pdl.type -> ^bb7025, ^bb6969
  ^bb7025:  // pred: ^bb7024
    pdl_interp.record_match @rewriters::@distribute_frac_neg2(%3753, %3785, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.divf", "arith.negf"]), loc([%arg0, %3755]), root("arith.divf") -> ^bb6969
  ^bb7026:  // pred: ^bb6981
    pdl_interp.check_operand_count of %3755 is 1 -> ^bb7027, ^bb6969
  ^bb7027:  // pred: ^bb7026
    pdl_interp.check_result_count of %3755 is 1 -> ^bb7028, ^bb6969
  ^bb7028:  // pred: ^bb7027
    %3790 = pdl_interp.get_result 0 of %3755
    pdl_interp.is_not_null %3790 : !pdl.value -> ^bb7029, ^bb6969
  ^bb7029:  // pred: ^bb7028
    pdl_interp.are_equal %3790, %3754 : !pdl.value -> ^bb7030, ^bb6969
  ^bb7030:  // pred: ^bb7029
    %3791 = pdl_interp.get_value_type of %3753 : !pdl.type
    pdl_interp.check_type %3791 is f32 -> ^bb7031, ^bb6969
  ^bb7031:  // pred: ^bb7030
    %3792 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3791, %3792 : !pdl.type -> ^bb7032, ^bb6969
  ^bb7032:  // pred: ^bb7031
    %3793 = pdl_interp.get_value_type of %3790 : !pdl.type
    pdl_interp.are_equal %3793, %3791 : !pdl.type -> ^bb7033, ^bb6969
  ^bb7033:  // pred: ^bb7032
    %3794 = pdl_interp.get_operand 0 of %3755
    pdl_interp.are_equal %3794, %3753 : !pdl.value -> ^bb7034, ^bb6969
  ^bb7034:  // pred: ^bb7033
    pdl_interp.record_match @rewriters::@fabs_rhs_div(%3753, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.copysign"]), loc([%arg0, %3755]), root("arith.divf") -> ^bb6969
  ^bb7035:  // pred: ^bb6981
    pdl_interp.check_operand_count of %3755 is 1 -> ^bb7036, ^bb6969
  ^bb7036:  // pred: ^bb7035
    pdl_interp.check_result_count of %3755 is 1 -> ^bb7037, ^bb6969
  ^bb7037:  // pred: ^bb7036
    %3795 = pdl_interp.get_result 0 of %3755
    pdl_interp.is_not_null %3795 : !pdl.value -> ^bb7038, ^bb6969
  ^bb7038:  // pred: ^bb7037
    pdl_interp.are_equal %3795, %3754 : !pdl.value -> ^bb7039, ^bb6969
  ^bb7039:  // pred: ^bb7038
    %3796 = pdl_interp.get_operand 0 of %3755
    pdl_interp.is_not_null %3796 : !pdl.value -> ^bb7040, ^bb6969
  ^bb7040:  // pred: ^bb7039
    %3797 = pdl_interp.get_defining_op of %3796 : !pdl.value
    pdl_interp.is_not_null %3797 : !pdl.operation -> ^bb7041, ^bb6969
  ^bb7041:  // pred: ^bb7040
    %3798 = pdl_interp.get_value_type of %3753 : !pdl.type
    pdl_interp.check_type %3798 is f32 -> ^bb7042, ^bb6969
  ^bb7042:  // pred: ^bb7041
    %3799 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3798, %3799 : !pdl.type -> ^bb7043, ^bb6969
  ^bb7043:  // pred: ^bb7042
    pdl_interp.switch_operation_name of %3797 to ["arith.subf", "arith.addf"](^bb7044, ^bb7072) -> ^bb6969
  ^bb7044:  // pred: ^bb7043
    pdl_interp.check_operand_count of %3797 is 2 -> ^bb7045, ^bb6969
  ^bb7045:  // pred: ^bb7044
    pdl_interp.check_result_count of %3797 is 1 -> ^bb7046, ^bb6969
  ^bb7046:  // pred: ^bb7045
    %3800 = pdl_interp.get_result 0 of %3797
    pdl_interp.is_not_null %3800 : !pdl.value -> ^bb7047, ^bb6969
  ^bb7047:  // pred: ^bb7046
    pdl_interp.are_equal %3800, %3796 : !pdl.value -> ^bb7048, ^bb6969
  ^bb7048:  // pred: ^bb7047
    %3801 = pdl_interp.get_value_type of %3795 : !pdl.type
    pdl_interp.are_equal %3801, %3798 : !pdl.type -> ^bb7049, ^bb6969
  ^bb7049:  // pred: ^bb7048
    %3802 = pdl_interp.get_operand 0 of %3797
    %3803 = pdl_interp.get_defining_op of %3802 : !pdl.value
    pdl_interp.is_not_null %3803 : !pdl.operation -> ^bb7050, ^bb6969
  ^bb7050:  // pred: ^bb7049
    pdl_interp.is_not_null %3802 : !pdl.value -> ^bb7051, ^bb6969
  ^bb7051:  // pred: ^bb7050
    pdl_interp.check_operation_name of %3803 is "arith.constant" -> ^bb7052, ^bb6969
  ^bb7052:  // pred: ^bb7051
    pdl_interp.check_operand_count of %3803 is 0 -> ^bb7053, ^bb6969
  ^bb7053:  // pred: ^bb7052
    pdl_interp.check_result_count of %3803 is 1 -> ^bb7054, ^bb6969
  ^bb7054:  // pred: ^bb7053
    %3804 = pdl_interp.get_result 0 of %3803
    pdl_interp.is_not_null %3804 : !pdl.value -> ^bb7055, ^bb6969
  ^bb7055:  // pred: ^bb7054
    pdl_interp.are_equal %3804, %3802 : !pdl.value -> ^bb7056, ^bb6969
  ^bb7056:  // pred: ^bb7055
    %3805 = pdl_interp.get_operand 1 of %3797
    %3806 = pdl_interp.get_defining_op of %3805 : !pdl.value
    pdl_interp.is_not_null %3806 : !pdl.operation -> ^bb7057, ^bb6969
  ^bb7057:  // pred: ^bb7056
    %3807 = pdl_interp.get_value_type of %3800 : !pdl.type
    pdl_interp.are_equal %3807, %3798 : !pdl.type -> ^bb7058, ^bb6969
  ^bb7058:  // pred: ^bb7057
    pdl_interp.is_not_null %3805 : !pdl.value -> ^bb7059, ^bb6969
  ^bb7059:  // pred: ^bb7058
    pdl_interp.check_operation_name of %3806 is "arith.mulf" -> ^bb7060, ^bb6969
  ^bb7060:  // pred: ^bb7059
    pdl_interp.check_operand_count of %3806 is 2 -> ^bb7061, ^bb6969
  ^bb7061:  // pred: ^bb7060
    pdl_interp.check_result_count of %3806 is 1 -> ^bb7062, ^bb6969
  ^bb7062:  // pred: ^bb7061
    %3808 = pdl_interp.get_attribute "value" of %3803
    pdl_interp.is_not_null %3808 : !pdl.attribute -> ^bb7063, ^bb6969
  ^bb7063:  // pred: ^bb7062
    pdl_interp.check_attribute %3808 is 1.000000e+00 : f32 -> ^bb7064, ^bb6969
  ^bb7064:  // pred: ^bb7063
    %3809 = pdl_interp.get_result 0 of %3806
    pdl_interp.is_not_null %3809 : !pdl.value -> ^bb7065, ^bb6969
  ^bb7065:  // pred: ^bb7064
    pdl_interp.are_equal %3809, %3805 : !pdl.value -> ^bb7066, ^bb6969
  ^bb7066:  // pred: ^bb7065
    %3810 = pdl_interp.get_operand 0 of %3806
    pdl_interp.are_equal %3810, %3753 : !pdl.value -> ^bb7067, ^bb6969
  ^bb7067:  // pred: ^bb7066
    %3811 = pdl_interp.get_operand 1 of %3806
    pdl_interp.are_equal %3811, %3753 : !pdl.value -> ^bb7068, ^bb6969
  ^bb7068:  // pred: ^bb7067
    %3812 = pdl_interp.get_value_type of %3804 : !pdl.type
    pdl_interp.are_equal %3812, %3798 : !pdl.type -> ^bb7069, ^bb6969
  ^bb7069:  // pred: ^bb7068
    %3813 = pdl_interp.get_value_type of %3809 : !pdl.type
    pdl_interp.are_equal %3813, %3798 : !pdl.type -> ^bb7070, ^bb6969
  ^bb7070:  // pred: ^bb7069
    pdl_interp.record_match @rewriters::@sinh_atanh_rev(%3753, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.atanh", "math.sinh"]), loc([%arg0, %3755, %3797, %3803, %3806]), root("arith.divf") -> ^bb7071
  ^bb7071:  // pred: ^bb7070
    pdl_interp.record_match @rewriters::@tan_asin_rev(%3753, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.asin", "math.tan"]), loc([%arg0, %3755, %3797, %3803, %3806]), root("arith.divf") -> ^bb6969
  ^bb7072:  // pred: ^bb7043
    pdl_interp.check_operand_count of %3797 is 2 -> ^bb7073, ^bb6969
  ^bb7073:  // pred: ^bb7072
    pdl_interp.check_result_count of %3797 is 1 -> ^bb7074, ^bb6969
  ^bb7074:  // pred: ^bb7073
    %3814 = pdl_interp.get_result 0 of %3797
    pdl_interp.is_not_null %3814 : !pdl.value -> ^bb7075, ^bb6969
  ^bb7075:  // pred: ^bb7074
    pdl_interp.are_equal %3814, %3796 : !pdl.value -> ^bb7076, ^bb6969
  ^bb7076:  // pred: ^bb7075
    %3815 = pdl_interp.get_value_type of %3795 : !pdl.type
    pdl_interp.are_equal %3815, %3798 : !pdl.type -> ^bb7077, ^bb6969
  ^bb7077:  // pred: ^bb7076
    %3816 = pdl_interp.get_operand 0 of %3797
    %3817 = pdl_interp.get_defining_op of %3816 : !pdl.value
    pdl_interp.is_not_null %3817 : !pdl.operation -> ^bb7078, ^bb6969
  ^bb7078:  // pred: ^bb7077
    pdl_interp.is_not_null %3816 : !pdl.value -> ^bb7079, ^bb6969
  ^bb7079:  // pred: ^bb7078
    pdl_interp.check_operation_name of %3817 is "arith.constant" -> ^bb7080, ^bb6969
  ^bb7080:  // pred: ^bb7079
    pdl_interp.check_operand_count of %3817 is 0 -> ^bb7081, ^bb6969
  ^bb7081:  // pred: ^bb7080
    pdl_interp.check_result_count of %3817 is 1 -> ^bb7082, ^bb6969
  ^bb7082:  // pred: ^bb7081
    %3818 = pdl_interp.get_result 0 of %3817
    pdl_interp.is_not_null %3818 : !pdl.value -> ^bb7083, ^bb6969
  ^bb7083:  // pred: ^bb7082
    pdl_interp.are_equal %3818, %3816 : !pdl.value -> ^bb7084, ^bb6969
  ^bb7084:  // pred: ^bb7083
    %3819 = pdl_interp.get_operand 1 of %3797
    %3820 = pdl_interp.get_defining_op of %3819 : !pdl.value
    pdl_interp.is_not_null %3820 : !pdl.operation -> ^bb7085, ^bb6969
  ^bb7085:  // pred: ^bb7084
    %3821 = pdl_interp.get_value_type of %3814 : !pdl.type
    pdl_interp.are_equal %3821, %3798 : !pdl.type -> ^bb7086, ^bb6969
  ^bb7086:  // pred: ^bb7085
    pdl_interp.is_not_null %3819 : !pdl.value -> ^bb7087, ^bb6969
  ^bb7087:  // pred: ^bb7086
    pdl_interp.check_operation_name of %3820 is "arith.mulf" -> ^bb7088, ^bb6969
  ^bb7088:  // pred: ^bb7087
    pdl_interp.check_operand_count of %3820 is 2 -> ^bb7089, ^bb6969
  ^bb7089:  // pred: ^bb7088
    pdl_interp.check_result_count of %3820 is 1 -> ^bb7090, ^bb6969
  ^bb7090:  // pred: ^bb7089
    %3822 = pdl_interp.get_attribute "value" of %3817
    pdl_interp.is_not_null %3822 : !pdl.attribute -> ^bb7091, ^bb6969
  ^bb7091:  // pred: ^bb7090
    pdl_interp.check_attribute %3822 is 1.000000e+00 : f32 -> ^bb7092, ^bb6969
  ^bb7092:  // pred: ^bb7091
    %3823 = pdl_interp.get_result 0 of %3820
    pdl_interp.is_not_null %3823 : !pdl.value -> ^bb7093, ^bb6969
  ^bb7093:  // pred: ^bb7092
    pdl_interp.are_equal %3823, %3819 : !pdl.value -> ^bb7094, ^bb6969
  ^bb7094:  // pred: ^bb7093
    %3824 = pdl_interp.get_operand 0 of %3820
    pdl_interp.are_equal %3824, %3753 : !pdl.value -> ^bb7095, ^bb6969
  ^bb7095:  // pred: ^bb7094
    %3825 = pdl_interp.get_operand 1 of %3820
    pdl_interp.are_equal %3825, %3753 : !pdl.value -> ^bb7096, ^bb6969
  ^bb7096:  // pred: ^bb7095
    %3826 = pdl_interp.get_value_type of %3818 : !pdl.type
    pdl_interp.are_equal %3826, %3798 : !pdl.type -> ^bb7097, ^bb6969
  ^bb7097:  // pred: ^bb7096
    %3827 = pdl_interp.get_value_type of %3823 : !pdl.type
    pdl_interp.are_equal %3827, %3798 : !pdl.type -> ^bb7098, ^bb6969
  ^bb7098:  // pred: ^bb7097
    pdl_interp.record_match @rewriters::@tanh_asinh_rev(%3753, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.asinh", "math.tanh"]), loc([%arg0, %3755, %3797, %3817, %3820]), root("arith.divf") -> ^bb7099
  ^bb7099:  // pred: ^bb7098
    pdl_interp.record_match @rewriters::@sin_atan_rev(%3753, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.atan", "math.sin"]), loc([%arg0, %3755, %3797, %3817, %3820]), root("arith.divf") -> ^bb6969
  ^bb7100:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 0 -> ^bb7101, ^bb3
  ^bb7101:  // pred: ^bb7100
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7102, ^bb3
  ^bb7102:  // pred: ^bb7101
    %3828 = pdl_interp.get_attribute "value" of %arg0
    pdl_interp.is_not_null %3828 : !pdl.attribute -> ^bb7103, ^bb3
  ^bb7103:  // pred: ^bb7102
    pdl_interp.switch_attribute %3828 to [2.000000e+00 : f32, 1.000000e+00 : f32, 0.000000e+00 : f32](^bb7104, ^bb7106, ^bb7109) -> ^bb3
  ^bb7104:  // pred: ^bb7103
    %3829 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.check_type %3829 is f32 -> ^bb7105, ^bb3
  ^bb7105:  // pred: ^bb7104
    pdl_interp.record_match @rewriters::@_2_split(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.constant", "arith.addf"]), loc([%arg0]), root("arith.constant") -> ^bb3
  ^bb7106:  // pred: ^bb7103
    %3830 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.check_type %3830 is f32 -> ^bb7107, ^bb3
  ^bb7107:  // pred: ^bb7106
    pdl_interp.record_match @rewriters::@cosh_0_rev(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.cosh"]), loc([%arg0]), root("arith.constant") -> ^bb7108
  ^bb7108:  // pred: ^bb7107
    pdl_interp.record_match @rewriters::@_1_exp(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.exp"]), loc([%arg0]), root("arith.constant") -> ^bb3
  ^bb7109:  // pred: ^bb7103
    %3831 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.check_type %3831 is f32 -> ^bb7110, ^bb3
  ^bb7110:  // pred: ^bb7109
    pdl_interp.record_match @rewriters::@sinh_0_rev(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.sinh"]), loc([%arg0]), root("arith.constant") -> ^bb3
  ^bb7111:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb7112, ^bb3
  ^bb7112:  // pred: ^bb7111
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7113, ^bb3
  ^bb7113:  // pred: ^bb7112
    %3832 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3832 : !pdl.value -> ^bb7114, ^bb3
  ^bb7114:  // pred: ^bb7113
    %3833 = pdl_interp.get_operand 1 of %arg0
    pdl_interp.is_not_null %3833 : !pdl.value -> ^bb7184, ^bb7115
  ^bb7115:  // 5 preds: ^bb7114, ^bb7184, ^bb7185, ^bb7186, ^bb7188
    %3834 = pdl_interp.get_operand 1 of %arg0
    %3835 = pdl_interp.get_defining_op of %3834 : !pdl.value
    pdl_interp.is_not_null %3835 : !pdl.operation -> ^bb7116, ^bb3
  ^bb7116:  // pred: ^bb7115
    pdl_interp.is_not_null %3834 : !pdl.value -> ^bb7117, ^bb3
  ^bb7117:  // pred: ^bb7116
    pdl_interp.switch_operation_name of %3835 to ["arith.constant", "arith.addf", "arith.negf", "arith.subf"](^bb7118, ^bb7135, ^bb7162, ^bb7172) -> ^bb3
  ^bb7118:  // pred: ^bb7117
    pdl_interp.check_operand_count of %3835 is 0 -> ^bb7119, ^bb3
  ^bb7119:  // pred: ^bb7118
    pdl_interp.check_result_count of %3835 is 1 -> ^bb7120, ^bb3
  ^bb7120:  // pred: ^bb7119
    %3836 = pdl_interp.get_result 0 of %3835
    pdl_interp.is_not_null %3836 : !pdl.value -> ^bb7121, ^bb3
  ^bb7121:  // pred: ^bb7120
    pdl_interp.are_equal %3836, %3834 : !pdl.value -> ^bb7122, ^bb3
  ^bb7122:  // pred: ^bb7121
    %3837 = pdl_interp.get_value_type of %3832 : !pdl.type
    pdl_interp.check_type %3837 is f32 -> ^bb7123, ^bb3
  ^bb7123:  // pred: ^bb7122
    %3838 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3837, %3838 : !pdl.type -> ^bb7124, ^bb3
  ^bb7124:  // pred: ^bb7123
    %3839 = pdl_interp.get_value_type of %3836 : !pdl.type
    pdl_interp.are_equal %3839, %3837 : !pdl.type -> ^bb7125, ^bb3
  ^bb7125:  // pred: ^bb7124
    %3840 = pdl_interp.get_attribute "value" of %3835
    pdl_interp.is_not_null %3840 : !pdl.attribute -> ^bb7126, ^bb3
  ^bb7126:  // pred: ^bb7125
    pdl_interp.switch_attribute %3840 to [3.000000e+00 : f32, -1.000000e+00 : f32, 1.000000e+00 : f32, 0.000000e+00 : f32, 5.000000e-01 : f32, 2.000000e+00 : f32, 0.333333343 : f32](^bb7127, ^bb7129, ^bb7130, ^bb7131, ^bb7132, ^bb7133, ^bb7134) -> ^bb3
  ^bb7127:  // pred: ^bb7126
    pdl_interp.record_match @rewriters::@unpow3(%3832, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf"]), loc([%arg0, %3835]), root("math.powf") -> ^bb7128
  ^bb7128:  // pred: ^bb7127
    pdl_interp.record_match @rewriters::@cube_mult(%3832, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.mulf"]), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7129:  // pred: ^bb7126
    pdl_interp.record_match @rewriters::@unpow_1(%3832, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf"]), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7130:  // pred: ^bb7126
    pdl_interp.record_match @rewriters::@unpow1(%3832, %arg0 : !pdl.value, !pdl.operation) : benefit(1), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7131:  // pred: ^bb7126
    pdl_interp.record_match @rewriters::@unpow0(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant"]), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7132:  // pred: ^bb7126
    pdl_interp.record_match @rewriters::@unpow1div2(%3832, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sqrt"]), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7133:  // pred: ^bb7126
    pdl_interp.record_match @rewriters::@unpow2(%3832, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf"]), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7134:  // pred: ^bb7126
    pdl_interp.record_match @rewriters::@unpow1div3(%3832, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cbrt"]), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7135:  // pred: ^bb7117
    pdl_interp.check_operand_count of %3835 is 2 -> ^bb7136, ^bb3
  ^bb7136:  // pred: ^bb7135
    pdl_interp.check_result_count of %3835 is 1 -> ^bb7137, ^bb3
  ^bb7137:  // pred: ^bb7136
    %3841 = pdl_interp.get_result 0 of %3835
    pdl_interp.is_not_null %3841 : !pdl.value -> ^bb7138, ^bb3
  ^bb7138:  // pred: ^bb7137
    pdl_interp.are_equal %3841, %3834 : !pdl.value -> ^bb7139, ^bb3
  ^bb7139:  // pred: ^bb7138
    %3842 = pdl_interp.get_operand 0 of %3835
    pdl_interp.is_not_null %3842 : !pdl.value -> ^bb7140, ^bb3
  ^bb7140:  // pred: ^bb7139
    %3843 = pdl_interp.get_operand 1 of %3835
    %3844 = pdl_interp.get_defining_op of %3843 : !pdl.value
    pdl_interp.is_not_null %3844 : !pdl.operation -> ^bb7148, ^bb7141
  ^bb7141:  // 15 preds: ^bb7140, ^bb7148, ^bb7149, ^bb7150, ^bb7151, ^bb7152, ^bb7153, ^bb7154, ^bb7155, ^bb7156, ^bb7157, ^bb7158, ^bb7159, ^bb7160, ^bb7161
    %3845 = pdl_interp.get_value_type of %3832 : !pdl.type
    pdl_interp.check_type %3845 is f32 -> ^bb7142, ^bb3
  ^bb7142:  // pred: ^bb7141
    %3846 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3845, %3846 : !pdl.type -> ^bb7143, ^bb3
  ^bb7143:  // pred: ^bb7142
    %3847 = pdl_interp.get_operand 1 of %3835
    pdl_interp.is_not_null %3847 : !pdl.value -> ^bb7144, ^bb3
  ^bb7144:  // pred: ^bb7143
    %3848 = pdl_interp.get_value_type of %3841 : !pdl.type
    pdl_interp.are_equal %3848, %3845 : !pdl.type -> ^bb7145, ^bb3
  ^bb7145:  // pred: ^bb7144
    %3849 = pdl_interp.get_value_type of %3842 : !pdl.type
    pdl_interp.are_equal %3849, %3845 : !pdl.type -> ^bb7146, ^bb3
  ^bb7146:  // pred: ^bb7145
    %3850 = pdl_interp.get_value_type of %3847 : !pdl.type
    pdl_interp.are_equal %3850, %3845 : !pdl.type -> ^bb7147, ^bb3
  ^bb7147:  // pred: ^bb7146
    pdl_interp.record_match @rewriters::@pow_add(%3832, %3842, %3847, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.powf", "math.powf", "arith.mulf"]), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7148:  // pred: ^bb7140
    %3851 = pdl_interp.get_value_type of %3832 : !pdl.type
    pdl_interp.check_type %3851 is f32 -> ^bb7149, ^bb7141
  ^bb7149:  // pred: ^bb7148
    %3852 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3851, %3852 : !pdl.type -> ^bb7150, ^bb7141
  ^bb7150:  // pred: ^bb7149
    pdl_interp.is_not_null %3843 : !pdl.value -> ^bb7151, ^bb7141
  ^bb7151:  // pred: ^bb7150
    pdl_interp.check_operation_name of %3844 is "arith.constant" -> ^bb7152, ^bb7141
  ^bb7152:  // pred: ^bb7151
    pdl_interp.check_operand_count of %3844 is 0 -> ^bb7153, ^bb7141
  ^bb7153:  // pred: ^bb7152
    pdl_interp.check_result_count of %3844 is 1 -> ^bb7154, ^bb7141
  ^bb7154:  // pred: ^bb7153
    %3853 = pdl_interp.get_result 0 of %3844
    pdl_interp.is_not_null %3853 : !pdl.value -> ^bb7155, ^bb7141
  ^bb7155:  // pred: ^bb7154
    pdl_interp.are_equal %3853, %3843 : !pdl.value -> ^bb7156, ^bb7141
  ^bb7156:  // pred: ^bb7155
    %3854 = pdl_interp.get_value_type of %3841 : !pdl.type
    pdl_interp.are_equal %3854, %3851 : !pdl.type -> ^bb7157, ^bb7141
  ^bb7157:  // pred: ^bb7156
    %3855 = pdl_interp.get_value_type of %3842 : !pdl.type
    pdl_interp.are_equal %3855, %3851 : !pdl.type -> ^bb7158, ^bb7141
  ^bb7158:  // pred: ^bb7157
    %3856 = pdl_interp.get_attribute "value" of %3844
    pdl_interp.is_not_null %3856 : !pdl.attribute -> ^bb7159, ^bb7141
  ^bb7159:  // pred: ^bb7158
    pdl_interp.check_attribute %3856 is 1.000000e+00 : f32 -> ^bb7160, ^bb7141
  ^bb7160:  // pred: ^bb7159
    %3857 = pdl_interp.get_value_type of %3853 : !pdl.type
    pdl_interp.are_equal %3857, %3851 : !pdl.type -> ^bb7161, ^bb7141
  ^bb7161:  // pred: ^bb7160
    pdl_interp.record_match @rewriters::@pow_plus_rev(%3832, %3842, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.powf", "arith.mulf"]), loc([%arg0, %3835, %3844]), root("math.powf") -> ^bb7141
  ^bb7162:  // pred: ^bb7117
    pdl_interp.check_operand_count of %3835 is 1 -> ^bb7163, ^bb3
  ^bb7163:  // pred: ^bb7162
    pdl_interp.check_result_count of %3835 is 1 -> ^bb7164, ^bb3
  ^bb7164:  // pred: ^bb7163
    %3858 = pdl_interp.get_result 0 of %3835
    pdl_interp.is_not_null %3858 : !pdl.value -> ^bb7165, ^bb3
  ^bb7165:  // pred: ^bb7164
    pdl_interp.are_equal %3858, %3834 : !pdl.value -> ^bb7166, ^bb3
  ^bb7166:  // pred: ^bb7165
    %3859 = pdl_interp.get_operand 0 of %3835
    pdl_interp.is_not_null %3859 : !pdl.value -> ^bb7167, ^bb3
  ^bb7167:  // pred: ^bb7166
    %3860 = pdl_interp.get_value_type of %3832 : !pdl.type
    pdl_interp.check_type %3860 is f32 -> ^bb7168, ^bb3
  ^bb7168:  // pred: ^bb7167
    %3861 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3860, %3861 : !pdl.type -> ^bb7169, ^bb3
  ^bb7169:  // pred: ^bb7168
    %3862 = pdl_interp.get_value_type of %3858 : !pdl.type
    pdl_interp.are_equal %3862, %3860 : !pdl.type -> ^bb7170, ^bb3
  ^bb7170:  // pred: ^bb7169
    %3863 = pdl_interp.get_value_type of %3859 : !pdl.type
    pdl_interp.are_equal %3863, %3860 : !pdl.type -> ^bb7171, ^bb3
  ^bb7171:  // pred: ^bb7170
    pdl_interp.record_match @rewriters::@pow_neg(%3832, %3859, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf", "arith.divf"]), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7172:  // pred: ^bb7117
    pdl_interp.check_operand_count of %3835 is 2 -> ^bb7173, ^bb3
  ^bb7173:  // pred: ^bb7172
    pdl_interp.check_result_count of %3835 is 1 -> ^bb7174, ^bb3
  ^bb7174:  // pred: ^bb7173
    %3864 = pdl_interp.get_result 0 of %3835
    pdl_interp.is_not_null %3864 : !pdl.value -> ^bb7175, ^bb3
  ^bb7175:  // pred: ^bb7174
    pdl_interp.are_equal %3864, %3834 : !pdl.value -> ^bb7176, ^bb3
  ^bb7176:  // pred: ^bb7175
    %3865 = pdl_interp.get_operand 0 of %3835
    pdl_interp.is_not_null %3865 : !pdl.value -> ^bb7177, ^bb3
  ^bb7177:  // pred: ^bb7176
    %3866 = pdl_interp.get_value_type of %3832 : !pdl.type
    pdl_interp.check_type %3866 is f32 -> ^bb7178, ^bb3
  ^bb7178:  // pred: ^bb7177
    %3867 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3866, %3867 : !pdl.type -> ^bb7179, ^bb3
  ^bb7179:  // pred: ^bb7178
    %3868 = pdl_interp.get_operand 1 of %3835
    pdl_interp.is_not_null %3868 : !pdl.value -> ^bb7180, ^bb3
  ^bb7180:  // pred: ^bb7179
    %3869 = pdl_interp.get_value_type of %3864 : !pdl.type
    pdl_interp.are_equal %3869, %3866 : !pdl.type -> ^bb7181, ^bb3
  ^bb7181:  // pred: ^bb7180
    %3870 = pdl_interp.get_value_type of %3865 : !pdl.type
    pdl_interp.are_equal %3870, %3866 : !pdl.type -> ^bb7182, ^bb3
  ^bb7182:  // pred: ^bb7181
    %3871 = pdl_interp.get_value_type of %3868 : !pdl.type
    pdl_interp.are_equal %3871, %3866 : !pdl.type -> ^bb7183, ^bb3
  ^bb7183:  // pred: ^bb7182
    pdl_interp.record_match @rewriters::@pow_sub(%3832, %3865, %3868, %arg0 : !pdl.value, !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.powf", "math.powf", "arith.divf"]), loc([%arg0, %3835]), root("math.powf") -> ^bb3
  ^bb7184:  // pred: ^bb7114
    %3872 = pdl_interp.get_value_type of %3832 : !pdl.type
    pdl_interp.check_type %3872 is f32 -> ^bb7185, ^bb7115
  ^bb7185:  // pred: ^bb7184
    %3873 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3872, %3873 : !pdl.type -> ^bb7186, ^bb7115
  ^bb7186:  // pred: ^bb7185
    %3874 = pdl_interp.get_value_type of %3833 : !pdl.type
    pdl_interp.are_equal %3872, %3874 : !pdl.type -> ^bb7187, ^bb7115
  ^bb7187:  // pred: ^bb7186
    pdl_interp.record_match @rewriters::@pow_to_exp(%3832, %3833, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.log", "arith.mulf", "math.exp"]), loc([%arg0]), root("math.powf") -> ^bb7188
  ^bb7188:  // pred: ^bb7187
    pdl_interp.record_match @rewriters::@sqr_pow(%3833, %3832, %arg0 : !pdl.value, !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.divf", "math.powf", "arith.constant", "arith.divf", "math.powf", "arith.mulf"]), loc([%arg0]), root("math.powf") -> ^bb7115
  ^bb7189:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7190, ^bb3
  ^bb7190:  // pred: ^bb7189
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7191, ^bb3
  ^bb7191:  // pred: ^bb7190
    %3875 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3875 : !pdl.value -> ^bb7192, ^bb3
  ^bb7192:  // pred: ^bb7191
    %3876 = pdl_interp.get_value_type of %3875 : !pdl.type
    pdl_interp.check_type %3876 is f32 -> ^bb7193, ^bb3
  ^bb7193:  // pred: ^bb7192
    %3877 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3876, %3877 : !pdl.type -> ^bb7194, ^bb3
  ^bb7194:  // pred: ^bb7193
    pdl_interp.record_match @rewriters::@neg_fabs(%3875, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.absf"]), loc([%arg0]), root("math.absf") -> ^bb7195
  ^bb7195:  // pred: ^bb7194
    pdl_interp.record_match @rewriters::@rem_sqrt_square_rev(%3875, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "math.sqrt"]), loc([%arg0]), root("math.absf") -> ^bb3
  ^bb7196:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7197, ^bb3
  ^bb7197:  // pred: ^bb7196
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7198, ^bb3
  ^bb7198:  // pred: ^bb7197
    %3878 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3878 : !pdl.value -> ^bb7199, ^bb3
  ^bb7199:  // pred: ^bb7198
    %3879 = pdl_interp.get_value_type of %3878 : !pdl.type
    pdl_interp.check_type %3879 is f32 -> ^bb7200, ^bb3
  ^bb7200:  // pred: ^bb7199
    %3880 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3879, %3880 : !pdl.type -> ^bb7201, ^bb3
  ^bb7201:  // pred: ^bb7200
    pdl_interp.record_match @rewriters::@pow1div2(%3878, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf"]), loc([%arg0]), root("math.sqrt") -> ^bb7202
  ^bb7202:  // pred: ^bb7201
    pdl_interp.record_match @rewriters::@sqrt_fabs_rev(%3878, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sqrt", "math.absf"]), loc([%arg0]), root("math.sqrt") -> ^bb3
  ^bb7203:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 0 -> ^bb7204, ^bb3
  ^bb7204:  // pred: ^bb7203
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7205, ^bb3
  ^bb7205:  // pred: ^bb7204
    %3881 = pdl_interp.get_attribute "value" of %arg0
    pdl_interp.is_not_null %3881 : !pdl.attribute -> ^bb7206, ^bb3
  ^bb7206:  // pred: ^bb7205
    pdl_interp.check_attribute %3881 is #math_xdsl<constant e> -> ^bb7207, ^bb3
  ^bb7207:  // pred: ^bb7206
    %3882 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.check_type %3882 is f32 -> ^bb7208, ^bb3
  ^bb7208:  // pred: ^bb7207
    pdl_interp.record_match @rewriters::@e_exp_1(%arg0 : !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.exp"]), loc([%arg0]), root("math_xdsl.constant") -> ^bb3
  ^bb7209:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7210, ^bb3
  ^bb7210:  // pred: ^bb7209
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7211, ^bb3
  ^bb7211:  // pred: ^bb7210
    %3883 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3883 : !pdl.value -> ^bb7212, ^bb3
  ^bb7212:  // pred: ^bb7211
    %3884 = pdl_interp.get_value_type of %3883 : !pdl.type
    pdl_interp.check_type %3884 is f32 -> ^bb7213, ^bb3
  ^bb7213:  // pred: ^bb7212
    %3885 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3884, %3885 : !pdl.type -> ^bb7214, ^bb3
  ^bb7214:  // pred: ^bb7213
    pdl_interp.record_match @rewriters::@sinh_add_cosh_rev(%3883, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.cosh", "math.sinh", "arith.addf"]), loc([%arg0]), root("math.exp") -> ^bb7215
  ^bb7215:  // pred: ^bb7214
    pdl_interp.record_match @rewriters::@exp_fabs(%3883, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "math.absf"]), loc([%arg0]), root("math.exp") -> ^bb3
  ^bb7216:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7217, ^bb3
  ^bb7217:  // pred: ^bb7216
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7218, ^bb3
  ^bb7218:  // pred: ^bb7217
    %3886 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3886 : !pdl.value -> ^bb7219, ^bb3
  ^bb7219:  // pred: ^bb7218
    %3887 = pdl_interp.get_value_type of %3886 : !pdl.type
    pdl_interp.check_type %3887 is f32 -> ^bb7220, ^bb3
  ^bb7220:  // pred: ^bb7219
    %3888 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3887, %3888 : !pdl.type -> ^bb7221, ^bb3
  ^bb7221:  // pred: ^bb7220
    pdl_interp.record_match @rewriters::@pow1div3(%3886, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "math.powf"]), loc([%arg0]), root("math.cbrt") -> ^bb3
  ^bb7222:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7223, ^bb3
  ^bb7223:  // pred: ^bb7222
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7224, ^bb3
  ^bb7224:  // pred: ^bb7223
    %3889 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3889 : !pdl.value -> ^bb7225, ^bb3
  ^bb7225:  // pred: ^bb7224
    %3890 = pdl_interp.get_value_type of %3889 : !pdl.type
    pdl_interp.check_type %3890 is f32 -> ^bb7226, ^bb3
  ^bb7226:  // pred: ^bb7225
    %3891 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3890, %3891 : !pdl.type -> ^bb7227, ^bb3
  ^bb7227:  // pred: ^bb7226
    pdl_interp.record_match @rewriters::@sin_addPIdiv2_rev(%3889, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.constant", "arith.divf", "arith.addf", "math.sin"]), loc([%arg0]), root("math.cos") -> ^bb7228
  ^bb7228:  // pred: ^bb7227
    pdl_interp.record_match @rewriters::@cos_fabs_rev(%3889, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.absf", "math.cos"]), loc([%arg0]), root("math.cos") -> ^bb7229
  ^bb7229:  // pred: ^bb7228
    pdl_interp.record_match @rewriters::@cos_neg_rev(%3889, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.cos"]), loc([%arg0]), root("math.cos") -> ^bb3
  ^bb7230:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 2 -> ^bb7231, ^bb3
  ^bb7231:  // pred: ^bb7230
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7232, ^bb3
  ^bb7232:  // pred: ^bb7231
    %3892 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3892 : !pdl.value -> ^bb7233, ^bb3
  ^bb7233:  // pred: ^bb7232
    %3893 = pdl_interp.get_operand 1 of %arg0
    %3894 = pdl_interp.get_defining_op of %3893 : !pdl.value
    pdl_interp.is_not_null %3894 : !pdl.operation -> ^bb7234, ^bb3
  ^bb7234:  // pred: ^bb7233
    pdl_interp.is_not_null %3893 : !pdl.value -> ^bb7235, ^bb3
  ^bb7235:  // pred: ^bb7234
    pdl_interp.check_operation_name of %3894 is "math_xdsl.constant" -> ^bb7236, ^bb3
  ^bb7236:  // pred: ^bb7235
    pdl_interp.check_operand_count of %3894 is 0 -> ^bb7237, ^bb3
  ^bb7237:  // pred: ^bb7236
    pdl_interp.check_result_count of %3894 is 1 -> ^bb7238, ^bb3
  ^bb7238:  // pred: ^bb7237
    %3895 = pdl_interp.get_result 0 of %3894
    pdl_interp.is_not_null %3895 : !pdl.value -> ^bb7239, ^bb3
  ^bb7239:  // pred: ^bb7238
    pdl_interp.are_equal %3895, %3893 : !pdl.value -> ^bb7240, ^bb3
  ^bb7240:  // pred: ^bb7239
    %3896 = pdl_interp.get_value_type of %3892 : !pdl.type
    pdl_interp.check_type %3896 is f32 -> ^bb7241, ^bb3
  ^bb7241:  // pred: ^bb7240
    %3897 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3896, %3897 : !pdl.type -> ^bb7242, ^bb3
  ^bb7242:  // pred: ^bb7241
    %3898 = pdl_interp.get_value_type of %3895 : !pdl.type
    pdl_interp.are_equal %3898, %3896 : !pdl.type -> ^bb7243, ^bb3
  ^bb7243:  // pred: ^bb7242
    %3899 = pdl_interp.get_attribute "value" of %3894
    pdl_interp.is_not_null %3899 : !pdl.attribute -> ^bb7244, ^bb3
  ^bb7244:  // pred: ^bb7243
    pdl_interp.check_attribute %3899 is #math_xdsl<constant pi> -> ^bb7245, ^bb3
  ^bb7245:  // pred: ^bb7244
    pdl_interp.record_match @rewriters::@atan_tan_rev(%3892, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.tan", "math.atan"]), loc([%arg0, %3894]), root("arith.remf") -> ^bb3
  ^bb7246:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7247, ^bb3
  ^bb7247:  // pred: ^bb7246
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7248, ^bb3
  ^bb7248:  // pred: ^bb7247
    %3900 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3900 : !pdl.value -> ^bb7249, ^bb3
  ^bb7249:  // pred: ^bb7248
    %3901 = pdl_interp.get_value_type of %3900 : !pdl.type
    pdl_interp.check_type %3901 is f32 -> ^bb7250, ^bb3
  ^bb7250:  // pred: ^bb7249
    %3902 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3901, %3902 : !pdl.type -> ^bb7251, ^bb3
  ^bb7251:  // pred: ^bb7250
    pdl_interp.record_match @rewriters::@tan_quot(%3900, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.sin", "math.cos", "arith.divf"]), loc([%arg0]), root("math.tan") -> ^bb7252
  ^bb7252:  // pred: ^bb7251
    pdl_interp.record_match @rewriters::@tan_addPI_rev(%3900, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.addf", "math.tan"]), loc([%arg0]), root("math.tan") -> ^bb3
  ^bb7253:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7254, ^bb3
  ^bb7254:  // pred: ^bb7253
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7255, ^bb3
  ^bb7255:  // pred: ^bb7254
    %3903 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3903 : !pdl.value -> ^bb7256, ^bb3
  ^bb7256:  // pred: ^bb7255
    %3904 = pdl_interp.get_value_type of %3903 : !pdl.type
    pdl_interp.check_type %3904 is f32 -> ^bb7257, ^bb3
  ^bb7257:  // pred: ^bb7256
    %3905 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3904, %3905 : !pdl.type -> ^bb7258, ^bb3
  ^bb7258:  // pred: ^bb7257
    pdl_interp.record_match @rewriters::@asin_acos(%3903, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.constant", "arith.divf", "math.acos", "arith.subf"]), loc([%arg0]), root("math.asin") -> ^bb3
  ^bb7259:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7260, ^bb3
  ^bb7260:  // pred: ^bb7259
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7261, ^bb3
  ^bb7261:  // pred: ^bb7260
    %3906 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3906 : !pdl.value -> ^bb7262, ^bb3
  ^bb7262:  // pred: ^bb7261
    %3907 = pdl_interp.get_value_type of %3906 : !pdl.type
    pdl_interp.check_type %3907 is f32 -> ^bb7263, ^bb3
  ^bb7263:  // pred: ^bb7262
    %3908 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3907, %3908 : !pdl.type -> ^bb7264, ^bb3
  ^bb7264:  // pred: ^bb7263
    pdl_interp.record_match @rewriters::@acos_asin(%3906, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math_xdsl.constant", "arith.constant", "arith.divf", "math.asin", "arith.subf"]), loc([%arg0]), root("math.acos") -> ^bb3
  ^bb7265:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7266, ^bb3
  ^bb7266:  // pred: ^bb7265
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7267, ^bb3
  ^bb7267:  // pred: ^bb7266
    %3909 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3909 : !pdl.value -> ^bb7268, ^bb3
  ^bb7268:  // pred: ^bb7267
    %3910 = pdl_interp.get_value_type of %3909 : !pdl.type
    pdl_interp.check_type %3910 is f32 -> ^bb7269, ^bb3
  ^bb7269:  // pred: ^bb7268
    %3911 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3910, %3911 : !pdl.type -> ^bb7270, ^bb3
  ^bb7270:  // pred: ^bb7269
    pdl_interp.record_match @rewriters::@sinh_def(%3909, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "arith.negf", "math.exp", "arith.subf", "arith.constant", "arith.divf"]), loc([%arg0]), root("math.sinh") -> ^bb3
  ^bb7271:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7272, ^bb3
  ^bb7272:  // pred: ^bb7271
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7273, ^bb3
  ^bb7273:  // pred: ^bb7272
    %3912 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3912 : !pdl.value -> ^bb7274, ^bb3
  ^bb7274:  // pred: ^bb7273
    %3913 = pdl_interp.get_value_type of %3912 : !pdl.type
    pdl_interp.check_type %3913 is f32 -> ^bb7275, ^bb3
  ^bb7275:  // pred: ^bb7274
    %3914 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3913, %3914 : !pdl.type -> ^bb7276, ^bb3
  ^bb7276:  // pred: ^bb7275
    pdl_interp.record_match @rewriters::@cosh_neg_rev(%3912, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.negf", "math.cosh"]), loc([%arg0]), root("math.cosh") -> ^bb7277
  ^bb7277:  // pred: ^bb7276
    pdl_interp.record_match @rewriters::@cosh_def(%3912, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "arith.negf", "math.exp", "arith.addf", "arith.constant", "arith.divf"]), loc([%arg0]), root("math.cosh") -> ^bb3
  ^bb7278:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7279, ^bb3
  ^bb7279:  // pred: ^bb7278
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7280, ^bb3
  ^bb7280:  // pred: ^bb7279
    %3915 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3915 : !pdl.value -> ^bb7281, ^bb3
  ^bb7281:  // pred: ^bb7280
    %3916 = pdl_interp.get_value_type of %3915 : !pdl.type
    pdl_interp.check_type %3916 is f32 -> ^bb7282, ^bb3
  ^bb7282:  // pred: ^bb7281
    %3917 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3916, %3917 : !pdl.type -> ^bb7283, ^bb3
  ^bb7283:  // pred: ^bb7282
    pdl_interp.record_match @rewriters::@tanh_def_c(%3915, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.constant", "arith.mulf", "math.exp", "arith.subf", "arith.constant", "arith.constant", "arith.mulf", "math.exp", "arith.addf", "arith.divf"]), loc([%arg0]), root("math.tanh") -> ^bb7284
  ^bb7284:  // pred: ^bb7283
    pdl_interp.record_match @rewriters::@tanh_def_b(%3915, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.mulf", "math.exp", "arith.constant", "arith.subf", "arith.constant", "arith.mulf", "math.exp", "arith.constant", "arith.addf", "arith.divf"]), loc([%arg0]), root("math.tanh") -> ^bb7285
  ^bb7285:  // pred: ^bb7284
    pdl_interp.record_match @rewriters::@tanh_def_a(%3915, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["math.exp", "arith.negf", "math.exp", "arith.subf", "math.exp", "arith.negf", "math.exp", "arith.addf", "arith.divf"]), loc([%arg0]), root("math.tanh") -> ^bb3
  ^bb7286:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7287, ^bb3
  ^bb7287:  // pred: ^bb7286
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7288, ^bb3
  ^bb7288:  // pred: ^bb7287
    %3918 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3918 : !pdl.value -> ^bb7289, ^bb3
  ^bb7289:  // pred: ^bb7288
    %3919 = pdl_interp.get_value_type of %3918 : !pdl.type
    pdl_interp.check_type %3919 is f32 -> ^bb7290, ^bb3
  ^bb7290:  // pred: ^bb7289
    %3920 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3919, %3920 : !pdl.type -> ^bb7291, ^bb3
  ^bb7291:  // pred: ^bb7290
    pdl_interp.record_match @rewriters::@asinh_def(%3918, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.constant", "arith.addf", "math.sqrt", "arith.addf", "math.log"]), loc([%arg0]), root("math.asinh") -> ^bb3
  ^bb7292:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7293, ^bb3
  ^bb7293:  // pred: ^bb7292
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7294, ^bb3
  ^bb7294:  // pred: ^bb7293
    %3921 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3921 : !pdl.value -> ^bb7295, ^bb3
  ^bb7295:  // pred: ^bb7294
    %3922 = pdl_interp.get_value_type of %3921 : !pdl.type
    pdl_interp.check_type %3922 is f32 -> ^bb7296, ^bb3
  ^bb7296:  // pred: ^bb7295
    %3923 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3922, %3923 : !pdl.type -> ^bb7297, ^bb3
  ^bb7297:  // pred: ^bb7296
    pdl_interp.record_match @rewriters::@acosh_def(%3921, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.mulf", "arith.constant", "arith.subf", "math.sqrt", "arith.addf", "math.log"]), loc([%arg0]), root("math.acosh") -> ^bb3
  ^bb7298:  // pred: ^bb2
    pdl_interp.check_operand_count of %arg0 is 1 -> ^bb7299, ^bb3
  ^bb7299:  // pred: ^bb7298
    pdl_interp.check_result_count of %arg0 is 1 -> ^bb7300, ^bb3
  ^bb7300:  // pred: ^bb7299
    %3924 = pdl_interp.get_operand 0 of %arg0
    pdl_interp.is_not_null %3924 : !pdl.value -> ^bb7301, ^bb3
  ^bb7301:  // pred: ^bb7300
    %3925 = pdl_interp.get_value_type of %3924 : !pdl.type
    pdl_interp.check_type %3925 is f32 -> ^bb7302, ^bb3
  ^bb7302:  // pred: ^bb7301
    %3926 = pdl_interp.get_value_type of %0 : !pdl.type
    pdl_interp.are_equal %3925, %3926 : !pdl.type -> ^bb7303, ^bb3
  ^bb7303:  // pred: ^bb7302
    pdl_interp.record_match @rewriters::@atanh_def(%3924, %arg0 : !pdl.value, !pdl.operation) : benefit(1), generatedOps(["arith.constant", "arith.addf", "arith.constant", "arith.subf", "arith.divf", "math.log", "arith.constant", "arith.divf"]), loc([%arg0]), root("math.atanh") -> ^bb3
  }
  module @rewriters {
    pdl_interp.func @cos_diff_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_sin_sum(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_sum_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cosh"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_sum_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_sum_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_1_add_cos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.negf"(%6 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      pdl_interp.replace %arg1 with (%8 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_1_add_sin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.negf"(%6 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      pdl_interp.replace %arg1 with (%8 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_rgt_out(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_lft_out(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @difference_of_sqrsub_1(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 1.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.subf"(%arg0, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%5, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg1 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_neg_out(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_square_pow_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 2.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_square_pow_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 2.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @div_add_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @common_denominator(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.value, %arg4: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %arg3 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.mulf"(%arg3, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%6, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg4 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @frac_add(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.value, %arg4: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %arg3 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.mulf"(%arg2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%6, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg4 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_cubes(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg1, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.subf"(%4, %6 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.addf"(%2, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.mulf"(%10, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_log(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.log"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_sin(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.sin"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%14, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "math.cos"(%19 : !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      %22 = pdl_interp.create_operation "arith.mulf"(%12, %21 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %23 = pdl_interp.get_result 0 of %22
      %24 = pdl_interp.create_operation "arith.mulf"(%3, %23 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %25 = pdl_interp.get_result 0 of %24
      pdl_interp.replace %arg2 with (%25 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_cos(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.cos"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%14, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "math.cos"(%19 : !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      %22 = pdl_interp.create_operation "arith.mulf"(%12, %21 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %23 = pdl_interp.get_result 0 of %22
      %24 = pdl_interp.create_operation "arith.mulf"(%3, %23 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %25 = pdl_interp.get_result 0 of %24
      pdl_interp.replace %arg2 with (%25 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_atan(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.subf"(%5, %7 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "math.atan2"(%2, %9 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg2 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_cos_a_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_add_cosh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_cosh(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.cosh"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%14, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "math.cosh"(%19 : !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      %22 = pdl_interp.create_operation "arith.mulf"(%12, %21 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %23 = pdl_interp.get_result 0 of %22
      %24 = pdl_interp.create_operation "arith.mulf"(%3, %23 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %25 = pdl_interp.get_result 0 of %24
      pdl_interp.replace %arg2 with (%25 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_undef(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_sinh(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.sinh"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%14, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "math.cosh"(%19 : !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      %22 = pdl_interp.create_operation "arith.mulf"(%12, %21 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %23 = pdl_interp.get_result 0 of %22
      %24 = pdl_interp.create_operation "arith.mulf"(%3, %23 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %25 = pdl_interp.get_result 0 of %24
      pdl_interp.replace %arg2 with (%25 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_addladd(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.addf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_addl_(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.subf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @add_lft_identity(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_lft1_in(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%5, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_1_cos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.negf"(%6 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      pdl_interp.replace %arg1 with (%8 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_1_sin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.negf"(%6 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      pdl_interp.replace %arg1 with (%8 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_3_sin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.sin"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_sum_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_2_cos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cos"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_diff_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_3_cos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cos"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_diff_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_cosh(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_diff_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @difference_of_squares(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_rgt_outsub_(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_lft_outsub_(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @difference_of_sqr_1(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 1.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.subf"(%arg0, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%5, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg1 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @difference_cubes(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg1, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.addf"(%4, %6 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.addf"(%2, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.mulf"(%10, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acos_asin_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.acos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @asin_acos_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.asin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @frac_sub(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.value, %arg4: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %arg3 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.mulf"(%arg2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%6, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg4 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_div(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_log(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.log"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_cos_b_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_1_sub_sin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_sin_b_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_1_sub_cos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_sin_a_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @asin_sin_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.asin"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_sin(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.sin"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%14, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "math.cos"(%19 : !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      %22 = pdl_interp.create_operation "arith.mulf"(%12, %21 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %23 = pdl_interp.get_result 0 of %22
      %24 = pdl_interp.create_operation "arith.mulf"(%3, %23 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %25 = pdl_interp.get_result 0 of %24
      pdl_interp.replace %arg2 with (%25 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_cos(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute -2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.sin"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%14, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "math.sin"(%19 : !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      %22 = pdl_interp.create_operation "arith.mulf"(%12, %21 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %23 = pdl_interp.get_result 0 of %22
      %24 = pdl_interp.create_operation "arith.mulf"(%3, %23 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %25 = pdl_interp.get_result 0 of %24
      pdl_interp.replace %arg2 with (%25 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_atan(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.addf"(%5, %7 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "math.atan2"(%2, %9 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg2 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acos_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.acos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinhsub__cosh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.exp"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_cosh(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.sinh"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%14, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "math.sinh"(%19 : !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      %22 = pdl_interp.create_operation "arith.mulf"(%12, %21 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %23 = pdl_interp.get_result 0 of %22
      %24 = pdl_interp.create_operation "arith.mulf"(%3, %23 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %25 = pdl_interp.get_result 0 of %24
      pdl_interp.replace %arg2 with (%25 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_undef(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_sinh(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.cosh"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%14, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "math.sinh"(%19 : !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      %22 = pdl_interp.create_operation "arith.mulf"(%12, %21 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %23 = pdl_interp.get_result 0 of %22
      %24 = pdl_interp.create_operation "arith.mulf"(%3, %23 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %25 = pdl_interp.get_result 0 of %24
      pdl_interp.replace %arg2 with (%25 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associatesub_ladd(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.addf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associatesub_l_(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.subf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub0_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rem_3cbrt_lft(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @unswap_sqr(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @swap_sqr(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg1, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cube_prod_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 3.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_prod_up(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.powf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_prod_down(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.powf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_sqr(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%arg1, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @difference_cubes_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 3.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.powf"(%arg1, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.subf"(%5, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg2 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_cubes_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 3.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.powf"(%arg1, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.addf"(%5, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg2 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @difference_of_squares_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg1, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @difference_of_sqr_1_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @difference_of_sqrsub_1_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute -1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.addf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @frac_times(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.value, %arg4: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %arg3 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg4 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqrt_unprod(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sqrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rem_square_sqrt(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mul_fabs(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_abs(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rem_3cbrt_rft(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_unprod(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cbrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_lft_sqr_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.exp"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @prod_exp(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.exp"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_mult(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.cos"(%6 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.subf"(%4, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_attribute 2.000000e+00 : f32
      %12 = pdl_interp.create_operation "arith.constant" {"value" = %11}  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      %14 = pdl_interp.create_operation "arith.divf"(%10, %13 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      pdl_interp.replace %arg2 with (%15 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_sin_b(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.mulf"(%5, %7 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.subf"(%3, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_sin_a(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 5.000000e-01 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 5.000000e-01 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_attribute 2.000000e+00 : f32
      %8 = pdl_interp.create_operation "arith.constant" {"value" = %7}  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.mulf"(%9, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "math.cos"(%11 : !pdl.value)  -> (%1 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      %14 = pdl_interp.create_operation "arith.mulf"(%6, %13 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      %16 = pdl_interp.create_operation "arith.subf"(%3, %15 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      pdl_interp.replace %arg1 with (%17 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_cos_mult(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.sin"(%6 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.addf"(%4, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_attribute 2.000000e+00 : f32
      %12 = pdl_interp.create_operation "arith.constant" {"value" = %11}  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      %14 = pdl_interp.create_operation "arith.divf"(%10, %13 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      pdl_interp.replace %arg2 with (%15 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_mult(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.cos"(%6 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.addf"(%4, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_attribute 2.000000e+00 : f32
      %12 = pdl_interp.create_operation "arith.constant" {"value" = %11}  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      %14 = pdl_interp.create_operation "arith.divf"(%10, %13 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      pdl_interp.replace %arg2 with (%15 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_cos_b(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.mulf"(%5, %7 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.subf"(%3, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_1_sub_sin_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.mulf"(%5, %7 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.subf"(%3, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_cos_a(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 5.000000e-01 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 5.000000e-01 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_attribute 2.000000e+00 : f32
      %8 = pdl_interp.create_operation "arith.constant" {"value" = %7}  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.mulf"(%9, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "math.cos"(%11 : !pdl.value)  -> (%1 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      %14 = pdl_interp.create_operation "arith.mulf"(%6, %13 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      %16 = pdl_interp.create_operation "arith.addf"(%3, %15 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      pdl_interp.replace %arg1 with (%17 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_sin_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_sin_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_2_sin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.sin"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_cos_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_cos_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_cosh_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_sinh_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.sinh"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_sinh_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_cosh_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_undef_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "math.exp"(%4 : !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.subf"(%2, %6 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      pdl_interp.replace %arg1 with (%8 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_undef_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "math.exp"(%4 : !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.addf"(%2, %6 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      pdl_interp.replace %arg1 with (%8 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acosh_2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_attribute 1.000000e+00 : f32
      %9 = pdl_interp.create_operation "arith.constant" {"value" = %8}  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.subf"(%7, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "math.acosh"(%12 : !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg1 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow3(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_mullmul(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @lft_mult_inverse(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_mulldiv(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mul0_lft(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mul_lft_identity(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mul_1_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @count_2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_lft_neg_out(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_to_mult_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_to_mult_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_plus(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%arg1, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @div_flip_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @remove_double_div(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rec_exp(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.exp"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_flip(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.powf"(%arg1, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @neg_tan_addPIdiv2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 2.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.divf"(%3, %6 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.addf"(%arg0, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.tan"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg1 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_addPIdiv2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %4 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.addf"(%2, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "math.tan"(%12 : !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg1 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_atan_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.atan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_atanh_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.atanh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_2_tan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.tan"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.tanh"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @times_frac(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.value, %arg4: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%arg2, %arg3 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg4 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_0m_tan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 2.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.divf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.tan"(%7 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg1 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @frac_2neg_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_div_cbrt2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.copysign"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @div_fabs(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqrt_undiv(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sqrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_div(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.powf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cube_div_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 3.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_undiv(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cbrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_div_cbrt(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.copysign"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @div_exp(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.exp"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_0p_tan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.tan"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @quot_tan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_p0_tan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.tan"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_m0_tan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 2.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.divf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.tan"(%7 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg1 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_m_tan(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 2.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.divf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.tan"(%7 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg2 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_def_b_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.tanh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_def_c_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.tanh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_undef(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.tanh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_mult_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_def_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_1div2mul_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.tanh"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_p_tan(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 2.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.divf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.tan"(%7 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg2 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_sum_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.tanh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_sum_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.tan"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_mult_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_cos_mult_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_def_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_1div2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.tanh"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_1div2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.sinh"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @atanh_def_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.atanh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_divldiv(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_divlmul(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @div0(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @inv_pow(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute -1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_frac_neg(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @div_add(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%arg2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @add_to_fraction_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.addf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @div_sub(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%arg2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_to_fraction_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.subf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_lhs_div(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.copysign"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_cbrt_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cbrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%2, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "math.absf"(%4 : !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_acos_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.acos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.tan"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_acosh_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.acosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.tanh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @remove_double_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_lft_neg_in(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_rgt_neg_in(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg1, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_neg_in(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_neg_frac(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_neg_frac2(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%arg1, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_negate(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cube_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 3.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cbrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @neg_log(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.log"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_addPIdiv2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 2.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.divf"(%3, %6 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.addf"(%arg0, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.cos"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg1 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_addPI_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.sin"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.tan"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_addPI_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cos"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @asin_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.asin"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @atan_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.atan"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqrt_pow2(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%arg1, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_cbrt(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%arg1, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_base_1(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_base_0(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_exp(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.exp"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @unpow_prod_down(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.powf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.powf"(%arg2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_square_pow(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.addf"(%5, %12 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "math.powf"(%arg1, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "arith.addf"(%14, %19 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      pdl_interp.replace %arg2 with (%21 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_square_pow(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%5, %12 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "math.powf"(%arg1, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "arith.addf"(%14, %19 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      pdl_interp.replace %arg2 with (%21 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rem_cube_cbrt(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cube_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.negf"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cube_prod(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 3.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.powf"(%arg1, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%5, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg2 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cube_div(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 3.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.powf"(%arg1, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.divf"(%5, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg2 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_lft_cube_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.exp"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqrt_prod(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sqrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sqrt"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rem_sqrt_square(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqrt_cbrt(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sqrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cbrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_1div2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cosh"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqrt_div(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sqrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sqrt"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_sqrt_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.exp"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_asin_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.asin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_acos_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.acos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_acosh_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.acosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_asinh_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.asinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_sqrt(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cbrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sqrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_pow(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%arg1, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rem_cbrt_cube(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_prod(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cbrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cbrt"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_div(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cbrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cbrt"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cbrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_fabs(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cbrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_cbrt_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.exp"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_fabs(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_sub(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_add(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_mul(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_sqr(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_cbrt(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cbrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%2, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_div(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqrt_fabs(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sqrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cbrt_fabs_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cbrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_exp(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acos_cos_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.acos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rem_exp_log(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_0(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_1_e(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant e>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_sum(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.exp"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.divf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinhsub__cosh_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_diff(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.exp"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_to_pow(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.powf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_lft_sqr(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_lft_cube(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 3.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_prod(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.powf"(%2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_sqrt(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sqrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_cbrt(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cbrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rem_log_exp(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @log_div(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.log"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.log"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @log_rec(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.log"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @log_E(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @log_prod(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.log"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.log"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @log_pow(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.log"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg1, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @asinh_def_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.asinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acosh_def_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.acosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_0(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_asin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_PIdiv6(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 5.000000e-01 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_PIdiv4(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sqrt"(%3 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg0 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_PIdiv3(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sqrt"(%3 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg0 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_PIdiv2(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_PI(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_sum(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.sin"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.addf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_addPI(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_addPIdiv2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_diff(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.sin"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.mulf"(%5, %7 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.mulf"(%3, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_3(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_attribute 4.000000e+00 : f32
      %9 = pdl_interp.create_operation "arith.constant" {"value" = %8}  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_attribute 3.000000e+00 : f32
      %14 = pdl_interp.create_operation "arith.constant" {"value" = %13}  -> (%1 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      %16 = pdl_interp.create_operation "math.powf"(%12, %15 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.mulf"(%10, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "arith.subf"(%7, %19 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      pdl_interp.replace %arg1 with (%21 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_acos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg1 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_atan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.addf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%arg0, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_0(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_fabs(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_acos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_PIdiv6(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sqrt"(%3 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg0 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_PIdiv4(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sqrt"(%3 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 2.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg0 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_PIdiv3(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 5.000000e-01 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_PIdiv2(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_PI(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute -1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_sum(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.sin"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_addPI(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_addPIdiv2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_diff(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.sin"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.addf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg1 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_3(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 4.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 3.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.powf"(%5, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%3, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_attribute 3.000000e+00 : f32
      %14 = pdl_interp.create_operation "arith.constant" {"value" = %13}  -> (%1 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      %16 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.mulf"(%15, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_operation "arith.subf"(%12, %19 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %21 = pdl_interp.get_result 0 of %20
      pdl_interp.replace %arg1 with (%21 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_asin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg1 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_atan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 1.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.addf"(%6, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.sqrt"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.divf"(%3, %12 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg1 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_0(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_atan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_0p_tan_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.addf"(%5, %7 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%2, %9 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_p0_tan_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%7, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_PIdiv6(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 3.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.sqrt"(%6 : !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%3, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg0 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_PIdiv4(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_PIdiv3(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sqrt"(%3 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg0 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_0m_tan_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_attribute 1.000000e+00 : f32
      %6 = pdl_interp.create_operation "arith.constant" {"value" = %5}  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.addf"(%7, %9 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "arith.divf"(%4, %11 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      pdl_interp.replace %arg1 with (%13 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @hang_m0_tan_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.negf"(%9 : !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "arith.divf"(%7, %11 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      pdl_interp.replace %arg1 with (%13 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_hang_p(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.addf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.divf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_hang_m(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.cos"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.addf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.divf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_PI(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_addPIdiv2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.divf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_sum(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.tan"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_attribute 1.000000e+00 : f32
      %8 = pdl_interp.create_operation "arith.constant" {"value" = %7}  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "math.tan"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      %14 = pdl_interp.create_operation "arith.mulf"(%11, %13 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      %16 = pdl_interp.create_operation "arith.subf"(%9, %15 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%6, %17 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      pdl_interp.replace %arg2 with (%19 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_addPI(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @neg_tan_addPIdiv2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute -1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.divf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_attribute 1.000000e+00 : f32
      %9 = pdl_interp.create_operation "arith.constant" {"value" = %8}  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_operation "arith.mulf"(%12, %14 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %16 = pdl_interp.get_result 0 of %15
      %17 = pdl_interp.create_operation "arith.subf"(%10, %16 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %18 = pdl_interp.get_result 0 of %17
      %19 = pdl_interp.create_operation "arith.divf"(%7, %18 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %20 = pdl_interp.get_result 0 of %19
      pdl_interp.replace %arg1 with (%20 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_asin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%arg0, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_acos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%9, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @atan_tan(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.remf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @atan_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.atan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @asin_sin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 2.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.divf"(%3, %6 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.addf"(%arg0, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_attribute 2.000000e+00 : f32
      %12 = pdl_interp.create_operation "arith.constant" {"value" = %11}  -> (%1 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      %14 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %15 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %14}  -> (%1 : !pdl.type)
      %16 = pdl_interp.get_result 0 of %15
      %17 = pdl_interp.create_operation "arith.mulf"(%13, %16 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %18 = pdl_interp.get_result 0 of %17
      %19 = pdl_interp.create_operation "arith.remf"(%10, %18 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %20 = pdl_interp.get_result 0 of %19
      %21 = pdl_interp.create_operation "math.absf"(%20 : !pdl.value)  -> (%1 : !pdl.type)
      %22 = pdl_interp.get_result 0 of %21
      %23 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %24 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %23}  -> (%1 : !pdl.type)
      %25 = pdl_interp.get_result 0 of %24
      %26 = pdl_interp.create_attribute 2.000000e+00 : f32
      %27 = pdl_interp.create_operation "arith.constant" {"value" = %26}  -> (%1 : !pdl.type)
      %28 = pdl_interp.get_result 0 of %27
      %29 = pdl_interp.create_operation "arith.divf"(%25, %28 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %30 = pdl_interp.get_result 0 of %29
      %31 = pdl_interp.create_operation "arith.subf"(%22, %30 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %32 = pdl_interp.get_result 0 of %31
      pdl_interp.replace %arg1 with (%32 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @asin_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.asin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acos_cos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %5 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.mulf"(%3, %6 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.remf"(%arg0, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.absf"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg1 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acos_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.acos"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @diff_atan_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.atan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.atan"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_atan_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.atan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.atan"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_sum(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.sinh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.addf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_diff(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.sinh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.addf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg1 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_1div2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.addf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_attribute 2.000000e+00 : f32
      %9 = pdl_interp.create_operation "arith.constant" {"value" = %8}  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.divf"(%7, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "math.sqrt"(%12 : !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg1 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_0(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_asinh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.addf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg1 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_acosh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_atanh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 1.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.subf"(%6, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.sqrt"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.divf"(%3, %12 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg1 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_sum(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.sinh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.addf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_diff(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.sinh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.mulf"(%8, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.subf"(%6, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      pdl_interp.replace %arg2 with (%14 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.mulf"(%5, %7 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.mulf"(%3, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_1div2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 2.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_attribute 1.000000e+00 : f32
      %9 = pdl_interp.create_operation "arith.constant" {"value" = %8}  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.addf"(%7, %10 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.mulf"(%5, %12 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_operation "math.sqrt"(%14 : !pdl.value)  -> (%0 : !pdl.type)
      %16 = pdl_interp.get_result 0 of %15
      %17 = pdl_interp.create_operation "arith.divf"(%2, %16 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %18 = pdl_interp.get_result 0 of %17
      pdl_interp.replace %arg1 with (%18 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_neg(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_0(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_asinh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_acosh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg1 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_atanh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%arg0, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.tanh"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_attribute 1.000000e+00 : f32
      %9 = pdl_interp.create_operation "arith.constant" {"value" = %8}  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.tanh"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "math.tanh"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_operation "arith.mulf"(%12, %14 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %16 = pdl_interp.get_result 0 of %15
      %17 = pdl_interp.create_operation "arith.addf"(%10, %16 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %18 = pdl_interp.get_result 0 of %17
      %19 = pdl_interp.create_operation "arith.divf"(%7, %18 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %20 = pdl_interp.get_result 0 of %19
      pdl_interp.replace %arg1 with (%20 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_1div2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_attribute 1.000000e+00 : f32
      %6 = pdl_interp.create_operation "arith.constant" {"value" = %5}  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.addf"(%4, %7 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%2, %9 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_1div2mul(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%7, %9 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_sum(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.tanh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.tanh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_attribute 1.000000e+00 : f32
      %8 = pdl_interp.create_operation "arith.constant" {"value" = %7}  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "math.tanh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "math.tanh"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      %14 = pdl_interp.create_operation "arith.mulf"(%11, %13 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      %16 = pdl_interp.create_operation "arith.addf"(%9, %15 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%6, %17 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      pdl_interp.replace %arg2 with (%19 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_asinh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.addf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%arg0, %9 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_acosh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.divf"(%9, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      pdl_interp.replace %arg1 with (%11 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_atanh(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @asinh_2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.asinh"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.mulf"(%3, %7 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg1 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acosh_2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.acosh"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @count_2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_addradd(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.addf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_addr_(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.subf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @add_rgt_identity(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fp_cancel_sub_sign(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.subf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fp_cancel_sign_sub_inv(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%arg2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_rgt1_in(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%5, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_flip_reverse(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @add_to_fraction(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.addf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%4, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @add_commutative(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @add_flip(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.subf"(%arg1, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sum_to_mult(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.addf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.mulf"(%7, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg2 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @flip_add(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg1, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%6, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg2 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @flip3_add(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 3.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.powf"(%arg1, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.addf"(%5, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_operation "arith.mulf"(%arg1, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %16 = pdl_interp.get_result 0 of %15
      %17 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %18 = pdl_interp.get_result 0 of %17
      %19 = pdl_interp.create_operation "arith.subf"(%16, %18 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %20 = pdl_interp.get_result 0 of %19
      %21 = pdl_interp.create_operation "arith.addf"(%14, %20 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %22 = pdl_interp.get_result 0 of %21
      %23 = pdl_interp.create_operation "arith.divf"(%12, %22 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %24 = pdl_interp.get_result 0 of %23
      pdl_interp.replace %arg2 with (%24 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_abs_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cube_unmult(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_mulrmul(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mult_flip_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rgt_mult_inverse(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_mulrdiv(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mul0_rgt(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mul_rgt_identity(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_lft_in(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_rgt_in(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_rgt_neg_out(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @log_pow_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.powf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.log"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mul_commutative(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_flip(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.addf"(%arg1, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_negate_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_to_mult(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "arith.mulf"(%7, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      pdl_interp.replace %arg2 with (%9 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @flipsub_(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg1, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.subf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.divf"(%6, %8 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      pdl_interp.replace %arg2 with (%10 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @flip3sub_(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 3.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 3.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.powf"(%arg1, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.subf"(%5, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_operation "arith.mulf"(%arg1, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %16 = pdl_interp.get_result 0 of %15
      %17 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %18 = pdl_interp.get_result 0 of %17
      %19 = pdl_interp.create_operation "arith.addf"(%16, %18 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %20 = pdl_interp.get_result 0 of %19
      %21 = pdl_interp.create_operation "arith.addf"(%14, %20 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %22 = pdl_interp.get_result 0 of %21
      %23 = pdl_interp.create_operation "arith.divf"(%12, %22 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %24 = pdl_interp.get_result 0 of %23
      pdl_interp.replace %arg2 with (%24 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @add_inverses(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associatesub_radd(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.subf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associatesub_r_(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.subf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.addf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_rgt_identity(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fp_cancel_sub_sign_inv(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%arg2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fp_cancel_sign_sub(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.addf"(%arg2, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @add_flip_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.addf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg2 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sub_to_fraction(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.subf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%4, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mult_flip(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.mulf"(%arg1, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @div_flip(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.divf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @frac_2neg(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%arg1 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @mul_inverses(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_divrmul(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.divf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @associate_divrdiv(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%2, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg3 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @div_rgt_identity(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @distribute_frac_neg2(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.divf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @fabs_rhs_div(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.copysign"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_asin_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.asin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.tan"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_atanh_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.atanh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_atan_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.atan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sin"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_asinh_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.asinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.tanh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_2_split(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 1.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.addf"(%3, %6 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      pdl_interp.replace %arg0 with (%8 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @_1_exp(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.exp"(%3 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg0 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_0_rev(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.cosh"(%3 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg0 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_0_rev(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.sinh"(%3 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg0 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cube_mult(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%arg0, %2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @unpow3(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%2, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @unpow_1(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @unpow1(%arg0: !pdl.value, %arg1: !pdl.operation) {
      pdl_interp.replace %arg1 with (%arg0 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @unpow0(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      pdl_interp.replace %arg0 with (%3 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @unpow1div2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sqrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @unpow2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @unpow1div3(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cbrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      pdl_interp.replace %arg1 with (%2 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_add(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.powf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.powf"(%arg0, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.mulf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_plus_rev(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.powf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%2, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg2 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_neg(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.divf"(%3, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg2 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_sub(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.value, %arg3: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.powf"(%arg0, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.powf"(%arg0, %arg2 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg3 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqr_pow(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.divf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.powf"(%arg1, %5 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_attribute 2.000000e+00 : f32
      %9 = pdl_interp.create_operation "arith.constant" {"value" = %8}  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.divf"(%arg0, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "math.powf"(%arg1, %12 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_operation "arith.mulf"(%7, %14 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %16 = pdl_interp.get_result 0 of %15
      pdl_interp.replace %arg2 with (%16 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow_to_exp(%arg0: !pdl.value, %arg1: !pdl.value, %arg2: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.log"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.mulf"(%2, %arg1 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "math.exp"(%4 : !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg2 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @rem_sqrt_square_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sqrt"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @neg_fabs(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sqrt_fabs_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sqrt"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow1div2(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 5.000000e-01 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @e_exp_1(%arg0: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.exp"(%3 : !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg0 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @exp_fabs(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.absf"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_add_cosh_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.cosh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.sinh"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.addf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @pow1div3(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 0.333333343 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "math.powf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      pdl_interp.replace %arg1 with (%5 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cos_fabs_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.absf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sin_addPIdiv2_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 2.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.divf"(%3, %6 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.addf"(%arg0, %8 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "math.sin"(%10 : !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg1 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @atan_tan_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.tan"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.atan"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_addPI_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%arg0, %3 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.tan"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      pdl_interp.replace %arg1 with (%7 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tan_quot(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.sin"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cos"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "arith.divf"(%2, %4 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      pdl_interp.replace %arg1 with (%6 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @asin_acos(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 2.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.divf"(%3, %6 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.acos"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.subf"(%8, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg1 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acos_asin(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute #math_xdsl<constant pi>
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "math_xdsl.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute 2.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.divf"(%3, %6 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.asin"(%arg0 : !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.subf"(%8, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      pdl_interp.replace %arg1 with (%12 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @sinh_def(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "math.exp"(%4 : !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.subf"(%2, %6 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_attribute 2.000000e+00 : f32
      %10 = pdl_interp.create_operation "arith.constant" {"value" = %9}  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "arith.divf"(%8, %11 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      pdl_interp.replace %arg1 with (%13 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_def(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "math.exp"(%4 : !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.addf"(%2, %6 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_attribute 2.000000e+00 : f32
      %10 = pdl_interp.create_operation "arith.constant" {"value" = %9}  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "arith.divf"(%8, %11 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      pdl_interp.replace %arg1 with (%13 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @cosh_neg_rev(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "math.cosh"(%2 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      pdl_interp.replace %arg1 with (%4 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_def_a(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %4 = pdl_interp.get_result 0 of %3
      %5 = pdl_interp.create_operation "math.exp"(%4 : !pdl.value)  -> (%0 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.subf"(%2, %6 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.exp"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.negf"(%arg0 : !pdl.value)  -> (%0 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "math.exp"(%12 : !pdl.value)  -> (%0 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_operation "arith.addf"(%10, %14 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %16 = pdl_interp.get_result 0 of %15
      %17 = pdl_interp.create_operation "arith.divf"(%8, %16 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %18 = pdl_interp.get_result 0 of %17
      pdl_interp.replace %arg1 with (%18 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_def_b(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 2.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.mulf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "math.exp"(%5 : !pdl.value)  -> (%1 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_attribute 1.000000e+00 : f32
      %9 = pdl_interp.create_operation "arith.constant" {"value" = %8}  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.subf"(%7, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_attribute 2.000000e+00 : f32
      %14 = pdl_interp.create_operation "arith.constant" {"value" = %13}  -> (%1 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      %16 = pdl_interp.create_operation "arith.mulf"(%15, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "math.exp"(%17 : !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      %20 = pdl_interp.create_attribute 1.000000e+00 : f32
      %21 = pdl_interp.create_operation "arith.constant" {"value" = %20}  -> (%1 : !pdl.type)
      %22 = pdl_interp.get_result 0 of %21
      %23 = pdl_interp.create_operation "arith.addf"(%19, %22 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %24 = pdl_interp.get_result 0 of %23
      %25 = pdl_interp.create_operation "arith.divf"(%12, %24 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %26 = pdl_interp.get_result 0 of %25
      pdl_interp.replace %arg1 with (%26 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @tanh_def_c(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_attribute -2.000000e+00 : f32
      %5 = pdl_interp.create_operation "arith.constant" {"value" = %4}  -> (%1 : !pdl.type)
      %6 = pdl_interp.get_result 0 of %5
      %7 = pdl_interp.create_operation "arith.mulf"(%6, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "math.exp"(%8 : !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.subf"(%3, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_attribute 1.000000e+00 : f32
      %14 = pdl_interp.create_operation "arith.constant" {"value" = %13}  -> (%1 : !pdl.type)
      %15 = pdl_interp.get_result 0 of %14
      %16 = pdl_interp.create_attribute -2.000000e+00 : f32
      %17 = pdl_interp.create_operation "arith.constant" {"value" = %16}  -> (%1 : !pdl.type)
      %18 = pdl_interp.get_result 0 of %17
      %19 = pdl_interp.create_operation "arith.mulf"(%18, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %20 = pdl_interp.get_result 0 of %19
      %21 = pdl_interp.create_operation "math.exp"(%20 : !pdl.value)  -> (%1 : !pdl.type)
      %22 = pdl_interp.get_result 0 of %21
      %23 = pdl_interp.create_operation "arith.addf"(%15, %22 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %24 = pdl_interp.get_result 0 of %23
      %25 = pdl_interp.create_operation "arith.divf"(%12, %24 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %26 = pdl_interp.get_result 0 of %25
      pdl_interp.replace %arg1 with (%26 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @asinh_def(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.addf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.addf"(%arg0, %9 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "math.log"(%11 : !pdl.value)  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      pdl_interp.replace %arg1 with (%13 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @acosh_def(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_type f32
      %1 = pdl_interp.create_operation "arith.mulf"(%arg0, %arg0 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %2 = pdl_interp.get_result 0 of %1
      %3 = pdl_interp.create_attribute 1.000000e+00 : f32
      %4 = pdl_interp.create_operation "arith.constant" {"value" = %3}  -> (%0 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_operation "arith.subf"(%2, %5 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %7 = pdl_interp.get_result 0 of %6
      %8 = pdl_interp.create_operation "math.sqrt"(%7 : !pdl.value)  -> (%0 : !pdl.type)
      %9 = pdl_interp.get_result 0 of %8
      %10 = pdl_interp.create_operation "arith.addf"(%arg0, %9 : !pdl.value, !pdl.value)  -> (%0 : !pdl.type)
      %11 = pdl_interp.get_result 0 of %10
      %12 = pdl_interp.create_operation "math.log"(%11 : !pdl.value)  -> (%0 : !pdl.type)
      %13 = pdl_interp.get_result 0 of %12
      pdl_interp.replace %arg1 with (%13 : !pdl.value)
      pdl_interp.finalize
    }
    pdl_interp.func @atanh_def(%arg0: !pdl.value, %arg1: !pdl.operation) {
      %0 = pdl_interp.create_attribute 1.000000e+00 : f32
      %1 = pdl_interp.create_type f32
      %2 = pdl_interp.create_operation "arith.constant" {"value" = %0}  -> (%1 : !pdl.type)
      %3 = pdl_interp.get_result 0 of %2
      %4 = pdl_interp.create_operation "arith.addf"(%3, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %5 = pdl_interp.get_result 0 of %4
      %6 = pdl_interp.create_attribute 1.000000e+00 : f32
      %7 = pdl_interp.create_operation "arith.constant" {"value" = %6}  -> (%1 : !pdl.type)
      %8 = pdl_interp.get_result 0 of %7
      %9 = pdl_interp.create_operation "arith.subf"(%8, %arg0 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %10 = pdl_interp.get_result 0 of %9
      %11 = pdl_interp.create_operation "arith.divf"(%5, %10 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %12 = pdl_interp.get_result 0 of %11
      %13 = pdl_interp.create_operation "math.log"(%12 : !pdl.value)  -> (%1 : !pdl.type)
      %14 = pdl_interp.get_result 0 of %13
      %15 = pdl_interp.create_attribute 2.000000e+00 : f32
      %16 = pdl_interp.create_operation "arith.constant" {"value" = %15}  -> (%1 : !pdl.type)
      %17 = pdl_interp.get_result 0 of %16
      %18 = pdl_interp.create_operation "arith.divf"(%14, %17 : !pdl.value, !pdl.value)  -> (%1 : !pdl.type)
      %19 = pdl_interp.get_result 0 of %18
      pdl_interp.replace %arg1 with (%19 : !pdl.value)
      pdl_interp.finalize
    }
  }
}
